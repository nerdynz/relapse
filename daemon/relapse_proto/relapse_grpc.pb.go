// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package relapse_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelapseClient is the client API for Relapse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelapseClient interface {
	GetSettings(ctx context.Context, in *SettingsPlusOptionsRequest, opts ...grpc.CallOption) (*SettingsPlusOptions, error)
	SetSettings(ctx context.Context, in *Settings, opts ...grpc.CallOption) (*Settings, error)
	GetCapturesForADay(ctx context.Context, in *DayRequest, opts ...grpc.CallOption) (*DayResponse, error)
	GetDaySummaries(ctx context.Context, in *DaySummariesRequest, opts ...grpc.CallOption) (*DaySummaries, error)
	ListenForCaptures(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (Relapse_ListenForCapturesClient, error)
}

type relapseClient struct {
	cc grpc.ClientConnInterface
}

func NewRelapseClient(cc grpc.ClientConnInterface) RelapseClient {
	return &relapseClient{cc}
}

func (c *relapseClient) GetSettings(ctx context.Context, in *SettingsPlusOptionsRequest, opts ...grpc.CallOption) (*SettingsPlusOptions, error) {
	out := new(SettingsPlusOptions)
	err := c.cc.Invoke(ctx, "/relapse_proto.Relapse/GetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relapseClient) SetSettings(ctx context.Context, in *Settings, opts ...grpc.CallOption) (*Settings, error) {
	out := new(Settings)
	err := c.cc.Invoke(ctx, "/relapse_proto.Relapse/SetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relapseClient) GetCapturesForADay(ctx context.Context, in *DayRequest, opts ...grpc.CallOption) (*DayResponse, error) {
	out := new(DayResponse)
	err := c.cc.Invoke(ctx, "/relapse_proto.Relapse/GetCapturesForADay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relapseClient) GetDaySummaries(ctx context.Context, in *DaySummariesRequest, opts ...grpc.CallOption) (*DaySummaries, error) {
	out := new(DaySummaries)
	err := c.cc.Invoke(ctx, "/relapse_proto.Relapse/GetDaySummaries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relapseClient) ListenForCaptures(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (Relapse_ListenForCapturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Relapse_ServiceDesc.Streams[0], "/relapse_proto.Relapse/ListenForCaptures", opts...)
	if err != nil {
		return nil, err
	}
	x := &relapseListenForCapturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Relapse_ListenForCapturesClient interface {
	Recv() (*DayResponse, error)
	grpc.ClientStream
}

type relapseListenForCapturesClient struct {
	grpc.ClientStream
}

func (x *relapseListenForCapturesClient) Recv() (*DayResponse, error) {
	m := new(DayResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RelapseServer is the server API for Relapse service.
// All implementations must embed UnimplementedRelapseServer
// for forward compatibility
type RelapseServer interface {
	GetSettings(context.Context, *SettingsPlusOptionsRequest) (*SettingsPlusOptions, error)
	SetSettings(context.Context, *Settings) (*Settings, error)
	GetCapturesForADay(context.Context, *DayRequest) (*DayResponse, error)
	GetDaySummaries(context.Context, *DaySummariesRequest) (*DaySummaries, error)
	ListenForCaptures(*ListenRequest, Relapse_ListenForCapturesServer) error
	mustEmbedUnimplementedRelapseServer()
}

// UnimplementedRelapseServer must be embedded to have forward compatible implementations.
type UnimplementedRelapseServer struct {
}

func (UnimplementedRelapseServer) GetSettings(context.Context, *SettingsPlusOptionsRequest) (*SettingsPlusOptions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedRelapseServer) SetSettings(context.Context, *Settings) (*Settings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSettings not implemented")
}
func (UnimplementedRelapseServer) GetCapturesForADay(context.Context, *DayRequest) (*DayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapturesForADay not implemented")
}
func (UnimplementedRelapseServer) GetDaySummaries(context.Context, *DaySummariesRequest) (*DaySummaries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDaySummaries not implemented")
}
func (UnimplementedRelapseServer) ListenForCaptures(*ListenRequest, Relapse_ListenForCapturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenForCaptures not implemented")
}
func (UnimplementedRelapseServer) mustEmbedUnimplementedRelapseServer() {}

// UnsafeRelapseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelapseServer will
// result in compilation errors.
type UnsafeRelapseServer interface {
	mustEmbedUnimplementedRelapseServer()
}

func RegisterRelapseServer(s grpc.ServiceRegistrar, srv RelapseServer) {
	s.RegisterService(&Relapse_ServiceDesc, srv)
}

func _Relapse_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsPlusOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelapseServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relapse_proto.Relapse/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelapseServer).GetSettings(ctx, req.(*SettingsPlusOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relapse_SetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Settings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelapseServer).SetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relapse_proto.Relapse/SetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelapseServer).SetSettings(ctx, req.(*Settings))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relapse_GetCapturesForADay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelapseServer).GetCapturesForADay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relapse_proto.Relapse/GetCapturesForADay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelapseServer).GetCapturesForADay(ctx, req.(*DayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relapse_GetDaySummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaySummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelapseServer).GetDaySummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relapse_proto.Relapse/GetDaySummaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelapseServer).GetDaySummaries(ctx, req.(*DaySummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relapse_ListenForCaptures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RelapseServer).ListenForCaptures(m, &relapseListenForCapturesServer{stream})
}

type Relapse_ListenForCapturesServer interface {
	Send(*DayResponse) error
	grpc.ServerStream
}

type relapseListenForCapturesServer struct {
	grpc.ServerStream
}

func (x *relapseListenForCapturesServer) Send(m *DayResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Relapse_ServiceDesc is the grpc.ServiceDesc for Relapse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relapse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relapse_proto.Relapse",
	HandlerType: (*RelapseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSettings",
			Handler:    _Relapse_GetSettings_Handler,
		},
		{
			MethodName: "SetSettings",
			Handler:    _Relapse_SetSettings_Handler,
		},
		{
			MethodName: "GetCapturesForADay",
			Handler:    _Relapse_GetCapturesForADay_Handler,
		},
		{
			MethodName: "GetDaySummaries",
			Handler:    _Relapse_GetDaySummaries_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenForCaptures",
			Handler:       _Relapse_ListenForCaptures_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "relapse.proto",
}
