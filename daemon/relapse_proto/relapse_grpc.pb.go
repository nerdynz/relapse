// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package relapse_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelapseClient is the client API for Relapse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelapseClient interface {
	GetSettings(ctx context.Context, in *SettingsRequest, opts ...grpc.CallOption) (*Settings, error)
	GetSetting(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*Setting, error)
	SetSetting(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*Setting, error)
	GetCapturesForADay(ctx context.Context, in *DayRequest, opts ...grpc.CallOption) (*DayResponse, error)
	StartCapture(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	StopCapture(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
}

type relapseClient struct {
	cc grpc.ClientConnInterface
}

func NewRelapseClient(cc grpc.ClientConnInterface) RelapseClient {
	return &relapseClient{cc}
}

func (c *relapseClient) GetSettings(ctx context.Context, in *SettingsRequest, opts ...grpc.CallOption) (*Settings, error) {
	out := new(Settings)
	err := c.cc.Invoke(ctx, "/relapse_proto.Relapse/GetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relapseClient) GetSetting(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*Setting, error) {
	out := new(Setting)
	err := c.cc.Invoke(ctx, "/relapse_proto.Relapse/GetSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relapseClient) SetSetting(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*Setting, error) {
	out := new(Setting)
	err := c.cc.Invoke(ctx, "/relapse_proto.Relapse/SetSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relapseClient) GetCapturesForADay(ctx context.Context, in *DayRequest, opts ...grpc.CallOption) (*DayResponse, error) {
	out := new(DayResponse)
	err := c.cc.Invoke(ctx, "/relapse_proto.Relapse/GetCapturesForADay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relapseClient) StartCapture(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/relapse_proto.Relapse/StartCapture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relapseClient) StopCapture(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/relapse_proto.Relapse/StopCapture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelapseServer is the server API for Relapse service.
// All implementations must embed UnimplementedRelapseServer
// for forward compatibility
type RelapseServer interface {
	GetSettings(context.Context, *SettingsRequest) (*Settings, error)
	GetSetting(context.Context, *Setting) (*Setting, error)
	SetSetting(context.Context, *Setting) (*Setting, error)
	GetCapturesForADay(context.Context, *DayRequest) (*DayResponse, error)
	StartCapture(context.Context, *StartRequest) (*StartResponse, error)
	StopCapture(context.Context, *StopRequest) (*StopResponse, error)
	mustEmbedUnimplementedRelapseServer()
}

// UnimplementedRelapseServer must be embedded to have forward compatible implementations.
type UnimplementedRelapseServer struct {
}

func (UnimplementedRelapseServer) GetSettings(context.Context, *SettingsRequest) (*Settings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedRelapseServer) GetSetting(context.Context, *Setting) (*Setting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetting not implemented")
}
func (UnimplementedRelapseServer) SetSetting(context.Context, *Setting) (*Setting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSetting not implemented")
}
func (UnimplementedRelapseServer) GetCapturesForADay(context.Context, *DayRequest) (*DayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapturesForADay not implemented")
}
func (UnimplementedRelapseServer) StartCapture(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCapture not implemented")
}
func (UnimplementedRelapseServer) StopCapture(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCapture not implemented")
}
func (UnimplementedRelapseServer) mustEmbedUnimplementedRelapseServer() {}

// UnsafeRelapseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelapseServer will
// result in compilation errors.
type UnsafeRelapseServer interface {
	mustEmbedUnimplementedRelapseServer()
}

func RegisterRelapseServer(s grpc.ServiceRegistrar, srv RelapseServer) {
	s.RegisterService(&Relapse_ServiceDesc, srv)
}

func _Relapse_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelapseServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relapse_proto.Relapse/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelapseServer).GetSettings(ctx, req.(*SettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relapse_GetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Setting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelapseServer).GetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relapse_proto.Relapse/GetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelapseServer).GetSetting(ctx, req.(*Setting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relapse_SetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Setting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelapseServer).SetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relapse_proto.Relapse/SetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelapseServer).SetSetting(ctx, req.(*Setting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relapse_GetCapturesForADay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelapseServer).GetCapturesForADay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relapse_proto.Relapse/GetCapturesForADay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelapseServer).GetCapturesForADay(ctx, req.(*DayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relapse_StartCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelapseServer).StartCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relapse_proto.Relapse/StartCapture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelapseServer).StartCapture(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relapse_StopCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelapseServer).StopCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relapse_proto.Relapse/StopCapture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelapseServer).StopCapture(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Relapse_ServiceDesc is the grpc.ServiceDesc for Relapse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relapse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relapse_proto.Relapse",
	HandlerType: (*RelapseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSettings",
			Handler:    _Relapse_GetSettings_Handler,
		},
		{
			MethodName: "GetSetting",
			Handler:    _Relapse_GetSetting_Handler,
		},
		{
			MethodName: "SetSetting",
			Handler:    _Relapse_SetSetting_Handler,
		},
		{
			MethodName: "GetCapturesForADay",
			Handler:    _Relapse_GetCapturesForADay_Handler,
		},
		{
			MethodName: "StartCapture",
			Handler:    _Relapse_StartCapture_Handler,
		},
		{
			MethodName: "StopCapture",
			Handler:    _Relapse_StopCapture_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relapse.proto",
}
