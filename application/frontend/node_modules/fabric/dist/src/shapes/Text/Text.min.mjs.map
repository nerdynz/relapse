{"version":3,"file":"Text.min.mjs","sources":["../../../../src/shapes/Text/Text.ts"],"sourcesContent":["import { cache } from '../../cache';\nimport { DEFAULT_SVG_FONT_SIZE } from '../../constants';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport type {\n  CompleteTextStyleDeclaration,\n  TextStyle,\n  TextStyleDeclaration,\n} from './StyledText';\nimport { StyledText } from './StyledText';\nimport { SHARED_ATTRIBUTES } from '../../parser/attributes';\nimport { parseAttributes } from '../../parser/parseAttributes';\nimport type {\n  Abortable,\n  TCacheCanvasDimensions,\n  TClassProperties,\n  TFiller,\n  TOptions,\n} from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport { graphemeSplit } from '../../util/lang_string';\nimport { createCanvasElement } from '../../util/misc/dom';\nimport type { TextStyleArray } from '../../util/misc/textStyles';\nimport {\n  hasStyleChanged,\n  stylesFromArray,\n  stylesToArray,\n} from '../../util/misc/textStyles';\nimport { getPathSegmentsInfo, getPointOnPath } from '../../util/path';\nimport { cacheProperties } from '../Object/FabricObject';\nimport type { Path } from '../Path';\nimport { TextSVGExportMixin } from './TextSVGExportMixin';\nimport { applyMixins } from '../../util/applyMixins';\nimport type { FabricObjectProps, SerializedObjectProps } from '../Object/types';\nimport type { StylePropertiesType } from './constants';\nimport {\n  additionalProps,\n  textDefaultValues,\n  textLayoutProperties,\n  JUSTIFY,\n  JUSTIFY_CENTER,\n  JUSTIFY_LEFT,\n  JUSTIFY_RIGHT,\n} from './constants';\nimport { CENTER, LEFT, RIGHT, TOP, BOTTOM } from '../../constants';\nimport { isFiller } from '../../util/typeAssertions';\nimport type { Gradient } from '../../gradient/Gradient';\nimport type { Pattern } from '../../Pattern';\nimport type { CSSRules } from '../../parser/typedefs';\n\nlet measuringContext: CanvasRenderingContext2D | null;\n\n/**\n * Return a context for measurement of text string.\n * if created it gets stored for reuse\n */\nfunction getMeasuringContext() {\n  if (!measuringContext) {\n    const canvas = createCanvasElement();\n    canvas.width = canvas.height = 0;\n    measuringContext = canvas.getContext('2d');\n  }\n  return measuringContext;\n}\n\nexport type TPathSide = 'left' | 'right';\n\nexport type TPathAlign = 'baseline' | 'center' | 'ascender' | 'descender';\n\nexport type TextLinesInfo = {\n  lines: string[];\n  graphemeLines: string[][];\n  graphemeText: string[];\n  _unwrappedLines: string[][];\n};\n\n/**\n * Measure and return the info of a single grapheme.\n * needs the the info of previous graphemes already filled\n * Override to customize measuring\n */\nexport type GraphemeBBox = {\n  width: number;\n  height: number;\n  kernedWidth: number;\n  left: number;\n  deltaY: number;\n  renderLeft?: number;\n  renderTop?: number;\n  angle?: number;\n};\n\n// @TODO this is not complete\ninterface UniqueTextProps {\n  charSpacing: number;\n  lineHeight: number;\n  fontSize: number;\n  fontWeight: string;\n  fontFamily: string;\n  fontStyle: string;\n  pathSide: TPathSide;\n  pathAlign: TPathAlign;\n  underline: boolean;\n  overline: boolean;\n  linethrough: boolean;\n  textAlign: string;\n  direction: CanvasDirection;\n  path?: Path;\n}\n\nexport interface SerializedTextProps\n  extends SerializedObjectProps,\n    UniqueTextProps {\n  styles: TextStyleArray | TextStyle;\n}\n\nexport interface TextProps extends FabricObjectProps, UniqueTextProps {\n  styles: TextStyle;\n}\n\n/**\n * Text class\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}\n */\nexport class FabricText<\n    Props extends TOptions<TextProps> = Partial<TextProps>,\n    SProps extends SerializedTextProps = SerializedTextProps,\n    EventSpec extends ObjectEvents = ObjectEvents\n  >\n  extends StyledText<Props, SProps, EventSpec>\n  implements UniqueTextProps\n{\n  /**\n   * Properties that requires a text layout recalculation when changed\n   * @type string[]\n   * @protected\n   */\n  static textLayoutProperties: string[] = textLayoutProperties;\n\n  /**\n   * @private\n   */\n  declare _reNewline: RegExp;\n\n  /**\n   * Use this regular expression to filter for whitespaces that is not a new line.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reSpacesAndTabs: RegExp;\n\n  /**\n   * Use this regular expression to filter for whitespace that is not a new line.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reSpaceAndTab: RegExp;\n\n  /**\n   * Use this regular expression to filter consecutive groups of non spaces.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reWords: RegExp;\n\n  declare text: string;\n\n  /**\n   * Font size (in pixels)\n   * @type Number\n   * @default\n   */\n  declare fontSize: number;\n\n  /**\n   * Font weight (e.g. bold, normal, 400, 600, 800)\n   * @type {(Number|String)}\n   * @default\n   */\n  declare fontWeight: string;\n\n  /**\n   * Font family\n   * @type String\n   * @default\n   */\n  declare fontFamily: string;\n\n  /**\n   * Text decoration underline.\n   * @type Boolean\n   * @default\n   */\n  declare underline: boolean;\n\n  /**\n   * Text decoration overline.\n   * @type Boolean\n   * @default\n   */\n  declare overline: boolean;\n\n  /**\n   * Text decoration linethrough.\n   * @type Boolean\n   * @default\n   */\n  declare linethrough: boolean;\n\n  /**\n   * Text alignment. Possible values: \"left\", \"center\", \"right\", \"justify\",\n   * \"justify-left\", \"justify-center\" or \"justify-right\".\n   * @type String\n   * @default\n   */\n  declare textAlign: string;\n\n  /**\n   * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\n   * @type String\n   * @default\n   */\n  declare fontStyle: string;\n\n  /**\n   * Line height\n   * @type Number\n   * @default\n   */\n  declare lineHeight: number;\n\n  /**\n   * Superscript schema object (minimum overlap)\n   */\n  declare superscript: {\n    /**\n     * fontSize factor\n     * @default 0.6\n     */\n    size: number;\n    /**\n     * baseline-shift factor (upwards)\n     * @default -0.35\n     */\n    baseline: number;\n  };\n\n  /**\n   * Subscript schema object (minimum overlap)\n   */\n  declare subscript: {\n    /**\n     * fontSize factor\n     * @default 0.6\n     */\n    size: number;\n    /**\n     * baseline-shift factor (downwards)\n     * @default 0.11\n     */\n    baseline: number;\n  };\n\n  /**\n   * Background color of text lines\n   * @type String\n   * @default\n   */\n  declare textBackgroundColor: string;\n\n  declare styles: TextStyle;\n\n  /**\n   * Path that the text should follow.\n   * since 4.6.0 the path will be drawn automatically.\n   * if you want to make the path visible, give it a stroke and strokeWidth or fill value\n   * if you want it to be hidden, assign visible = false to the path.\n   * This feature is in BETA, and SVG import/export is not yet supported.\n   * @type Path\n   * @example\n   * const textPath = new Text('Text on a path', {\n   *     top: 150,\n   *     left: 150,\n   *     textAlign: 'center',\n   *     charSpacing: -50,\n   *     path: new Path('M 0 0 C 50 -100 150 -100 200 0', {\n   *         strokeWidth: 1,\n   *         visible: false\n   *     }),\n   *     pathSide: 'left',\n   *     pathStartOffset: 0\n   * });\n   * @default\n   */\n  declare path?: Path;\n\n  /**\n   * Offset amount for text path starting position\n   * Only used when text has a path\n   * @type Number\n   * @default\n   */\n  declare pathStartOffset: number;\n\n  /**\n   * Which side of the path the text should be drawn on.\n   * Only used when text has a path\n   * @type {TPathSide} 'left|right'\n   * @default\n   */\n  declare pathSide: TPathSide;\n\n  /**\n   * How text is aligned to the path. This property determines\n   * the perpendicular position of each character relative to the path.\n   * (one of \"baseline\", \"center\", \"ascender\", \"descender\")\n   * This feature is in BETA, and its behavior may change\n   * @type TPathAlign\n   * @default\n   */\n  declare pathAlign: TPathAlign;\n\n  /**\n   * @private\n   */\n  declare _fontSizeFraction: number;\n\n  /**\n   * @private\n   */\n  declare offsets: { underline: number; linethrough: number; overline: number };\n\n  /**\n   * Text Line proportion to font Size (in pixels)\n   * @type Number\n   * @default\n   */\n  declare _fontSizeMult: number;\n\n  /**\n   * additional space between characters\n   * expressed in thousands of em unit\n   * @type Number\n   * @default\n   */\n  declare charSpacing: number;\n\n  /**\n   * Baseline shift, styles only, keep at 0 for the main text object\n   * @type {Number}\n   * @default\n   */\n  declare deltaY: number;\n\n  /**\n   * WARNING: EXPERIMENTAL. NOT SUPPORTED YET\n   * determine the direction of the text.\n   * This has to be set manually together with textAlign and originX for proper\n   * experience.\n   * some interesting link for the future\n   * https://www.w3.org/International/questions/qa-bidi-unicode-controls\n   * @since 4.5.0\n   * @type {CanvasDirection} 'ltr|rtl'\n   * @default\n   */\n  declare direction: CanvasDirection;\n\n  /**\n   * contains characters bounding boxes\n   * This variable is considered to be protected.\n   * But for how mixins are implemented right now, we can't leave it private\n   * @protected\n   */\n  __charBounds: GraphemeBBox[][] = [];\n\n  /**\n   * use this size when measuring text. To avoid IE11 rounding errors\n   * @type {Number}\n   * @default\n   * @readonly\n   * @private\n   */\n  declare CACHE_FONT_SIZE: number;\n\n  /**\n   * contains the min text width to avoid getting 0\n   * @type {Number}\n   * @default\n   */\n  declare MIN_TEXT_WIDTH: number;\n\n  /**\n   * contains the the text of the object, divided in lines as they are displayed\n   * on screen. Wrapping will divide the text independently of line breaks\n   * @type {string[]}\n   * @default\n   */\n  declare textLines: string[];\n\n  /**\n   * same as textlines, but each line is an array of graphemes as split by splitByGrapheme\n   * @type {string[]}\n   * @default\n   */\n  declare _textLines: string[][];\n\n  declare _unwrappedTextLines: string[][];\n  declare _text: string[];\n  declare cursorWidth: number;\n  declare __lineHeights: number[];\n  declare __lineWidths: number[];\n  declare initialized?: true;\n\n  static cacheProperties = [...cacheProperties, ...additionalProps];\n\n  static ownDefaults = textDefaultValues;\n\n  static type = 'Text';\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...FabricText.ownDefaults };\n  }\n\n  constructor(text: string, options?: Props) {\n    super();\n    Object.assign(this, FabricText.ownDefaults);\n    this.setOptions(options);\n    if (!this.styles) {\n      this.styles = {};\n    }\n    this.text = text;\n    this.initialized = true;\n    if (this.path) {\n      this.setPathInfo();\n    }\n    this.initDimensions();\n    this.setCoords();\n  }\n\n  /**\n   * If text has a path, it will add the extra information needed\n   * for path and text calculations\n   */\n  setPathInfo() {\n    const path = this.path;\n    if (path) {\n      path.segmentsInfo = getPathSegmentsInfo(path.path);\n    }\n  }\n\n  /**\n   * @private\n   * Divides text into lines of text and lines of graphemes.\n   */\n  _splitText(): TextLinesInfo {\n    const newLines = this._splitTextIntoLines(this.text);\n    this.textLines = newLines.lines;\n    this._textLines = newLines.graphemeLines;\n    this._unwrappedTextLines = newLines._unwrappedLines;\n    this._text = newLines.graphemeText;\n    return newLines;\n  }\n\n  /**\n   * Initialize or update text dimensions.\n   * Updates this.width and this.height with the proper values.\n   * Does not return dimensions.\n   */\n  initDimensions() {\n    this._splitText();\n    this._clearCache();\n    this.dirty = true;\n    if (this.path) {\n      this.width = this.path.width;\n      this.height = this.path.height;\n    } else {\n      this.width =\n        this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;\n      this.height = this.calcTextHeight();\n    }\n    if (this.textAlign.includes(JUSTIFY)) {\n      // once text is measured we need to make space fatter to make justified text.\n      this.enlargeSpaces();\n    }\n  }\n\n  /**\n   * Enlarge space boxes and shift the others\n   */\n  enlargeSpaces() {\n    let diffSpace,\n      currentLineWidth,\n      numberOfSpaces,\n      accumulatedSpace,\n      line,\n      charBound,\n      spaces;\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      if (\n        this.textAlign !== JUSTIFY &&\n        (i === len - 1 || this.isEndOfWrapping(i))\n      ) {\n        continue;\n      }\n      accumulatedSpace = 0;\n      line = this._textLines[i];\n      currentLineWidth = this.getLineWidth(i);\n      if (\n        currentLineWidth < this.width &&\n        (spaces = this.textLines[i].match(this._reSpacesAndTabs))\n      ) {\n        numberOfSpaces = spaces.length;\n        diffSpace = (this.width - currentLineWidth) / numberOfSpaces;\n        for (let j = 0; j <= line.length; j++) {\n          charBound = this.__charBounds[i][j];\n          if (this._reSpaceAndTab.test(line[j])) {\n            charBound.width += diffSpace;\n            charBound.kernedWidth += diffSpace;\n            charBound.left += accumulatedSpace;\n            accumulatedSpace += diffSpace;\n          } else {\n            charBound.left += accumulatedSpace;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Detect if the text line is ended with an hard break\n   * text and itext do not have wrapping, return false\n   * @return {Boolean}\n   */\n  isEndOfWrapping(lineIndex: number): boolean {\n    return lineIndex === this._textLines.length - 1;\n  }\n\n  /**\n   * Detect if a line has a linebreak and so we need to account for it when moving\n   * and counting style.\n   * It return always 1 for text and Itext. Textbox has its own implementation\n   * @return Number\n   */\n  missingNewlineOffset(lineIndex: number, skipWrapping?: boolean): 0 | 1;\n  missingNewlineOffset(lineIndex: number): 1 {\n    return 1;\n  }\n\n  /**\n   * Returns 2d representation (lineIndex and charIndex) of cursor\n   * @param {Number} selectionStart\n   * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\n   */\n  get2DCursorLocation(selectionStart: number, skipWrapping?: boolean) {\n    const lines = skipWrapping ? this._unwrappedTextLines : this._textLines;\n    let i: number;\n    for (i = 0; i < lines.length; i++) {\n      if (selectionStart <= lines[i].length) {\n        return {\n          lineIndex: i,\n          charIndex: selectionStart,\n        };\n      }\n      selectionStart -=\n        lines[i].length + this.missingNewlineOffset(i, skipWrapping);\n    }\n    return {\n      lineIndex: i - 1,\n      charIndex:\n        lines[i - 1].length < selectionStart\n          ? lines[i - 1].length\n          : selectionStart,\n    };\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {String} String representation of text object\n   */\n  toString(): string {\n    return `#<Text (${this.complexity()}): { \"text\": \"${\n      this.text\n    }\", \"fontFamily\": \"${this.fontFamily}\" }>`;\n  }\n\n  /**\n   * Return the dimension and the zoom level needed to create a cache canvas\n   * big enough to host the object to be cached.\n   * @private\n   * @param {Object} dim.x width of object to be cached\n   * @param {Object} dim.y height of object to be cached\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _getCacheCanvasDimensions(): TCacheCanvasDimensions {\n    const dims = super._getCacheCanvasDimensions();\n    const fontSize = this.fontSize;\n    dims.width += fontSize * dims.zoomX;\n    dims.height += fontSize * dims.zoomY;\n    return dims;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const path = this.path;\n    path && !path.isNotVisible() && path._render(ctx);\n    this._setTextStyles(ctx);\n    this._renderTextLinesBackground(ctx);\n    this._renderTextDecoration(ctx, 'underline');\n    this._renderText(ctx);\n    this._renderTextDecoration(ctx, 'overline');\n    this._renderTextDecoration(ctx, 'linethrough');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderText(ctx: CanvasRenderingContext2D) {\n    if (this.paintFirst === 'stroke') {\n      this._renderTextStroke(ctx);\n      this._renderTextFill(ctx);\n    } else {\n      this._renderTextFill(ctx);\n      this._renderTextStroke(ctx);\n    }\n  }\n\n  /**\n   * Set the font parameter of the context with the object properties or with charStyle\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Object} [charStyle] object with font style properties\n   * @param {String} [charStyle.fontFamily] Font Family\n   * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )\n   * @param {String} [charStyle.fontWeight] Font weight\n   * @param {String} [charStyle.fontStyle] Font style (italic|normal)\n   */\n  _setTextStyles(\n    ctx: CanvasRenderingContext2D,\n    charStyle?: any,\n    forMeasuring?: boolean\n  ) {\n    ctx.textBaseline = 'alphabetic';\n    if (this.path) {\n      switch (this.pathAlign) {\n        case CENTER:\n          ctx.textBaseline = 'middle';\n          break;\n        case 'ascender':\n          ctx.textBaseline = TOP;\n          break;\n        case 'descender':\n          ctx.textBaseline = BOTTOM;\n          break;\n      }\n    }\n    ctx.font = this._getFontDeclaration(charStyle, forMeasuring);\n  }\n\n  /**\n   * calculate and return the text Width measuring each line.\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @return {Number} Maximum width of Text object\n   */\n  calcTextWidth(): number {\n    let maxWidth = this.getLineWidth(0);\n\n    for (let i = 1, len = this._textLines.length; i < len; i++) {\n      const currentLineWidth = this.getLineWidth(i);\n      if (currentLineWidth > maxWidth) {\n        maxWidth = currentLineWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  /**\n   * @private\n   * @param {String} method Method name (\"fillText\" or \"strokeText\")\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {String} line Text to render\n   * @param {Number} left Left position of text\n   * @param {Number} top Top position of text\n   * @param {Number} lineIndex Index of a line in a text\n   */\n  _renderTextLine(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    line: string[],\n    left: number,\n    top: number,\n    lineIndex: number\n  ) {\n    this._renderChars(method, ctx, line, left, top, lineIndex);\n  }\n\n  /**\n   * Renders the text background for lines, taking care of style\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextLinesBackground(ctx: CanvasRenderingContext2D) {\n    if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor')) {\n      return;\n    }\n    const originalFill = ctx.fillStyle,\n      leftOffset = this._getLeftOffset();\n    let lineTopOffset = this._getTopOffset();\n\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i);\n      if (\n        !this.textBackgroundColor &&\n        !this.styleHas('textBackgroundColor', i)\n      ) {\n        lineTopOffset += heightOfLine;\n        continue;\n      }\n      const jlen = this._textLines[i].length;\n      const lineLeftOffset = this._getLineLeftOffset(i);\n      let boxWidth = 0;\n      let boxStart = 0;\n      let drawStart;\n      let currentColor;\n      let lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n      for (let j = 0; j < jlen; j++) {\n        // at this point charbox are either standard or full with pathInfo if there is a path.\n        const charBox = this.__charBounds[i][j] as Required<GraphemeBBox>;\n        currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n        if (this.path) {\n          ctx.save();\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          ctx.fillStyle = currentColor;\n          currentColor &&\n            ctx.fillRect(\n              -charBox.width / 2,\n              (-heightOfLine / this.lineHeight) * (1 - this._fontSizeFraction),\n              charBox.width,\n              heightOfLine / this.lineHeight\n            );\n          ctx.restore();\n        } else if (currentColor !== lastColor) {\n          drawStart = leftOffset + lineLeftOffset + boxStart;\n          if (this.direction === 'rtl') {\n            drawStart = this.width - drawStart - boxWidth;\n          }\n          ctx.fillStyle = lastColor;\n          lastColor &&\n            ctx.fillRect(\n              drawStart,\n              lineTopOffset,\n              boxWidth,\n              heightOfLine / this.lineHeight\n            );\n          boxStart = charBox.left;\n          boxWidth = charBox.width;\n          lastColor = currentColor;\n        } else {\n          boxWidth += charBox.kernedWidth;\n        }\n      }\n      if (currentColor && !this.path) {\n        drawStart = leftOffset + lineLeftOffset + boxStart;\n        if (this.direction === 'rtl') {\n          drawStart = this.width - drawStart - boxWidth;\n        }\n        ctx.fillStyle = currentColor;\n        ctx.fillRect(\n          drawStart,\n          lineTopOffset,\n          boxWidth,\n          heightOfLine / this.lineHeight\n        );\n      }\n      lineTopOffset += heightOfLine;\n    }\n    ctx.fillStyle = originalFill;\n    // if there is text background color no\n    // other shadows should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * measure and return the width of a single character.\n   * possibly overridden to accommodate different measure logic or\n   * to hook some external lib for character measurement\n   * @private\n   * @param {String} _char, char to be measured\n   * @param {Object} charStyle style of char to be measured\n   * @param {String} [previousChar] previous char\n   * @param {Object} [prevCharStyle] style of previous char\n   */\n  _measureChar(\n    _char: string,\n    charStyle: CompleteTextStyleDeclaration,\n    previousChar: string | undefined,\n    prevCharStyle: CompleteTextStyleDeclaration | Record<string, never>\n  ) {\n    const fontCache = cache.getFontCache(charStyle),\n      fontDeclaration = this._getFontDeclaration(charStyle),\n      couple = previousChar + _char,\n      stylesAreEqual =\n        previousChar &&\n        fontDeclaration === this._getFontDeclaration(prevCharStyle),\n      fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE;\n    let width: number | undefined,\n      coupleWidth: number | undefined,\n      previousWidth: number | undefined,\n      kernedWidth: number | undefined;\n\n    if (previousChar && fontCache[previousChar] !== undefined) {\n      previousWidth = fontCache[previousChar];\n    }\n    if (fontCache[_char] !== undefined) {\n      kernedWidth = width = fontCache[_char];\n    }\n    if (stylesAreEqual && fontCache[couple] !== undefined) {\n      coupleWidth = fontCache[couple];\n      kernedWidth = coupleWidth - previousWidth!;\n    }\n    if (\n      width === undefined ||\n      previousWidth === undefined ||\n      coupleWidth === undefined\n    ) {\n      const ctx = getMeasuringContext()!;\n      // send a TRUE to specify measuring font size CACHE_FONT_SIZE\n      this._setTextStyles(ctx, charStyle, true);\n      if (width === undefined) {\n        kernedWidth = width = ctx.measureText(_char).width;\n        fontCache[_char] = width;\n      }\n      if (previousWidth === undefined && stylesAreEqual && previousChar) {\n        previousWidth = ctx.measureText(previousChar).width;\n        fontCache[previousChar] = previousWidth;\n      }\n      if (stylesAreEqual && coupleWidth === undefined) {\n        // we can measure the kerning couple and subtract the width of the previous character\n        coupleWidth = ctx.measureText(couple).width;\n        fontCache[couple] = coupleWidth;\n        // safe to use the non-null since if undefined we defined it before.\n        kernedWidth = coupleWidth - previousWidth!;\n      }\n    }\n    return {\n      width: width * fontMultiplier,\n      kernedWidth: kernedWidth! * fontMultiplier,\n    };\n  }\n\n  /**\n   * Computes height of character at given position\n   * @param {Number} line the line index number\n   * @param {Number} _char the character index number\n   * @return {Number} fontSize of the character\n   */\n  getHeightOfChar(line: number, _char: number): number {\n    return this.getValueOfPropertyAt(line, _char, 'fontSize');\n  }\n\n  /**\n   * measure a text line measuring all characters.\n   * @param {Number} lineIndex line number\n   */\n  measureLine(lineIndex: number) {\n    const lineInfo = this._measureLine(lineIndex);\n    if (this.charSpacing !== 0) {\n      lineInfo.width -= this._getWidthOfCharSpacing();\n    }\n    if (lineInfo.width < 0) {\n      lineInfo.width = 0;\n    }\n    return lineInfo;\n  }\n\n  /**\n   * measure every grapheme of a line, populating __charBounds\n   * @param {Number} lineIndex\n   * @return {Object} object.width total width of characters\n   * @return {Object} object.numOfSpaces length of chars that match this._reSpacesAndTabs\n   */\n  _measureLine(lineIndex: number) {\n    let width = 0,\n      prevGrapheme: string | undefined,\n      graphemeInfo: GraphemeBBox | undefined;\n\n    const reverse = this.pathSide === RIGHT,\n      path = this.path,\n      line = this._textLines[lineIndex],\n      llength = line.length,\n      lineBounds = new Array<GraphemeBBox>(llength);\n\n    this.__charBounds[lineIndex] = lineBounds;\n    for (let i = 0; i < llength; i++) {\n      const grapheme = line[i];\n      graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);\n      lineBounds[i] = graphemeInfo;\n      width += graphemeInfo.kernedWidth;\n      prevGrapheme = grapheme;\n    }\n    // this latest bound box represent the last character of the line\n    // to simplify cursor handling in interactive mode.\n    lineBounds[llength] = {\n      left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,\n      width: 0,\n      kernedWidth: 0,\n      height: this.fontSize,\n      deltaY: 0,\n    } as GraphemeBBox;\n    if (path && path.segmentsInfo) {\n      let positionInPath = 0;\n      const totalPathLength =\n        path.segmentsInfo[path.segmentsInfo.length - 1].length;\n      switch (this.textAlign) {\n        case LEFT:\n          positionInPath = reverse ? totalPathLength - width : 0;\n          break;\n        case CENTER:\n          positionInPath = (totalPathLength - width) / 2;\n          break;\n        case RIGHT:\n          positionInPath = reverse ? 0 : totalPathLength - width;\n          break;\n        //todo - add support for justify\n      }\n      positionInPath += this.pathStartOffset * (reverse ? -1 : 1);\n      for (\n        let i = reverse ? llength - 1 : 0;\n        reverse ? i >= 0 : i < llength;\n        reverse ? i-- : i++\n      ) {\n        graphemeInfo = lineBounds[i];\n        if (positionInPath > totalPathLength) {\n          positionInPath %= totalPathLength;\n        } else if (positionInPath < 0) {\n          positionInPath += totalPathLength;\n        }\n        // it would probably much faster to send all the grapheme position for a line\n        // and calculate path position/angle at once.\n        this._setGraphemeOnPath(positionInPath, graphemeInfo);\n        positionInPath += graphemeInfo.kernedWidth;\n      }\n    }\n    return { width: width, numOfSpaces: 0 };\n  }\n\n  /**\n   * Calculate the angle  and the left,top position of the char that follow a path.\n   * It appends it to graphemeInfo to be reused later at rendering\n   * @private\n   * @param {Number} positionInPath to be measured\n   * @param {GraphemeBBox} graphemeInfo current grapheme box information\n   * @param {Object} startingPoint position of the point\n   */\n  _setGraphemeOnPath(positionInPath: number, graphemeInfo: GraphemeBBox) {\n    const centerPosition = positionInPath + graphemeInfo.kernedWidth / 2,\n      path = this.path!;\n\n    // we are at currentPositionOnPath. we want to know what point on the path is.\n    const info = getPointOnPath(path.path, centerPosition, path.segmentsInfo)!;\n    graphemeInfo.renderLeft = info.x - path.pathOffset.x;\n    graphemeInfo.renderTop = info.y - path.pathOffset.y;\n    graphemeInfo.angle = info.angle + (this.pathSide === RIGHT ? Math.PI : 0);\n  }\n\n  /**\n   *\n   * @param {String} grapheme to be measured\n   * @param {Number} lineIndex index of the line where the char is\n   * @param {Number} charIndex position in the line\n   * @param {String} [prevGrapheme] character preceding the one to be measured\n   * @returns {GraphemeBBox} grapheme bbox\n   */\n  _getGraphemeBox(\n    grapheme: string,\n    lineIndex: number,\n    charIndex: number,\n    prevGrapheme?: string,\n    skipLeft?: boolean\n  ): GraphemeBBox {\n    const style = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n      prevStyle = prevGrapheme\n        ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1)\n        : {},\n      info = this._measureChar(grapheme, style, prevGrapheme, prevStyle);\n    let kernedWidth = info.kernedWidth,\n      width = info.width,\n      charSpacing;\n\n    if (this.charSpacing !== 0) {\n      charSpacing = this._getWidthOfCharSpacing();\n      width += charSpacing;\n      kernedWidth += charSpacing;\n    }\n\n    const box: GraphemeBBox = {\n      width,\n      left: 0,\n      height: style.fontSize,\n      kernedWidth,\n      deltaY: style.deltaY,\n    };\n    if (charIndex > 0 && !skipLeft) {\n      const previousBox = this.__charBounds[lineIndex][charIndex - 1];\n      box.left =\n        previousBox.left + previousBox.width + info.kernedWidth - info.width;\n    }\n    return box;\n  }\n\n  /**\n   * Calculate height of line at 'lineIndex'\n   * @param {Number} lineIndex index of line to calculate\n   * @return {Number}\n   */\n  getHeightOfLine(lineIndex: number): number {\n    if (this.__lineHeights[lineIndex]) {\n      return this.__lineHeights[lineIndex];\n    }\n\n    // char 0 is measured before the line cycle because it needs to char\n    // emptylines\n    let maxHeight = this.getHeightOfChar(lineIndex, 0);\n    for (let i = 1, len = this._textLines[lineIndex].length; i < len; i++) {\n      maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);\n    }\n\n    return (this.__lineHeights[lineIndex] =\n      maxHeight * this.lineHeight * this._fontSizeMult);\n  }\n\n  /**\n   * Calculate text box height\n   */\n  calcTextHeight() {\n    let lineHeight,\n      height = 0;\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      lineHeight = this.getHeightOfLine(i);\n      height += i === len - 1 ? lineHeight / this.lineHeight : lineHeight;\n    }\n    return height;\n  }\n\n  /**\n   * @private\n   * @return {Number} Left offset\n   */\n  _getLeftOffset(): number {\n    return this.direction === 'ltr' ? -this.width / 2 : this.width / 2;\n  }\n\n  /**\n   * @private\n   * @return {Number} Top offset\n   */\n  _getTopOffset(): number {\n    return -this.height / 2;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {String} method Method name (\"fillText\" or \"strokeText\")\n   */\n  _renderTextCommon(\n    ctx: CanvasRenderingContext2D,\n    method: 'fillText' | 'strokeText'\n  ) {\n    ctx.save();\n    let lineHeights = 0;\n    const left = this._getLeftOffset(),\n      top = this._getTopOffset();\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i),\n        maxHeight = heightOfLine / this.lineHeight,\n        leftOffset = this._getLineLeftOffset(i);\n      this._renderTextLine(\n        method,\n        ctx,\n        this._textLines[i],\n        left + leftOffset,\n        top + lineHeights + maxHeight,\n        i\n      );\n      lineHeights += heightOfLine;\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextFill(ctx: CanvasRenderingContext2D) {\n    if (!this.fill && !this.styleHas('fill')) {\n      return;\n    }\n\n    this._renderTextCommon(ctx, 'fillText');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextStroke(ctx: CanvasRenderingContext2D) {\n    if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {\n      return;\n    }\n\n    if (this.shadow && !this.shadow.affectStroke) {\n      this._removeShadow(ctx);\n    }\n\n    ctx.save();\n    this._setLineDash(ctx, this.strokeDashArray);\n    ctx.beginPath();\n    this._renderTextCommon(ctx, 'strokeText');\n    ctx.closePath();\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {String} method fillText or strokeText.\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Array} line Content of the line, splitted in an array by grapheme\n   * @param {Number} left\n   * @param {Number} top\n   * @param {Number} lineIndex\n   */\n  _renderChars(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    line: Array<any>,\n    left: number,\n    top: number,\n    lineIndex: number\n  ) {\n    const lineHeight = this.getHeightOfLine(lineIndex),\n      isJustify = this.textAlign.includes(JUSTIFY),\n      path = this.path,\n      shortCut =\n        !isJustify &&\n        this.charSpacing === 0 &&\n        this.isEmptyStyles(lineIndex) &&\n        !path,\n      isLtr = this.direction === 'ltr',\n      sign = this.direction === 'ltr' ? 1 : -1,\n      // this was changed in the PR #7674\n      // currentDirection = ctx.canvas.getAttribute('dir');\n      currentDirection = ctx.direction;\n\n    let actualStyle,\n      nextStyle,\n      charsToRender = '',\n      charBox,\n      boxWidth = 0,\n      timeToRender,\n      drawingLeft;\n\n    ctx.save();\n    if (currentDirection !== this.direction) {\n      ctx.canvas.setAttribute('dir', isLtr ? 'ltr' : 'rtl');\n      ctx.direction = isLtr ? 'ltr' : 'rtl';\n      ctx.textAlign = isLtr ? LEFT : RIGHT;\n    }\n    top -= (lineHeight * this._fontSizeFraction) / this.lineHeight;\n    if (shortCut) {\n      // render all the line in one pass without checking\n      // drawingLeft = isLtr ? left : left - this.getLineWidth(lineIndex);\n      this._renderChar(method, ctx, lineIndex, 0, line.join(''), left, top);\n      ctx.restore();\n      return;\n    }\n    for (let i = 0, len = line.length - 1; i <= len; i++) {\n      timeToRender = i === len || this.charSpacing || path;\n      charsToRender += line[i];\n      charBox = this.__charBounds[lineIndex][i] as Required<GraphemeBBox>;\n      if (boxWidth === 0) {\n        left += sign * (charBox.kernedWidth - charBox.width);\n        boxWidth += charBox.width;\n      } else {\n        boxWidth += charBox.kernedWidth;\n      }\n      if (isJustify && !timeToRender) {\n        if (this._reSpaceAndTab.test(line[i])) {\n          timeToRender = true;\n        }\n      }\n      if (!timeToRender) {\n        // if we have charSpacing, we render char by char\n        actualStyle =\n          actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n        nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n        timeToRender = hasStyleChanged(actualStyle, nextStyle, false);\n      }\n      if (timeToRender) {\n        if (path) {\n          ctx.save();\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          this._renderChar(\n            method,\n            ctx,\n            lineIndex,\n            i,\n            charsToRender,\n            -boxWidth / 2,\n            0\n          );\n          ctx.restore();\n        } else {\n          drawingLeft = left;\n          this._renderChar(\n            method,\n            ctx,\n            lineIndex,\n            i,\n            charsToRender,\n            drawingLeft,\n            top\n          );\n        }\n        charsToRender = '';\n        actualStyle = nextStyle;\n        left += sign * boxWidth;\n        boxWidth = 0;\n      }\n    }\n    ctx.restore();\n  }\n\n  /**\n   * This function try to patch the missing gradientTransform on canvas gradients.\n   * transforming a context to transform the gradient, is going to transform the stroke too.\n   * we want to transform the gradient but not the stroke operation, so we create\n   * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n   * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n   * is limited.\n   * @private\n   * @param {TFiller} filler a fabric gradient instance\n   * @return {CanvasPattern} a pattern to use as fill/stroke style\n   */\n  _applyPatternGradientTransformText(filler: TFiller) {\n    const pCanvas = createCanvasElement(),\n      // TODO: verify compatibility with strokeUniform\n      width = this.width + this.strokeWidth,\n      height = this.height + this.strokeWidth,\n      pCtx = pCanvas.getContext('2d')!;\n    pCanvas.width = width;\n    pCanvas.height = height;\n    pCtx.beginPath();\n    pCtx.moveTo(0, 0);\n    pCtx.lineTo(width, 0);\n    pCtx.lineTo(width, height);\n    pCtx.lineTo(0, height);\n    pCtx.closePath();\n    pCtx.translate(width / 2, height / 2);\n    pCtx.fillStyle = filler.toLive(pCtx)!;\n    this._applyPatternGradientTransform(pCtx, filler);\n    pCtx.fill();\n    return pCtx.createPattern(pCanvas, 'no-repeat')!;\n  }\n\n  handleFiller<T extends 'fill' | 'stroke'>(\n    ctx: CanvasRenderingContext2D,\n    property: `${T}Style`,\n    filler: TFiller | string\n  ): { offsetX: number; offsetY: number } {\n    let offsetX: number, offsetY: number;\n    if (isFiller(filler)) {\n      if (\n        (filler as Gradient<'linear'>).gradientUnits === 'percentage' ||\n        (filler as Gradient<'linear'>).gradientTransform ||\n        (filler as Pattern).patternTransform\n      ) {\n        // need to transform gradient in a pattern.\n        // this is a slow process. If you are hitting this codepath, and the object\n        // is not using caching, you should consider switching it on.\n        // we need a canvas as big as the current object caching canvas.\n        offsetX = -this.width / 2;\n        offsetY = -this.height / 2;\n        ctx.translate(offsetX, offsetY);\n        ctx[property] = this._applyPatternGradientTransformText(filler);\n        return { offsetX, offsetY };\n      } else {\n        // is a simple gradient or pattern\n        ctx[property] = filler.toLive(ctx)!;\n        return this._applyPatternGradientTransform(ctx, filler);\n      }\n    } else {\n      // is a color\n      ctx[property] = filler;\n    }\n    return { offsetX: 0, offsetY: 0 };\n  }\n\n  /**\n   * This function prepare the canvas for a stroke style, and stroke and strokeWidth\n   * need to be sent in as defined\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {CompleteTextStyleDeclaration} style with stroke and strokeWidth defined\n   * @returns\n   */\n  _setStrokeStyles(\n    ctx: CanvasRenderingContext2D,\n    {\n      stroke,\n      strokeWidth,\n    }: Pick<CompleteTextStyleDeclaration, 'stroke' | 'strokeWidth'>\n  ) {\n    ctx.lineWidth = strokeWidth;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.lineDashOffset = this.strokeDashOffset;\n    ctx.lineJoin = this.strokeLineJoin;\n    ctx.miterLimit = this.strokeMiterLimit;\n    return this.handleFiller(ctx, 'strokeStyle', stroke!);\n  }\n\n  /**\n   * This function prepare the canvas for a ill style, and fill\n   * need to be sent in as defined\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {CompleteTextStyleDeclaration} style with ill defined\n   * @returns\n   */\n  _setFillStyles(ctx: CanvasRenderingContext2D, { fill }: Pick<this, 'fill'>) {\n    return this.handleFiller(ctx, 'fillStyle', fill!);\n  }\n\n  /**\n   * @private\n   * @param {String} method\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {String} _char\n   * @param {Number} left Left coordinate\n   * @param {Number} top Top coordinate\n   * @param {Number} lineHeight Height of the line\n   */\n  _renderChar(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    lineIndex: number,\n    charIndex: number,\n    _char: string,\n    left: number,\n    top: number\n  ) {\n    const decl = this._getStyleDeclaration(lineIndex, charIndex),\n      fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n      shouldFill = method === 'fillText' && fullDecl.fill,\n      shouldStroke =\n        method === 'strokeText' && fullDecl.stroke && fullDecl.strokeWidth;\n\n    if (!shouldStroke && !shouldFill) {\n      return;\n    }\n    ctx.save();\n\n    ctx.font = this._getFontDeclaration(fullDecl);\n\n    if (decl.textBackgroundColor) {\n      this._removeShadow(ctx);\n    }\n    if (decl.deltaY) {\n      top += decl.deltaY;\n    }\n\n    if (shouldFill) {\n      const fillOffsets = this._setFillStyles(ctx, fullDecl);\n      ctx.fillText(\n        _char,\n        left - fillOffsets.offsetX,\n        top - fillOffsets.offsetY\n      );\n    }\n\n    if (shouldStroke) {\n      const strokeOffsets = this._setStrokeStyles(ctx, fullDecl);\n      ctx.strokeText(\n        _char,\n        left - strokeOffsets.offsetX,\n        top - strokeOffsets.offsetY\n      );\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * Turns the character into a 'superior figure' (i.e. 'superscript')\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   */\n  setSuperscript(start: number, end: number) {\n    this._setScript(start, end, this.superscript);\n  }\n\n  /**\n   * Turns the character into an 'inferior figure' (i.e. 'subscript')\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   */\n  setSubscript(start: number, end: number) {\n    this._setScript(start, end, this.subscript);\n  }\n\n  /**\n   * Applies 'schema' at given position\n   * @private\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   * @param {Number} schema\n   */\n  protected _setScript(\n    start: number,\n    end: number,\n    schema: {\n      size: number;\n      baseline: number;\n    }\n  ) {\n    const loc = this.get2DCursorLocation(start, true),\n      fontSize = this.getValueOfPropertyAt(\n        loc.lineIndex,\n        loc.charIndex,\n        'fontSize'\n      ),\n      dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'deltaY'),\n      style = {\n        fontSize: fontSize * schema.size,\n        deltaY: dy + fontSize * schema.baseline,\n      };\n    this.setSelectionStyles(style, start, end);\n  }\n\n  /**\n   * @private\n   * @param {Number} lineIndex index text line\n   * @return {Number} Line left offset\n   */\n  _getLineLeftOffset(lineIndex: number): number {\n    const lineWidth = this.getLineWidth(lineIndex),\n      lineDiff = this.width - lineWidth,\n      textAlign = this.textAlign,\n      direction = this.direction,\n      isEndOfWrapping = this.isEndOfWrapping(lineIndex);\n    let leftOffset = 0;\n    if (\n      textAlign === JUSTIFY ||\n      (textAlign === JUSTIFY_CENTER && !isEndOfWrapping) ||\n      (textAlign === JUSTIFY_RIGHT && !isEndOfWrapping) ||\n      (textAlign === JUSTIFY_LEFT && !isEndOfWrapping)\n    ) {\n      return 0;\n    }\n    if (textAlign === CENTER) {\n      leftOffset = lineDiff / 2;\n    }\n    if (textAlign === RIGHT) {\n      leftOffset = lineDiff;\n    }\n    if (textAlign === JUSTIFY_CENTER) {\n      leftOffset = lineDiff / 2;\n    }\n    if (textAlign === JUSTIFY_RIGHT) {\n      leftOffset = lineDiff;\n    }\n    if (direction === 'rtl') {\n      if (\n        textAlign === RIGHT ||\n        textAlign === JUSTIFY ||\n        textAlign === JUSTIFY_RIGHT\n      ) {\n        leftOffset = 0;\n      } else if (textAlign === LEFT || textAlign === JUSTIFY_LEFT) {\n        leftOffset = -lineDiff;\n      } else if (textAlign === CENTER || textAlign === JUSTIFY_CENTER) {\n        leftOffset = -lineDiff / 2;\n      }\n    }\n    return leftOffset;\n  }\n\n  /**\n   * @private\n   */\n  _clearCache() {\n    this._forceClearCache = false;\n    this.__lineWidths = [];\n    this.__lineHeights = [];\n    this.__charBounds = [];\n  }\n\n  /**\n   * Measure a single line given its index. Used to calculate the initial\n   * text bounding box. The values are calculated and stored in __lineWidths cache.\n   * @private\n   * @param {Number} lineIndex line number\n   * @return {Number} Line width\n   */\n  getLineWidth(lineIndex: number): number {\n    if (this.__lineWidths[lineIndex] !== undefined) {\n      return this.__lineWidths[lineIndex];\n    }\n\n    const { width } = this.measureLine(lineIndex);\n    this.__lineWidths[lineIndex] = width;\n    return width;\n  }\n\n  _getWidthOfCharSpacing() {\n    if (this.charSpacing !== 0) {\n      return (this.fontSize * this.charSpacing) / 1000;\n    }\n    return 0;\n  }\n\n  /**\n   * Retrieves the value of property at given character position\n   * @param {Number} lineIndex the line number\n   * @param {Number} charIndex the character number\n   * @param {String} property the property name\n   * @returns the value of 'property'\n   */\n  getValueOfPropertyAt<T extends StylePropertiesType>(\n    lineIndex: number,\n    charIndex: number,\n    property: T\n  ): this[T] {\n    const charStyle = this._getStyleDeclaration(lineIndex, charIndex);\n    return (charStyle[property] ?? this[property]) as this[T];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextDecoration(\n    ctx: CanvasRenderingContext2D,\n    type: 'underline' | 'linethrough' | 'overline'\n  ) {\n    if (!this[type] && !this.styleHas(type)) {\n      return;\n    }\n    let topOffset = this._getTopOffset();\n    const leftOffset = this._getLeftOffset(),\n      path = this.path,\n      charSpacing = this._getWidthOfCharSpacing(),\n      offsetY = this.offsets[type];\n\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i);\n      if (!this[type] && !this.styleHas(type, i)) {\n        topOffset += heightOfLine;\n        continue;\n      }\n      const line = this._textLines[i];\n      const maxHeight = heightOfLine / this.lineHeight;\n      const lineLeftOffset = this._getLineLeftOffset(i);\n      let boxStart = 0;\n      let boxWidth = 0;\n      let lastDecoration = this.getValueOfPropertyAt(i, 0, type);\n      let lastFill = this.getValueOfPropertyAt(i, 0, 'fill');\n      let currentDecoration;\n      let currentFill;\n      const top = topOffset + maxHeight * (1 - this._fontSizeFraction);\n      let size = this.getHeightOfChar(i, 0);\n      let dy = this.getValueOfPropertyAt(i, 0, 'deltaY');\n      for (let j = 0, jlen = line.length; j < jlen; j++) {\n        const charBox = this.__charBounds[i][j] as Required<GraphemeBBox>;\n        currentDecoration = this.getValueOfPropertyAt(i, j, type);\n        currentFill = this.getValueOfPropertyAt(i, j, 'fill');\n        const currentSize = this.getHeightOfChar(i, j);\n        const currentDy = this.getValueOfPropertyAt(i, j, 'deltaY');\n        if (path && currentDecoration && currentFill) {\n          ctx.save();\n          // bug? verify lastFill is a valid fill here.\n          ctx.fillStyle = lastFill as string;\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          ctx.fillRect(\n            -charBox.kernedWidth / 2,\n            offsetY * currentSize + currentDy,\n            charBox.kernedWidth,\n            this.fontSize / 15\n          );\n          ctx.restore();\n        } else if (\n          (currentDecoration !== lastDecoration ||\n            currentFill !== lastFill ||\n            currentSize !== size ||\n            currentDy !== dy) &&\n          boxWidth > 0\n        ) {\n          let drawStart = leftOffset + lineLeftOffset + boxStart;\n          if (this.direction === 'rtl') {\n            drawStart = this.width - drawStart - boxWidth;\n          }\n          if (lastDecoration && lastFill) {\n            // bug? verify lastFill is a valid fill here.\n            ctx.fillStyle = lastFill as string;\n            ctx.fillRect(\n              drawStart,\n              top + offsetY * size + dy,\n              boxWidth,\n              this.fontSize / 15\n            );\n          }\n          boxStart = charBox.left;\n          boxWidth = charBox.width;\n          lastDecoration = currentDecoration;\n          lastFill = currentFill;\n          size = currentSize;\n          dy = currentDy;\n        } else {\n          boxWidth += charBox.kernedWidth;\n        }\n      }\n      let drawStart = leftOffset + lineLeftOffset + boxStart;\n      if (this.direction === 'rtl') {\n        drawStart = this.width - drawStart - boxWidth;\n      }\n      ctx.fillStyle = currentFill as string;\n      currentDecoration &&\n        currentFill &&\n        ctx.fillRect(\n          drawStart,\n          top + offsetY * size + dy,\n          boxWidth - charSpacing,\n          this.fontSize / 15\n        );\n      topOffset += heightOfLine;\n    }\n    // if there is text background color no\n    // other shadows should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * return font declaration string for canvas context\n   * @param {Object} [styleObject] object\n   * @returns {String} font declaration formatted for canvas context.\n   */\n  _getFontDeclaration(\n    {\n      fontFamily = this.fontFamily,\n      fontStyle = this.fontStyle,\n      fontWeight = this.fontWeight,\n      fontSize = this.fontSize,\n    }: Partial<\n      Pick<\n        TextStyleDeclaration,\n        'fontFamily' | 'fontStyle' | 'fontWeight' | 'fontSize'\n      >\n    > = {},\n    forMeasuring?: boolean\n  ): string {\n    const parsedFontFamily =\n      fontFamily.includes(\"'\") ||\n      fontFamily.includes('\"') ||\n      fontFamily.includes(',') ||\n      FabricText.genericFonts.includes(fontFamily.toLowerCase())\n        ? fontFamily\n        : `\"${fontFamily}\"`;\n    return [\n      fontStyle,\n      fontWeight,\n      `${forMeasuring ? this.CACHE_FONT_SIZE : fontSize}px`,\n      parsedFontFamily,\n    ].join(' ');\n  }\n\n  /**\n   * Renders text instance on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    if (!this.visible) {\n      return;\n    }\n    if (\n      this.canvas &&\n      this.canvas.skipOffscreen &&\n      !this.group &&\n      !this.isOnScreen()\n    ) {\n      return;\n    }\n    if (this._forceClearCache) {\n      this.initDimensions();\n    }\n    super.render(ctx);\n  }\n\n  /**\n   * Override this method to customize grapheme splitting\n   * @todo the util `graphemeSplit` needs to be injectable in some way.\n   * is more comfortable to inject the correct util rather than having to override text\n   * in the middle of the prototype chain\n   * @param {string} value\n   * @returns {string[]} array of graphemes\n   */\n  graphemeSplit(value: string): string[] {\n    return graphemeSplit(value);\n  }\n\n  /**\n   * Returns the text as an array of lines.\n   * @param {String} text text to split\n   * @returns  Lines in the text\n   */\n  _splitTextIntoLines(text: string): TextLinesInfo {\n    const lines = text.split(this._reNewline),\n      newLines = new Array<string[]>(lines.length),\n      newLine = ['\\n'];\n    let newText: string[] = [];\n    for (let i = 0; i < lines.length; i++) {\n      newLines[i] = this.graphemeSplit(lines[i]);\n      newText = newText.concat(newLines[i], newLine);\n    }\n    newText.pop();\n    return {\n      _unwrappedLines: newLines,\n      lines: lines,\n      graphemeText: newText,\n      graphemeLines: newLines,\n    };\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject([...additionalProps, ...propertiesToInclude] as K[]),\n      styles: stylesToArray(this.styles, this.text),\n      ...(this.path ? { path: this.path.toObject() } : {}),\n    };\n  }\n\n  set(key: string | any, value?: any) {\n    const { textLayoutProperties } = this.constructor as typeof FabricText;\n    super.set(key, value);\n    let needsDims = false;\n    let isAddingPath = false;\n    if (typeof key === 'object') {\n      for (const _key in key) {\n        if (_key === 'path') {\n          this.setPathInfo();\n        }\n        needsDims = needsDims || textLayoutProperties.includes(_key);\n        isAddingPath = isAddingPath || _key === 'path';\n      }\n    } else {\n      needsDims = textLayoutProperties.includes(key);\n      isAddingPath = key === 'path';\n    }\n    if (isAddingPath) {\n      this.setPathInfo();\n    }\n    if (needsDims && this.initialized) {\n      this.initDimensions();\n      this.setCoords();\n    }\n    return this;\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity\n   */\n  complexity(): number {\n    return 1;\n  }\n\n  static genericFonts = [\n    'sans-serif',\n    'serif',\n    'cursive',\n    'fantasy',\n    'monospace',\n  ];\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link FabricText.fromElement})\n   * @static\n   * @memberOf Text\n   * @see: http://www.w3.org/TR/SVG/text.html#TextElement\n   */\n  static ATTRIBUTE_NAMES = SHARED_ATTRIBUTES.concat(\n    'x',\n    'y',\n    'dx',\n    'dy',\n    'font-family',\n    'font-style',\n    'font-weight',\n    'font-size',\n    'letter-spacing',\n    'text-decoration',\n    'text-anchor'\n  );\n\n  /**\n   * Returns FabricText instance from an SVG element (<b>not yet implemented</b>)\n   * @static\n   * @memberOf Text\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      FabricText.ATTRIBUTE_NAMES,\n      cssRules\n    );\n\n    const {\n      textAnchor = LEFT as typeof LEFT | typeof CENTER | typeof RIGHT,\n      textDecoration = '',\n      dx = 0,\n      dy = 0,\n      top = 0,\n      left = 0,\n      fontSize = DEFAULT_SVG_FONT_SIZE,\n      strokeWidth = 1,\n      ...restOfOptions\n    } = { ...options, ...parsedAttributes };\n\n    const textContent = (element.textContent || '')\n      .replace(/^\\s+|\\s+$|\\n+/g, '')\n      .replace(/\\s+/g, ' ');\n\n    // this code here is probably the usual issue for SVG center find\n    // this can later looked at again and probably removed.\n\n    const text = new this(textContent, {\n        left: left + dx,\n        top: top + dy,\n        underline: textDecoration.includes('underline'),\n        overline: textDecoration.includes('overline'),\n        linethrough: textDecoration.includes('line-through'),\n        // we initialize this as 0\n        strokeWidth: 0,\n        fontSize,\n        ...restOfOptions,\n      }),\n      textHeightScaleFactor = text.getScaledHeight() / text.height,\n      lineHeightDiff =\n        (text.height + text.strokeWidth) * text.lineHeight - text.height,\n      scaledDiff = lineHeightDiff * textHeightScaleFactor,\n      textHeight = text.getScaledHeight() + scaledDiff;\n\n    let offX = 0;\n    /*\n      Adjust positioning:\n        x/y attributes in SVG correspond to the bottom-left corner of text bounding box\n        fabric output by default at top, left.\n    */\n    if (textAnchor === CENTER) {\n      offX = text.getScaledWidth() / 2;\n    }\n    if (textAnchor === RIGHT) {\n      offX = text.getScaledWidth();\n    }\n    text.set({\n      left: text.left - offX,\n      top:\n        text.top -\n        (textHeight - text.fontSize * (0.07 + text._fontSizeFraction)) /\n          text.lineHeight,\n      strokeWidth,\n    });\n    return text;\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns FabricText instance from an object representation\n   * @param {Object} object plain js Object to create an instance from\n   * @returns {Promise<FabricText>}\n   */\n  static fromObject<\n    T extends TOptions<SerializedTextProps>,\n    S extends FabricText\n  >(object: T) {\n    return this._fromObject<S>(\n      {\n        ...object,\n        styles: stylesFromArray(object.styles || {}, object.text),\n      },\n      {\n        extraParam: 'text',\n      }\n    );\n  }\n}\n\napplyMixins(FabricText, [TextSVGExportMixin]);\nclassRegistry.setClass(FabricText);\nclassRegistry.setSVGClass(FabricText);\n"],"names":["measuringContext","FabricText","StyledText","getDefaults","_objectSpread","super","ownDefaults","constructor","text","options","_defineProperty","Object","assign","this","setOptions","styles","initialized","path","setPathInfo","initDimensions","setCoords","segmentsInfo","getPathSegmentsInfo","_splitText","newLines","_splitTextIntoLines","textLines","lines","_textLines","graphemeLines","_unwrappedTextLines","_unwrappedLines","_text","graphemeText","_clearCache","dirty","width","height","calcTextWidth","cursorWidth","MIN_TEXT_WIDTH","calcTextHeight","textAlign","includes","JUSTIFY","enlargeSpaces","diffSpace","currentLineWidth","numberOfSpaces","accumulatedSpace","line","charBound","spaces","i","len","length","isEndOfWrapping","getLineWidth","match","_reSpacesAndTabs","j","__charBounds","_reSpaceAndTab","test","kernedWidth","left","lineIndex","missingNewlineOffset","get2DCursorLocation","selectionStart","skipWrapping","charIndex","toString","concat","complexity","fontFamily","_getCacheCanvasDimensions","dims","fontSize","zoomX","zoomY","_render","ctx","isNotVisible","_setTextStyles","_renderTextLinesBackground","_renderTextDecoration","_renderText","paintFirst","_renderTextStroke","_renderTextFill","charStyle","forMeasuring","textBaseline","pathAlign","CENTER","TOP","BOTTOM","font","_getFontDeclaration","maxWidth","_renderTextLine","method","top","_renderChars","textBackgroundColor","styleHas","originalFill","fillStyle","leftOffset","_getLeftOffset","lineTopOffset","_getTopOffset","heightOfLine","getHeightOfLine","jlen","lineLeftOffset","_getLineLeftOffset","drawStart","currentColor","boxWidth","boxStart","lastColor","getValueOfPropertyAt","charBox","save","translate","renderLeft","renderTop","rotate","angle","fillRect","lineHeight","_fontSizeFraction","restore","direction","_removeShadow","_measureChar","_char","previousChar","prevCharStyle","fontCache","cache","getFontCache","fontDeclaration","couple","stylesAreEqual","fontMultiplier","CACHE_FONT_SIZE","coupleWidth","previousWidth","undefined","canvas","createCanvasElement","getContext","getMeasuringContext","measureText","getHeightOfChar","measureLine","lineInfo","_measureLine","charSpacing","_getWidthOfCharSpacing","prevGrapheme","graphemeInfo","reverse","pathSide","RIGHT","llength","lineBounds","Array","grapheme","_getGraphemeBox","deltaY","positionInPath","totalPathLength","LEFT","pathStartOffset","_setGraphemeOnPath","numOfSpaces","centerPosition","info","getPointOnPath","x","pathOffset","y","Math","PI","skipLeft","style","getCompleteStyleDeclaration","prevStyle","box","previousBox","__lineHeights","maxHeight","max","_fontSizeMult","_renderTextCommon","lineHeights","fill","stroke","strokeWidth","isEmptyStyles","shadow","affectStroke","_setLineDash","strokeDashArray","beginPath","closePath","isJustify","shortCut","isLtr","sign","currentDirection","actualStyle","nextStyle","timeToRender","drawingLeft","charsToRender","setAttribute","_renderChar","join","hasStyleChanged","_applyPatternGradientTransformText","filler","pCanvas","pCtx","moveTo","lineTo","toLive","_applyPatternGradientTransform","createPattern","handleFiller","property","offsetX","offsetY","isFiller","gradientUnits","gradientTransform","patternTransform","_setStrokeStyles","_ref","lineWidth","lineCap","strokeLineCap","lineDashOffset","strokeDashOffset","lineJoin","strokeLineJoin","miterLimit","strokeMiterLimit","_setFillStyles","_ref2","decl","_getStyleDeclaration","fullDecl","shouldFill","shouldStroke","fillOffsets","fillText","strokeOffsets","strokeText","setSuperscript","start","end","_setScript","superscript","setSubscript","subscript","schema","loc","dy","size","baseline","setSelectionStyles","lineDiff","JUSTIFY_CENTER","JUSTIFY_RIGHT","JUSTIFY_LEFT","_forceClearCache","__lineWidths","_charStyle$property","type","topOffset","offsets","currentDecoration","currentFill","lastDecoration","lastFill","currentSize","currentDy","fontStyle","fontWeight","arguments","parsedFontFamily","genericFonts","toLowerCase","render","visible","skipOffscreen","group","isOnScreen","graphemeSplit","value","split","_reNewline","newLine","newText","pop","toObject","propertiesToInclude","additionalProps","stylesToArray","set","key","textLayoutProperties","needsDims","isAddingPath","_key","fromElement","element","cssRules","parsedAttributes","parseAttributes","ATTRIBUTE_NAMES","_options$parsedAttrib","textAnchor","textDecoration","dx","DEFAULT_SVG_FONT_SIZE","restOfOptions","_objectWithoutProperties","_excluded","textContent","replace","underline","overline","linethrough","textHeightScaleFactor","getScaledHeight","scaledDiff","textHeight","offX","getScaledWidth","fromObject","object","_fromObject","stylesFromArray","extraParam","cacheProperties","textDefaultValues","SHARED_ATTRIBUTES","applyMixins","TextSVGExportMixin","classRegistry","setClass","setSVGClass"],"mappings":"g5CAiDA,IAAIA,EA0EG,MAAMC,UAKHC,EAkSR,kBAAOC,GACL,OAAAC,EAAAA,EAAA,GAAYC,MAAMF,eAAkBF,EAAWK,YACjD,CAEAC,WAAAA,CAAYC,EAAcC,GACxBJ,QAzDFK,sBAMiC,IAoD/BC,OAAOC,OAAOC,KAAMZ,EAAWK,aAC/BO,KAAKC,WAAWL,GACXI,KAAKE,SACRF,KAAKE,OAAS,IAEhBF,KAAKL,KAAOA,EACZK,KAAKG,aAAc,EACfH,KAAKI,MACPJ,KAAKK,cAEPL,KAAKM,iBACLN,KAAKO,WACP,CAMAF,WAAAA,GACE,MAAMD,EAAOJ,KAAKI,KACdA,IACFA,EAAKI,aAAeC,EAAoBL,EAAKA,MAEjD,CAMAM,UAAAA,GACE,MAAMC,EAAWX,KAAKY,oBAAoBZ,KAAKL,MAK/C,OAJAK,KAAKa,UAAYF,EAASG,MAC1Bd,KAAKe,WAAaJ,EAASK,cAC3BhB,KAAKiB,oBAAsBN,EAASO,gBACpClB,KAAKmB,MAAQR,EAASS,aACfT,CACT,CAOAL,cAAAA,GACEN,KAAKU,aACLV,KAAKqB,cACLrB,KAAKsB,OAAQ,EACTtB,KAAKI,MACPJ,KAAKuB,MAAQvB,KAAKI,KAAKmB,MACvBvB,KAAKwB,OAASxB,KAAKI,KAAKoB,SAExBxB,KAAKuB,MACHvB,KAAKyB,iBAAmBzB,KAAK0B,aAAe1B,KAAK2B,eACnD3B,KAAKwB,OAASxB,KAAK4B,kBAEjB5B,KAAK6B,UAAUC,SAASC,IAE1B/B,KAAKgC,eAET,CAKAA,aAAAA,GACE,IAAIC,EACFC,EACAC,EACAC,EACAC,EACAC,EACAC,EACF,IAAK,IAAIC,EAAI,EAAGC,EAAMzC,KAAKe,WAAW2B,OAAQF,EAAIC,EAAKD,IACrD,IACExC,KAAK6B,YAAcE,GAClBS,IAAMC,EAAM,IAAKzC,KAAK2C,gBAAgBH,MAIzCJ,EAAmB,EACnBC,EAAOrC,KAAKe,WAAWyB,GACvBN,EAAmBlC,KAAK4C,aAAaJ,GAEnCN,EAAmBlC,KAAKuB,QACvBgB,EAASvC,KAAKa,UAAU2B,GAAGK,MAAM7C,KAAK8C,oBACvC,CACAX,EAAiBI,EAAOG,OACxBT,GAAajC,KAAKuB,MAAQW,GAAoBC,EAC9C,IAAK,IAAIY,EAAI,EAAGA,GAAKV,EAAKK,OAAQK,IAChCT,EAAYtC,KAAKgD,aAAaR,GAAGO,GAC7B/C,KAAKiD,eAAeC,KAAKb,EAAKU,KAChCT,EAAUf,OAASU,EACnBK,EAAUa,aAAelB,EACzBK,EAAUc,MAAQhB,EAClBA,GAAoBH,GAEpBK,EAAUc,MAAQhB,CAGxB,CAEJ,CAOAO,eAAAA,CAAgBU,GACd,OAAOA,IAAcrD,KAAKe,WAAW2B,OAAS,CAChD,CASAY,oBAAAA,CAAqBD,GACnB,OAAO,CACT,CAOAE,mBAAAA,CAAoBC,EAAwBC,GAC1C,MAAM3C,EAAQ2C,EAAezD,KAAKiB,oBAAsBjB,KAAKe,WAC7D,IAAIyB,EACJ,IAAKA,EAAI,EAAGA,EAAI1B,EAAM4B,OAAQF,IAAK,CACjC,GAAIgB,GAAkB1C,EAAM0B,GAAGE,OAC7B,MAAO,CACLW,UAAWb,EACXkB,UAAWF,GAGfA,GACE1C,EAAM0B,GAAGE,OAAS1C,KAAKsD,qBAAqBd,EAAGiB,EACnD,CACA,MAAO,CACLJ,UAAWb,EAAI,EACfkB,UACE5C,EAAM0B,EAAI,GAAGE,OAASc,EAClB1C,EAAM0B,EAAI,GAAGE,OACbc,EAEV,CAMAG,QAAAA,GACE,MAAA,WAAAC,OAAkB5D,KAAK6D,aAAYD,kBAAAA,OACjC5D,KAAKL,KAAI,sBAAAiE,OACU5D,KAAK8D,WAAU,OACtC,CAaAC,yBAAAA,GACE,MAAMC,EAAOxE,MAAMuE,4BACbE,EAAWjE,KAAKiE,SAGtB,OAFAD,EAAKzC,OAAS0C,EAAWD,EAAKE,MAC9BF,EAAKxC,QAAUyC,EAAWD,EAAKG,MACxBH,CACT,CAMAI,OAAAA,CAAQC,GACN,MAAMjE,EAAOJ,KAAKI,KAClBA,IAASA,EAAKkE,gBAAkBlE,EAAKgE,QAAQC,GAC7CrE,KAAKuE,eAAeF,GACpBrE,KAAKwE,2BAA2BH,GAChCrE,KAAKyE,sBAAsBJ,EAAK,aAChCrE,KAAK0E,YAAYL,GACjBrE,KAAKyE,sBAAsBJ,EAAK,YAChCrE,KAAKyE,sBAAsBJ,EAAK,cAClC,CAMAK,WAAAA,CAAYL,GACc,WAApBrE,KAAK2E,YACP3E,KAAK4E,kBAAkBP,GACvBrE,KAAK6E,gBAAgBR,KAErBrE,KAAK6E,gBAAgBR,GACrBrE,KAAK4E,kBAAkBP,GAE3B,CAYAE,cAAAA,CACEF,EACAS,EACAC,GAGA,GADAV,EAAIW,aAAe,aACfhF,KAAKI,KACP,OAAQJ,KAAKiF,WACX,KAAKC,EACHb,EAAIW,aAAe,SACnB,MACF,IAAK,WACHX,EAAIW,aAAeG,EACnB,MACF,IAAK,YACHd,EAAIW,aAAeI,EAIzBf,EAAIgB,KAAOrF,KAAKsF,oBAAoBR,EAAWC,EACjD,CAQAtD,aAAAA,GACE,IAAI8D,EAAWvF,KAAK4C,aAAa,GAEjC,IAAK,IAAIJ,EAAI,EAAGC,EAAMzC,KAAKe,WAAW2B,OAAQF,EAAIC,EAAKD,IAAK,CAC1D,MAAMN,EAAmBlC,KAAK4C,aAAaJ,GACvCN,EAAmBqD,IACrBA,EAAWrD,EAEf,CACA,OAAOqD,CACT,CAWAC,eAAAA,CACEC,EACApB,EACAhC,EACAe,EACAsC,EACArC,GAEArD,KAAK2F,aAAaF,EAAQpB,EAAKhC,EAAMe,EAAMsC,EAAKrC,EAClD,CAOAmB,0BAAAA,CAA2BH,GACzB,IAAKrE,KAAK4F,sBAAwB5F,KAAK6F,SAAS,uBAC9C,OAEF,MAAMC,EAAezB,EAAI0B,UACvBC,EAAahG,KAAKiG,iBACpB,IAAIC,EAAgBlG,KAAKmG,gBAEzB,IAAK,IAAI3D,EAAI,EAAGC,EAAMzC,KAAKe,WAAW2B,OAAQF,EAAIC,EAAKD,IAAK,CAC1D,MAAM4D,EAAepG,KAAKqG,gBAAgB7D,GAC1C,IACGxC,KAAK4F,sBACL5F,KAAK6F,SAAS,sBAAuBrD,GACtC,CACA0D,GAAiBE,EACjB,QACF,CACA,MAAME,EAAOtG,KAAKe,WAAWyB,GAAGE,OAC1B6D,EAAiBvG,KAAKwG,mBAAmBhE,GAC/C,IAEIiE,EACAC,EAHAC,EAAW,EACXC,EAAW,EAGXC,EAAY7G,KAAK8G,qBAAqBtE,EAAG,EAAG,uBAChD,IAAK,IAAIO,EAAI,EAAGA,EAAIuD,EAAMvD,IAAK,CAE7B,MAAMgE,EAAU/G,KAAKgD,aAAaR,GAAGO,GACrC2D,EAAe1G,KAAK8G,qBAAqBtE,EAAGO,EAAG,uBAC3C/C,KAAKI,MACPiE,EAAI2C,OACJ3C,EAAI4C,UAAUF,EAAQG,WAAYH,EAAQI,WAC1C9C,EAAI+C,OAAOL,EAAQM,OACnBhD,EAAI0B,UAAYW,EAChBA,GACErC,EAAIiD,UACDP,EAAQxF,MAAQ,GACf6E,EAAepG,KAAKuH,YAAe,EAAIvH,KAAKwH,mBAC9CT,EAAQxF,MACR6E,EAAepG,KAAKuH,YAExBlD,EAAIoD,WACKf,IAAiBG,GAC1BJ,EAAYT,EAAaO,EAAiBK,EACnB,QAAnB5G,KAAK0H,YACPjB,EAAYzG,KAAKuB,MAAQkF,EAAYE,GAEvCtC,EAAI0B,UAAYc,EAChBA,GACExC,EAAIiD,SACFb,EACAP,EACAS,EACAP,EAAepG,KAAKuH,YAExBX,EAAWG,EAAQ3D,KACnBuD,EAAWI,EAAQxF,MACnBsF,EAAYH,GAEZC,GAAYI,EAAQ5D,WAExB,CACIuD,IAAiB1G,KAAKI,OACxBqG,EAAYT,EAAaO,EAAiBK,EACnB,QAAnB5G,KAAK0H,YACPjB,EAAYzG,KAAKuB,MAAQkF,EAAYE,GAEvCtC,EAAI0B,UAAYW,EAChBrC,EAAIiD,SACFb,EACAP,EACAS,EACAP,EAAepG,KAAKuH,aAGxBrB,GAAiBE,CACnB,CACA/B,EAAI0B,UAAYD,EAGhB9F,KAAK2H,cAActD,EACrB,CAYAuD,YAAAA,CACEC,EACA/C,EACAgD,EACAC,GAEA,MAAMC,EAAYC,EAAMC,aAAapD,GACnCqD,EAAkBnI,KAAKsF,oBAAoBR,GAC3CsD,EAASN,EAAeD,EACxBQ,EACEP,GACAK,IAAoBnI,KAAKsF,oBAAoByC,GAC/CO,EAAiBxD,EAAUb,SAAWjE,KAAKuI,gBAC7C,IAAIhH,EACFiH,EACAC,EACAtF,EAYF,GAVI2E,QAA4CY,IAA5BV,EAAUF,KAC5BW,EAAgBT,EAAUF,SAEHY,IAArBV,EAAUH,KACZ1E,EAAc5B,EAAQyG,EAAUH,IAE9BQ,QAAwCK,IAAtBV,EAAUI,KAC9BI,EAAcR,EAAUI,GACxBjF,EAAcqF,EAAcC,QAGlBC,IAAVnH,QACkBmH,IAAlBD,QACgBC,IAAhBF,EACA,CACA,MAAMnE,EAzwBZ,WACE,IAAKlF,EAAkB,CACrB,MAAMwJ,EAASC,IACfD,EAAOpH,MAAQoH,EAAOnH,OAAS,EAC/BrC,EAAmBwJ,EAAOE,WAAW,KACvC,CACA,OAAO1J,CACT,CAkwBkB2J,GAEZ9I,KAAKuE,eAAeF,EAAKS,GAAW,QACtB4D,IAAVnH,IACF4B,EAAc5B,EAAQ8C,EAAI0E,YAAYlB,GAAOtG,MAC7CyG,EAAUH,GAAStG,QAECmH,IAAlBD,GAA+BJ,GAAkBP,IACnDW,EAAgBpE,EAAI0E,YAAYjB,GAAcvG,MAC9CyG,EAAUF,GAAgBW,GAExBJ,QAAkCK,IAAhBF,IAEpBA,EAAcnE,EAAI0E,YAAYX,GAAQ7G,MACtCyG,EAAUI,GAAUI,EAEpBrF,EAAcqF,EAAcC,EAEhC,CACA,MAAO,CACLlH,MAAOA,EAAQ+G,EACfnF,YAAaA,EAAemF,EAEhC,CAQAU,eAAAA,CAAgB3G,EAAcwF,GAC5B,OAAO7H,KAAK8G,qBAAqBzE,EAAMwF,EAAO,WAChD,CAMAoB,WAAAA,CAAY5F,GACV,MAAM6F,EAAWlJ,KAAKmJ,aAAa9F,GAOnC,OANyB,IAArBrD,KAAKoJ,cACPF,EAAS3H,OAASvB,KAAKqJ,0BAErBH,EAAS3H,MAAQ,IACnB2H,EAAS3H,MAAQ,GAEZ2H,CACT,CAQAC,YAAAA,CAAa9F,GACX,IACEiG,EACAC,EAFEhI,EAAQ,EAIZ,MAAMiI,EAAUxJ,KAAKyJ,WAAaC,EAChCtJ,EAAOJ,KAAKI,KACZiC,EAAOrC,KAAKe,WAAWsC,GACvBsG,EAAUtH,EAAKK,OACfkH,EAAa,IAAIC,MAAoBF,GAEvC3J,KAAKgD,aAAaK,GAAauG,EAC/B,IAAK,IAAIpH,EAAI,EAAGA,EAAImH,EAASnH,IAAK,CAChC,MAAMsH,EAAWzH,EAAKG,GACtB+G,EAAevJ,KAAK+J,gBAAgBD,EAAUzG,EAAWb,EAAG8G,GAC5DM,EAAWpH,GAAK+G,EAChBhI,GAASgI,EAAapG,YACtBmG,EAAeQ,CACjB,CAUA,GAPAF,EAAWD,GAAW,CACpBvG,KAAMmG,EAAeA,EAAanG,KAAOmG,EAAahI,MAAQ,EAC9DA,MAAO,EACP4B,YAAa,EACb3B,OAAQxB,KAAKiE,SACb+F,OAAQ,GAEN5J,GAAQA,EAAKI,aAAc,CAC7B,IAAIyJ,EAAiB,EACrB,MAAMC,EACJ9J,EAAKI,aAAaJ,EAAKI,aAAakC,OAAS,GAAGA,OAClD,OAAQ1C,KAAK6B,WACX,KAAKsI,EACHF,EAAiBT,EAAUU,EAAkB3I,EAAQ,EACrD,MACF,KAAK2D,EACH+E,GAAkBC,EAAkB3I,GAAS,EAC7C,MACF,KAAKmI,EACHO,EAAiBT,EAAU,EAAIU,EAAkB3I,EAIrD0I,GAAkBjK,KAAKoK,iBAAmBZ,GAAW,EAAI,GACzD,IACE,IAAIhH,EAAIgH,EAAUG,EAAU,EAAI,EAChCH,EAAUhH,GAAK,EAAIA,EAAImH,EACvBH,EAAUhH,IAAMA,IAEhB+G,EAAeK,EAAWpH,GACtByH,EAAiBC,EACnBD,GAAkBC,EACTD,EAAiB,IAC1BA,GAAkBC,GAIpBlK,KAAKqK,mBAAmBJ,EAAgBV,GACxCU,GAAkBV,EAAapG,WAEnC,CACA,MAAO,CAAE5B,MAAOA,EAAO+I,YAAa,EACtC,CAUAD,kBAAAA,CAAmBJ,EAAwBV,GACzC,MAAMgB,EAAiBN,EAAiBV,EAAapG,YAAc,EACjE/C,EAAOJ,KAAKI,KAGRoK,EAAOC,EAAerK,EAAKA,KAAMmK,EAAgBnK,EAAKI,cAC5D+I,EAAarC,WAAasD,EAAKE,EAAItK,EAAKuK,WAAWD,EACnDnB,EAAapC,UAAYqD,EAAKI,EAAIxK,EAAKuK,WAAWC,EAClDrB,EAAalC,MAAQmD,EAAKnD,OAASrH,KAAKyJ,WAAaC,EAAQmB,KAAKC,GAAK,EACzE,CAUAf,eAAAA,CACED,EACAzG,EACAK,EACA4F,EACAyB,GAEA,MAAMC,EAAQhL,KAAKiL,4BAA4B5H,EAAWK,GACxDwH,EAAY5B,EACRtJ,KAAKiL,4BAA4B5H,EAAWK,EAAY,GACxD,CAAE,EACN8G,EAAOxK,KAAK4H,aAAakC,EAAUkB,EAAO1B,EAAc4B,GAC1D,IAEE9B,EAFEjG,EAAcqH,EAAKrH,YACrB5B,EAAQiJ,EAAKjJ,MAGU,IAArBvB,KAAKoJ,cACPA,EAAcpJ,KAAKqJ,yBACnB9H,GAAS6H,EACTjG,GAAeiG,GAGjB,MAAM+B,EAAoB,CACxB5J,QACA6B,KAAM,EACN5B,OAAQwJ,EAAM/G,SACdd,cACA6G,OAAQgB,EAAMhB,QAEhB,GAAItG,EAAY,IAAMqH,EAAU,CAC9B,MAAMK,EAAcpL,KAAKgD,aAAaK,GAAWK,EAAY,GAC7DyH,EAAI/H,KACFgI,EAAYhI,KAAOgI,EAAY7J,MAAQiJ,EAAKrH,YAAcqH,EAAKjJ,KACnE,CACA,OAAO4J,CACT,CAOA9E,eAAAA,CAAgBhD,GACd,GAAIrD,KAAKqL,cAAchI,GACrB,OAAOrD,KAAKqL,cAAchI,GAK5B,IAAIiI,EAAYtL,KAAKgJ,gBAAgB3F,EAAW,GAChD,IAAK,IAAIb,EAAI,EAAGC,EAAMzC,KAAKe,WAAWsC,GAAWX,OAAQF,EAAIC,EAAKD,IAChE8I,EAAYT,KAAKU,IAAIvL,KAAKgJ,gBAAgB3F,EAAWb,GAAI8I,GAG3D,OAAQtL,KAAKqL,cAAchI,GACzBiI,EAAYtL,KAAKuH,WAAavH,KAAKwL,aACvC,CAKA5J,cAAAA,GACE,IAAI2F,EACF/F,EAAS,EACX,IAAK,IAAIgB,EAAI,EAAGC,EAAMzC,KAAKe,WAAW2B,OAAQF,EAAIC,EAAKD,IACrD+E,EAAavH,KAAKqG,gBAAgB7D,GAClChB,GAAUgB,IAAMC,EAAM,EAAI8E,EAAavH,KAAKuH,WAAaA,EAE3D,OAAO/F,CACT,CAMAyE,cAAAA,GACE,MAA0B,QAAnBjG,KAAK0H,WAAuB1H,KAAKuB,MAAQ,EAAIvB,KAAKuB,MAAQ,CACnE,CAMA4E,aAAAA,GACE,OAAQnG,KAAKwB,OAAS,CACxB,CAOAiK,iBAAAA,CACEpH,EACAoB,GAEApB,EAAI2C,OACJ,IAAI0E,EAAc,EAClB,MAAMtI,EAAOpD,KAAKiG,iBAChBP,EAAM1F,KAAKmG,gBACb,IAAK,IAAI3D,EAAI,EAAGC,EAAMzC,KAAKe,WAAW2B,OAAQF,EAAIC,EAAKD,IAAK,CAC1D,MAAM4D,EAAepG,KAAKqG,gBAAgB7D,GACxC8I,EAAYlF,EAAepG,KAAKuH,WAChCvB,EAAahG,KAAKwG,mBAAmBhE,GACvCxC,KAAKwF,gBACHC,EACApB,EACArE,KAAKe,WAAWyB,GAChBY,EAAO4C,EACPN,EAAMgG,EAAcJ,EACpB9I,GAEFkJ,GAAetF,CACjB,CACA/B,EAAIoD,SACN,CAMA5C,eAAAA,CAAgBR,IACTrE,KAAK2L,MAAS3L,KAAK6F,SAAS,UAIjC7F,KAAKyL,kBAAkBpH,EAAK,WAC9B,CAMAO,iBAAAA,CAAkBP,IACVrE,KAAK4L,QAA+B,IAArB5L,KAAK6L,cAAsB7L,KAAK8L,mBAIjD9L,KAAK+L,SAAW/L,KAAK+L,OAAOC,cAC9BhM,KAAK2H,cAActD,GAGrBA,EAAI2C,OACJhH,KAAKiM,aAAa5H,EAAKrE,KAAKkM,iBAC5B7H,EAAI8H,YACJnM,KAAKyL,kBAAkBpH,EAAK,cAC5BA,EAAI+H,YACJ/H,EAAIoD,UACN,CAWA9B,YAAAA,CACEF,EACApB,EACAhC,EACAe,EACAsC,EACArC,GAEA,MAAMkE,EAAavH,KAAKqG,gBAAgBhD,GACtCgJ,EAAYrM,KAAK6B,UAAUC,SAASC,GACpC3B,EAAOJ,KAAKI,KACZkM,GACGD,GACoB,IAArBrM,KAAKoJ,aACLpJ,KAAK8L,cAAczI,KAClBjD,EACHmM,EAA2B,QAAnBvM,KAAK0H,UACb8E,EAA0B,QAAnBxM,KAAK0H,UAAsB,GAAK,EAGvC+E,EAAmBpI,EAAIqD,UAEzB,IAAIgF,EACFC,EAEA5F,EAEA6F,EACAC,EAJAC,EAAgB,GAEhBnG,EAAW,EAWb,GAPAtC,EAAI2C,OACAyF,IAAqBzM,KAAK0H,YAC5BrD,EAAIsE,OAAOoE,aAAa,MAAOR,EAAQ,MAAQ,OAC/ClI,EAAIqD,UAAY6E,EAAQ,MAAQ,MAChClI,EAAIxC,UAAY0K,EAAQpC,EAAOT,GAEjChE,GAAQ6B,EAAavH,KAAKwH,kBAAqBxH,KAAKuH,WAChD+E,EAKF,OAFAtM,KAAKgN,YAAYvH,EAAQpB,EAAKhB,EAAW,EAAGhB,EAAK4K,KAAK,IAAK7J,EAAMsC,QACjErB,EAAIoD,UAGN,IAAK,IAAIjF,EAAI,EAAGC,EAAMJ,EAAKK,OAAS,EAAGF,GAAKC,EAAKD,IAC/CoK,EAAepK,IAAMC,GAAOzC,KAAKoJ,aAAehJ,EAChD0M,GAAiBzK,EAAKG,GACtBuE,EAAU/G,KAAKgD,aAAaK,GAAWb,GACtB,IAAbmE,GACFvD,GAAQoJ,GAAQzF,EAAQ5D,YAAc4D,EAAQxF,OAC9CoF,GAAYI,EAAQxF,OAEpBoF,GAAYI,EAAQ5D,YAElBkJ,IAAcO,GACZ5M,KAAKiD,eAAeC,KAAKb,EAAKG,MAChCoK,GAAe,GAGdA,IAEHF,EACEA,GAAe1M,KAAKiL,4BAA4B5H,EAAWb,GAC7DmK,EAAY3M,KAAKiL,4BAA4B5H,EAAWb,EAAI,GAC5DoK,EAAeM,EAAgBR,EAAaC,GAAW,IAErDC,IACExM,GACFiE,EAAI2C,OACJ3C,EAAI4C,UAAUF,EAAQG,WAAYH,EAAQI,WAC1C9C,EAAI+C,OAAOL,EAAQM,OACnBrH,KAAKgN,YACHvH,EACApB,EACAhB,EACAb,EACAsK,GACCnG,EAAW,EACZ,GAEFtC,EAAIoD,YAEJoF,EAAczJ,EACdpD,KAAKgN,YACHvH,EACApB,EACAhB,EACAb,EACAsK,EACAD,EACAnH,IAGJoH,EAAgB,GAChBJ,EAAcC,EACdvJ,GAAQoJ,EAAO7F,EACfA,EAAW,GAGftC,EAAIoD,SACN,CAaA0F,kCAAAA,CAAmCC,GACjC,MAAMC,EAAUzE,IAEdrH,EAAQvB,KAAKuB,MAAQvB,KAAK6L,YAC1BrK,EAASxB,KAAKwB,OAASxB,KAAK6L,YAC5ByB,EAAOD,EAAQxE,WAAW,MAa5B,OAZAwE,EAAQ9L,MAAQA,EAChB8L,EAAQ7L,OAASA,EACjB8L,EAAKnB,YACLmB,EAAKC,OAAO,EAAG,GACfD,EAAKE,OAAOjM,EAAO,GACnB+L,EAAKE,OAAOjM,EAAOC,GACnB8L,EAAKE,OAAO,EAAGhM,GACf8L,EAAKlB,YACLkB,EAAKrG,UAAU1F,EAAQ,EAAGC,EAAS,GACnC8L,EAAKvH,UAAYqH,EAAOK,OAAOH,GAC/BtN,KAAK0N,+BAA+BJ,EAAMF,GAC1CE,EAAK3B,OACE2B,EAAKK,cAAcN,EAAS,YACrC,CAEAO,YAAAA,CACEvJ,EACAwJ,EACAT,GAEA,IAAIU,EAAiBC,EACrB,OAAIC,EAASZ,GAEwC,eAAhDA,EAA8Ba,eAC9Bb,EAA8Bc,mBAC9Bd,EAAmBe,kBAMpBL,GAAW9N,KAAKuB,MAAQ,EACxBwM,GAAW/N,KAAKwB,OAAS,EACzB6C,EAAI4C,UAAU6G,EAASC,GACvB1J,EAAIwJ,GAAY7N,KAAKmN,mCAAmCC,GACjD,CAAEU,UAASC,aAGlB1J,EAAIwJ,GAAYT,EAAOK,OAAOpJ,GACvBrE,KAAK0N,+BAA+BrJ,EAAK+I,KAIlD/I,EAAIwJ,GAAYT,EAEX,CAAEU,QAAS,EAAGC,QAAS,GAChC,CASAK,gBAAAA,CACE/J,EAA6BgK,GAK7B,IAJAzC,OACEA,EAAMC,YACNA,GAC6DwC,EAO/D,OALAhK,EAAIiK,UAAYzC,EAChBxH,EAAIkK,QAAUvO,KAAKwO,cACnBnK,EAAIoK,eAAiBzO,KAAK0O,iBAC1BrK,EAAIsK,SAAW3O,KAAK4O,eACpBvK,EAAIwK,WAAa7O,KAAK8O,iBACf9O,KAAK4N,aAAavJ,EAAK,cAAeuH,EAC/C,CASAmD,cAAAA,CAAe1K,EAA6B2K,GAAgC,IAA9BrD,KAAEA,GAA0BqD,EACxE,OAAOhP,KAAK4N,aAAavJ,EAAK,YAAasH,EAC7C,CAaAqB,WAAAA,CACEvH,EACApB,EACAhB,EACAK,EACAmE,EACAzE,EACAsC,GAEA,MAAMuJ,EAAOjP,KAAKkP,qBAAqB7L,EAAWK,GAChDyL,EAAWnP,KAAKiL,4BAA4B5H,EAAWK,GACvD0L,EAAwB,aAAX3J,GAAyB0J,EAASxD,KAC/C0D,EACa,eAAX5J,GAA2B0J,EAASvD,QAAUuD,EAAStD,YAE3D,GAAKwD,GAAiBD,EAAtB,CAcA,GAXA/K,EAAI2C,OAEJ3C,EAAIgB,KAAOrF,KAAKsF,oBAAoB6J,GAEhCF,EAAKrJ,qBACP5F,KAAK2H,cAActD,GAEjB4K,EAAKjF,SACPtE,GAAOuJ,EAAKjF,QAGVoF,EAAY,CACd,MAAME,EAActP,KAAK+O,eAAe1K,EAAK8K,GAC7C9K,EAAIkL,SACF1H,EACAzE,EAAOkM,EAAYxB,QACnBpI,EAAM4J,EAAYvB,QAEtB,CAEA,GAAIsB,EAAc,CAChB,MAAMG,EAAgBxP,KAAKoO,iBAAiB/J,EAAK8K,GACjD9K,EAAIoL,WACF5H,EACAzE,EAAOoM,EAAc1B,QACrBpI,EAAM8J,EAAczB,QAExB,CAEA1J,EAAIoD,SA9BJ,CA+BF,CAOAiI,cAAAA,CAAeC,EAAeC,GAC5B5P,KAAK6P,WAAWF,EAAOC,EAAK5P,KAAK8P,YACnC,CAOAC,YAAAA,CAAaJ,EAAeC,GAC1B5P,KAAK6P,WAAWF,EAAOC,EAAK5P,KAAKgQ,UACnC,CASUH,UAAAA,CACRF,EACAC,EACAK,GAKA,MAAMC,EAAMlQ,KAAKuD,oBAAoBoM,GAAO,GAC1C1L,EAAWjE,KAAK8G,qBACdoJ,EAAI7M,UACJ6M,EAAIxM,UACJ,YAEFyM,EAAKnQ,KAAK8G,qBAAqBoJ,EAAI7M,UAAW6M,EAAIxM,UAAW,UAC7DsH,EAAQ,CACN/G,SAAUA,EAAWgM,EAAOG,KAC5BpG,OAAQmG,EAAKlM,EAAWgM,EAAOI,UAEnCrQ,KAAKsQ,mBAAmBtF,EAAO2E,EAAOC,EACxC,CAOApJ,kBAAAA,CAAmBnD,GACjB,MAAMiL,EAAYtO,KAAK4C,aAAaS,GAClCkN,EAAWvQ,KAAKuB,MAAQ+M,EACxBzM,EAAY7B,KAAK6B,UACjB6F,EAAY1H,KAAK0H,UACjB/E,EAAkB3C,KAAK2C,gBAAgBU,GACzC,IAAI2C,EAAa,EACjB,OACEnE,IAAcE,GACbF,IAAc2O,IAAmB7N,GACjCd,IAAc4O,IAAkB9N,GAChCd,IAAc6O,IAAiB/N,EAEzB,GAELd,IAAcqD,IAChBc,EAAauK,EAAW,GAEtB1O,IAAc6H,IAChB1D,EAAauK,GAEX1O,IAAc2O,IAChBxK,EAAauK,EAAW,GAEtB1O,IAAc4O,IAChBzK,EAAauK,GAEG,QAAd7I,IAEA7F,IAAc6H,GACd7H,IAAcE,GACdF,IAAc4O,EAEdzK,EAAa,EACJnE,IAAcsI,GAAQtI,IAAc6O,EAC7C1K,GAAcuK,EACL1O,IAAcqD,GAAUrD,IAAc2O,IAC/CxK,GAAcuK,EAAW,IAGtBvK,EACT,CAKA3E,WAAAA,GACErB,KAAK2Q,kBAAmB,EACxB3Q,KAAK4Q,aAAe,GACpB5Q,KAAKqL,cAAgB,GACrBrL,KAAKgD,aAAe,EACtB,CASAJ,YAAAA,CAAaS,GACX,QAAqCqF,IAAjC1I,KAAK4Q,aAAavN,GACpB,OAAOrD,KAAK4Q,aAAavN,GAG3B,MAAM9B,MAAEA,GAAUvB,KAAKiJ,YAAY5F,GAEnC,OADArD,KAAK4Q,aAAavN,GAAa9B,EACxBA,CACT,CAEA8H,sBAAAA,GACE,OAAyB,IAArBrJ,KAAKoJ,YACCpJ,KAAKiE,SAAWjE,KAAKoJ,YAAe,IAEvC,CACT,CASAtC,oBAAAA,CACEzD,EACAK,EACAmK,GACS,IAAAgD,EAET,OAA2B,QAA3BA,EADkB7Q,KAAKkP,qBAAqB7L,EAAWK,GACrCmK,UAAS,IAAAgD,EAAAA,EAAI7Q,KAAK6N,EACtC,CAMApJ,qBAAAA,CACEJ,EACAyM,GAEA,IAAK9Q,KAAK8Q,KAAU9Q,KAAK6F,SAASiL,GAChC,OAEF,IAAIC,EAAY/Q,KAAKmG,gBACrB,MAAMH,EAAahG,KAAKiG,iBACtB7F,EAAOJ,KAAKI,KACZgJ,EAAcpJ,KAAKqJ,yBACnB0E,EAAU/N,KAAKgR,QAAQF,GAEzB,IAAK,IAAItO,EAAI,EAAGC,EAAMzC,KAAKe,WAAW2B,OAAQF,EAAIC,EAAKD,IAAK,CAC1D,MAAM4D,EAAepG,KAAKqG,gBAAgB7D,GAC1C,IAAKxC,KAAK8Q,KAAU9Q,KAAK6F,SAASiL,EAAMtO,GAAI,CAC1CuO,GAAa3K,EACb,QACF,CACA,MAAM/D,EAAOrC,KAAKe,WAAWyB,GACvB8I,EAAYlF,EAAepG,KAAKuH,WAChChB,EAAiBvG,KAAKwG,mBAAmBhE,GAC/C,IAIIyO,EACAC,EALAtK,EAAW,EACXD,EAAW,EACXwK,EAAiBnR,KAAK8G,qBAAqBtE,EAAG,EAAGsO,GACjDM,EAAWpR,KAAK8G,qBAAqBtE,EAAG,EAAG,QAG/C,MAAMkD,EAAMqL,EAAYzF,GAAa,EAAItL,KAAKwH,mBAC9C,IAAI4I,EAAOpQ,KAAKgJ,gBAAgBxG,EAAG,GAC/B2N,EAAKnQ,KAAK8G,qBAAqBtE,EAAG,EAAG,UACzC,IAAK,IAAIO,EAAI,EAAGuD,EAAOjE,EAAKK,OAAQK,EAAIuD,EAAMvD,IAAK,CACjD,MAAMgE,EAAU/G,KAAKgD,aAAaR,GAAGO,GACrCkO,EAAoBjR,KAAK8G,qBAAqBtE,EAAGO,EAAG+N,GACpDI,EAAclR,KAAK8G,qBAAqBtE,EAAGO,EAAG,QAC9C,MAAMsO,EAAcrR,KAAKgJ,gBAAgBxG,EAAGO,GACtCuO,EAAYtR,KAAK8G,qBAAqBtE,EAAGO,EAAG,UAClD,GAAI3C,GAAQ6Q,GAAqBC,EAC/B7M,EAAI2C,OAEJ3C,EAAI0B,UAAYqL,EAChB/M,EAAI4C,UAAUF,EAAQG,WAAYH,EAAQI,WAC1C9C,EAAI+C,OAAOL,EAAQM,OACnBhD,EAAIiD,UACDP,EAAQ5D,YAAc,EACvB4K,EAAUsD,EAAcC,EACxBvK,EAAQ5D,YACRnD,KAAKiE,SAAW,IAElBI,EAAIoD,eACC,IACJwJ,IAAsBE,GACrBD,IAAgBE,GAChBC,IAAgBjB,GAChBkB,IAAcnB,IAChBxJ,EAAW,EACX,CACA,IAAIF,EAAYT,EAAaO,EAAiBK,EACvB,QAAnB5G,KAAK0H,YACPjB,EAAYzG,KAAKuB,MAAQkF,EAAYE,GAEnCwK,GAAkBC,IAEpB/M,EAAI0B,UAAYqL,EAChB/M,EAAIiD,SACFb,EACAf,EAAMqI,EAAUqC,EAAOD,EACvBxJ,EACA3G,KAAKiE,SAAW,KAGpB2C,EAAWG,EAAQ3D,KACnBuD,EAAWI,EAAQxF,MACnB4P,EAAiBF,EACjBG,EAAWF,EACXd,EAAOiB,EACPlB,EAAKmB,CACP,MACE3K,GAAYI,EAAQ5D,WAExB,CACA,IAAIsD,EAAYT,EAAaO,EAAiBK,EACvB,QAAnB5G,KAAK0H,YACPjB,EAAYzG,KAAKuB,MAAQkF,EAAYE,GAEvCtC,EAAI0B,UAAYmL,EAChBD,GACEC,GACA7M,EAAIiD,SACFb,EACAf,EAAMqI,EAAUqC,EAAOD,EACvBxJ,EAAWyC,EACXpJ,KAAKiE,SAAW,IAEpB8M,GAAa3K,CACf,CAGApG,KAAK2H,cAActD,EACrB,CAOAiB,mBAAAA,GAaU,IAZRxB,WACEA,EAAa9D,KAAK8D,WAAUyN,UAC5BA,EAAYvR,KAAKuR,UAASC,WAC1BA,EAAaxR,KAAKwR,WAAUvN,SAC5BA,EAAWjE,KAAKiE,UAMjBwN,UAAA/O,OAAA+O,QAAA/I,IAAA+I,UAAA/I,GAAA+I,UAAG,GAAA,GACJ1M,EAAsB0M,UAAA/O,OAAA+O,EAAAA,kBAAA/I,EAEtB,MAAMgJ,EACJ5N,EAAWhC,SAAS,MACpBgC,EAAWhC,SAAS,MACpBgC,EAAWhC,SAAS,MACpB1C,EAAWuS,aAAa7P,SAASgC,EAAW8N,eACxC9N,MAAUF,OACNE,EAAa,KACvB,MAAO,CACLyN,EACAC,KAAU5N,OACPmB,EAAe/E,KAAKuI,gBAAkBtE,EACzCyN,MAAAA,GACAzE,KAAK,IACT,CAMA4E,MAAAA,CAAOxN,GACArE,KAAK8R,UAIR9R,KAAK2I,QACL3I,KAAK2I,OAAOoJ,gBACX/R,KAAKgS,QACLhS,KAAKiS,eAIJjS,KAAK2Q,kBACP3Q,KAAKM,iBAEPd,MAAMqS,OAAOxN,IACf,CAUA6N,aAAAA,CAAcC,GACZ,OAAOD,EAAcC,EACvB,CAOAvR,mBAAAA,CAAoBjB,GAClB,MAAMmB,EAAQnB,EAAKyS,MAAMpS,KAAKqS,YAC5B1R,EAAW,IAAIkJ,MAAgB/I,EAAM4B,QACrC4P,EAAU,CAAC,MACb,IAAIC,EAAoB,GACxB,IAAK,IAAI/P,EAAI,EAAGA,EAAI1B,EAAM4B,OAAQF,IAChC7B,EAAS6B,GAAKxC,KAAKkS,cAAcpR,EAAM0B,IACvC+P,EAAUA,EAAQ3O,OAAOjD,EAAS6B,GAAI8P,GAGxC,OADAC,EAAQC,MACD,CACLtR,gBAAiBP,EACjBG,MAAOA,EACPM,aAAcmR,EACdvR,cAAeL,EAEnB,CAOA8R,QAAAA,GAGsD,IAApDC,EAAwBjB,UAAA/O,OAAA,QAAAgG,IAAA+I,UAAA,GAAAA,UAAA,GAAG,GAC3B,OAAAlS,EAAAA,EAAA,CAAA,EACKC,MAAMiT,SAAS,IAAIE,KAAoBD,KAA4B,CAAA,EAAA,CACtExS,OAAQ0S,EAAc5S,KAAKE,OAAQF,KAAKL,OACpCK,KAAKI,KAAO,CAAEA,KAAMJ,KAAKI,KAAKqS,YAAe,CAAE,EAEvD,CAEAI,GAAAA,CAAIC,EAAmBX,GACrB,MAAMY,qBAAEA,GAAyB/S,KAAKN,YACtCF,MAAMqT,IAAIC,EAAKX,GACf,IAAIa,GAAY,EACZC,GAAe,EACnB,GAAmB,iBAARH,EACT,IAAK,MAAMI,KAAQJ,EACJ,SAATI,GACFlT,KAAKK,cAEP2S,EAAYA,GAAaD,EAAqBjR,SAASoR,GACvDD,EAAeA,GAAyB,SAATC,OAGjCF,EAAYD,EAAqBjR,SAASgR,GAC1CG,EAAuB,SAARH,EASjB,OAPIG,GACFjT,KAAKK,cAEH2S,GAAahT,KAAKG,cACpBH,KAAKM,iBACLN,KAAKO,aAEAP,IACT,CAMA6D,UAAAA,GACE,OAAO,CACT,CAuCA,wBAAasP,CACXC,EACAxT,EACAyT,GAEA,MAAMC,EAAmBC,EACvBH,EACAhU,EAAWoU,gBACXH,GAGFI,EAAAlU,EAAAA,EAUSK,CAAAA,EAAAA,GAAY0T,IAVfI,WACJA,EAAavJ,EAAkDwJ,eAC/DA,EAAiB,GAAEC,GACnBA,EAAK,EAACzD,GACNA,EAAK,EAACzK,IACNA,EAAM,EAACtC,KACPA,EAAO,EAACa,SACRA,EAAW4P,EAAqBhI,YAChCA,EAAc,GAEf4H,EADIK,EAAaC,EAAAN,EAAAO,GAUZrU,EAAO,IAAIK,MAPIoT,EAAQa,aAAe,IACzCC,QAAQ,iBAAkB,IAC1BA,QAAQ,OAAQ,KAKc3U,EAAA,CAC7B6D,KAAMA,EAAOwQ,EACblO,IAAKA,EAAMyK,EACXgE,UAAWR,EAAe7R,SAAS,aACnCsS,SAAUT,EAAe7R,SAAS,YAClCuS,YAAaV,EAAe7R,SAAS,gBAErC+J,YAAa,EACb5H,YACG6P,IAELQ,EAAwB3U,EAAK4U,kBAAoB5U,EAAK6B,OAGtDgT,IADG7U,EAAK6B,OAAS7B,EAAKkM,aAAelM,EAAK4H,WAAa5H,EAAK6B,QAC9B8S,EAC9BG,EAAa9U,EAAK4U,kBAAoBC,EAExC,IAAIE,EAAO,EAoBX,OAdIhB,IAAexO,IACjBwP,EAAO/U,EAAKgV,iBAAmB,GAE7BjB,IAAehK,IACjBgL,EAAO/U,EAAKgV,kBAEdhV,EAAKkT,IAAI,CACPzP,KAAMzD,EAAKyD,KAAOsR,EAClBhP,IACE/F,EAAK+F,KACJ+O,EAAa9U,EAAKsE,UAAY,IAAOtE,EAAK6H,oBACzC7H,EAAK4H,WACTsE,gBAEKlM,CACT,CASA,iBAAOiV,CAGLC,GACA,OAAO7U,KAAK8U,YAAWvV,EAAAA,KAEhBsV,GAAM,GAAA,CACT3U,OAAQ6U,EAAgBF,EAAO3U,QAAU,CAAE,EAAE2U,EAAOlV,QAEtD,CACEqV,WAAY,QAGlB,EA5vDAnV,EARWT,EAAU,uBAamB2T,GAAoBlT,EAbjDT,EAiSc,kBAAA,IAAI6V,KAAoBtC,IAAgB9S,EAjStDT,EAAU,cAmSA8V,GAAiBrV,EAnS3BT,EAAU,OAqSP,QAAMS,EArSTT,EAqoDW,eAAA,CACpB,aACA,QACA,UACA,UACA,cAKFS,EA/oDWT,EAqpDc+V,kBAAAA,EAAkBvR,OACzC,IACA,IACA,KACA,KACA,cACA,aACA,cACA,YACA,iBACA,kBACA,gBAuGJwR,EAAYhW,EAAY,CAACiW,IACzBC,EAAcC,SAASnW,GACvBkW,EAAcE,YAAYpW"}