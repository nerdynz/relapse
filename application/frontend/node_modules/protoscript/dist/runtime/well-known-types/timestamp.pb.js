// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: google/protobuf/timestamp.proto
/* eslint-disable */
import * as protoscript from "protoscript";
//========================================//
//        Protobuf Encode / Decode        //
//========================================//
export const Timestamp = {
    /**
     * Serializes Timestamp to protobuf.
     */
    encode: function (msg) {
        return Timestamp._writeMessage(msg, new protoscript.BinaryWriter()).getResultBuffer();
    },
    /**
     * Deserializes Timestamp from protobuf.
     */
    decode: function (bytes) {
        return Timestamp._readMessage(Timestamp.initialize(), new protoscript.BinaryReader(bytes));
    },
    /**
     * Initializes Timestamp with all fields set to their default value.
     */
    initialize: function (msg) {
        return {
            seconds: 0n,
            nanos: 0,
            ...msg,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg, writer) {
        if (msg.seconds) {
            writer.writeInt64String(1, msg.seconds.toString());
        }
        if (msg.nanos) {
            writer.writeInt32(2, msg.nanos);
        }
        return writer;
    },
    /**
     * @private
     */
    _readMessage: function (msg, reader) {
        while (reader.nextField()) {
            const field = reader.getFieldNumber();
            switch (field) {
                case 1: {
                    msg.seconds = BigInt(reader.readInt64String());
                    break;
                }
                case 2: {
                    msg.nanos = reader.readInt32();
                    break;
                }
                default: {
                    reader.skipField();
                    break;
                }
            }
        }
        return msg;
    },
};
//========================================//
//          JSON Encode / Decode          //
//========================================//
export const TimestampJSON = {
    /**
     * Serializes Timestamp to JSON.
     */
    encode: function (msg) {
        return JSON.stringify(TimestampJSON._writeMessage(msg));
    },
    /**
     * Deserializes Timestamp from JSON.
     */
    decode: function (json) {
        return TimestampJSON._readMessage(TimestampJSON.initialize(), JSON.parse(json));
    },
    /**
     * Initializes Timestamp with all fields set to their default value.
     */
    initialize: function (msg) {
        return {
            seconds: 0n,
            nanos: 0,
            ...msg,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg) {
        const json = {};
        if (msg.seconds) {
            json["seconds"] = String(msg.seconds);
        }
        if (msg.nanos) {
            json["nanos"] = msg.nanos;
        }
        return json;
    },
    /**
     * @private
     */
    _readMessage: function (msg, json) {
        const _seconds_ = json["seconds"];
        if (_seconds_) {
            msg.seconds = BigInt(_seconds_);
        }
        const _nanos_ = json["nanos"];
        if (_nanos_) {
            msg.nanos = protoscript.parseNumber(_nanos_);
        }
        return msg;
    },
};
