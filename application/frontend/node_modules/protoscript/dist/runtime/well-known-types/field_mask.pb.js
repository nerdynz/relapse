// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: google/protobuf/field_mask.proto
/* eslint-disable */
import * as protoscript from "protoscript";
//========================================//
//        Protobuf Encode / Decode        //
//========================================//
export const FieldMask = {
    /**
     * Serializes FieldMask to protobuf.
     */
    encode: function (msg) {
        return FieldMask._writeMessage(msg, new protoscript.BinaryWriter()).getResultBuffer();
    },
    /**
     * Deserializes FieldMask from protobuf.
     */
    decode: function (bytes) {
        return FieldMask._readMessage(FieldMask.initialize(), new protoscript.BinaryReader(bytes));
    },
    /**
     * Initializes FieldMask with all fields set to their default value.
     */
    initialize: function (msg) {
        return {
            paths: [],
            ...msg,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg, writer) {
        if (msg.paths?.length) {
            writer.writeRepeatedString(1, msg.paths);
        }
        return writer;
    },
    /**
     * @private
     */
    _readMessage: function (msg, reader) {
        while (reader.nextField()) {
            const field = reader.getFieldNumber();
            switch (field) {
                case 1: {
                    msg.paths.push(reader.readString());
                    break;
                }
                default: {
                    reader.skipField();
                    break;
                }
            }
        }
        return msg;
    },
};
//========================================//
//          JSON Encode / Decode          //
//========================================//
export const FieldMaskJSON = {
    /**
     * Serializes FieldMask to JSON.
     */
    encode: function (msg) {
        return JSON.stringify(FieldMaskJSON._writeMessage(msg));
    },
    /**
     * Deserializes FieldMask from JSON.
     */
    decode: function (json) {
        return FieldMaskJSON._readMessage(FieldMaskJSON.initialize(), JSON.parse(json));
    },
    /**
     * Initializes FieldMask with all fields set to their default value.
     */
    initialize: function (msg) {
        return {
            paths: [],
            ...msg,
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg) {
        const json = {};
        if (msg.paths?.length) {
            json["paths"] = msg.paths;
        }
        return json;
    },
    /**
     * @private
     */
    _readMessage: function (msg, json) {
        const _paths_ = json["paths"];
        if (_paths_) {
            msg.paths = _paths_;
        }
        return msg;
    },
};
