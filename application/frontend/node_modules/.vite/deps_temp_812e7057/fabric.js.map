{
  "version": 3,
  "sources": ["../../fabric/src/config.ts", "../../fabric/src/util/internals/console.ts", "../../fabric/src/filters/GLProbes/GLProbe.ts", "../../fabric/src/filters/GLProbes/WebGLProbe.ts", "../../fabric/src/env/browser.ts", "../../fabric/src/env/index.ts", "../../fabric/src/cache.ts", "../../fabric/src/constants.ts", "../../fabric/src/ClassRegistry.ts", "../../fabric/src/util/animation/AnimationRegistry.ts", "../../fabric/src/Observable.ts", "../../fabric/src/util/internals/findRight.ts", "../../fabric/src/util/internals/getRandomInt.ts", "../../fabric/src/util/internals/ifNaN.ts", "../../fabric/src/util/internals/removeFromArray.ts", "../../fabric/src/util/misc/cos.ts", "../../fabric/src/util/misc/sin.ts", "../../fabric/src/Point.ts", "../../fabric/src/Collection.ts", "../../fabric/src/CommonMethods.ts", "../../fabric/src/util/animation/AnimationFrameProvider.ts", "../../fabric/src/util/internals/uid.ts", "../../fabric/src/util/misc/dom.ts", "../../fabric/src/util/misc/radiansDegreesConversion.ts", "../../fabric/src/util/misc/matrix.ts", "../../fabric/src/util/misc/objectEnlive.ts", "../../fabric/src/util/misc/pick.ts", "../../fabric/src/color/color_map.ts", "../../fabric/src/color/util.ts", "../../fabric/src/color/Color.ts", "../../fabric/src/color/constants.ts", "../../fabric/src/util/misc/toFixed.ts", "../../fabric/src/util/misc/svgParsing.ts", "../../fabric/src/util/typeAssertions.ts", "../../fabric/src/util/dom_misc.ts", "../../fabric/src/util/dom_style.ts", "../../fabric/src/canvas/DOMManagers/util.ts", "../../fabric/src/canvas/DOMManagers/StaticCanvasDOMManager.ts", "../../fabric/src/canvas/StaticCanvasOptions.ts", "../../fabric/src/canvas/StaticCanvas.ts", "../../fabric/src/util/dom_event.ts", "../../fabric/src/util/misc/boundingBoxFromPoints.ts", "../../fabric/src/util/misc/objectTransforms.ts", "../../fabric/src/util/misc/planeChange.ts", "../../fabric/src/controls/fireEvent.ts", "../../fabric/src/util/misc/resolveOrigin.ts", "../../fabric/src/controls/util.ts", "../../fabric/src/controls/drag.ts", "../../fabric/src/shapes/Object/FabricObjectSVGExportMixin.ts", "../../fabric/src/util/animation/easing.ts", "../../fabric/src/util/animation/AnimationBase.ts", "../../fabric/src/util/animation/ValueAnimation.ts", "../../fabric/src/util/animation/ArrayAnimation.ts", "../../fabric/src/util/misc/capValue.ts", "../../fabric/src/util/animation/ColorAnimation.ts", "../../fabric/src/util/animation/animate.ts", "../../fabric/src/util/misc/vectors.ts", "../../fabric/src/Intersection.ts", "../../fabric/src/shapes/Object/ObjectOrigin.ts", "../../fabric/src/shapes/Object/ObjectGeometry.ts", "../../fabric/src/shapes/Object/StackedObject.ts", "../../fabric/src/shapes/Object/AnimatableObject.ts", "../../fabric/src/parser/getSvgRegex.ts", "../../fabric/src/parser/constants.ts", "../../fabric/src/Shadow.ts", "../../fabric/src/util/internals/cloneDeep.ts", "../../fabric/src/shapes/Object/defaultValues.ts", "../../fabric/src/shapes/Object/Object.ts", "../../fabric/src/controls/wrapWithFireEvent.ts", "../../fabric/src/controls/wrapWithFixedAnchor.ts", "../../fabric/src/controls/changeWidth.ts", "../../fabric/src/controls/controlRendering.ts", "../../fabric/src/controls/Control.ts", "../../fabric/src/controls/rotate.ts", "../../fabric/src/controls/scale.ts", "../../fabric/src/controls/skew.ts", "../../fabric/src/controls/scaleSkew.ts", "../../fabric/src/controls/commonControls.ts", "../../fabric/src/shapes/Object/InteractiveObject.ts", "../../fabric/src/util/applyMixins.ts", "../../fabric/src/shapes/Object/FabricObject.ts", "../../fabric/src/util/misc/isTransparent.ts", "../../fabric/src/util/misc/projectStroke/StrokeProjectionsBase.ts", "../../fabric/src/util/misc/projectStroke/StrokeLineJoinProjections.ts", "../../fabric/src/util/misc/projectStroke/StrokeLineCapProjections.ts", "../../fabric/src/util/misc/projectStroke/index.ts", "../../fabric/src/util/lang_string.ts", "../../fabric/src/util/misc/textStyles.ts", "../../fabric/src/parser/attributes.ts", "../../fabric/src/parser/selectorMatches.ts", "../../fabric/src/parser/elementMatchesRule.ts", "../../fabric/src/parser/doesSomeParentMatch.ts", "../../fabric/src/parser/normalizeAttr.ts", "../../fabric/src/util/internals/cleanupSvgAttribute.ts", "../../fabric/src/parser/parseTransformAttribute.ts", "../../fabric/src/parser/normalizeValue.ts", "../../fabric/src/parser/parseFontDeclaration.ts", "../../fabric/src/parser/parseStyleAttribute.ts", "../../fabric/src/parser/parseStyleString.ts", "../../fabric/src/parser/parseStyleObject.ts", "../../fabric/src/parser/setStrokeFillOpacity.ts", "../../fabric/src/parser/parseAttributes.ts", "../../fabric/src/parser/getGlobalStylesForElement.ts", "../../fabric/src/shapes/Rect.ts", "../../fabric/src/LayoutManager/constants.ts", "../../fabric/src/LayoutManager/LayoutStrategies/utils.ts", "../../fabric/src/LayoutManager/LayoutStrategies/LayoutStrategy.ts", "../../fabric/src/LayoutManager/LayoutStrategies/FitContentLayout.ts", "../../fabric/src/LayoutManager/LayoutManager.ts", "../../fabric/src/shapes/Group.ts", "../../fabric/src/util/misc/groupSVGElements.ts", "../../fabric/src/util/misc/findScaleTo.ts", "../../fabric/src/util/path/regex.ts", "../../fabric/src/util/path/index.ts", "../../fabric/src/util/internals/dom_request.ts", "../../fabric/src/util/transform_matrix_removal.ts", "../../fabric/src/util/misc/mergeClipPaths.ts", "../../fabric/src/util/misc/rotatePoint.ts", "../../fabric/src/canvas/DOMManagers/CanvasDOMManager.ts", "../../fabric/src/canvas/SelectableCanvas.ts", "../../fabric/src/canvas/CanvasOptions.ts", "../../fabric/src/canvas/TextEditingManager.ts", "../../fabric/src/canvas/Canvas.ts", "../../fabric/src/gradient/constants.ts", "../../fabric/src/parser/percent.ts", "../../fabric/src/gradient/parser/parseColorStops.ts", "../../fabric/src/gradient/parser/misc.ts", "../../fabric/src/gradient/parser/parseCoords.ts", "../../fabric/src/gradient/Gradient.ts", "../../fabric/src/Pattern/Pattern.ts", "../../fabric/src/brushes/BaseBrush.ts", "../../fabric/src/shapes/Path.ts", "../../fabric/src/brushes/PencilBrush.ts", "../../fabric/src/shapes/Circle.ts", "../../fabric/src/brushes/CircleBrush.ts", "../../fabric/src/brushes/SprayBrush.ts", "../../fabric/src/brushes/PatternBrush.ts", "../../fabric/src/shapes/Line.ts", "../../fabric/src/shapes/Triangle.ts", "../../fabric/src/shapes/Ellipse.ts", "../../fabric/src/parser/parsePointsAttribute.ts", "../../fabric/src/shapes/Polyline.ts", "../../fabric/src/shapes/Polygon.ts", "../../fabric/src/shapes/Text/constants.ts", "../../fabric/src/shapes/Text/StyledText.ts", "../../fabric/src/shapes/Text/TextSVGExportMixin.ts", "../../fabric/src/shapes/Text/Text.ts", "../../fabric/src/shapes/IText/DraggableTextDelegate.ts", "../../fabric/src/shapes/IText/ITextBehavior.ts", "../../fabric/src/shapes/IText/ITextKeyBehavior.ts", "../../fabric/src/shapes/IText/ITextClickBehavior.ts", "../../fabric/src/shapes/IText/constants.ts", "../../fabric/src/shapes/IText/IText.ts", "../../fabric/src/shapes/Textbox.ts", "../../fabric/src/LayoutManager/LayoutStrategies/ClipPathLayout.ts", "../../fabric/src/LayoutManager/LayoutStrategies/FixedLayout.ts", "../../fabric/src/LayoutManager/ActiveSelectionLayoutManager.ts", "../../fabric/src/shapes/ActiveSelection.ts", "../../fabric/src/filters/Canvas2dFilterBackend.ts", "../../fabric/src/filters/WebGLFilterBackend.ts", "../../fabric/src/filters/FilterBackend.ts", "../../fabric/src/shapes/Image.ts", "../../fabric/src/parser/applyViewboxTransform.ts", "../../fabric/src/parser/getTagName.ts", "../../fabric/src/parser/hasInvalidAncestor.ts", "../../fabric/src/parser/getMultipleNodes.ts", "../../fabric/src/parser/recursivelyParseGradientsXlink.ts", "../../fabric/src/parser/getGradientDefs.ts", "../../fabric/src/parser/getCSSRules.ts", "../../fabric/src/parser/elements_parser.ts", "../../fabric/src/parser/parseSVGDocument.ts", "../../fabric/src/parser/parseUseDirectives.ts", "../../fabric/src/parser/loadSVGFromString.ts", "../../fabric/src/parser/loadSVGFromURL.ts", "../../fabric/src/controls/polyControl.ts", "../../fabric/src/filters/utils.ts", "../../fabric/src/filters/shaders/baseFilter.ts", "../../fabric/src/filters/BaseFilter.ts", "../../fabric/src/filters/shaders/blendColor.ts", "../../fabric/src/filters/BlendColor.ts", "../../fabric/src/filters/shaders/blendImage.ts", "../../fabric/src/filters/BlendImage.ts", "../../fabric/src/filters/Blur.ts", "../../fabric/src/filters/shaders/blur.ts", "../../fabric/src/filters/Brightness.ts", "../../fabric/src/filters/shaders/brightness.ts", "../../fabric/src/filters/shaders/colorMatrix.ts", "../../fabric/src/filters/ColorMatrix.ts", "../../fabric/src/filters/ColorMatrixFilters.ts", "../../fabric/src/filters/Composed.ts", "../../fabric/src/filters/Contrast.ts", "../../fabric/src/filters/shaders/constrast.ts", "../../fabric/src/filters/shaders/convolute.ts", "../../fabric/src/filters/Convolute.ts", "../../fabric/src/filters/shaders/gamma.ts", "../../fabric/src/filters/Gamma.ts", "../../fabric/src/filters/shaders/grayscale.ts", "../../fabric/src/filters/Grayscale.ts", "../../fabric/src/filters/HueRotation.ts", "../../fabric/src/filters/Invert.ts", "../../fabric/src/filters/shaders/invert.ts", "../../fabric/src/filters/Noise.ts", "../../fabric/src/filters/shaders/noise.ts", "../../fabric/src/filters/Pixelate.ts", "../../fabric/src/filters/shaders/pixelate.ts", "../../fabric/src/filters/RemoveColor.ts", "../../fabric/src/filters/shaders/removeColor.ts", "../../fabric/src/filters/Resize.ts", "../../fabric/src/filters/Saturation.ts", "../../fabric/src/filters/shaders/saturation.ts", "../../fabric/src/filters/Vibrance.ts", "../../fabric/src/filters/shaders/vibrance.ts"],
  "sourcesContent": ["export type TConfiguration = Partial<BaseConfiguration>;\n\nclass BaseConfiguration {\n  /**\n   * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,\n   * which is unitless and not rendered equally across browsers.\n   *\n   * Values that work quite well (as of October 2017) are:\n   * - Chrome: 1.5\n   * - Edge: 1.75\n   * - Firefox: 0.9\n   * - Safari: 0.95\n   *\n   * @since 2.0.0\n   * @type Number\n   * @default 1\n   */\n  browserShadowBlurConstant = 1;\n\n  /**\n   * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\n   */\n  DPI = 96;\n\n  /**\n   * Device Pixel Ratio\n   * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n   */\n  devicePixelRatio =\n    typeof window !== 'undefined' ? window.devicePixelRatio : 1; // eslint-disable-line no-restricted-globals\n\n  /**\n   * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  perfLimitSizeTotal = 2097152;\n\n  /**\n   * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  maxCacheSideLimit = 4096;\n\n  /**\n   * Lowest pixel limit for cache canvases, set at 256PX\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  minCacheSideLimit = 256;\n\n  /**\n   * When 'true', style information is not retained when copy/pasting text, making\n   * pasted text use destination style.\n   * Defaults to 'false'.\n   * @type Boolean\n   * @default\n   * @deprecated\n   */\n  disableStyleCopyPaste = false;\n\n  /**\n   * Enable webgl for filtering picture is available\n   * A filtering backend will be initialized, this will both take memory and\n   * time since a default 2048x2048 canvas will be created for the gl context\n   * @since 2.0.0\n   * @type Boolean\n   * @default\n   */\n  enableGLFiltering = true;\n\n  /**\n   * if webgl is enabled and available, textureSize will determine the size\n   * of the canvas backend\n   *\n   * In order to support old hardware set to `2048` to avoid OOM\n   *\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  textureSize = 4096;\n\n  /**\n   * Skip performance testing of setupGLContext and force the use of putImageData that seems to be the one that works best on\n   * Chrome + old hardware. if your users are experiencing empty images after filtering you may try to force this to true\n   * this has to be set before instantiating the filtering backend ( before filtering the first image )\n   * @type Boolean\n   * @default false\n   */\n  forceGLPutImageData = false;\n\n  /**\n   * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better\n   * @default true\n   */\n  cachesBoundsOfCurve = true;\n\n  /**\n   * Map of font files\n   * Map<fontFamily, pathToFile> of font files\n   */\n  fontPaths: Record</** fontFamily */ string, /** pathToFile */ string> = {};\n\n  /**\n   * Defines the number of fraction digits to use when serializing object values.\n   * Used in exporting methods (`toObject`, `toJSON`, `toSVG`)\n   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\n   */\n  NUM_FRACTION_DIGITS = 4;\n}\n\nexport class Configuration extends BaseConfiguration {\n  constructor(config?: TConfiguration) {\n    super();\n    this.configure(config);\n  }\n\n  configure(config: TConfiguration = {}) {\n    Object.assign(this, config);\n  }\n\n  /**\n   * Map<fontFamily, pathToFile> of font files\n   */\n  addFonts(\n    paths: Record</** fontFamily */ string, /** pathToFile */ string> = {}\n  ) {\n    this.fontPaths = {\n      ...this.fontPaths,\n      ...paths,\n    };\n  }\n\n  removeFonts(fontFamilys: string[] = []) {\n    fontFamilys.forEach((fontFamily) => {\n      delete this.fontPaths[fontFamily];\n    });\n  }\n\n  clearFonts() {\n    this.fontPaths = {};\n  }\n\n  restoreDefaults<T extends BaseConfiguration>(keys?: (keyof T)[]) {\n    const defaults = new BaseConfiguration() as T;\n    const config =\n      keys?.reduce((acc, key) => {\n        acc[key] = defaults[key];\n        return acc;\n      }, {} as T) || defaults;\n    this.configure(config);\n  }\n}\n\nexport const config = new Configuration();\n", "export const log = (\n  severity: 'log' | 'warn' | 'error',\n  ...optionalParams: any[]\n) =>\n  // eslint-disable-next-line no-restricted-syntax\n  console[severity]('fabric', ...optionalParams);\n\nexport class FabricError extends Error {\n  constructor(message?: string, options?: ErrorOptions) {\n    super(`fabric: ${message}`, options);\n  }\n}\n\nexport class SignalAbortedError extends FabricError {\n  constructor(context: string) {\n    super(`${context} 'options.signal' is in 'aborted' state`);\n  }\n}\n", "export type GLPrecision = 'lowp' | 'mediump' | 'highp';\n\nexport abstract class GLProbe {\n  declare GLPrecision: GLPrecision | undefined;\n  abstract queryWebGL(canvas: HTMLCanvasElement): void;\n  abstract isSupported(textureSize: number): boolean;\n}\n", "import { log } from '../../util/internals/console';\nimport { GLProbe } from './GLProbe';\nimport type { GLPrecision } from './GLProbe';\n\n/**\n * Lazy initialize WebGL constants\n */\nexport class WebGLProbe extends GLProbe {\n  declare maxTextureSize?: number;\n\n  /**\n   * Tests if webgl supports certain precision\n   * @param {WebGL} Canvas WebGL context to test on\n   * @param {GLPrecision} Precision to test can be any of following\n   * @returns {Boolean} Whether the user's browser WebGL supports given precision.\n   */\n  private testPrecision(\n    gl: WebGLRenderingContext,\n    precision: GLPrecision\n  ): boolean {\n    const fragmentSource = `precision ${precision} float;\\nvoid main(){}`;\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    if (!fragmentShader) {\n      return false;\n    }\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    return !!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS);\n  }\n\n  /**\n   * query browser for WebGL\n   */\n  queryWebGL(canvas: HTMLCanvasElement) {\n    const gl = canvas.getContext('webgl');\n    if (gl) {\n      this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n      this.GLPrecision = (['highp', 'mediump', 'lowp'] as const).find(\n        (precision) => this.testPrecision(gl, precision)\n      );\n      gl.getExtension('WEBGL_lose_context')!.loseContext();\n      log('log', `WebGL: max texture size ${this.maxTextureSize}`);\n    }\n  }\n\n  isSupported(textureSize: number) {\n    return !!this.maxTextureSize && this.maxTextureSize >= textureSize;\n  }\n}\n", "/* eslint-disable no-restricted-globals */\nimport { WebGLProbe } from '../filters/GLProbes/WebGLProbe';\nimport type { TCopyPasteData, TFabricEnv } from './types';\n\nconst copyPasteData: TCopyPasteData = {};\n\nexport const getEnv = (): TFabricEnv => {\n  return {\n    document,\n    window,\n    isTouchSupported:\n      'ontouchstart' in window ||\n      'ontouchstart' in document ||\n      (window && window.navigator && window.navigator.maxTouchPoints > 0),\n    WebGLProbe: new WebGLProbe(),\n    dispose() {\n      // noop\n    },\n    copyPasteData,\n  };\n};\n", "/**\n * This file is consumed by fabric.\n * The `./node` and `./browser` files define the env variable that is used by this module.\n * The `./browser` module is defined to be the default env and doesn't set the env at all.\n * This is done in order to support isomorphic usage for browser and node applications\n * since window and document aren't defined at time of import in SSR, we can't set env so we avoid it by deferring to the default env.\n */\n\nimport { config } from '../config';\nimport { getEnv as getBrowserEnv } from './browser';\nimport type { TFabricEnv } from './types';\nimport type { DOMWindow } from 'jsdom';\n\nlet env: TFabricEnv;\n\n/**\n * Sets the environment variables used by fabric.\\\n * This is exposed for special cases, such as configuring a test environment, and should be used with care.\n *\n * **CAUTION**: Must be called before using the package.\n *\n * @example\n * <caption>Passing `window` and `document` objects to fabric (in case they are mocked or something)</caption>\n * import { getEnv, setEnv } from 'fabric';\n * // we want fabric to use the `window` and `document` objects exposed by the environment we are running in.\n * setEnv({ ...getEnv(), window, document });\n * // done with setup, using fabric is now safe\n */\nexport const setEnv = (value: TFabricEnv) => {\n  env = value;\n};\n\n/**\n * In order to support SSR we **MUST** access the browser env only after the window has loaded\n */\nexport const getEnv = () => env || (env = getBrowserEnv());\n\nexport const getFabricDocument = (): Document => getEnv().document;\n\nexport const getFabricWindow = (): (Window & typeof globalThis) | DOMWindow =>\n  getEnv().window;\n\n/**\n * @returns the config value if defined, fallbacks to the environment value\n */\nexport const getDevicePixelRatio = () =>\n  Math.max(config.devicePixelRatio ?? getFabricWindow().devicePixelRatio, 1);\n", "import { config } from './config';\nimport type { TRectBounds } from './typedefs';\n\nexport class Cache {\n  /**\n   * Cache of widths of chars in text rendering.\n   */\n  charWidthsCache: Record<\n    /** fontFamily */ string,\n    Record<\n      /** fontStyleCacheKey */ string,\n      Record</** char */ string, /** width */ number>\n    >\n  > = {};\n\n  /**\n   * @return {Object} reference to cache\n   */\n  getFontCache({\n    fontFamily,\n    fontStyle,\n    fontWeight,\n  }: {\n    fontFamily: string;\n    fontStyle: string;\n    fontWeight: string | number;\n  }) {\n    fontFamily = fontFamily.toLowerCase();\n    if (!this.charWidthsCache[fontFamily]) {\n      this.charWidthsCache[fontFamily] = {};\n    }\n    const fontCache = this.charWidthsCache[fontFamily];\n    const cacheKey = `${fontStyle.toLowerCase()}_${(\n      fontWeight + ''\n    ).toLowerCase()}`;\n    if (!fontCache[cacheKey]) {\n      fontCache[cacheKey] = {};\n    }\n    return fontCache[cacheKey];\n  }\n\n  /**\n   * Clear char widths cache for the given font family or all the cache if no\n   * fontFamily is specified.\n   * Use it if you know you are loading fonts in a lazy way and you are not waiting\n   * for custom fonts to load properly when adding text objects to the canvas.\n   * If a text object is added when its own font is not loaded yet, you will get wrong\n   * measurement and so wrong bounding boxes.\n   * After the font cache is cleared, either change the textObject text content or call\n   * initDimensions() to trigger a recalculation\n   * @param {String} [fontFamily] font family to clear\n   */\n  clearFontCache(fontFamily?: string) {\n    fontFamily = (fontFamily || '').toLowerCase();\n    if (!fontFamily) {\n      this.charWidthsCache = {};\n    } else if (this.charWidthsCache[fontFamily]) {\n      delete this.charWidthsCache[fontFamily];\n    }\n  }\n\n  /**\n   * Given current aspect ratio, determines the max width and height that can\n   * respect the total allowed area for the cache.\n   * @param {number} ar aspect ratio\n   * @return {number[]} Limited dimensions X and Y\n   */\n  limitDimsByArea(ar: number) {\n    const { perfLimitSizeTotal } = config;\n    const roughWidth = Math.sqrt(perfLimitSizeTotal * ar);\n    // we are not returning a point on purpose, to avoid circular dependencies\n    // this is an internal utility\n    return [\n      Math.floor(roughWidth),\n      Math.floor(perfLimitSizeTotal / roughWidth),\n    ];\n  }\n\n  /**\n   * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.\n   * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing\n   * you do not get any speed benefit and you get a big object in memory.\n   * The object was a private variable before, while now is appended to the lib so that you have access to it and you\n   * can eventually clear it.\n   * It was an internal variable, is accessible since version 2.3.4\n   */\n  boundsOfCurveCache: Record<string, TRectBounds> = {};\n}\n\nexport const cache = new Cache();\n", "import type { TMat2D } from './typedefs';\n// use this syntax so babel plugin see this import here\nimport { version } from '../package.json';\n\nexport const VERSION = version;\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop() {}\n\nexport const halfPI = Math.PI / 2;\nexport const twoMathPi = Math.PI * 2;\nexport const PiBy180 = Math.PI / 180;\n\nexport const iMatrix = Object.freeze([1, 0, 0, 1, 0, 0]) as TMat2D;\nexport const DEFAULT_SVG_FONT_SIZE = 16;\nexport const ALIASING_LIMIT = 2;\n\n/* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */\nexport const kRect = 1 - 0.5522847498;\n\nexport const CENTER = 'center';\nexport const LEFT = 'left';\nexport const TOP = 'top';\nexport const BOTTOM = 'bottom';\nexport const RIGHT = 'right';\nexport const NONE = 'none';\n\nexport const reNewline = /\\r?\\n/;\n", "import { FabricError } from './util/internals/console';\n\n/*\n * This Map connects the objects type value with their\n * class implementation. It used from any object to understand which are\n * the classes to enlive when requesting a object.type = 'path' for example.\n * Objects uses it for clipPath, Canvas uses it for everything.\n * This is necessary for generic code to run and enlive instances from serialized representation.\n * You can customize which classes get enlived from SVG parsing using this classRegistry.\n * The Registry start empty and gets filled in depending which files you import.\n * If you want to be able to parse arbitrary SVGs or JSON representation of canvases, coming from\n * different sources you will need to import all fabric because you may need all classes.\n */\n\nexport const JSON = 'json';\nexport const SVG = 'svg';\n\nexport class ClassRegistry {\n  declare [JSON]: Map<string, any>;\n  declare [SVG]: Map<string, any>;\n\n  constructor() {\n    this[JSON] = new Map();\n    this[SVG] = new Map();\n  }\n\n  getClass<T>(classType: string): T {\n    const constructor = this[JSON].get(classType);\n    if (!constructor) {\n      throw new FabricError(`No class registered for ${classType}`);\n    }\n    return constructor;\n  }\n\n  setClass(classConstructor: any, classType?: string) {\n    if (classType) {\n      this[JSON].set(classType, classConstructor);\n    } else {\n      this[JSON].set(classConstructor.type, classConstructor);\n      // legacy\n      // @TODO: needs to be removed in fabric 7 or 8\n      this[JSON].set(classConstructor.type.toLowerCase(), classConstructor);\n    }\n  }\n\n  getSVGClass(SVGTagName: string): any {\n    return this[SVG].get(SVGTagName);\n  }\n\n  setSVGClass(classConstructor: any, SVGTagName?: string) {\n    this[SVG].set(\n      SVGTagName ?? classConstructor.type.toLowerCase(),\n      classConstructor\n    );\n  }\n}\n\nexport const classRegistry = new ClassRegistry();\n", "import type { StaticCanvas } from '../../canvas/StaticCanvas';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport type { AnimationBase } from './AnimationBase';\n\n/**\n * Array holding all running animations\n */\nclass AnimationRegistry extends Array<AnimationBase> {\n  /**\n   * Remove a single animation using an animation context\n   * @param {AnimationBase} context\n   */\n  remove(context: AnimationBase) {\n    const index = this.indexOf(context);\n    index > -1 && this.splice(index, 1);\n  }\n\n  /**\n   * Cancel all running animations on the next frame\n   */\n  cancelAll() {\n    const animations = this.splice(0);\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n\n  /**\n   * Cancel all running animations attached to a canvas on the next frame\n   * @param {StaticCanvas} canvas\n   */\n  cancelByCanvas(canvas: StaticCanvas) {\n    if (!canvas) {\n      return [];\n    }\n    const animations = this.filter(\n      (animation) =>\n        animation.target === canvas ||\n        (typeof animation.target === 'object' &&\n          (animation.target as FabricObject)?.canvas === canvas)\n    );\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n\n  /**\n   * Cancel all running animations for target on the next frame\n   * @param target\n   */\n  cancelByTarget(target: AnimationBase['target']) {\n    if (!target) {\n      return [];\n    }\n    const animations = this.filter((animation) => animation.target === target);\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n}\n\nexport const runningAnimations = new AnimationRegistry();\n", "export type TEventCallback<T = any> = (options: T) => any;\n\ntype EventRegistryObject<E> = {\n  [K in keyof E]?: TEventCallback<E[K]>;\n};\n\n/**\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}\n * @see {@link http://fabricjs.com/events|Events demo}\n */\nexport class Observable<EventSpec> {\n  private __eventListeners: Record<keyof EventSpec, TEventCallback[]> =\n    {} as Record<keyof EventSpec, TEventCallback[]>;\n\n  /**\n   * Observes specified event\n   * @alias on\n   * @param {string} eventName Event name (eg. 'after:render')\n   * @param {EventRegistryObject} handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Function} disposer\n   */\n  on<K extends keyof EventSpec, E extends EventSpec[K]>(\n    eventName: K,\n    handler: TEventCallback<E>\n  ): VoidFunction;\n  on(handlers: EventRegistryObject<EventSpec>): VoidFunction;\n  on<K extends keyof EventSpec, E extends EventSpec[K]>(\n    arg0: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback<E>\n  ): VoidFunction {\n    if (!this.__eventListeners) {\n      this.__eventListeners = {} as Record<keyof EventSpec, TEventCallback[]>;\n    }\n    if (typeof arg0 === 'object') {\n      // one object with key/value pairs was passed\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        this.on(eventName as K, handler as TEventCallback);\n      });\n      return () => this.off(arg0);\n    } else if (handler) {\n      const eventName = arg0;\n      if (!this.__eventListeners[eventName]) {\n        this.__eventListeners[eventName] = [];\n      }\n      this.__eventListeners[eventName].push(handler);\n      return () => this.off(eventName, handler);\n    } else {\n      // noop\n      return () => false;\n    }\n  }\n\n  /**\n   * Observes specified event **once**\n   * @alias once\n   * @param {string} eventName Event name (eg. 'after:render')\n   * @param {EventRegistryObject} handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Function} disposer\n   */\n  once<K extends keyof EventSpec, E extends EventSpec[K]>(\n    eventName: K,\n    handler: TEventCallback<E>\n  ): VoidFunction;\n  once(handlers: EventRegistryObject<EventSpec>): VoidFunction;\n  once<K extends keyof EventSpec, E extends EventSpec[K]>(\n    arg0: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback<E>\n  ): VoidFunction {\n    if (typeof arg0 === 'object') {\n      // one object with key/value pairs was passed\n      const disposers: VoidFunction[] = [];\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        disposers.push(this.once(eventName as K, handler as TEventCallback));\n      });\n      return () => disposers.forEach((d) => d());\n    } else if (handler) {\n      const disposer = this.on<K, E>(\n        arg0,\n        function onceHandler(this: Observable<EventSpec>, ...args) {\n          handler.call(this, ...args);\n          disposer();\n        }\n      );\n      return disposer;\n    } else {\n      // noop\n      return () => false;\n    }\n  }\n\n  /**\n   * @private\n   * @param {string} eventName\n   * @param {Function} [handler]\n   */\n  private _removeEventListener<K extends keyof EventSpec>(\n    eventName: K,\n    handler?: TEventCallback\n  ) {\n    if (!this.__eventListeners[eventName]) {\n      return;\n    }\n\n    if (handler) {\n      const eventListener = this.__eventListeners[eventName];\n      const index = eventListener.indexOf(handler);\n      index > -1 && eventListener.splice(index, 1);\n    } else {\n      this.__eventListeners[eventName] = [];\n    }\n  }\n\n  /**\n   * unsubscribe an event listener\n   * @param {string} eventName event name (eg. 'after:render')\n   * @param {TEventCallback} handler event listener to unsubscribe\n   */\n  off<K extends keyof EventSpec>(eventName: K, handler: TEventCallback): void;\n  /**\n   * unsubscribe event listeners\n   * @param handlers handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   */\n  off(handlers: EventRegistryObject<EventSpec>): void;\n  /**\n   * unsubscribe all event listeners\n   */\n  off(): void;\n  off<K extends keyof EventSpec>(\n    arg0?: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback\n  ) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    // remove all key/value pairs (event name -> event handler)\n    if (typeof arg0 === 'undefined') {\n      for (const eventName in this.__eventListeners) {\n        this._removeEventListener(eventName);\n      }\n    }\n    // one object with key/value pairs was passed\n    else if (typeof arg0 === 'object') {\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        this._removeEventListener(eventName as K, handler as TEventCallback);\n      });\n    } else {\n      this._removeEventListener(arg0, handler);\n    }\n  }\n\n  /**\n   * Fires event with an optional options object\n   * @param {String} eventName Event name to fire\n   * @param {Object} [options] Options object\n   */\n  fire<K extends keyof EventSpec>(eventName: K, options?: EventSpec[K]) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    const listenersForEvent = this.__eventListeners[eventName]?.concat();\n    if (listenersForEvent) {\n      for (let i = 0; i < listenersForEvent.length; i++) {\n        listenersForEvent[i].call(this, options || {});\n      }\n    }\n  }\n}\n", "export const findIndexRight = <T>(\n  array: T[],\n  predicate: (value: T, index: number, array: T[]) => boolean\n) => {\n  for (let index = array.length - 1; index >= 0; index--) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n};\n", "/**\n * Returns random number between 2 specified ones.\n * @param {Number} min lower limit\n * @param {Number} max upper limit\n * @return {Number} random value (between min and max)\n */\nexport const getRandomInt = (min: number, max: number): number =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n", "/**\n *\n * @param value value to check if NaN\n * @param [valueIfNaN]\n * @returns `fallback` is `value is NaN\n */\nexport const ifNaN = (value: number, valueIfNaN?: number) => {\n  return isNaN(value) && typeof valueIfNaN === 'number' ? valueIfNaN : value;\n};\n", "/**\n * Removes value from an array.\n * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\n * @param {Array} array\n * @param {*} value\n * @return {Array} original array\n */\nexport const removeFromArray = <T>(array: T[], value: T): T[] => {\n  const idx = array.indexOf(value);\n  if (idx !== -1) {\n    array.splice(idx, 1);\n  }\n  return array;\n};\n", "import type { TRadian } from '../../typedefs';\nimport { halfPI } from '../../constants';\n\n/**\n * Calculate the cos of an angle, avoiding returning floats for known results\n * This function is here just to avoid getting 0.999999999999999 when dealing\n * with numbers that are really 1 or 0.\n * @param {TRadian} angle the angle\n * @return {Number} the cosin value for angle.\n */\nexport const cos = (angle: TRadian): number => {\n  if (angle === 0) {\n    return 1;\n  }\n  const angleSlice = Math.abs(angle) / halfPI;\n  switch (angleSlice) {\n    case 1:\n    case 3:\n      return 0;\n    case 2:\n      return -1;\n  }\n  return Math.cos(angle);\n};\n", "import type { TRadian } from '../../typedefs';\nimport { halfPI } from '../../constants';\n\n/**\n * Calculate the cos of an angle, avoiding returning floats for known results\n * This function is here just to avoid getting 0.999999999999999 when dealing\n * with numbers that are really 1 or 0.\n * @param {TRadian} angle the angle\n * @return {Number} the sin value for angle.\n */\nexport const sin = (angle: TRadian): number => {\n  if (angle === 0) {\n    return 0;\n  }\n  const angleSlice = angle / halfPI;\n  const value = Math.sign(angle);\n  switch (angleSlice) {\n    case 1:\n      return value;\n    case 2:\n      return 0;\n    case 3:\n      return -value;\n  }\n  return Math.sin(angle);\n};\n", "import type { TMat2D, TRadian } from './typedefs';\nimport { cos } from './util/misc/cos';\nimport { sin } from './util/misc/sin';\n\nexport interface XY {\n  x: number;\n  y: number;\n}\n\n/**\n * Adaptation of work of Kevin Lindsey(kevin@kevlindev.com)\n */\nexport class Point implements XY {\n  declare x: number;\n\n  declare y: number;\n\n  constructor();\n  constructor(x: number, y: number);\n  constructor(point?: XY);\n  constructor(arg0: number | XY = 0, y = 0) {\n    if (typeof arg0 === 'object') {\n      this.x = arg0.x;\n      this.y = arg0.y;\n    } else {\n      this.x = arg0;\n      this.y = y;\n    }\n  }\n\n  /**\n   * Adds another point to this one and returns another one\n   * @param {XY} that\n   * @return {Point} new Point instance with added values\n   */\n  add(that: XY): Point {\n    return new Point(this.x + that.x, this.y + that.y);\n  }\n\n  /**\n   * Adds another point to this one\n   * @param {XY} that\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  addEquals(that: XY): Point {\n    this.x += that.x;\n    this.y += that.y;\n    return this;\n  }\n\n  /**\n   * Adds value to this point and returns a new one\n   * @param {Number} scalar\n   * @return {Point} new Point with added value\n   */\n  scalarAdd(scalar: number): Point {\n    return new Point(this.x + scalar, this.y + scalar);\n  }\n\n  /**\n   * Adds value to this point\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarAddEquals(scalar: number): Point {\n    this.x += scalar;\n    this.y += scalar;\n    return this;\n  }\n\n  /**\n   * Subtracts another point from this point and returns a new one\n   * @param {XY} that\n   * @return {Point} new Point object with subtracted values\n   */\n  subtract(that: XY): Point {\n    return new Point(this.x - that.x, this.y - that.y);\n  }\n\n  /**\n   * Subtracts another point from this point\n   * @param {XY} that\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  subtractEquals(that: XY): Point {\n    this.x -= that.x;\n    this.y -= that.y;\n    return this;\n  }\n\n  /**\n   * Subtracts value from this point and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarSubtract(scalar: number): Point {\n    return new Point(this.x - scalar, this.y - scalar);\n  }\n\n  /**\n   * Subtracts value from this point\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarSubtractEquals(scalar: number): Point {\n    this.x -= scalar;\n    this.y -= scalar;\n    return this;\n  }\n\n  /**\n   * Multiplies this point by another value and returns a new one\n   * @param {XY} that\n   * @return {Point}\n   */\n  multiply(that: XY): Point {\n    return new Point(this.x * that.x, this.y * that.y);\n  }\n\n  /**\n   * Multiplies this point by a value and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarMultiply(scalar: number): Point {\n    return new Point(this.x * scalar, this.y * scalar);\n  }\n\n  /**\n   * Multiplies this point by a value\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarMultiplyEquals(scalar: number): Point {\n    this.x *= scalar;\n    this.y *= scalar;\n    return this;\n  }\n\n  /**\n   * Divides this point by another and returns a new one\n   * @param {XY} that\n   * @return {Point}\n   */\n  divide(that: XY): Point {\n    return new Point(this.x / that.x, this.y / that.y);\n  }\n\n  /**\n   * Divides this point by a value and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarDivide(scalar: number): Point {\n    return new Point(this.x / scalar, this.y / scalar);\n  }\n\n  /**\n   * Divides this point by a value\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarDivideEquals(scalar: number): Point {\n    this.x /= scalar;\n    this.y /= scalar;\n    return this;\n  }\n\n  /**\n   * Returns true if this point is equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  eq(that: XY): boolean {\n    return this.x === that.x && this.y === that.y;\n  }\n\n  /**\n   * Returns true if this point is less than another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  lt(that: XY): boolean {\n    return this.x < that.x && this.y < that.y;\n  }\n\n  /**\n   * Returns true if this point is less than or equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  lte(that: XY): boolean {\n    return this.x <= that.x && this.y <= that.y;\n  }\n\n  /**\n\n   * Returns true if this point is greater another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  gt(that: XY): boolean {\n    return this.x > that.x && this.y > that.y;\n  }\n\n  /**\n   * Returns true if this point is greater than or equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  gte(that: XY): boolean {\n    return this.x >= that.x && this.y >= that.y;\n  }\n\n  /**\n   * Returns new point which is the result of linear interpolation with this one and another one\n   * @param {XY} that\n   * @param {Number} t , position of interpolation, between 0 and 1 default 0.5\n   * @return {Point}\n   */\n  lerp(that: XY, t = 0.5): Point {\n    t = Math.max(Math.min(1, t), 0);\n    return new Point(\n      this.x + (that.x - this.x) * t,\n      this.y + (that.y - this.y) * t\n    );\n  }\n\n  /**\n   * Returns distance from this point and another one\n   * @param {XY} that\n   * @return {Number}\n   */\n  distanceFrom(that: XY): number {\n    const dx = this.x - that.x,\n      dy = this.y - that.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  /**\n   * Returns the point between this point and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  midPointFrom(that: XY): Point {\n    return this.lerp(that);\n  }\n\n  /**\n   * Returns a new point which is the min of this and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  min(that: XY): Point {\n    return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\n  }\n\n  /**\n   * Returns a new point which is the max of this and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  max(that: XY): Point {\n    return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\n  }\n\n  /**\n   * Returns string representation of this point\n   * @return {String}\n   */\n  toString(): string {\n    return `${this.x},${this.y}`;\n  }\n\n  /**\n   * Sets x/y of this point\n   * @param {Number} x\n   * @param {Number} y\n   * @chainable\n   */\n  setXY(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets x of this point\n   * @param {Number} x\n   * @chainable\n   */\n  setX(x: number) {\n    this.x = x;\n    return this;\n  }\n\n  /**\n   * Sets y of this point\n   * @param {Number} y\n   * @chainable\n   */\n  setY(y: number) {\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets x/y of this point from another point\n   * @param {XY} that\n   * @chainable\n   */\n  setFromPoint(that: XY) {\n    this.x = that.x;\n    this.y = that.y;\n    return this;\n  }\n\n  /**\n   * Swaps x/y of this point and another point\n   * @param {XY} that\n   */\n  swap(that: XY) {\n    const x = this.x,\n      y = this.y;\n    this.x = that.x;\n    this.y = that.y;\n    that.x = x;\n    that.y = y;\n  }\n\n  /**\n   * return a cloned instance of the point\n   * @return {Point}\n   */\n  clone(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * Rotates `point` around `origin` with `radians`\n   * @static\n   * @memberOf fabric.util\n   * @param {XY} origin The origin of the rotation\n   * @param {TRadian} radians The radians of the angle for the rotation\n   * @return {Point} The new rotated point\n   */\n  rotate(radians: TRadian, origin: XY = ZERO): Point {\n    // TODO benchmark and verify the add and subtract how much cost\n    // and then in case early return if no origin is passed\n    const sinus = sin(radians),\n      cosinus = cos(radians);\n    const p = this.subtract(origin);\n    const rotated = new Point(\n      p.x * cosinus - p.y * sinus,\n      p.x * sinus + p.y * cosinus\n    );\n    return rotated.add(origin);\n  }\n\n  /**\n   * Apply transform t to point p\n   * @static\n   * @memberOf fabric.util\n   * @param  {TMat2D} t The transform\n   * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n   * @return {Point} The transformed point\n   */\n  transform(t: TMat2D, ignoreOffset = false): Point {\n    return new Point(\n      t[0] * this.x + t[2] * this.y + (ignoreOffset ? 0 : t[4]),\n      t[1] * this.x + t[3] * this.y + (ignoreOffset ? 0 : t[5])\n    );\n  }\n}\n\nexport const ZERO = new Point(0, 0);\n", "import type { Constructor, TBBox } from './typedefs';\nimport { removeFromArray } from './util/internals';\nimport { Point } from './Point';\nimport type { ActiveSelection } from './shapes/ActiveSelection';\nimport type { Group } from './shapes/Group';\nimport type { InteractiveFabricObject } from './shapes/Object/InteractiveObject';\nimport type { FabricObject } from './shapes/Object/FabricObject';\n\nexport const isCollection = (\n  fabricObject?: FabricObject\n): fabricObject is Group | ActiveSelection => {\n  return !!fabricObject && Array.isArray((fabricObject as Group)._objects);\n};\n\nexport function createCollectionMixin<TBase extends Constructor>(Base: TBase) {\n  class Collection extends Base {\n    /**\n     * @type {FabricObject[]}\n     * @TODO needs to end up in the constructor too\n     */\n    _objects: FabricObject[] = [];\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onObjectAdded(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onObjectRemoved(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onStackOrderChanged(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    /**\n     * Adds objects to collection\n     * Objects should be instances of (or inherit from) FabricObject\n     * @param {...FabricObject[]} objects to add\n     * @returns {number} new array length\n     */\n    add(...objects: FabricObject[]): number {\n      const size = this._objects.push(...objects);\n      objects.forEach((object) => this._onObjectAdded(object));\n      return size;\n    }\n\n    /**\n     * Inserts an object into collection at specified index\n     * @param {number} index Index to insert object at\n     * @param {...FabricObject[]} objects Object(s) to insert\n     * @returns {number} new array length\n     */\n    insertAt(index: number, ...objects: FabricObject[]) {\n      this._objects.splice(index, 0, ...objects);\n      objects.forEach((object) => this._onObjectAdded(object));\n      return this._objects.length;\n    }\n\n    /**\n     * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n     * @private\n     * @param {...FabricObject[]} objects objects to remove\n     * @returns {FabricObject[]} removed objects\n     */\n    remove(...objects: FabricObject[]) {\n      const array = this._objects,\n        removed: FabricObject[] = [];\n      objects.forEach((object) => {\n        const index = array.indexOf(object);\n        // only call onObjectRemoved if an object was actually removed\n        if (index !== -1) {\n          array.splice(index, 1);\n          removed.push(object);\n          this._onObjectRemoved(object);\n        }\n      });\n      return removed;\n    }\n\n    /**\n     * Executes given function for each object in this group\n     * A simple shortcut for getObjects().forEach, before es6 was more complicated,\n     * now is just a shortcut.\n     * @param {Function} callback\n     *                   Callback invoked with current object as first argument,\n     *                   index - as second and an array of all objects - as third.\n     */\n    forEachObject(\n      callback: (\n        object: FabricObject,\n        index: number,\n        array: FabricObject[]\n      ) => any\n    ) {\n      this.getObjects().forEach((object, index, objects) =>\n        callback(object, index, objects)\n      );\n    }\n\n    /**\n     * Returns an array of children objects of this instance\n     * @param {...String} [types] When specified, only objects of these types are returned\n     * @return {Array}\n     */\n    getObjects(...types: string[]) {\n      if (types.length === 0) {\n        return [...this._objects];\n      }\n      return this._objects.filter((o) => o.isType(...types));\n    }\n\n    /**\n     * Returns object at specified index\n     * @param {Number} index\n     * @return {Object} object at index\n     */\n    item(index: number) {\n      return this._objects[index];\n    }\n\n    /**\n     * Returns true if collection contains no objects\n     * @return {Boolean} true if collection is empty\n     */\n    isEmpty() {\n      return this._objects.length === 0;\n    }\n\n    /**\n     * Returns a size of a collection (i.e: length of an array containing its objects)\n     * @return {Number} Collection size\n     */\n    size() {\n      return this._objects.length;\n    }\n\n    /**\n     * Returns true if collection contains an object.\\\n     * **Prefer using {@link FabricObject#isDescendantOf} for performance reasons**\n     * instead of `a.contains(b)` use `b.isDescendantOf(a)`\n     * @param {Object} object Object to check against\n     * @param {Boolean} [deep=false] `true` to check all descendants, `false` to check only `_objects`\n     * @return {Boolean} `true` if collection contains an object\n     */\n    contains(object: FabricObject, deep?: boolean): boolean {\n      if (this._objects.includes(object)) {\n        return true;\n      } else if (deep) {\n        return this._objects.some(\n          (obj) =>\n            obj instanceof Collection &&\n            (obj as unknown as Collection).contains(object, true)\n        );\n      }\n      return false;\n    }\n\n    /**\n     * Returns number representation of a collection complexity\n     * @return {Number} complexity\n     */\n    complexity() {\n      return this._objects.reduce((memo, current) => {\n        memo += current.complexity ? current.complexity() : 0;\n        return memo;\n      }, 0);\n    }\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the bottom of the stack of drawn objects\n     * @param {fabric.Object} object Object to send to back\n     * @returns {boolean} true if change occurred\n     */\n    sendObjectToBack(object: FabricObject) {\n      if (!object || object === this._objects[0]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.unshift(object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the top of the stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @returns {boolean} true if change occurred\n     */\n    bringObjectToFront(object: FabricObject) {\n      if (!object || object === this._objects[this._objects.length - 1]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.push(object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    /**\n     * Moves an object or a selection down in stack of drawn objects\n     * An optional parameter, `intersecting` allows to move the object in behind\n     * the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {boolean} [intersecting] If `true`, send object behind next lower intersecting object\n     * @returns {boolean} true if change occurred\n     */\n    sendObjectBackwards(object: FabricObject, intersecting?: boolean) {\n      if (!object) {\n        return false;\n      }\n      const idx = this._objects.indexOf(object);\n      if (idx !== 0) {\n        // if object is not on the bottom of stack\n        const newIdx = this.findNewLowerIndex(object, idx, intersecting);\n        removeFromArray(this._objects, object);\n        this._objects.splice(newIdx, 0, object);\n        this._onStackOrderChanged(object);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Moves an object or a selection up in stack of drawn objects\n     * An optional parameter, intersecting allows to move the object in front\n     * of the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n     * @returns {boolean} true if change occurred\n     */\n    bringObjectForward(object: FabricObject, intersecting?: boolean) {\n      if (!object) {\n        return false;\n      }\n      const idx = this._objects.indexOf(object);\n      if (idx !== this._objects.length - 1) {\n        // if object is not on top of stack (last item in an array)\n        const newIdx = this.findNewUpperIndex(object, idx, intersecting);\n        removeFromArray(this._objects, object);\n        this._objects.splice(newIdx, 0, object);\n        this._onStackOrderChanged(object);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Moves an object to specified level in stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @param {number} index Position to move to\n     * @returns {boolean} true if change occurred\n     */\n    moveObjectTo(object: FabricObject, index: number) {\n      if (object === this._objects[index]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.splice(index, 0, object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    findNewLowerIndex(\n      object: FabricObject,\n      idx: number,\n      intersecting?: boolean\n    ) {\n      let newIdx;\n\n      if (intersecting) {\n        newIdx = idx;\n        // traverse down the stack looking for the nearest intersecting object\n        for (let i = idx - 1; i >= 0; --i) {\n          if (object.isOverlapping(this._objects[i])) {\n            newIdx = i;\n            break;\n          }\n        }\n      } else {\n        newIdx = idx - 1;\n      }\n\n      return newIdx;\n    }\n\n    findNewUpperIndex(\n      object: FabricObject,\n      idx: number,\n      intersecting?: boolean\n    ) {\n      let newIdx;\n\n      if (intersecting) {\n        newIdx = idx;\n        // traverse up the stack looking for the nearest intersecting object\n        for (let i = idx + 1; i < this._objects.length; ++i) {\n          if (object.isOverlapping(this._objects[i])) {\n            newIdx = i;\n            break;\n          }\n        }\n      } else {\n        newIdx = idx + 1;\n      }\n\n      return newIdx;\n    }\n\n    /**\n     * Given a bounding box, return all the objects of the collection that are contained in the bounding box.\n     * If `includeIntersecting` is true, return also the objects that intersect the bounding box as well.\n     * This is meant to work with selection. Is not a generic method.\n     * @param {TBBox} bbox a bounding box in scene coordinates\n     * @param {{ includeIntersecting?: boolean }} options an object with includeIntersecting\n     * @returns array of objects contained in the bounding box, ordered from top to bottom stacking wise\n     */\n    collectObjects(\n      { left, top, width, height }: TBBox,\n      { includeIntersecting = true }: { includeIntersecting?: boolean } = {}\n    ) {\n      const objects: InteractiveFabricObject[] = [],\n        tl = new Point(left, top),\n        br = tl.add(new Point(width, height));\n\n      // we iterate reverse order to collect top first in case of click.\n      for (let i = this._objects.length - 1; i >= 0; i--) {\n        const object = this._objects[i] as unknown as InteractiveFabricObject;\n        if (\n          object.selectable &&\n          object.visible &&\n          ((includeIntersecting && object.intersectsWithRect(tl, br)) ||\n            object.isContainedWithinRect(tl, br) ||\n            (includeIntersecting && object.containsPoint(tl)) ||\n            (includeIntersecting && object.containsPoint(br)))\n        ) {\n          objects.push(object);\n        }\n      }\n\n      return objects;\n    }\n  }\n\n  // https://github.com/microsoft/TypeScript/issues/32080\n  return Collection as typeof Collection & TBase;\n}\n", "import { Observable } from './Observable';\n\nexport class CommonMethods<EventSpec> extends Observable<EventSpec> {\n  /**\n   * Sets object's properties from options, for initialization only\n   * @protected\n   * @param {Object} [options] Options object\n   */\n  protected _setOptions(options: any = {}) {\n    for (const prop in options) {\n      this.set(prop, options[prop]);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setObject(obj: Record<string, any>) {\n    for (const prop in obj) {\n      this._set(prop, obj[prop]);\n    }\n  }\n\n  /**\n   * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n   * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n   * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n   */\n  set(key: string | Record<string, any>, value?: any) {\n    if (typeof key === 'object') {\n      this._setObject(key);\n    } else {\n      this._set(key, value);\n    }\n    return this;\n  }\n\n  _set(key: string, value: any) {\n    this[key as keyof this] = value;\n  }\n\n  /**\n   * Toggles specified property from `true` to `false` or from `false` to `true`\n   * @param {String} property Property to toggle\n   */\n  toggle(property: string) {\n    const value = this.get(property);\n    if (typeof value === 'boolean') {\n      this.set(property, !value);\n    }\n    return this;\n  }\n\n  /**\n   * Basic getter\n   * @param {String} property Property name\n   * @return {*} value of a property\n   */\n  get(property: string): any {\n    return this[property as keyof this];\n  }\n}\n", "import { getFabricWindow } from '../../env';\n\nexport function requestAnimFrame(callback: FrameRequestCallback): number {\n  return getFabricWindow().requestAnimationFrame(callback);\n}\n\nexport function cancelAnimFrame(handle: number): void {\n  return getFabricWindow().cancelAnimationFrame(handle);\n}\n", "let id = 0;\n\nexport const uid = () => id++;\n", "import { getFabricDocument } from '../../env';\nimport type { ImageFormat } from '../../typedefs';\nimport { FabricError } from '../internals/console';\n/**\n * Creates canvas element\n * @return {CanvasElement} initialized canvas element\n */\nexport const createCanvasElement = (): HTMLCanvasElement => {\n  const element = getFabricDocument().createElement('canvas');\n  if (!element || typeof element.getContext === 'undefined') {\n    throw new FabricError('Failed to create `canvas` element');\n  }\n  return element;\n};\n\n/**\n * Creates image element (works on client and node)\n * @return {HTMLImageElement} HTML image element\n */\nexport const createImage = (): HTMLImageElement =>\n  getFabricDocument().createElement('img');\n\n/**\n * Creates a canvas element that is a copy of another and is also painted\n * @param {CanvasElement} canvas to copy size and content of\n * @return {CanvasElement} initialized canvas element\n */\nexport const copyCanvasElement = (\n  canvas: HTMLCanvasElement\n): HTMLCanvasElement => {\n  const newCanvas = createCanvasElement();\n  newCanvas.width = canvas.width;\n  newCanvas.height = canvas.height;\n  newCanvas.getContext('2d')?.drawImage(canvas, 0, 0);\n  return newCanvas;\n};\n\n/**\n * since 2.6.0 moved from canvas instance to utility.\n * possibly useless\n * @param {CanvasElement} canvasEl to copy size and content of\n * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too\n * @param {Number} quality <= 1 and > 0\n * @return {String} data url\n */\nexport const toDataURL = (\n  canvasEl: HTMLCanvasElement,\n  format: ImageFormat,\n  quality: number\n) => canvasEl.toDataURL(`image/${format}`, quality);\n\nexport const isHTMLCanvas = (\n  canvas?: HTMLCanvasElement | string\n): canvas is HTMLCanvasElement => {\n  return !!canvas && (canvas as HTMLCanvasElement).getContext !== undefined;\n};\n", "import type { TRadian, TDegree } from '../../typedefs';\nimport { PiBy180 } from '../../constants';\n\n/**\n * Transforms degrees to radians.\n * @param {TDegree} degrees value in degrees\n * @return {TRadian} value in radians\n */\nexport const degreesToRadians = (degrees: TDegree): TRadian =>\n  (degrees * PiBy180) as TRadian;\n\n/**\n * Transforms radians to degrees.\n * @param {TRadian} radians value in radians\n * @return {TDegree} value in degrees\n */\nexport const radiansToDegrees = (radians: TRadian): TDegree =>\n  (radians / PiBy180) as TDegree;\n", "import { iMatrix } from '../../constants';\nimport type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport type { TDegree, TRadian, TMat2D } from '../../typedefs';\nimport { cos } from './cos';\nimport { degreesToRadians, radiansToDegrees } from './radiansDegreesConversion';\nimport { sin } from './sin';\n\nexport type TRotateMatrixArgs = {\n  angle?: TDegree;\n};\n\nexport type TTranslateMatrixArgs = {\n  translateX?: number;\n  translateY?: number;\n};\n\nexport type TScaleMatrixArgs = {\n  scaleX?: number;\n  scaleY?: number;\n  flipX?: boolean;\n  flipY?: boolean;\n  skewX?: TDegree;\n  skewY?: TDegree;\n};\n\nexport type TComposeMatrixArgs = TTranslateMatrixArgs &\n  TRotateMatrixArgs &\n  TScaleMatrixArgs;\n\nexport type TQrDecomposeOut = Required<\n  Omit<TComposeMatrixArgs, 'flipX' | 'flipY'>\n>;\n\nexport const isIdentityMatrix = (mat: TMat2D) =>\n  mat.every((value, index) => value === iMatrix[index]);\n\n/**\n * Apply transform t to point p\n * @deprecated use {@link Point#transform}\n * @param  {Point | XY} p The point to transform\n * @param  {Array} t The transform\n * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n * @return {Point} The transformed point\n */\nexport const transformPoint = (\n  p: XY,\n  t: TMat2D,\n  ignoreOffset?: boolean\n): Point => new Point(p).transform(t, ignoreOffset);\n\n/**\n * Invert transformation t\n * @param {Array} t The transform\n * @return {Array} The inverted transform\n */\nexport const invertTransform = (t: TMat2D): TMat2D => {\n  const a = 1 / (t[0] * t[3] - t[1] * t[2]),\n    r = [a * t[3], -a * t[1], -a * t[2], a * t[0], 0, 0] as TMat2D,\n    { x, y } = new Point(t[4], t[5]).transform(r, true);\n  r[4] = -x;\n  r[5] = -y;\n  return r;\n};\n\n/**\n * Multiply matrix A by matrix B to nest transformations\n * @param  {TMat2D} a First transformMatrix\n * @param  {TMat2D} b Second transformMatrix\n * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices\n * @return {TMat2D} The product of the two transform matrices\n */\nexport const multiplyTransformMatrices = (\n  a: TMat2D,\n  b: TMat2D,\n  is2x2?: boolean\n): TMat2D =>\n  [\n    a[0] * b[0] + a[2] * b[1],\n    a[1] * b[0] + a[3] * b[1],\n    a[0] * b[2] + a[2] * b[3],\n    a[1] * b[2] + a[3] * b[3],\n    is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],\n    is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5],\n  ] as TMat2D;\n\n/**\n * Multiplies {@link matrices} such that a matrix defines the plane for the rest of the matrices **after** it\n *\n * `multiplyTransformMatrixArray([A, B, C, D])` is equivalent to `A(B(C(D)))`\n *\n * @param matrices an array of matrices\n * @param [is2x2] flag to multiply matrices as 2x2 matrices\n * @returns the multiplication product\n */\nexport const multiplyTransformMatrixArray = (\n  matrices: (TMat2D | undefined | null | false)[],\n  is2x2?: boolean\n) =>\n  matrices.reduceRight(\n    (product: TMat2D, curr) =>\n      curr && product\n        ? multiplyTransformMatrices(curr, product, is2x2)\n        : curr || product,\n    undefined as unknown as TMat2D\n  ) || iMatrix.concat();\n\nexport const calcPlaneRotation = ([a, b]: TMat2D) =>\n  Math.atan2(b, a) as TRadian;\n\n/**\n * Decomposes standard 2x3 matrix into transform components\n * @param  {TMat2D} a transformMatrix\n * @return {Object} Components of transform\n */\nexport const qrDecompose = (a: TMat2D): TQrDecomposeOut => {\n  const angle = calcPlaneRotation(a),\n    denom = Math.pow(a[0], 2) + Math.pow(a[1], 2),\n    scaleX = Math.sqrt(denom),\n    scaleY = (a[0] * a[3] - a[2] * a[1]) / scaleX,\n    skewX = Math.atan2(a[0] * a[2] + a[1] * a[3], denom);\n  return {\n    angle: radiansToDegrees(angle),\n    scaleX,\n    scaleY,\n    skewX: radiansToDegrees(skewX),\n    skewY: 0 as TDegree,\n    translateX: a[4] || 0,\n    translateY: a[5] || 0,\n  };\n};\n\n/**\n * Generate a translation matrix\n *\n * A translation matrix in the form of\n * [ 1 0 x ]\n * [ 0 1 y ]\n * [ 0 0 1 ]\n *\n * See @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#translate for more details\n *\n * @param {number} x translation on X axis\n * @param {number} [y] translation on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createTranslateMatrix = (x: number, y = 0): TMat2D => [\n  1,\n  0,\n  0,\n  1,\n  x,\n  y,\n];\n\n/**\n * Generate a rotation matrix around around a point (x,y), defaulting to (0,0)\n *\n * A matrix in the form of\n * [cos(a) -sin(a) -x*cos(a)+y*sin(a)+x]\n * [sin(a)  cos(a) -x*sin(a)-y*cos(a)+y]\n * [0       0      1                 ]\n *\n *\n * @param {TDegree} angle rotation in degrees\n * @param {XY} [pivotPoint] pivot point to rotate around\n * @returns {TMat2D} matrix\n */\nexport function createRotateMatrix(\n  { angle = 0 }: TRotateMatrixArgs = {},\n  { x = 0, y = 0 }: Partial<XY> = {}\n): TMat2D {\n  const angleRadiant = degreesToRadians(angle),\n    cosValue = cos(angleRadiant),\n    sinValue = sin(angleRadiant);\n  return [\n    cosValue,\n    sinValue,\n    -sinValue,\n    cosValue,\n    x ? x - (cosValue * x - sinValue * y) : 0,\n    y ? y - (sinValue * x + cosValue * y) : 0,\n  ];\n}\n\n/**\n * Generate a scale matrix around the point (0,0)\n *\n * A matrix in the form of\n * [x 0 0]\n * [0 y 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#scale\n *\n * @param {number} x scale on X axis\n * @param {number} [y] scale on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createScaleMatrix = (x: number, y: number = x): TMat2D => [\n  x,\n  0,\n  0,\n  y,\n  0,\n  0,\n];\n\nexport const angleToSkew = (angle: TDegree) =>\n  Math.tan(degreesToRadians(angle));\n\nexport const skewToAngle = (value: TRadian) =>\n  radiansToDegrees(Math.atan(value));\n\n/**\n * Generate a skew matrix for the X axis\n *\n * A matrix in the form of\n * [1 x 0]\n * [0 1 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#skewx\n *\n * @param {TDegree} skewValue translation on X axis\n * @returns {TMat2D} matrix\n */\nexport const createSkewXMatrix = (skewValue: TDegree): TMat2D => [\n  1,\n  0,\n  angleToSkew(skewValue),\n  1,\n  0,\n  0,\n];\n\n/**\n * Generate a skew matrix for the Y axis\n *\n * A matrix in the form of\n * [1 0 0]\n * [y 1 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#skewy\n *\n * @param {TDegree} skewValue translation on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createSkewYMatrix = (skewValue: TDegree): TMat2D => [\n  1,\n  angleToSkew(skewValue),\n  0,\n  1,\n  0,\n  0,\n];\n\n/**\n * Returns a transform matrix starting from an object of the same kind of\n * the one returned from qrDecompose, useful also if you want to calculate some\n * transformations from an object that is not enlived yet.\n * is called DimensionsTransformMatrix because those properties are the one that influence\n * the size of the resulting box of the object.\n * @param  {Object} options\n * @param  {Number} [options.scaleX]\n * @param  {Number} [options.scaleY]\n * @param  {Boolean} [options.flipX]\n * @param  {Boolean} [options.flipY]\n * @param  {Number} [options.skewX]\n * @param  {Number} [options.skewY]\n * @return {Number[]} transform matrix\n */\nexport const calcDimensionsMatrix = ({\n  scaleX = 1,\n  scaleY = 1,\n  flipX = false,\n  flipY = false,\n  skewX = 0 as TDegree,\n  skewY = 0 as TDegree,\n}: TScaleMatrixArgs) => {\n  let matrix = createScaleMatrix(\n    flipX ? -scaleX : scaleX,\n    flipY ? -scaleY : scaleY\n  );\n  if (skewX) {\n    matrix = multiplyTransformMatrices(matrix, createSkewXMatrix(skewX), true);\n  }\n  if (skewY) {\n    matrix = multiplyTransformMatrices(matrix, createSkewYMatrix(skewY), true);\n  }\n  return matrix;\n};\n\n/**\n * Returns a transform matrix starting from an object of the same kind of\n * the one returned from qrDecompose, useful also if you want to calculate some\n * transformations from an object that is not enlived yet\n * Before changing this function look at: src/benchmarks/calcTransformMatrix.mjs\n * @param  {Object} options\n * @param  {Number} [options.angle]\n * @param  {Number} [options.scaleX]\n * @param  {Number} [options.scaleY]\n * @param  {Boolean} [options.flipX]\n * @param  {Boolean} [options.flipY]\n * @param  {Number} [options.skewX]\n * @param  {Number} [options.skewY]\n * @param  {Number} [options.translateX]\n * @param  {Number} [options.translateY]\n * @return {Number[]} transform matrix\n */\nexport const composeMatrix = (options: TComposeMatrixArgs): TMat2D => {\n  const { translateX = 0, translateY = 0, angle = 0 as TDegree } = options;\n  let matrix = createTranslateMatrix(translateX, translateY);\n  if (angle) {\n    matrix = multiplyTransformMatrices(matrix, createRotateMatrix({ angle }));\n  }\n  const scaleMatrix = calcDimensionsMatrix(options);\n  if (!isIdentityMatrix(scaleMatrix)) {\n    matrix = multiplyTransformMatrices(matrix, scaleMatrix);\n  }\n  return matrix;\n};\n", "import { noop } from '../../constants';\nimport type { Pattern } from '../../Pattern';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport type {\n  Abortable,\n  Constructor,\n  TCrossOrigin,\n  TFiller,\n} from '../../typedefs';\nimport { createImage } from './dom';\nimport { classRegistry } from '../../ClassRegistry';\nimport type { BaseFilter } from '../../filters/BaseFilter';\nimport type { FabricObject as BaseFabricObject } from '../../shapes/Object/Object';\nimport { FabricError, SignalAbortedError } from '../internals/console';\nimport type { Shadow } from '../../Shadow';\n\nexport type LoadImageOptions = Abortable & {\n  /**\n   * cors value for the image loading, default to anonymous\n   */\n  crossOrigin?: TCrossOrigin;\n};\n\n/**\n * Loads image element from given url and resolve it, or catch.\n * @param {String} url URL representing an image\n * @param {LoadImageOptions} [options] image loading options\n * @returns {Promise<HTMLImageElement>} the loaded image.\n */\nexport const loadImage = (\n  url: string,\n  { signal, crossOrigin = null }: LoadImageOptions = {}\n) =>\n  new Promise<HTMLImageElement>(function (resolve, reject) {\n    if (signal && signal.aborted) {\n      return reject(new SignalAbortedError('loadImage'));\n    }\n    const img = createImage();\n    let abort: EventListenerOrEventListenerObject;\n    if (signal) {\n      abort = function (err: Event) {\n        img.src = '';\n        reject(err);\n      };\n      signal.addEventListener('abort', abort, { once: true });\n    }\n    const done = function () {\n      img.onload = img.onerror = null;\n      abort && signal?.removeEventListener('abort', abort);\n      resolve(img);\n    };\n    if (!url) {\n      done();\n      return;\n    }\n    img.onload = done;\n    img.onerror = function () {\n      abort && signal?.removeEventListener('abort', abort);\n      reject(new FabricError(`Error loading ${img.src}`));\n    };\n    crossOrigin && (img.crossOrigin = crossOrigin);\n    img.src = url;\n  });\n\nexport type EnlivenObjectOptions = Abortable & {\n  /**\n   * Method for further parsing of object elements,\n   * called after each fabric object created.\n   */\n  reviver?: <\n    T extends BaseFabricObject | FabricObject | BaseFilter | Shadow | TFiller\n  >(\n    serializedObj: Record<string, any>,\n    instance: T\n  ) => void;\n};\n\n/**\n * Creates corresponding fabric instances from their object representations\n * @param {Object[]} objects Objects to enliven\n * @param {EnlivenObjectOptions} [options]\n * @param {(serializedObj: object, instance: FabricObject) => any} [options.reviver] Method for further parsing of object elements,\n * called after each fabric object created.\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @returns {Promise<FabricObject[]>}\n */\nexport const enlivenObjects = <\n  T extends BaseFabricObject | FabricObject | BaseFilter | Shadow | TFiller\n>(\n  objects: any[],\n  { signal, reviver = noop }: EnlivenObjectOptions = {}\n) =>\n  new Promise<T[]>((resolve, reject) => {\n    const instances: T[] = [];\n    signal && signal.addEventListener('abort', reject, { once: true });\n    Promise.all(\n      objects.map((obj) =>\n        classRegistry\n          .getClass<\n            Constructor<T> & {\n              fromObject(options: any, context: Abortable): Promise<T>;\n            }\n          >(obj.type)\n          .fromObject(obj, { signal })\n          .then((fabricInstance) => {\n            reviver(obj, fabricInstance);\n            instances.push(fabricInstance);\n            return fabricInstance;\n          })\n      )\n    )\n      .then(resolve)\n      .catch((error) => {\n        // cleanup\n        instances.forEach((instance) => {\n          (instance as FabricObject).dispose &&\n            (instance as FabricObject).dispose();\n        });\n        reject(error);\n      })\n      .finally(() => {\n        signal && signal.removeEventListener('abort', reject);\n      });\n  });\n\n/**\n * Creates corresponding fabric instances residing in an object, e.g. `clipPath`\n * @param {Object} object with properties to enlive ( fill, stroke, clipPath, path )\n * @param {object} [options]\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @returns {Promise<Record<string, FabricObject | TFiller | null>>} the input object with enlived values\n */\nexport const enlivenObjectEnlivables = <\n  R = Record<string, FabricObject | TFiller | null>\n>(\n  serializedObject: any,\n  { signal }: Abortable = {}\n) =>\n  new Promise<R>((resolve, reject) => {\n    const instances: (FabricObject | TFiller | Shadow)[] = [];\n    signal && signal.addEventListener('abort', reject, { once: true });\n    // enlive every possible property\n    const promises = Object.values(serializedObject).map((value: any) => {\n      if (!value) {\n        return value;\n      }\n      // clipPath or shadow or gradient\n      if (value.type) {\n        return enlivenObjects<FabricObject | Shadow | TFiller>([value], {\n          signal,\n        }).then(([enlived]) => {\n          instances.push(enlived);\n          return enlived;\n        });\n      }\n      // pattern\n      if (value.source) {\n        return classRegistry\n          .getClass<typeof Pattern>('pattern')\n          .fromObject(value, { signal })\n          .then((pattern: Pattern) => {\n            instances.push(pattern);\n            return pattern;\n          });\n      }\n      return value;\n    });\n    const keys = Object.keys(serializedObject);\n    Promise.all(promises)\n      .then((enlived) => {\n        return enlived.reduce((acc, instance, index) => {\n          acc[keys[index]] = instance;\n          return acc;\n        }, {});\n      })\n      .then(resolve)\n      .catch((error) => {\n        // cleanup\n        instances.forEach((instance: any) => {\n          instance.dispose && instance.dispose();\n        });\n        reject(error);\n      })\n      .finally(() => {\n        signal && signal.removeEventListener('abort', reject);\n      });\n  });\n", "/**\n * Populates an object with properties of another object\n * @param {Object} source Source object\n * @param {string[]} properties Properties names to include\n * @returns object populated with the picked keys\n */\nexport const pick = <T extends Record<string, any>>(\n  source: T,\n  keys: (keyof T)[] = []\n) => {\n  return keys.reduce((o, key) => {\n    if (key in source) {\n      o[key] = source[key];\n    }\n    return o;\n  }, {} as Partial<T>);\n};\n\nexport const pickBy = <T extends Record<string, any>>(\n  source: T,\n  predicate: <K extends keyof T>(value: T[K], key: K, collection: T) => boolean\n) => {\n  return (Object.keys(source) as (keyof T)[]).reduce((o, key) => {\n    if (predicate(source[key], key, source)) {\n      o[key] = source[key];\n    }\n    return o;\n  }, {} as Partial<T>);\n};\n", "/**\n * Map of the 148 color names with HEX code\n * @see: https://www.w3.org/TR/css3-color/#svg-color\n */\nexport const ColorNameMap = {\n  aliceblue: '#F0F8FF',\n  antiquewhite: '#FAEBD7',\n  aqua: '#0FF',\n  aquamarine: '#7FFFD4',\n  azure: '#F0FFFF',\n  beige: '#F5F5DC',\n  bisque: '#FFE4C4',\n  black: '#000',\n  blanchedalmond: '#FFEBCD',\n  blue: '#00F',\n  blueviolet: '#8A2BE2',\n  brown: '#A52A2A',\n  burlywood: '#DEB887',\n  cadetblue: '#5F9EA0',\n  chartreuse: '#7FFF00',\n  chocolate: '#D2691E',\n  coral: '#FF7F50',\n  cornflowerblue: '#6495ED',\n  cornsilk: '#FFF8DC',\n  crimson: '#DC143C',\n  cyan: '#0FF',\n  darkblue: '#00008B',\n  darkcyan: '#008B8B',\n  darkgoldenrod: '#B8860B',\n  darkgray: '#A9A9A9',\n  darkgrey: '#A9A9A9',\n  darkgreen: '#006400',\n  darkkhaki: '#BDB76B',\n  darkmagenta: '#8B008B',\n  darkolivegreen: '#556B2F',\n  darkorange: '#FF8C00',\n  darkorchid: '#9932CC',\n  darkred: '#8B0000',\n  darksalmon: '#E9967A',\n  darkseagreen: '#8FBC8F',\n  darkslateblue: '#483D8B',\n  darkslategray: '#2F4F4F',\n  darkslategrey: '#2F4F4F',\n  darkturquoise: '#00CED1',\n  darkviolet: '#9400D3',\n  deeppink: '#FF1493',\n  deepskyblue: '#00BFFF',\n  dimgray: '#696969',\n  dimgrey: '#696969',\n  dodgerblue: '#1E90FF',\n  firebrick: '#B22222',\n  floralwhite: '#FFFAF0',\n  forestgreen: '#228B22',\n  fuchsia: '#F0F',\n  gainsboro: '#DCDCDC',\n  ghostwhite: '#F8F8FF',\n  gold: '#FFD700',\n  goldenrod: '#DAA520',\n  gray: '#808080',\n  grey: '#808080',\n  green: '#008000',\n  greenyellow: '#ADFF2F',\n  honeydew: '#F0FFF0',\n  hotpink: '#FF69B4',\n  indianred: '#CD5C5C',\n  indigo: '#4B0082',\n  ivory: '#FFFFF0',\n  khaki: '#F0E68C',\n  lavender: '#E6E6FA',\n  lavenderblush: '#FFF0F5',\n  lawngreen: '#7CFC00',\n  lemonchiffon: '#FFFACD',\n  lightblue: '#ADD8E6',\n  lightcoral: '#F08080',\n  lightcyan: '#E0FFFF',\n  lightgoldenrodyellow: '#FAFAD2',\n  lightgray: '#D3D3D3',\n  lightgrey: '#D3D3D3',\n  lightgreen: '#90EE90',\n  lightpink: '#FFB6C1',\n  lightsalmon: '#FFA07A',\n  lightseagreen: '#20B2AA',\n  lightskyblue: '#87CEFA',\n  lightslategray: '#789',\n  lightslategrey: '#789',\n  lightsteelblue: '#B0C4DE',\n  lightyellow: '#FFFFE0',\n  lime: '#0F0',\n  limegreen: '#32CD32',\n  linen: '#FAF0E6',\n  magenta: '#F0F',\n  maroon: '#800000',\n  mediumaquamarine: '#66CDAA',\n  mediumblue: '#0000CD',\n  mediumorchid: '#BA55D3',\n  mediumpurple: '#9370DB',\n  mediumseagreen: '#3CB371',\n  mediumslateblue: '#7B68EE',\n  mediumspringgreen: '#00FA9A',\n  mediumturquoise: '#48D1CC',\n  mediumvioletred: '#C71585',\n  midnightblue: '#191970',\n  mintcream: '#F5FFFA',\n  mistyrose: '#FFE4E1',\n  moccasin: '#FFE4B5',\n  navajowhite: '#FFDEAD',\n  navy: '#000080',\n  oldlace: '#FDF5E6',\n  olive: '#808000',\n  olivedrab: '#6B8E23',\n  orange: '#FFA500',\n  orangered: '#FF4500',\n  orchid: '#DA70D6',\n  palegoldenrod: '#EEE8AA',\n  palegreen: '#98FB98',\n  paleturquoise: '#AFEEEE',\n  palevioletred: '#DB7093',\n  papayawhip: '#FFEFD5',\n  peachpuff: '#FFDAB9',\n  peru: '#CD853F',\n  pink: '#FFC0CB',\n  plum: '#DDA0DD',\n  powderblue: '#B0E0E6',\n  purple: '#800080',\n  rebeccapurple: '#639',\n  red: '#F00',\n  rosybrown: '#BC8F8F',\n  royalblue: '#4169E1',\n  saddlebrown: '#8B4513',\n  salmon: '#FA8072',\n  sandybrown: '#F4A460',\n  seagreen: '#2E8B57',\n  seashell: '#FFF5EE',\n  sienna: '#A0522D',\n  silver: '#C0C0C0',\n  skyblue: '#87CEEB',\n  slateblue: '#6A5ACD',\n  slategray: '#708090',\n  slategrey: '#708090',\n  snow: '#FFFAFA',\n  springgreen: '#00FF7F',\n  steelblue: '#4682B4',\n  tan: '#D2B48C',\n  teal: '#008080',\n  thistle: '#D8BFD8',\n  tomato: '#FF6347',\n  turquoise: '#40E0D0',\n  violet: '#EE82EE',\n  wheat: '#F5DEB3',\n  white: '#FFF',\n  whitesmoke: '#F5F5F5',\n  yellow: '#FF0',\n  yellowgreen: '#9ACD32',\n};\n", "import type { TRGBAColorSource } from './typedefs';\n\n/**\n * @param {Number} p\n * @param {Number} q\n * @param {Number} t\n * @return {Number}\n */\nexport const hue2rgb = (p: number, q: number, t: number): number => {\n  if (t < 0) {\n    t += 1;\n  }\n  if (t > 1) {\n    t -= 1;\n  }\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  if (t < 1 / 2) {\n    return q;\n  }\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  return p;\n};\n\n/**\n * Adapted from {@link https://gist.github.com/mjackson/5311256 https://gist.github.com/mjackson}\n * @param {Number} r Red color value\n * @param {Number} g Green color value\n * @param {Number} b Blue color value\n * @param {Number} a Alpha color value pass through\n * @return {TRGBColorSource} Hsl color\n */\nexport const rgb2Hsl = (\n  r: number,\n  g: number,\n  b: number,\n  a: number\n): TRGBAColorSource => {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  const maxValue = Math.max(r, g, b),\n    minValue = Math.min(r, g, b);\n\n  let h!: number, s: number;\n  const l = (maxValue + minValue) / 2;\n\n  if (maxValue === minValue) {\n    h = s = 0; // achromatic\n  } else {\n    const d = maxValue - minValue;\n    s = l > 0.5 ? d / (2 - maxValue - minValue) : d / (maxValue + minValue);\n    switch (maxValue) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return [Math.round(h * 360), Math.round(s * 100), Math.round(l * 100), a];\n};\n\nexport const fromAlphaToFloat = (value = '1') =>\n  parseFloat(value) / (value.endsWith('%') ? 100 : 1);\n\n/**\n * Convert a value in the inclusive range [0, 255] to hex\n */\nexport const hexify = (value: number) =>\n  Math.min(Math.round(value), 255).toString(16).toUpperCase().padStart(2, '0');\n\n/**\n * Calculate the grey average value for rgb and pass through alpha\n */\nexport const greyAverage = ([\n  r,\n  g,\n  b,\n  a = 1,\n]: TRGBAColorSource): TRGBAColorSource => {\n  const avg = Math.round(r * 0.3 + g * 0.59 + b * 0.11);\n  return [avg, avg, avg, a];\n};\n", "import { ColorNameMap } from './color_map';\nimport { reHSLa, reHex, reRGBa } from './constants';\nimport type { TRGBAColorSource, TColorArg } from './typedefs';\nimport {\n  hue2rgb,\n  hexify,\n  rgb2Hsl,\n  fromAlphaToFloat,\n  greyAverage,\n} from './util';\n\n/**\n * @class Color common color operations\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors colors}\n */\nexport class Color {\n  private declare _source: TRGBAColorSource;\n\n  /**\n   *\n   * @param {string} [color] optional in hex or rgb(a) or hsl format or from known color list\n   */\n  constructor(color?: TColorArg) {\n    if (!color) {\n      // we default to black as canvas does\n      this.setSource([0, 0, 0, 1]);\n    } else if (color instanceof Color) {\n      this.setSource([...color._source]);\n    } else if (Array.isArray(color)) {\n      const [r, g, b, a = 1] = color;\n      this.setSource([r, g, b, a]);\n    } else {\n      this.setSource(this._tryParsingColor(color));\n    }\n  }\n\n  /**\n   * @private\n   * @param {string} [color] Color value to parse\n   * @returns {TRGBAColorSource}\n   */\n  protected _tryParsingColor(color: string) {\n    if (color in ColorNameMap) {\n      color = ColorNameMap[color as keyof typeof ColorNameMap];\n    }\n    return color === 'transparent'\n      ? ([255, 255, 255, 0] as TRGBAColorSource)\n      : Color.sourceFromHex(color) ||\n          Color.sourceFromRgb(color) ||\n          Color.sourceFromHsl(color) ||\n          // color is not recognized\n          // we default to black as canvas does\n          ([0, 0, 0, 1] as TRGBAColorSource);\n  }\n\n  /**\n   * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n   * @return {TRGBAColorSource}\n   */\n  getSource() {\n    return this._source;\n  }\n\n  /**\n   * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n   * @param {TRGBAColorSource} source\n   */\n  setSource(source: TRGBAColorSource) {\n    this._source = source;\n  }\n\n  /**\n   * Returns color representation in RGB format\n   * @return {String} ex: rgb(0-255,0-255,0-255)\n   */\n  toRgb() {\n    const [r, g, b] = this.getSource();\n    return `rgb(${r},${g},${b})`;\n  }\n\n  /**\n   * Returns color representation in RGBA format\n   * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\n   */\n  toRgba() {\n    return `rgba(${this.getSource().join(',')})`;\n  }\n\n  /**\n   * Returns color representation in HSL format\n   * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\n   */\n  toHsl() {\n    const [h, s, l] = rgb2Hsl(...this.getSource());\n    return `hsl(${h},${s}%,${l}%)`;\n  }\n\n  /**\n   * Returns color representation in HSLA format\n   * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\n   */\n  toHsla() {\n    const [h, s, l, a] = rgb2Hsl(...this.getSource());\n    return `hsla(${h},${s}%,${l}%,${a})`;\n  }\n\n  /**\n   * Returns color representation in HEX format\n   * @return {String} ex: FF5555\n   */\n  toHex() {\n    const fullHex = this.toHexa();\n    return fullHex.slice(0, 6);\n  }\n\n  /**\n   * Returns color representation in HEXA format\n   * @return {String} ex: FF5555CC\n   */\n  toHexa() {\n    const [r, g, b, a] = this.getSource();\n    return `${hexify(r)}${hexify(g)}${hexify(b)}${hexify(Math.round(a * 255))}`;\n  }\n\n  /**\n   * Gets value of alpha channel for this color\n   * @return {Number} 0-1\n   */\n  getAlpha() {\n    return this.getSource()[3];\n  }\n\n  /**\n   * Sets value of alpha channel for this color\n   * @param {Number} alpha Alpha value 0-1\n   * @return {Color} thisArg\n   */\n  setAlpha(alpha: number) {\n    this._source[3] = alpha;\n    return this;\n  }\n\n  /**\n   * Transforms color to its grayscale representation\n   * @return {Color} thisArg\n   */\n  toGrayscale() {\n    this.setSource(greyAverage(this.getSource()));\n    return this;\n  }\n\n  /**\n   * Transforms color to its black and white representation\n   * @param {Number} threshold\n   * @return {Color} thisArg\n   */\n  toBlackWhite(threshold: number) {\n    const [average, , , a] = greyAverage(this.getSource()),\n      bOrW = average < (threshold || 127) ? 0 : 255;\n    this.setSource([bOrW, bOrW, bOrW, a]);\n    return this;\n  }\n\n  /**\n   * Overlays color with another color\n   * @param {String|Color} otherColor\n   * @return {Color} thisArg\n   */\n  overlayWith(otherColor: string | Color) {\n    if (!(otherColor instanceof Color)) {\n      otherColor = new Color(otherColor);\n    }\n\n    const source = this.getSource(),\n      otherAlpha = 0.5,\n      otherSource = otherColor.getSource(),\n      [R, G, B] = source.map((value, index) =>\n        Math.round(value * (1 - otherAlpha) + otherSource[index] * otherAlpha)\n      );\n\n    this.setSource([R, G, B, source[3]]);\n    return this;\n  }\n\n  /**\n   * Returns new color object, when given a color in RGB format\n   * @memberOf Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\n   * @return {Color}\n   */\n  static fromRgb(color: string): Color {\n    return Color.fromRgba(color);\n  }\n\n  /**\n   * Returns new color object, when given a color in RGBA format\n   * @static\n   * @function\n   * @memberOf Color\n   * @param {String} color\n   * @return {Color}\n   */\n  static fromRgba(color: string): Color {\n    return new Color(Color.sourceFromRgb(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\n   * @memberOf Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\n   * @return {TRGBAColorSource | undefined} source\n   */\n  static sourceFromRgb(color: string): TRGBAColorSource | undefined {\n    const match = color.match(reRGBa());\n    if (match) {\n      const [r, g, b] = match.slice(1, 4).map((value) => {\n        const parsedValue = parseFloat(value);\n        return value.endsWith('%')\n          ? Math.round(parsedValue * 2.55)\n          : parsedValue;\n      });\n      return [r, g, b, fromAlphaToFloat(match[4])];\n    }\n  }\n\n  /**\n   * Returns new color object, when given a color in HSL format\n   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\n   * @memberOf Color\n   * @return {Color}\n   */\n  static fromHsl(color: string): Color {\n    return Color.fromHsla(color);\n  }\n\n  /**\n   * Returns new color object, when given a color in HSLA format\n   * @static\n   * @function\n   * @memberOf Color\n   * @param {String} color\n   * @return {Color}\n   */\n  static fromHsla(color: string): Color {\n    return new Color(Color.sourceFromHsl(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\n   * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n   * @memberOf Color\n   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\n   * @return {TRGBAColorSource | undefined} source\n   * @see http://http://www.w3.org/TR/css3-color/#hsl-color\n   */\n  static sourceFromHsl(color: string): TRGBAColorSource | undefined {\n    const match = color.match(reHSLa());\n    if (!match) {\n      return;\n    }\n\n    const h = (((parseFloat(match[1]) % 360) + 360) % 360) / 360,\n      s = parseFloat(match[2]) / 100,\n      l = parseFloat(match[3]) / 100;\n    let r: number, g: number, b: number;\n\n    if (s === 0) {\n      r = g = b = l;\n    } else {\n      const q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\n        p = l * 2 - q;\n\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return [\n      Math.round(r * 255),\n      Math.round(g * 255),\n      Math.round(b * 255),\n      fromAlphaToFloat(match[4]),\n    ];\n  }\n\n  /**\n   * Returns new color object, when given a color in HEX format\n   * @static\n   * @memberOf Color\n   * @param {String} color Color value ex: FF5555\n   * @return {Color}\n   */\n  static fromHex(color: string): Color {\n    return new Color(Color.sourceFromHex(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format\n   * @static\n   * @memberOf Color\n   * @param {String} color ex: FF5555 or FF5544CC (RGBa)\n   * @return {TRGBAColorSource | undefined} source\n   */\n  static sourceFromHex(color: string): TRGBAColorSource | undefined {\n    if (color.match(reHex())) {\n      const value = color.slice(color.indexOf('#') + 1),\n        isShortNotation = value.length <= 4;\n      let expandedValue: string[];\n      if (isShortNotation) {\n        expandedValue = value.split('').map((hex) => hex + hex);\n      } else {\n        expandedValue = value.match(/.{2}/g)!;\n      }\n      const [r, g, b, a = 255] = expandedValue.map((hexCouple) =>\n        parseInt(hexCouple, 16)\n      );\n      return [r, g, b, a / 255];\n    }\n  }\n}\n", "/**\n * Regex matching color in RGB or RGBA formats (ex: `rgb(0, 0, 0)`, `rgba(255, 100, 10, 0.5)`, `rgba( 255 , 100 , 10 , 0.5 )`, `rgb(1,1,1)`, `rgba(100%, 60%, 10%, 0.5)`)\n * Also matching rgba(r g b / a) as per new specs\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb\n * Formal syntax at the time of writing:\n * <rgb()> =\n *  rgb( [ <percentage> | none ]{3} [ / [ <alpha-value> | none ] ]? )  |\n *  rgb( [ <number> | none ]{3} [ / [ <alpha-value> | none ] ]? )\n * <alpha-value> = <number> | <percentage>\n *\n * For learners this is how you can read this regex\n * Regular expression for matching an rgba or rgb CSS color value\n *\n * /^          # Beginning of the string\n * rgba?       # \"rgb\" or \"rgba\"\n * \\(\\s*       # Opening parenthesis and optional whitespace\n * (\\d{0,3}    # 0 to three digits R channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the first color component\n * %?          # Optional percent sign after the first color component\n * \\s*         # Optional whitespace\n * [\\s|,]      # Separator between color components can be a space or comma\n * \\s*         # Optional whitespace\n * (\\d{0,3}    # 0 to three digits G channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the second color component\n * %?          # Optional percent sign after the second color component\n * \\s*         # Optional whitespace\n * [\\s|,]      # Separator between color components can be a space or comma\n * \\s*         # Optional whitespace\n * (\\d{0,3}    # 0 to three digits B channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the third color component\n * %?          # Optional percent sign after the third color component\n * \\s*         # Optional whitespace\n * (?:         # Beginning of non-capturing group for alpha value\n *  \\s*        # Optional whitespace\n *  [,/]       # Comma or slash separator for alpha value\n *  \\s*        # Optional whitespace\n *  (\\d{0,3}   # Zero to three digits\n *    (?:\\.\\d+)? # Optional decimal with one or more digits\n *  )          # End of capturing group for alpha value\n *  %?         # Optional percent sign after alpha value\n *  \\s*        # Optional whitespace\n * )?          # End of non-capturing group for alpha value (optional)\n * \\)          # Closing parenthesis\n * $           # End of the string\n *\n * The alpha channel can be in the format 0.4 .7 or 1 or 73%\n *\n * WARNING this regex doesn't fail on off spec colors. it matches everything that could be a color.\n * So the spec does not allow for `rgba(30 , 45%  35, 49%)` but this will work anyways for us\n */\nexport const reRGBa = () =>\n  /^rgba?\\(\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*)?\\)$/i;\n\n/**\n * Regex matching color in HSL or HSLA formats (ex: hsl(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\n * Also matching rgba(r g b / a) as per new specs\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl\n * Formal syntax at the time of writing:\n * <hsl()> =\n *   hsl( [ <hue> | none ] [ <percentage> | none ] [ <percentage> | none ] [ / [ <alpha-value> | none ] ]? )\n *\n * <hue> =\n *   <number>  |\n *   <angle>\n *\n * <alpha-value> =\n *   <number>      |\n *   <percentage>\n *\n * For learners this is how you can read this regex\n * Regular expression for matching an hsla or hsl CSS color value\n *\n * /^hsla?\\(         // Matches the beginning of the string and the opening parenthesis of \"hsl\" or \"hsla\"\n * \\s*               // Matches any whitespace characters (space, tab, etc.) zero or more times\n * (\\d{1,3})         // Hue: Matches one to three digits and captures it in a group\n * \\s*               // Matches any whitespace characters zero or more times\n * [\\s|,]            // Matches a space, tab or comma\n * \\s*               // Matches any whitespace characters zero or more times\n * (\\d{1,3}%)        // Saturation: Matches one to three digits followed by a percentage sign and captures it in a group\n * \\s*               // Matches any whitespace characters zero or more times\n * [\\s|,]            // Matches a space, tab or comma\n * \\s*               // Matches any whitespace characters zero or more times\n * (\\d{1,3}%)        // Lightness: Matches one to three digits followed by a percentage sign and captures it in a group\n * \\s*               // Matches any whitespace characters zero or more times\n * (?:               // Alpha: Begins a non-capturing group for the alpha value\n *   \\s*             // Matches any whitespace characters zero or more times\n *   [,/]            // Matches a comma or forward slash\n *   \\s*             // Matches any whitespace characters zero or more times\n *   (\\d*(?:\\.\\d+)?%?) // Matches zero or more digits, optionally followed by a decimal point and one or more digits, followed by an optional percentage sign and captures it in a group\n *   \\s*             // Matches any whitespace characters zero or more times\n * )?                // Makes the alpha value group optional\n * \\)                // Matches the closing parenthesis\n * $/i               // Matches the end of the string and sets the regular expression to case-insensitive mode\n *\n * WARNING this regex doesn't fail on off spec colors. It matches everything that could be a color.\n * So the spec does not allow `hsl(30 , 45%  35, 49%)` but this will work anyways for us.\n */\nexport const reHSLa = () =>\n  /^hsla?\\(\\s*([+-]?\\d{1,3})\\s*[\\s|,]\\s*(\\d{1,3}%)\\s*[\\s|,]\\s*(\\d{1,3}%)\\s*(?:\\s*[,/]\\s*(\\d*(?:\\.\\d+)?%?)\\s*)?\\)$/i;\n\n/**\n * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)\n */\nexport const reHex = () => /^#?(([0-9a-f]){3,4}|([0-9a-f]{2}){3,4})$/i;\n", "/**\n * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\n * @param {number|string} number number to operate on\n * @param {number} fractionDigits number of fraction digits to \"leave\"\n * @return {number}\n */\nexport const toFixed = (number: number | string, fractionDigits: number) =>\n  parseFloat(Number(number).toFixed(fractionDigits));\n", "import { Color } from '../../color/Color';\nimport { config } from '../../config';\nimport { DEFAULT_SVG_FONT_SIZE, NONE } from '../../constants';\nimport type {\n  TBBox,\n  TMat2D,\n  SVGElementName,\n  SupportedSVGUnit,\n} from '../../typedefs';\nimport { toFixed } from './toFixed';\n\n/**\n * Returns array of attributes for given svg that fabric parses\n * @param {SVGElementName} type Type of svg element (eg. 'circle')\n * @return {Array} string names of supported attributes\n */\nexport const getSvgAttributes = (type: SVGElementName) => {\n  const commonAttributes = ['instantiated_by_use', 'style', 'id', 'class'];\n  switch (type) {\n    case 'linearGradient':\n      return commonAttributes.concat([\n        'x1',\n        'y1',\n        'x2',\n        'y2',\n        'gradientUnits',\n        'gradientTransform',\n      ]);\n    case 'radialGradient':\n      return commonAttributes.concat([\n        'gradientUnits',\n        'gradientTransform',\n        'cx',\n        'cy',\n        'r',\n        'fx',\n        'fy',\n        'fr',\n      ]);\n    case 'stop':\n      return commonAttributes.concat(['offset', 'stop-color', 'stop-opacity']);\n  }\n  return commonAttributes;\n};\n\n/**\n * Converts from attribute value to pixel value if applicable.\n * Returns converted pixels or original value not converted.\n * @param {string} value number to operate on\n * @param {number} fontSize\n * @return {number}\n */\nexport const parseUnit = (value: string, fontSize = DEFAULT_SVG_FONT_SIZE) => {\n  const unit = /\\D{0,2}$/.exec(value),\n    number = parseFloat(value);\n  const dpi = config.DPI;\n  switch (unit?.[0] as SupportedSVGUnit) {\n    case 'mm':\n      return (number * dpi) / 25.4;\n\n    case 'cm':\n      return (number * dpi) / 2.54;\n\n    case 'in':\n      return number * dpi;\n\n    case 'pt':\n      return (number * dpi) / 72; // or * 4 / 3\n\n    case 'pc':\n      return ((number * dpi) / 72) * 12; // or * 16\n\n    case 'em':\n      return number * fontSize;\n\n    default:\n      return number;\n  }\n};\n\nexport type MeetOrSlice = 'meet' | 'slice';\n\nexport type MinMidMax = 'Min' | 'Mid' | 'Max' | 'none';\n\nexport type TPreserveArParsed = {\n  meetOrSlice: MeetOrSlice;\n  alignX: MinMidMax;\n  alignY: MinMidMax;\n};\n\n// align can be either none or undefined or a combination of mid/max\nconst parseAlign = (align: string): MinMidMax[] => {\n  //divide align in alignX and alignY\n  if (align && align !== NONE) {\n    return [align.slice(1, 4) as MinMidMax, align.slice(5, 8) as MinMidMax];\n  } else if (align === NONE) {\n    return [align, align];\n  }\n  return ['Mid', 'Mid'];\n};\n\n/**\n * Parse preserveAspectRatio attribute from element\n * https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio\n * @param {string} attribute to be parsed\n * @return {Object} an object containing align and meetOrSlice attribute\n */\nexport const parsePreserveAspectRatioAttribute = (\n  attribute: string\n): TPreserveArParsed => {\n  const [firstPart, secondPart] = attribute.trim().split(' ') as [\n    MinMidMax,\n    MeetOrSlice | undefined\n  ];\n  const [alignX, alignY] = parseAlign(firstPart);\n  return {\n    meetOrSlice: secondPart || 'meet',\n    alignX,\n    alignY,\n  };\n};\n\n/**\n * given an array of 6 number returns something like `\"matrix(...numbers)\"`\n * @param {TMat2D} transform an array with 6 numbers\n * @return {String} transform matrix for svg\n */\nexport const matrixToSVG = (transform: TMat2D) =>\n  'matrix(' +\n  transform\n    .map((value) => toFixed(value, config.NUM_FRACTION_DIGITS))\n    .join(' ') +\n  ')';\n\n/**\n * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values\n * we work around it by \"moving\" alpha channel into opacity attribute and setting fill's alpha to 1\n * @param prop\n * @param value\n * @param {boolean} inlineStyle The default is inline style, the separator used is \":\", The other is \"=\"\n * @returns\n */\nexport const colorPropToSVG = (\n  prop: string,\n  value?: any,\n  inlineStyle = true\n) => {\n  let colorValue;\n  let opacityValue;\n  if (!value) {\n    colorValue = 'none';\n  } else if (value.toLive) {\n    colorValue = `url(#SVGID_${value.id})`;\n  } else {\n    const color = new Color(value),\n      opacity = color.getAlpha();\n\n    colorValue = color.toRgb();\n    if (opacity !== 1) {\n      opacityValue = opacity.toString();\n    }\n  }\n  if (inlineStyle) {\n    return `${prop}: ${colorValue}; ${\n      opacityValue ? `${prop}-opacity: ${opacityValue}; ` : ''\n    }`;\n  } else {\n    return `${prop}=\"${colorValue}\" ${\n      opacityValue ? `${prop}-opacity=\"${opacityValue}\" ` : ''\n    }`;\n  }\n};\n\nexport const createSVGRect = (\n  color: string,\n  { left, top, width, height }: TBBox,\n  precision = config.NUM_FRACTION_DIGITS\n) => {\n  const svgColor = colorPropToSVG('fill', color, false);\n  const [x, y, w, h] = [left, top, width, height].map((value) =>\n    toFixed(value, precision)\n  );\n  return `<rect ${svgColor} x=\"${x}\" y=\"${y}\" width=\"${w}\" height=\"${h}\"></rect>`;\n};\n", "import type { FabricObject } from '../shapes/Object/Object';\nimport type { TFiller } from '../typedefs';\nimport type { FabricText } from '../shapes/Text/Text';\nimport type { Pattern } from '../Pattern';\nimport type { Path } from '../shapes/Path';\nimport type { ActiveSelection } from '../shapes/ActiveSelection';\n\nexport const isFiller = (\n  filler: TFiller | string | null\n): filler is TFiller => {\n  return !!filler && (filler as TFiller).toLive !== undefined;\n};\n\nexport const isSerializableFiller = (\n  filler: TFiller | string | null\n): filler is TFiller => {\n  return !!filler && typeof (filler as TFiller).toObject === 'function';\n};\n\nexport const isPattern = (filler: TFiller): filler is Pattern => {\n  return (\n    !!filler && (filler as Pattern).offsetX !== undefined && 'source' in filler\n  );\n};\n\nexport const isTextObject = (\n  fabricObject?: FabricObject\n): fabricObject is FabricText => {\n  return (\n    !!fabricObject &&\n    typeof (fabricObject as FabricText)._renderText === 'function'\n  );\n};\n\nexport const isPath = (fabricObject?: FabricObject): fabricObject is Path => {\n  // we could use instanceof but that would mean pulling in Text code for a simple check\n  // @todo discuss what to do and how to do\n  return (\n    !!fabricObject &&\n    typeof (fabricObject as Path)._renderPathCommands === 'function'\n  );\n};\n\nexport const isActiveSelection = (\n  fabricObject?: FabricObject\n): fabricObject is ActiveSelection =>\n  !!fabricObject && 'multiSelectionStacking' in fabricObject;\n", "/**\n * Returns element scroll offsets\n * @param {HTMLElement} element Element to operate on\n * @return {Object} Object with left/top values\n */\nexport function getScrollLeftTop(element: HTMLElement | null) {\n  const doc = element && getDocumentFromElement(element);\n  let left = 0,\n    top = 0;\n  if (!element || !doc) {\n    return { left, top };\n  }\n\n  const docElement = doc.documentElement,\n    body = doc.body || {\n      scrollLeft: 0,\n      scrollTop: 0,\n    };\n  // While loop checks (and then sets element to) .parentNode OR .host\n  //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,\n  //  but the .parentNode of a root ShadowDOM node will always be null, instead\n  //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938\n  // @ts-expect-error Set element to element parent, or 'host' in case of ShadowDOM\n  while (element && (element.parentNode || element.host)) {\n    // @ts-expect-error Set element to element parent, or 'host' in case of ShadowDOM\n    element = element.parentNode || element.host;\n    // @ts-expect-error because element is typed as HTMLElement but it can go up to document\n    if (element === doc) {\n      left = body.scrollLeft || docElement.scrollLeft || 0;\n      top = body.scrollTop || docElement.scrollTop || 0;\n    } else {\n      left += element!.scrollLeft || 0;\n      top += element!.scrollTop || 0;\n    }\n\n    if (element!.nodeType === 1 && element!.style.position === 'fixed') {\n      break;\n    }\n  }\n\n  return { left, top };\n}\n\nexport const getDocumentFromElement = (el: HTMLElement) =>\n  el.ownerDocument || null;\n\nexport const getWindowFromElement = (el: HTMLElement) =>\n  el.ownerDocument?.defaultView || null;\n", "// TODO this file needs to go away, cross browser style support is not fabricjs domain.\n\n/**\n * wrapper for setting element's style\n * @param {HTMLElement} element\n * @param {Object | string} styles\n */\nexport function setStyle(\n  element: HTMLElement,\n  styles: string | Record<string, string>\n) {\n  const elementStyle = element.style;\n  if (!elementStyle) {\n    return;\n  } else if (typeof styles === 'string') {\n    element.style.cssText += ';' + styles;\n  } else {\n    Object.entries(styles).forEach(([property, value]) =>\n      elementStyle.setProperty(property, value)\n    );\n  }\n}\n", "import { LEFT, NONE, TOP } from '../../constants';\nimport type { TSize } from '../../typedefs';\nimport {\n  getDocumentFromElement,\n  getWindowFromElement,\n  getScrollLeftTop,\n} from '../../util/dom_misc';\nimport { setStyle } from '../../util/dom_style';\n\nexport const setCanvasDimensions = (\n  el: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n  { width, height }: TSize,\n  retinaScaling = 1\n) => {\n  el.width = width;\n  el.height = height;\n  if (retinaScaling > 1) {\n    el.setAttribute('width', (width * retinaScaling).toString());\n    el.setAttribute('height', (height * retinaScaling).toString());\n    ctx.scale(retinaScaling, retinaScaling);\n  }\n};\n\nexport function allowTouchScrolling(element: HTMLElement, allow: boolean) {\n  const touchAction = allow ? 'manipulation' : NONE;\n  setStyle(element, {\n    'touch-action': touchAction,\n    '-ms-touch-action': touchAction,\n  });\n}\n\nexport type CSSDimensions = {\n  width: number | string;\n  height: number | string;\n};\n\nexport const setCSSDimensions = (\n  el: HTMLElement,\n  { width, height }: Partial<CSSDimensions>\n) => {\n  width && (el.style.width = typeof width === 'number' ? `${width}px` : width);\n  height &&\n    (el.style.height = typeof height === 'number' ? `${height}px` : height);\n};\n\n/**\n * Returns offset for a given element\n * @param {HTMLElement} element Element to get offset for\n * @return {Object} Object with \"left\" and \"top\" properties\n */\nexport function getElementOffset(element: HTMLElement) {\n  let box = { left: 0, top: 0 };\n  const doc = element && getDocumentFromElement(element),\n    offset = { left: 0, top: 0 },\n    offsetAttributes = {\n      borderLeftWidth: LEFT,\n      borderTopWidth: TOP,\n      paddingLeft: LEFT,\n      paddingTop: TOP,\n    } as const;\n\n  if (!doc) {\n    return offset;\n  }\n  const elemStyle =\n    getWindowFromElement(element)?.getComputedStyle(element, null) || {};\n  for (const attr in offsetAttributes) {\n    // @ts-expect-error TS learn to iterate!\n    offset[offsetAttributes[attr]] += parseInt(elemStyle[attr], 10) || 0;\n  }\n\n  const docElem = doc.documentElement;\n  if (typeof element.getBoundingClientRect !== 'undefined') {\n    box = element.getBoundingClientRect();\n  }\n\n  const scrollLeftTop = getScrollLeftTop(element);\n\n  return {\n    left:\n      box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\n    top: box.top + scrollLeftTop.top - (docElem.clientTop || 0) + offset.top,\n  };\n}\n\n/**\n * Makes element unselectable\n * @param {HTMLElement} element Element to make unselectable\n * @return {HTMLElement} Element that was passed in\n */\nexport function makeElementUnselectable(element: HTMLElement) {\n  if (typeof element.onselectstart !== 'undefined') {\n    element.onselectstart = () => false;\n  }\n  element.style.userSelect = NONE;\n  return element;\n}\n", "import { getEnv, getFabricDocument } from '../../env';\nimport type { TSize } from '../../typedefs';\nimport type { CSSDimensions } from './util';\nimport { setCSSDimensions, getElementOffset } from './util';\nimport { createCanvasElement, isHTMLCanvas } from '../../util/misc/dom';\nimport { setCanvasDimensions } from './util';\nimport { FabricError } from '../../util/internals/console';\n\nexport type CanvasItem = {\n  el: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n};\n\nexport class StaticCanvasDOMManager {\n  /**\n   * Keeps a copy of the canvas style before setting retina scaling and other potions\n   * in order to return it to original state on dispose\n   * @type string\n   */\n  private _originalCanvasStyle?: string;\n\n  lower: CanvasItem;\n\n  constructor(arg0?: string | HTMLCanvasElement) {\n    const el = this.createLowerCanvas(arg0);\n    this.lower = { el, ctx: el.getContext('2d')! };\n  }\n\n  protected createLowerCanvas(arg0?: HTMLCanvasElement | string) {\n    // canvasEl === 'HTMLCanvasElement' does not work on jsdom/node\n    const el = isHTMLCanvas(arg0)\n      ? arg0\n      : (arg0 &&\n          (getFabricDocument().getElementById(arg0) as HTMLCanvasElement)) ||\n        createCanvasElement();\n    if (el.hasAttribute('data-fabric')) {\n      throw new FabricError(\n        'Trying to initialize a canvas that has already been initialized. Did you forget to dispose the canvas?'\n      );\n    }\n    this._originalCanvasStyle = el.style.cssText;\n    el.setAttribute('data-fabric', 'main');\n    el.classList.add('lower-canvas');\n    return el;\n  }\n\n  cleanupDOM({ width, height }: TSize) {\n    const { el } = this.lower;\n    // restore canvas style and attributes\n    el.classList.remove('lower-canvas');\n    el.removeAttribute('data-fabric');\n    // restore canvas size to original size in case retina scaling was applied\n    el.setAttribute('width', `${width}`);\n    el.setAttribute('height', `${height}`);\n    el.style.cssText = this._originalCanvasStyle || '';\n    this._originalCanvasStyle = undefined;\n  }\n\n  setDimensions(size: TSize, retinaScaling: number) {\n    const { el, ctx } = this.lower;\n    setCanvasDimensions(el, ctx, size, retinaScaling);\n  }\n\n  setCSSDimensions(size: Partial<CSSDimensions>) {\n    setCSSDimensions(this.lower.el, size);\n  }\n\n  /**\n   * Calculates canvas element offset relative to the document\n   */\n  calcOffset() {\n    return getElementOffset(this.lower.el);\n  }\n\n  dispose() {\n    getEnv().dispose(this.lower.el);\n    // @ts-expect-error disposing\n    delete this.lower;\n  }\n}\n", "import { iMatrix } from '../constants';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TFiller, TMat2D, TOptions } from '../typedefs';\nimport type { StaticCanvas } from './StaticCanvas';\n\ninterface CanvasDrawableOptions {\n  /**\n   * if set to false background image is not affected by viewport transform\n   * @since 1.6.3\n   * @type Boolean\n   * @todo we should really find a different way to do this\n   * @default\n   */\n  backgroundVpt: boolean;\n\n  /**\n   * Background color of canvas instance.\n   * @type {(String|TFiller)}\n   * @default\n   */\n  backgroundColor: TFiller | string;\n\n  /**\n   * Background image of canvas instance.\n   * since 2.4.0 image caching is active, please when putting an image as background, add to the\n   * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n   * vale. As an alternative you can disable image objectCaching\n   * @type FabricObject\n   * @default\n   */\n  backgroundImage?: FabricObject;\n\n  /**\n   * if set to false overlay image is not affected by viewport transform\n   * @since 1.6.3\n   * @type Boolean\n   * @todo we should really find a different way to do this\n   * @default\n   */\n  overlayVpt: boolean;\n\n  /**\n   * Overlay color of canvas instance.\n   * @since 1.3.9\n   * @type {(String|TFiller)}\n   * @default\n   */\n  overlayColor: TFiller | string;\n\n  /**\n   * Overlay image of canvas instance.\n   * since 2.4.0 image caching is active, please when putting an image as overlay, add to the\n   * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n   * vale. As an alternative you can disable image objectCaching\n   * @type FabricObject\n   * @default\n   */\n  overlayImage?: FabricObject;\n}\n\ninterface CanvasRenderingOptions {\n  /**\n   * Indicates whether {@link StaticCanvas#add}, {@link StaticCanvas#insertAt} and {@link StaticCanvas#remove},\n   * {@link StaticCanvas#moveTo}, {@link StaticCanvas#clear} and many more, should also re-render canvas.\n   * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once\n   * since the renders are queued and executed one per frame.\n   * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )\n   * Left default to true to do not break documentation and old app, fiddles.\n   * @type Boolean\n   * @default\n   */\n  renderOnAddRemove: boolean;\n\n  /**\n   * Based on vptCoords and object.aCoords, skip rendering of objects that\n   * are not included in current viewport.\n   * May greatly help in applications with crowded canvas and use of zoom/pan\n   * If One of the corner of the bounding box of the object is on the canvas\n   * the objects get rendered.\n   * @type Boolean\n   * @default true\n   */\n  skipOffscreen: boolean;\n\n  /**\n   * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\n   * @type Boolean\n   * @default\n   */\n  enableRetinaScaling: boolean;\n\n  /**\n   * Indicates whether this canvas will use image smoothing, this is on by default in browsers\n   * @type Boolean\n   * @default\n   */\n  imageSmoothingEnabled: boolean;\n\n  /**\n   * a fabricObject that, without stroke define a clipping area with their shape. filled in black\n   * the clipPath object gets used when the canvas has rendered, and the context is placed in the\n   * top left corner of the canvas.\n   * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true\n   * @type FabricObject\n   */\n  clipPath?: FabricObject;\n}\n\nexport interface CanvasExportOptions {\n  /**\n   * Indicates whether toObject/toDatalessObject should include default values\n   * if set to false, takes precedence over the object value.\n   * @type Boolean\n   * @default\n   */\n  includeDefaultValues: boolean;\n\n  /**\n   * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,\n   * a zoomed canvas will then produce zoomed SVG output.\n   * @type Boolean\n   * @default\n   */\n  svgViewportTransformation: boolean;\n}\n\nexport interface StaticCanvasOptions\n  extends CanvasDrawableOptions,\n    CanvasRenderingOptions,\n    CanvasExportOptions {\n  /**\n   * Width in virtual/logical pixels of the canvas.\n   * The canvas can be larger than width if retina scaling is active\n   * @type number\n   */\n  width: number;\n\n  /**\n   * Height in virtual/logical pixels of the canvas.\n   * The canvas can be taller than width if retina scaling is active\n   * @type height\n   */\n  height: number;\n\n  /**\n   * Indicates whether object controls (borders/controls) are rendered above overlay image\n   * @type Boolean\n   * @default\n   *\n   * @todo move to Canvas\n   */\n  controlsAboveOverlay: boolean;\n\n  /**\n   * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\n   * @type Boolean\n   * @default\n   *\n   * @todo move to Canvas\n   */\n  allowTouchScrolling: boolean;\n\n  /**\n   * The transformation (a Canvas 2D API transform matrix) which focuses the viewport\n   * @type Array\n   * @example <caption>Default transform</caption>\n   * canvas.viewportTransform = [1, 0, 0, 1, 0, 0];\n   * @example <caption>Scale by 70% and translate toward bottom-right by 50, without skewing</caption>\n   * canvas.viewportTransform = [0.7, 0, 0, 0.7, 50, 50];\n   * @default\n   */\n  viewportTransform: TMat2D;\n}\n\nexport const staticCanvasDefaults: TOptions<StaticCanvasOptions> = {\n  backgroundVpt: true,\n  backgroundColor: '',\n  overlayVpt: true,\n  overlayColor: '',\n\n  includeDefaultValues: true,\n  svgViewportTransformation: true,\n\n  renderOnAddRemove: true,\n  skipOffscreen: true,\n  enableRetinaScaling: true,\n  imageSmoothingEnabled: true,\n\n  /**\n   * @todo move to Canvas\n   */\n  controlsAboveOverlay: false,\n  /**\n   * @todo move to Canvas\n   */\n  allowTouchScrolling: false,\n\n  viewportTransform: [...iMatrix],\n};\n", "import { config } from '../config';\nimport { CENTER, VERSION } from '../constants';\nimport type { CanvasEvents, StaticCanvasEvents } from '../EventTypeDefs';\nimport type { Gradient } from '../gradient/Gradient';\nimport { createCollectionMixin, isCollection } from '../Collection';\nimport { CommonMethods } from '../CommonMethods';\nimport type { Pattern } from '../Pattern';\nimport { Point } from '../Point';\nimport type { TCachedFabricObject } from '../shapes/Object/Object';\nimport type {\n  Abortable,\n  Constructor,\n  TCornerPoint,\n  TDataUrlOptions,\n  TFiller,\n  TMat2D,\n  TSize,\n  TSVGReviver,\n  TToCanvasElementOptions,\n  TValidToObjectMethod,\n  TOptions,\n} from '../typedefs';\nimport {\n  cancelAnimFrame,\n  requestAnimFrame,\n} from '../util/animation/AnimationFrameProvider';\nimport { runningAnimations } from '../util/animation/AnimationRegistry';\nimport { uid } from '../util/internals/uid';\nimport { createCanvasElement, toDataURL } from '../util/misc/dom';\nimport { invertTransform, transformPoint } from '../util/misc/matrix';\nimport type { EnlivenObjectOptions } from '../util/misc/objectEnlive';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n} from '../util/misc/objectEnlive';\nimport { pick } from '../util/misc/pick';\nimport { matrixToSVG } from '../util/misc/svgParsing';\nimport { toFixed } from '../util/misc/toFixed';\nimport { isFiller, isPattern, isTextObject } from '../util/typeAssertions';\nimport { StaticCanvasDOMManager } from './DOMManagers/StaticCanvasDOMManager';\nimport type { CSSDimensions } from './DOMManagers/util';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { StaticCanvasOptions } from './StaticCanvasOptions';\nimport { staticCanvasDefaults } from './StaticCanvasOptions';\nimport { log, FabricError } from '../util/internals/console';\nimport { getDevicePixelRatio } from '../env';\n\n/**\n * Having both options in TCanvasSizeOptions set to true transform the call in a calcOffset\n * Better try to restrict with types to avoid confusion.\n */\nexport type TCanvasSizeOptions =\n  | {\n      backstoreOnly?: true;\n      cssOnly?: false;\n    }\n  | {\n      backstoreOnly?: false;\n      cssOnly?: true;\n    };\n\nexport type TSVGExportOptions = {\n  suppressPreamble?: boolean;\n  viewBox?: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n  encoding?: 'UTF-8'; // test Encoding type and see what happens\n  width?: string;\n  height?: string;\n  reviver?: TSVGReviver;\n};\n\n/**\n * Static canvas class\n * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}\n * @fires before:render\n * @fires after:render\n * @fires canvas:cleared\n * @fires object:added\n * @fires object:removed\n */\n// TODO: fix `EventSpec` inheritance https://github.com/microsoft/TypeScript/issues/26154#issuecomment-1366616260\nexport class StaticCanvas<\n    EventSpec extends StaticCanvasEvents = StaticCanvasEvents\n  >\n  extends createCollectionMixin(CommonMethods<CanvasEvents>)\n  implements StaticCanvasOptions\n{\n  declare width: number;\n  declare height: number;\n\n  // background\n  declare backgroundVpt: boolean;\n  declare backgroundColor: TFiller | string;\n  declare backgroundImage?: FabricObject;\n  // overlay\n  declare overlayVpt: boolean;\n  declare overlayColor: TFiller | string;\n  declare overlayImage?: FabricObject;\n\n  declare clipPath?: FabricObject;\n\n  declare includeDefaultValues: boolean;\n\n  // rendering config\n  declare renderOnAddRemove: boolean;\n  declare skipOffscreen: boolean;\n  declare enableRetinaScaling: boolean;\n  declare imageSmoothingEnabled: boolean;\n\n  /**\n   * @todo move to Canvas\n   */\n  declare controlsAboveOverlay: boolean;\n\n  /**\n   * @todo move to Canvas\n   */\n  declare allowTouchScrolling: boolean;\n\n  declare viewportTransform: TMat2D;\n\n  /**\n   * The viewport bounding box in scene plane coordinates, see {@link calcViewportBoundaries}\n   */\n  declare vptCoords: TCornerPoint;\n\n  /**\n   * A reference to the canvas actual HTMLCanvasElement.\n   * Can be use to read the raw pixels, but never write or manipulate\n   * @type HTMLCanvasElement\n   */\n  get lowerCanvasEl() {\n    return this.elements.lower?.el;\n  }\n\n  get contextContainer() {\n    return this.elements.lower?.ctx;\n  }\n\n  /**\n   * If true the Canvas is in the process or has been disposed/destroyed.\n   * No more rendering operation will be executed on this canvas.\n   * @type boolean\n   */\n  declare destroyed?: boolean;\n\n  /**\n   * Started the process of disposing but not done yet.\n   * WIll likely complete the render cycle already scheduled but stopping adding more.\n   * @type boolean\n   */\n  declare disposed?: boolean;\n\n  declare _offset: { left: number; top: number };\n  protected declare hasLostContext: boolean;\n  protected declare nextRenderHandle: number;\n\n  declare elements: StaticCanvasDOMManager;\n\n  /**\n   * When true control drawing is skipped.\n   * This boolean is used to avoid toDataURL to export controls.\n   * Usage of this boolean to build up other flows and features is not supported\n   * @type Boolean\n   * @default false\n   */\n  protected declare skipControlsDrawing: boolean;\n\n  static ownDefaults = staticCanvasDefaults;\n\n  // reference to\n  protected declare __cleanupTask?: {\n    (): void;\n    kill: (reason?: any) => void;\n  };\n\n  static getDefaults(): Record<string, any> {\n    return StaticCanvas.ownDefaults;\n  }\n\n  constructor(\n    el?: string | HTMLCanvasElement,\n    options: TOptions<StaticCanvasOptions> = {}\n  ) {\n    super();\n    Object.assign(\n      this,\n      (this.constructor as typeof StaticCanvas).getDefaults()\n    );\n    this.set(options);\n    this.initElements(el);\n    this._setDimensionsImpl({\n      width: this.width || this.elements.lower.el.width || 0,\n      height: this.height || this.elements.lower.el.height || 0,\n    });\n    this.skipControlsDrawing = false;\n    this.viewportTransform = [...this.viewportTransform];\n    this.calcViewportBoundaries();\n  }\n\n  protected initElements(el?: string | HTMLCanvasElement) {\n    this.elements = new StaticCanvasDOMManager(el);\n  }\n\n  add(...objects: FabricObject[]) {\n    const size = super.add(...objects);\n    objects.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return size;\n  }\n\n  insertAt(index: number, ...objects: FabricObject[]) {\n    const size = super.insertAt(index, ...objects);\n    objects.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return size;\n  }\n\n  remove(...objects: FabricObject[]) {\n    const removed = super.remove(...objects);\n    removed.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return removed;\n  }\n\n  _onObjectAdded(obj: FabricObject) {\n    if (obj.canvas && (obj.canvas as StaticCanvas) !== this) {\n      log(\n        'warn',\n        'Canvas is trying to add an object that belongs to a different canvas.\\n' +\n          'Resulting to default behavior: removing object from previous canvas and adding to new canvas'\n      );\n      obj.canvas.remove(obj);\n    }\n    obj._set('canvas', this);\n    obj.setCoords();\n    this.fire('object:added', { target: obj });\n    obj.fire('added', { target: this });\n  }\n\n  _onObjectRemoved(obj: FabricObject) {\n    obj._set('canvas', undefined);\n    this.fire('object:removed', { target: obj });\n    obj.fire('removed', { target: this });\n  }\n\n  _onStackOrderChanged() {\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * @private\n   * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n   * @return {Number} retinaScaling if applied, otherwise 1;\n   */\n  getRetinaScaling() {\n    return this.enableRetinaScaling ? getDevicePixelRatio() : 1;\n  }\n\n  /**\n   * Calculates canvas element offset relative to the document\n   * This method is also attached as \"resize\" event handler of window\n   */\n  calcOffset() {\n    return (this._offset = this.elements.calcOffset());\n  }\n\n  /**\n   * Returns canvas width (in px)\n   * @return {Number}\n   */\n  getWidth(): number {\n    return this.width;\n  }\n\n  /**\n   * Returns canvas height (in px)\n   * @return {Number}\n   */\n  getHeight(): number {\n    return this.height;\n  }\n\n  /**\n   * Sets width of this canvas instance\n   * @param {Number|String} value                         Value to set width to\n   * @param {Object}        [options]                     Options object\n   * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n   * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n   * @deprecated will be removed in 7.0\n   */\n  setWidth(\n    value: TSize['width'],\n    options?: { backstoreOnly?: true; cssOnly?: false }\n  ): void;\n  setWidth(\n    value: CSSDimensions['width'],\n    options?: { cssOnly?: true; backstoreOnly?: false }\n  ): void;\n  setWidth(value: number, options?: never) {\n    return this.setDimensions({ width: value }, options);\n  }\n\n  /**s\n   * Sets height of this canvas instance\n   * @param {Number|String} value                         Value to set height to\n   * @param {Object}        [options]                     Options object\n   * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n   * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n   * @deprecated will be removed in 7.0\n   */\n  setHeight(\n    value: TSize['height'],\n    options?: { backstoreOnly?: true; cssOnly?: false }\n  ): void;\n  setHeight(\n    value: CSSDimensions['height'],\n    options?: { cssOnly?: true; backstoreOnly?: false }\n  ): void;\n  setHeight(value: CSSDimensions['height'], options?: never) {\n    return this.setDimensions({ height: value }, options);\n  }\n\n  /**\n   * Internal use only\n   * @protected\n   */\n  protected _setDimensionsImpl(\n    dimensions: Partial<TSize | CSSDimensions>,\n    { cssOnly = false, backstoreOnly = false }: TCanvasSizeOptions = {}\n  ) {\n    if (!cssOnly) {\n      const size = {\n        width: this.width,\n        height: this.height,\n        ...(dimensions as Partial<TSize>),\n      };\n      this.elements.setDimensions(size, this.getRetinaScaling());\n      this.hasLostContext = true;\n      this.width = size.width;\n      this.height = size.height;\n    }\n    if (!backstoreOnly) {\n      this.elements.setCSSDimensions(dimensions);\n    }\n\n    this.calcOffset();\n  }\n\n  /**\n   * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\n   * @param {Object}        dimensions                    Object with width/height properties\n   * @param {Number|String} [dimensions.width]            Width of canvas element\n   * @param {Number|String} [dimensions.height]           Height of canvas element\n   * @param {Object}        [options]                     Options object\n   * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n   * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n   */\n  setDimensions(\n    dimensions: Partial<CSSDimensions>,\n    options?: { cssOnly?: true; backstoreOnly?: false }\n  ): void;\n  setDimensions(\n    dimensions: Partial<TSize>,\n    options?: { backstoreOnly?: true; cssOnly?: false }\n  ): void;\n  setDimensions(dimensions: Partial<TSize>, options?: never): void;\n  setDimensions(\n    dimensions: Partial<TSize | CSSDimensions>,\n    options?: TCanvasSizeOptions\n  ) {\n    this._setDimensionsImpl(dimensions, options);\n    if (!options || !options.cssOnly) {\n      this.requestRenderAll();\n    }\n  }\n\n  /**\n   * Returns canvas zoom level\n   * @return {Number}\n   */\n  getZoom() {\n    return this.viewportTransform[0];\n  }\n\n  /**\n   * Sets viewport transformation of this canvas instance\n   * @param {Array} vpt a Canvas 2D API transform matrix\n   */\n  setViewportTransform(vpt: TMat2D) {\n    const backgroundObject = this.backgroundImage,\n      overlayObject = this.overlayImage,\n      len = this._objects.length;\n\n    this.viewportTransform = vpt;\n    for (let i = 0; i < len; i++) {\n      const object = this._objects[i];\n      object.group || object.setCoords();\n    }\n    if (backgroundObject) {\n      backgroundObject.setCoords();\n    }\n    if (overlayObject) {\n      overlayObject.setCoords();\n    }\n    this.calcViewportBoundaries();\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Sets zoom level of this canvas instance, the zoom centered around point\n   * meaning that following zoom to point with the same point will have the visual\n   * effect of the zoom originating from that point. The point won't move.\n   * It has nothing to do with canvas center or visual center of the viewport.\n   * @param {Point} point to zoom with respect to\n   * @param {Number} value to set zoom to, less than 1 zooms out\n   */\n  zoomToPoint(point: Point, value: number) {\n    // TODO: just change the scale, preserve other transformations\n    const before = point,\n      vpt: TMat2D = [...this.viewportTransform];\n    const newPoint = transformPoint(point, invertTransform(vpt));\n    vpt[0] = value;\n    vpt[3] = value;\n    const after = transformPoint(newPoint, vpt);\n    vpt[4] += before.x - after.x;\n    vpt[5] += before.y - after.y;\n    this.setViewportTransform(vpt);\n  }\n\n  /**\n   * Sets zoom level of this canvas instance\n   * @param {Number} value to set zoom to, less than 1 zooms out\n   */\n  setZoom(value: number) {\n    this.zoomToPoint(new Point(0, 0), value);\n  }\n\n  /**\n   * Pan viewport so as to place point at top left corner of canvas\n   * @param {Point} point to move to\n   */\n  absolutePan(point: Point) {\n    const vpt: TMat2D = [...this.viewportTransform];\n    vpt[4] = -point.x;\n    vpt[5] = -point.y;\n    return this.setViewportTransform(vpt);\n  }\n\n  /**\n   * Pans viewpoint relatively\n   * @param {Point} point (position vector) to move by\n   */\n  relativePan(point: Point) {\n    return this.absolutePan(\n      new Point(\n        -point.x - this.viewportTransform[4],\n        -point.y - this.viewportTransform[5]\n      )\n    );\n  }\n\n  /**\n   * Returns &lt;canvas> element corresponding to this instance\n   * @return {HTMLCanvasElement}\n   */\n  getElement(): HTMLCanvasElement {\n    return this.elements.lower.el;\n  }\n\n  /**\n   * Clears specified context of canvas element\n   * @param {CanvasRenderingContext2D} ctx Context to clear\n   */\n  clearContext(ctx: CanvasRenderingContext2D) {\n    ctx.clearRect(0, 0, this.width, this.height);\n  }\n\n  /**\n   * Returns context of canvas where objects are drawn\n   * @return {CanvasRenderingContext2D}\n   */\n  getContext(): CanvasRenderingContext2D {\n    return this.elements.lower.ctx;\n  }\n\n  /**\n   * Clears all contexts (background, main, top) of an instance\n   */\n  clear() {\n    this.remove(...this.getObjects());\n    this.backgroundImage = undefined;\n    this.overlayImage = undefined;\n    this.backgroundColor = '';\n    this.overlayColor = '';\n    this.clearContext(this.getContext());\n    this.fire('canvas:cleared');\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Renders the canvas\n   */\n  renderAll() {\n    this.cancelRequestedRender();\n    if (this.destroyed) {\n      return;\n    }\n    this.renderCanvas(this.getContext(), this._objects);\n  }\n\n  /**\n   * Function created to be instance bound at initialization\n   * used in requestAnimationFrame rendering\n   * Let the fabricJS call it. If you call it manually you could have more\n   * animationFrame stacking on to of each other\n   * for an imperative rendering, use canvas.renderAll\n   * @private\n   */\n  renderAndReset() {\n    this.nextRenderHandle = 0;\n    this.renderAll();\n  }\n\n  /**\n   * Append a renderAll request to next animation frame.\n   * unless one is already in progress, in that case nothing is done\n   * a boolean flag will avoid appending more.\n   */\n  requestRenderAll() {\n    if (!this.nextRenderHandle && !this.disposed && !this.destroyed) {\n      this.nextRenderHandle = requestAnimFrame(() => this.renderAndReset());\n    }\n  }\n\n  /**\n   * Calculate the position of the 4 corner of canvas with current viewportTransform.\n   * helps to determinate when an object is in the current rendering viewport\n   */\n  calcViewportBoundaries(): TCornerPoint {\n    const width = this.width,\n      height = this.height,\n      iVpt = invertTransform(this.viewportTransform),\n      a = transformPoint({ x: 0, y: 0 }, iVpt),\n      b = transformPoint({ x: width, y: height }, iVpt),\n      // we don't support vpt flipping\n      // but the code is robust enough to mostly work with flipping\n      min = a.min(b),\n      max = a.max(b);\n    return (this.vptCoords = {\n      tl: min,\n      tr: new Point(max.x, min.y),\n      bl: new Point(min.x, max.y),\n      br: max,\n    });\n  }\n\n  cancelRequestedRender() {\n    if (this.nextRenderHandle) {\n      cancelAnimFrame(this.nextRenderHandle);\n      this.nextRenderHandle = 0;\n    }\n  }\n\n  drawControls(ctx: CanvasRenderingContext2D) {\n    // Static canvas has no controls\n  }\n\n  /**\n   * Renders background, objects, overlay and controls.\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {Array} objects to render\n   */\n  renderCanvas(ctx: CanvasRenderingContext2D, objects: FabricObject[]) {\n    if (this.destroyed) {\n      return;\n    }\n\n    const v = this.viewportTransform,\n      path = this.clipPath;\n    this.calcViewportBoundaries();\n    this.clearContext(ctx);\n    ctx.imageSmoothingEnabled = this.imageSmoothingEnabled;\n    // @ts-expect-error node-canvas stuff\n    ctx.patternQuality = 'best';\n    this.fire('before:render', { ctx });\n    this._renderBackground(ctx);\n\n    ctx.save();\n    //apply viewport transform once for all rendering process\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    this._renderObjects(ctx, objects);\n    ctx.restore();\n    if (!this.controlsAboveOverlay && !this.skipControlsDrawing) {\n      this.drawControls(ctx);\n    }\n    if (path) {\n      path._set('canvas', this);\n      // needed to setup a couple of variables\n      path.shouldCache();\n      path._transformDone = true;\n      path.renderCache({ forClipping: true });\n      this.drawClipPathOnCanvas(ctx, path as TCachedFabricObject);\n    }\n    this._renderOverlay(ctx);\n    if (this.controlsAboveOverlay && !this.skipControlsDrawing) {\n      this.drawControls(ctx);\n    }\n    this.fire('after:render', { ctx });\n\n    if (this.__cleanupTask) {\n      this.__cleanupTask();\n      this.__cleanupTask = undefined;\n    }\n  }\n\n  /**\n   * Paint the cached clipPath on the lowerCanvasEl\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawClipPathOnCanvas(\n    ctx: CanvasRenderingContext2D,\n    clipPath: TCachedFabricObject\n  ) {\n    const v = this.viewportTransform;\n    ctx.save();\n    ctx.transform(...v);\n    // DEBUG: uncomment this line, comment the following\n    // ctx.globalAlpha = 0.4;\n    ctx.globalCompositeOperation = 'destination-in';\n    clipPath.transform(ctx);\n    ctx.scale(1 / clipPath.zoomX, 1 / clipPath.zoomY);\n    ctx.drawImage(\n      clipPath._cacheCanvas,\n      -clipPath.cacheTranslationX,\n      -clipPath.cacheTranslationY\n    );\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Array} objects to render\n   */\n  _renderObjects(ctx: CanvasRenderingContext2D, objects: FabricObject[]) {\n    for (let i = 0, len = objects.length; i < len; ++i) {\n      objects[i] && objects[i].render(ctx);\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {string} property 'background' or 'overlay'\n   */\n  _renderBackgroundOrOverlay(\n    ctx: CanvasRenderingContext2D,\n    property: 'background' | 'overlay'\n  ) {\n    const fill = this[`${property}Color`],\n      object = this[`${property}Image`],\n      v = this.viewportTransform,\n      needsVpt = this[`${property}Vpt`];\n    if (!fill && !object) {\n      return;\n    }\n    const isAFiller = isFiller(fill);\n    if (fill) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      ctx.lineTo(this.width, 0);\n      ctx.lineTo(this.width, this.height);\n      ctx.lineTo(0, this.height);\n      ctx.closePath();\n      ctx.fillStyle = isAFiller ? fill.toLive(ctx /* this */)! : fill;\n      if (needsVpt) {\n        ctx.transform(...v);\n      }\n      if (isAFiller) {\n        ctx.transform(1, 0, 0, 1, fill.offsetX || 0, fill.offsetY || 0);\n        const m = ((fill as Gradient<'linear'>).gradientTransform ||\n          (fill as Pattern).patternTransform) as TMat2D;\n        m && ctx.transform(...m);\n      }\n      ctx.fill();\n      ctx.restore();\n    }\n    if (object) {\n      ctx.save();\n      const { skipOffscreen } = this;\n      // if the object doesn't move with the viewport,\n      // the offscreen concept does not apply;\n      this.skipOffscreen = needsVpt;\n      if (needsVpt) {\n        ctx.transform(...v);\n      }\n      object.render(ctx);\n      this.skipOffscreen = skipOffscreen;\n      ctx.restore();\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderBackground(ctx: CanvasRenderingContext2D) {\n    this._renderBackgroundOrOverlay(ctx, 'background');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderOverlay(ctx: CanvasRenderingContext2D) {\n    this._renderBackgroundOrOverlay(ctx, 'overlay');\n  }\n\n  /**\n   * Returns coordinates of a center of canvas.\n   * Returned value is an object with top and left properties\n   * @return {Object} object with \"top\" and \"left\" number values\n   * @deprecated migrate to `getCenterPoint`\n   */\n  getCenter() {\n    return {\n      top: this.height / 2,\n      left: this.width / 2,\n    };\n  }\n\n  /**\n   * Returns coordinates of a center of canvas.\n   * @return {Point}\n   */\n  getCenterPoint() {\n    return new Point(this.width / 2, this.height / 2);\n  }\n\n  /**\n   * Centers object horizontally in the canvas\n   */\n  centerObjectH(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(this.getCenterPoint().x, object.getCenterPoint().y)\n    );\n  }\n\n  /**\n   * Centers object vertically in the canvas\n   * @param {FabricObject} object Object to center vertically\n   */\n  centerObjectV(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(object.getCenterPoint().x, this.getCenterPoint().y)\n    );\n  }\n\n  /**\n   * Centers object vertically and horizontally in the canvas\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  centerObject(object: FabricObject) {\n    return this._centerObject(object, this.getCenterPoint());\n  }\n\n  /**\n   * Centers object vertically and horizontally in the viewport\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObject(object: FabricObject) {\n    return this._centerObject(object, this.getVpCenter());\n  }\n\n  /**\n   * Centers object horizontally in the viewport, object.top is unchanged\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObjectH(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(this.getVpCenter().x, object.getCenterPoint().y)\n    );\n  }\n\n  /**\n   * Centers object Vertically in the viewport, object.top is unchanged\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObjectV(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(object.getCenterPoint().x, this.getVpCenter().y)\n    );\n  }\n\n  /**\n   * Calculate the point in canvas that correspond to the center of actual viewport.\n   * @return {Point} vpCenter, viewport center\n   */\n  getVpCenter(): Point {\n    return transformPoint(\n      this.getCenterPoint(),\n      invertTransform(this.viewportTransform)\n    );\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object Object to center\n   * @param {Point} center Center point\n   */\n  _centerObject(object: FabricObject, center: Point) {\n    object.setXY(center, CENTER, CENTER);\n    object.setCoords();\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Returns dataless JSON representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {String} json string\n   */\n  toDatalessJSON(propertiesToInclude?: string[]) {\n    return this.toDatalessObject(propertiesToInclude);\n  }\n\n  /**\n   * Returns object representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject(propertiesToInclude?: string[]) {\n    return this._toObjectMethod('toObject', propertiesToInclude);\n  }\n\n  /**\n   * Returns Object representation of canvas\n   * this alias is provided because if you call JSON.stringify on an instance,\n   * the toJSON object will be invoked if it exists.\n   * Having a toJSON method means you can do JSON.stringify(myCanvas)\n   * @return {Object} JSON compatible object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\n   * @example <caption>JSON without additional properties</caption>\n   * var json = canvas.toJSON();\n   * @example <caption>JSON with additional properties included</caption>\n   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY']);\n   * @example <caption>JSON without default values</caption>\n   * var json = canvas.toJSON();\n   */\n  toJSON() {\n    return this.toObject();\n  }\n\n  /**\n   * Returns dataless object representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toDatalessObject(propertiesToInclude?: string[]) {\n    return this._toObjectMethod('toDatalessObject', propertiesToInclude);\n  }\n\n  /**\n   * @private\n   */\n  _toObjectMethod(\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[]\n  ) {\n    const clipPath = this.clipPath;\n    const clipPathData =\n      clipPath && !clipPath.excludeFromExport\n        ? this._toObject(clipPath, methodName, propertiesToInclude)\n        : null;\n    return {\n      version: VERSION,\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      objects: this._objects\n        .filter((object) => !object.excludeFromExport)\n        .map((instance) =>\n          this._toObject(instance, methodName, propertiesToInclude)\n        ),\n      ...this.__serializeBgOverlay(methodName, propertiesToInclude),\n      ...(clipPathData ? { clipPath: clipPathData } : null),\n    };\n  }\n\n  /**\n   * @private\n   */\n  protected _toObject(\n    instance: FabricObject,\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[]\n  ) {\n    let originalValue;\n\n    if (!this.includeDefaultValues) {\n      originalValue = instance.includeDefaultValues;\n      instance.includeDefaultValues = false;\n    }\n\n    const object = instance[methodName](propertiesToInclude);\n    if (!this.includeDefaultValues) {\n      instance.includeDefaultValues = !!originalValue;\n    }\n    return object;\n  }\n\n  /**\n   * @private\n   */\n  __serializeBgOverlay(\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[]\n  ) {\n    const data: any = {},\n      bgImage = this.backgroundImage,\n      overlayImage = this.overlayImage,\n      bgColor = this.backgroundColor,\n      overlayColor = this.overlayColor;\n\n    if (isFiller(bgColor)) {\n      if (!bgColor.excludeFromExport) {\n        data.background = bgColor.toObject(propertiesToInclude);\n      }\n    } else if (bgColor) {\n      data.background = bgColor;\n    }\n\n    if (isFiller(overlayColor)) {\n      if (!overlayColor.excludeFromExport) {\n        data.overlay = overlayColor.toObject(propertiesToInclude);\n      }\n    } else if (overlayColor) {\n      data.overlay = overlayColor;\n    }\n\n    if (bgImage && !bgImage.excludeFromExport) {\n      data.backgroundImage = this._toObject(\n        bgImage,\n        methodName,\n        propertiesToInclude\n      );\n    }\n    if (overlayImage && !overlayImage.excludeFromExport) {\n      data.overlayImage = this._toObject(\n        overlayImage,\n        methodName,\n        propertiesToInclude\n      );\n    }\n\n    return data;\n  }\n\n  /* _TO_SVG_START_ */\n\n  declare svgViewportTransformation: boolean;\n\n  /**\n   * Returns SVG representation of canvas\n   * @function\n   * @param {Object} [options] Options object for SVG output\n   * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included\n   * @param {Object} [options.viewBox] SVG viewbox object\n   * @param {Number} [options.viewBox.x] x-coordinate of viewbox\n   * @param {Number} [options.viewBox.y] y-coordinate of viewbox\n   * @param {Number} [options.viewBox.width] Width of viewbox\n   * @param {Number} [options.viewBox.height] Height of viewbox\n   * @param {String} [options.encoding=UTF-8] Encoding of SVG output\n   * @param {String} [options.width] desired width of svg with or without units\n   * @param {String} [options.height] desired height of svg with or without units\n   * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.\n   * @return {String} SVG string\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}\n   * @example <caption>Normal SVG output</caption>\n   * var svg = canvas.toSVG();\n   * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>\n   * var svg = canvas.toSVG({suppressPreamble: true});\n   * @example <caption>SVG output with viewBox attribute</caption>\n   * var svg = canvas.toSVG({\n   *   viewBox: {\n   *     x: 100,\n   *     y: 100,\n   *     width: 200,\n   *     height: 300\n   *   }\n   * });\n   * @example <caption>SVG output with different encoding (default: UTF-8)</caption>\n   * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});\n   * @example <caption>Modify SVG output with reviver function</caption>\n   * var svg = canvas.toSVG(null, function(svg) {\n   *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');\n   * });\n   */\n  toSVG(options: TSVGExportOptions = {}, reviver: TSVGReviver) {\n    options.reviver = reviver;\n    const markup: string[] = [];\n\n    this._setSVGPreamble(markup, options);\n    this._setSVGHeader(markup, options);\n    if (this.clipPath) {\n      markup.push(`<g clip-path=\"url(#${this.clipPath.clipPathId})\" >\\n`);\n    }\n    this._setSVGBgOverlayColor(markup, 'background');\n    this._setSVGBgOverlayImage(markup, 'backgroundImage', reviver);\n    this._setSVGObjects(markup, reviver);\n    if (this.clipPath) {\n      markup.push('</g>\\n');\n    }\n    this._setSVGBgOverlayColor(markup, 'overlay');\n    this._setSVGBgOverlayImage(markup, 'overlayImage', reviver);\n\n    markup.push('</svg>');\n\n    return markup.join('');\n  }\n\n  /**\n   * @private\n   */\n  _setSVGPreamble(markup: string[], options: TSVGExportOptions): void {\n    if (options.suppressPreamble) {\n      return;\n    }\n    markup.push(\n      '<?xml version=\"1.0\" encoding=\"',\n      options.encoding || 'UTF-8',\n      '\" standalone=\"no\" ?>\\n',\n      '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ',\n      '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n'\n    );\n  }\n\n  /**\n   * @private\n   */\n  _setSVGHeader(markup: string[], options: TSVGExportOptions): void {\n    const width = options.width || `${this.width}`,\n      height = options.height || `${this.height}`,\n      NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS,\n      optViewBox = options.viewBox;\n    let viewBox: string;\n    if (optViewBox) {\n      viewBox = `viewBox=\"${optViewBox.x} ${optViewBox.y} ${optViewBox.width} ${optViewBox.height}\" `;\n    } else if (this.svgViewportTransformation) {\n      const vpt = this.viewportTransform;\n      viewBox = `viewBox=\"${toFixed(\n        -vpt[4] / vpt[0],\n        NUM_FRACTION_DIGITS\n      )} ${toFixed(-vpt[5] / vpt[3], NUM_FRACTION_DIGITS)} ${toFixed(\n        this.width / vpt[0],\n        NUM_FRACTION_DIGITS\n      )} ${toFixed(this.height / vpt[3], NUM_FRACTION_DIGITS)}\" `;\n    } else {\n      viewBox = `viewBox=\"0 0 ${this.width} ${this.height}\" `;\n    }\n\n    markup.push(\n      '<svg ',\n      'xmlns=\"http://www.w3.org/2000/svg\" ',\n      'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ',\n      'version=\"1.1\" ',\n      'width=\"',\n      width,\n      '\" ',\n      'height=\"',\n      height,\n      '\" ',\n      viewBox,\n      'xml:space=\"preserve\">\\n',\n      '<desc>Created with Fabric.js ',\n      VERSION,\n      '</desc>\\n',\n      '<defs>\\n',\n      this.createSVGFontFacesMarkup(),\n      this.createSVGRefElementsMarkup(),\n      this.createSVGClipPathMarkup(options),\n      '</defs>\\n'\n    );\n  }\n\n  createSVGClipPathMarkup(options: TSVGExportOptions): string {\n    const clipPath = this.clipPath;\n    if (clipPath) {\n      clipPath.clipPathId = `CLIPPATH_${uid()}`;\n      return `<clipPath id=\"${clipPath.clipPathId}\" >\\n${clipPath.toClipPathSVG(\n        options.reviver\n      )}</clipPath>\\n`;\n    }\n    return '';\n  }\n\n  /**\n   * Creates markup containing SVG referenced elements like patterns, gradients etc.\n   * @return {String}\n   */\n  createSVGRefElementsMarkup(): string {\n    return (['background', 'overlay'] as const)\n      .map((prop) => {\n        const fill = this[`${prop}Color`];\n        if (isFiller(fill)) {\n          const shouldTransform = this[`${prop}Vpt`],\n            vpt = this.viewportTransform,\n            object = {\n              // otherwise circular dependency\n              isType: () => false,\n              width: this.width / (shouldTransform ? vpt[0] : 1),\n              height: this.height / (shouldTransform ? vpt[3] : 1),\n            };\n          return fill.toSVG(object as FabricObject, {\n            additionalTransform: shouldTransform ? matrixToSVG(vpt) : '',\n          });\n        }\n      })\n      .join('');\n  }\n\n  /**\n   * Creates markup containing SVG font faces,\n   * font URLs for font faces must be collected by developers\n   * and are not extracted from the DOM by fabricjs\n   * @param {Array} objects Array of fabric objects\n   * @return {String}\n   */\n  createSVGFontFacesMarkup(): string {\n    const objects: FabricObject[] = [],\n      fontList: Record<string, boolean> = {},\n      fontPaths = config.fontPaths;\n\n    this._objects.forEach(function add(object) {\n      objects.push(object);\n      if (isCollection(object)) {\n        object._objects.forEach(add);\n      }\n    });\n\n    objects.forEach((obj) => {\n      if (!isTextObject(obj)) {\n        return;\n      }\n      const { styles, fontFamily } = obj;\n      if (fontList[fontFamily] || !fontPaths[fontFamily]) {\n        return;\n      }\n      fontList[fontFamily] = true;\n      if (!styles) {\n        return;\n      }\n      Object.values(styles).forEach((styleRow) => {\n        Object.values(styleRow).forEach(({ fontFamily = '' }) => {\n          if (!fontList[fontFamily] && fontPaths[fontFamily]) {\n            fontList[fontFamily] = true;\n          }\n        });\n      });\n    });\n\n    const fontListMarkup = Object.keys(fontList)\n      .map(\n        (fontFamily) =>\n          `\\t\\t@font-face {\\n\\t\\t\\tfont-family: '${fontFamily}';\\n\\t\\t\\tsrc: url('${fontPaths[fontFamily]}');\\n\\t\\t}\\n`\n      )\n      .join('');\n\n    if (fontListMarkup) {\n      return `\\t<style type=\"text/css\"><![CDATA[\\n${fontListMarkup}]]></style>\\n`;\n    }\n    return '';\n  }\n\n  /**\n   * @private\n   */\n  _setSVGObjects(markup: string[], reviver: TSVGReviver) {\n    this.forEachObject((fabricObject) => {\n      if (fabricObject.excludeFromExport) {\n        return;\n      }\n      this._setSVGObject(markup, fabricObject, reviver);\n    });\n  }\n\n  /**\n   * This is its own function because the Canvas ( non static ) requires extra code here\n   * @private\n   */\n  _setSVGObject(\n    markup: string[],\n    instance: FabricObject,\n    reviver: TSVGReviver\n  ) {\n    markup.push(instance.toSVG(reviver));\n  }\n\n  /**\n   * @private\n   */\n  _setSVGBgOverlayImage(\n    markup: string[],\n    property: 'overlayImage' | 'backgroundImage',\n    reviver: TSVGReviver\n  ) {\n    const bgOrOverlay = this[property];\n    if (bgOrOverlay && !bgOrOverlay.excludeFromExport && bgOrOverlay.toSVG) {\n      markup.push(bgOrOverlay.toSVG(reviver));\n    }\n  }\n\n  /**\n   * @TODO this seems to handle patterns but fail at gradients.\n   * @private\n   */\n  _setSVGBgOverlayColor(markup: string[], property: 'background' | 'overlay') {\n    const filler = this[`${property}Color`];\n    if (!filler) {\n      return;\n    }\n    if (isFiller(filler)) {\n      const repeat = (filler as Pattern).repeat || '',\n        finalWidth = this.width,\n        finalHeight = this.height,\n        shouldInvert = this[`${property}Vpt`],\n        additionalTransform = shouldInvert\n          ? matrixToSVG(invertTransform(this.viewportTransform))\n          : '';\n      markup.push(\n        `<rect transform=\"${additionalTransform} translate(${finalWidth / 2},${\n          finalHeight / 2\n        })\" x=\"${filler.offsetX - finalWidth / 2}\" y=\"${\n          filler.offsetY - finalHeight / 2\n        }\" width=\"${\n          (repeat === 'repeat-y' || repeat === 'no-repeat') && isPattern(filler)\n            ? (filler.source as HTMLImageElement).width\n            : finalWidth\n        }\" height=\"${\n          (repeat === 'repeat-x' || repeat === 'no-repeat') && isPattern(filler)\n            ? (filler.source as HTMLImageElement).height\n            : finalHeight\n        }\" fill=\"url(#SVGID_${filler.id})\"></rect>\\n`\n      );\n    } else {\n      markup.push(\n        '<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" ',\n        'fill=\"',\n        filler,\n        '\"',\n        '></rect>\\n'\n      );\n    }\n  }\n  /* _TO_SVG_END_ */\n\n  /**\n   * Populates canvas with data from the specified JSON.\n   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\n   *\n   * **IMPORTANT**: It is recommended to abort loading tasks before calling this method to prevent race conditions and unnecessary networking\n   *\n   * @param {String|Object} json JSON string or object\n   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n   * @param {Object} [options] options\n   * @param {AbortSignal} [options.signal] see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @return {Promise<Canvas | StaticCanvas>} instance\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\n   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\n   * @example <caption>loadFromJSON</caption>\n   * canvas.loadFromJSON(json).then((canvas) => canvas.requestRenderAll());\n   * @example <caption>loadFromJSON with reviver</caption>\n   * canvas.loadFromJSON(json, function(o, object) {\n   *   // `o` = json object\n   *   // `object` = fabric.Object instance\n   *   // ... do some stuff ...\n   * }).then((canvas) => {\n   *   ... canvas is restored, add your code.\n   * });\n   *\n   */\n  loadFromJSON(\n    json: string | Record<string, any>,\n    reviver?: EnlivenObjectOptions['reviver'],\n    { signal }: Abortable = {}\n  ): Promise<this> {\n    if (!json) {\n      return Promise.reject(new FabricError('`json` is undefined'));\n    }\n\n    // parse json if it wasn't already\n    const serialized = typeof json === 'string' ? JSON.parse(json) : json;\n    const {\n      objects = [],\n      backgroundImage,\n      background,\n      overlayImage,\n      overlay,\n      clipPath,\n    } = serialized;\n    const renderOnAddRemove = this.renderOnAddRemove;\n    this.renderOnAddRemove = false;\n\n    return Promise.all([\n      enlivenObjects<FabricObject>(objects, {\n        reviver,\n        signal,\n      }),\n      enlivenObjectEnlivables(\n        {\n          backgroundImage,\n          backgroundColor: background,\n          overlayImage,\n          overlayColor: overlay,\n          clipPath,\n        },\n        { signal }\n      ),\n    ]).then(([enlived, enlivedMap]) => {\n      this.clear();\n      this.add(...enlived);\n      this.set(serialized);\n      this.set(enlivedMap);\n      this.renderOnAddRemove = renderOnAddRemove;\n      return this;\n    });\n  }\n\n  /**\n   * Clones canvas instance\n   * @param {string[]} [properties] Array of properties to include in the cloned canvas and children\n   */\n  clone(properties: string[]) {\n    const data = this.toObject(properties);\n    const canvas = this.cloneWithoutData();\n    return canvas.loadFromJSON(data);\n  }\n\n  /**\n   * Clones canvas instance without cloning existing data.\n   * This essentially copies canvas dimensions since loadFromJSON does not affect canvas size.\n   */\n  cloneWithoutData() {\n    const el = createCanvasElement();\n    el.width = this.width;\n    el.height = this.height;\n    return new (this.constructor as Constructor<this>)(el);\n  }\n\n  /**\n   * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\n   * @param {Object} [options] Options object\n   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n   * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0\n   * @param {(object: fabric.Object) => boolean} [options.filter] Function to filter objects.\n   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n   * @see {@link https://jsfiddle.net/xsjua1rd/ demo}\n   * @example <caption>Generate jpeg dataURL with lower quality</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'jpeg',\n   *   quality: 0.8\n   * });\n   * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'png',\n   *   left: 100,\n   *   top: 100,\n   *   width: 200,\n   *   height: 200\n   * });\n   * @example <caption>Generate double scaled png dataURL</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'png',\n   *   multiplier: 2\n   * });\n   * @example <caption>Generate dataURL with objects that overlap a specified object</caption>\n   * var myObject;\n   * var dataURL = canvas.toDataURL({\n   *   filter: (object) => object.isContainedWithinObject(myObject) || object.intersectsWithObject(myObject)\n   * });\n   */\n  toDataURL(options = {} as TDataUrlOptions): string {\n    const {\n      format = 'png',\n      quality = 1,\n      multiplier = 1,\n      enableRetinaScaling = false,\n    } = options;\n    const finalMultiplier =\n      multiplier * (enableRetinaScaling ? this.getRetinaScaling() : 1);\n\n    return toDataURL(\n      this.toCanvasElement(finalMultiplier, options),\n      format,\n      quality\n    );\n  }\n\n  /**\n   * Create a new HTMLCanvas element painted with the current canvas content.\n   * No need to resize the actual one or repaint it.\n   * Will transfer object ownership to a new canvas, paint it, and set everything back.\n   * This is an intermediary step used to get to a dataUrl but also it is useful to\n   * create quick image copies of a canvas without passing for the dataUrl string\n   * @param {Number} [multiplier] a zoom factor.\n   * @param {Object} [options] Cropping informations\n   * @param {Number} [options.left] Cropping left offset.\n   * @param {Number} [options.top] Cropping top offset.\n   * @param {Number} [options.width] Cropping width.\n   * @param {Number} [options.height] Cropping height.\n   * @param {(object: fabric.Object) => boolean} [options.filter] Function to filter objects.\n   */\n  toCanvasElement(\n    multiplier = 1,\n    { width, height, left, top, filter } = {} as TToCanvasElementOptions\n  ): HTMLCanvasElement {\n    const scaledWidth = (width || this.width) * multiplier,\n      scaledHeight = (height || this.height) * multiplier,\n      zoom = this.getZoom(),\n      originalWidth = this.width,\n      originalHeight = this.height,\n      originalSkipControlsDrawing = this.skipControlsDrawing,\n      newZoom = zoom * multiplier,\n      vp = this.viewportTransform,\n      translateX = (vp[4] - (left || 0)) * multiplier,\n      translateY = (vp[5] - (top || 0)) * multiplier,\n      newVp = [newZoom, 0, 0, newZoom, translateX, translateY] as TMat2D,\n      originalRetina = this.enableRetinaScaling,\n      canvasEl = createCanvasElement(),\n      objectsToRender = filter\n        ? this._objects.filter((obj) => filter(obj))\n        : this._objects;\n    canvasEl.width = scaledWidth;\n    canvasEl.height = scaledHeight;\n    this.enableRetinaScaling = false;\n    this.viewportTransform = newVp;\n    this.width = scaledWidth;\n    this.height = scaledHeight;\n    this.skipControlsDrawing = true;\n    this.calcViewportBoundaries();\n    this.renderCanvas(canvasEl.getContext('2d')!, objectsToRender);\n    this.viewportTransform = vp;\n    this.width = originalWidth;\n    this.height = originalHeight;\n    this.calcViewportBoundaries();\n    this.enableRetinaScaling = originalRetina;\n    this.skipControlsDrawing = originalSkipControlsDrawing;\n    return canvasEl;\n  }\n\n  /**\n   * Waits until rendering has settled to destroy the canvas\n   * @returns {Promise<boolean>} a promise resolving to `true` once the canvas has been destroyed or to `false` if the canvas has was already destroyed\n   * @throws if aborted by a consequent call\n   */\n  dispose() {\n    !this.disposed &&\n      this.elements.cleanupDOM({ width: this.width, height: this.height });\n    runningAnimations.cancelByCanvas(this);\n    this.disposed = true;\n    return new Promise<boolean>((resolve, reject) => {\n      const task = () => {\n        this.destroy();\n        resolve(true);\n      };\n      task.kill = reject;\n      if (this.__cleanupTask) {\n        this.__cleanupTask.kill('aborted');\n      }\n\n      if (this.destroyed) {\n        resolve(false);\n      } else if (this.nextRenderHandle) {\n        this.__cleanupTask = task;\n      } else {\n        task();\n      }\n    });\n  }\n\n  /**\n   * Clears the canvas element, disposes objects and frees resources.\n   *\n   * Invoked as part of the **async** operation of {@link dispose}.\n   *\n   * **CAUTION**:\n   *\n   * This method is **UNSAFE**.\n   * You may encounter a race condition using it if there's a requested render.\n   * Call this method only if you are sure rendering has settled.\n   * Consider using {@link dispose} as it is **SAFE**\n   *\n   * @private\n   */\n  destroy() {\n    this.destroyed = true;\n    this.cancelRequestedRender();\n    this.forEachObject((object) => object.dispose());\n    this._objects = [];\n    if (this.backgroundImage) {\n      this.backgroundImage.dispose();\n    }\n    this.backgroundImage = undefined;\n    if (this.overlayImage) {\n      this.overlayImage.dispose();\n    }\n    this.overlayImage = undefined;\n    this.elements.dispose();\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @return {String} string representation of an instance\n   */\n  toString() {\n    return `#<Canvas (${this.complexity()}): { objects: ${\n      this._objects.length\n    } }>`;\n  }\n}\n", "import type { TPointerEvent } from '../EventTypeDefs';\nimport { Point } from '../Point';\nimport { getScrollLeftTop } from './dom_misc';\n\nconst touchEvents = ['touchstart', 'touchmove', 'touchend'];\n\nfunction getTouchInfo(event: TouchEvent | MouseEvent): MouseEvent | Touch {\n  const touchProp = (event as TouchEvent).changedTouches;\n  if (touchProp && touchProp[0]) {\n    return touchProp[0];\n  }\n  return event as MouseEvent;\n}\n\nexport const getPointer = (event: TPointerEvent): Point => {\n  const element = event.target as HTMLElement,\n    scroll = getScrollLeftTop(element),\n    _evt = getTouchInfo(event);\n  return new Point(_evt.clientX + scroll.left, _evt.clientY + scroll.top);\n};\n\nexport const isTouchEvent = (event: TPointerEvent) =>\n  touchEvents.includes(event.type) ||\n  (event as PointerEvent).pointerType === 'touch';\n\nexport const stopEvent = (e: Event) => {\n  e.preventDefault();\n  e.stopPropagation();\n};\n", "import type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport type { TBBox } from '../../typedefs';\n\n/**\n * Calculates bounding box (left, top, width, height) from given `points`\n * @param {XY[]} points\n * @return {Object} Object with left, top, width, height properties\n */\nexport const makeBoundingBoxFromPoints = (points: XY[]): TBBox => {\n  if (points.length === 0) {\n    return {\n      left: 0,\n      top: 0,\n      width: 0,\n      height: 0,\n    };\n  }\n\n  const { min, max } = points.reduce(\n    ({ min, max }, curr) => {\n      return {\n        min: min.min(curr),\n        max: max.max(curr),\n      };\n    },\n    { min: new Point(points[0]), max: new Point(points[0]) }\n  );\n\n  const size = max.subtract(min);\n\n  return {\n    left: min.x,\n    top: min.y,\n    width: size.x,\n    height: size.y,\n  };\n};\n", "import { Point } from '../../Point';\nimport { CENTER } from '../../constants';\nimport type { FabricObject } from '../../shapes/Object/Object';\nimport type { TMat2D } from '../../typedefs';\nimport { makeBoundingBoxFromPoints } from './boundingBoxFromPoints';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from './matrix';\n\n/**\n * given an object and a transform, apply the inverse transform to the object,\n * this is equivalent to remove from that object that transformation, so that\n * added in a space with the removed transform, the object will be the same as before.\n * Removing from an object a transform that scale by 2 is like scaling it by 1/2.\n * Removing from an object a transform that rotate by 30deg is like rotating by 30deg\n * in the opposite direction.\n * This util is used to add objects inside transformed groups or nested groups.\n * @param {FabricObject} object the object you want to transform\n * @param {TMat2D} transform the destination transform\n */\nexport const removeTransformFromObject = (\n  object: FabricObject,\n  transform: TMat2D\n) => {\n  const inverted = invertTransform(transform),\n    finalTransform = multiplyTransformMatrices(\n      inverted,\n      object.calcOwnMatrix()\n    );\n  applyTransformToObject(object, finalTransform);\n};\n\n/**\n * given an object and a transform, apply the transform to the object.\n * this is equivalent to change the space where the object is drawn.\n * Adding to an object a transform that scale by 2 is like scaling it by 2.\n * This is used when removing an object from an active selection for example.\n * @param {FabricObject} object the object you want to transform\n * @param {Array} transform the destination transform\n */\nexport const addTransformToObject = (object: FabricObject, transform: TMat2D) =>\n  applyTransformToObject(\n    object,\n    multiplyTransformMatrices(transform, object.calcOwnMatrix())\n  );\n\n/**\n * discard an object transform state and apply the one from the matrix.\n * @param {FabricObject} object the object you want to transform\n * @param {Array} transform the destination transform\n */\nexport const applyTransformToObject = (\n  object: FabricObject,\n  transform: TMat2D\n) => {\n  const { translateX, translateY, scaleX, scaleY, ...otherOptions } =\n      qrDecompose(transform),\n    center = new Point(translateX, translateY);\n  object.flipX = false;\n  object.flipY = false;\n  Object.assign(object, otherOptions);\n  object.set({ scaleX, scaleY });\n  object.setPositionByOrigin(center, CENTER, CENTER);\n};\n/**\n * reset an object transform state to neutral. Top and left are not accounted for\n * @param  {FabricObject} target object to transform\n */\nexport const resetObjectTransform = (target: FabricObject) => {\n  target.scaleX = 1;\n  target.scaleY = 1;\n  target.skewX = 0;\n  target.skewY = 0;\n  target.flipX = false;\n  target.flipY = false;\n  target.rotate(0);\n};\n\n/**\n * Extract Object transform values\n * @param  {FabricObject} target object to read from\n * @return {Object} Components of transform\n */\nexport const saveObjectTransform = (target: FabricObject) => ({\n  scaleX: target.scaleX,\n  scaleY: target.scaleY,\n  skewX: target.skewX,\n  skewY: target.skewY,\n  angle: target.angle,\n  left: target.left,\n  flipX: target.flipX,\n  flipY: target.flipY,\n  top: target.top,\n});\n\n/**\n * given a width and height, return the size of the bounding box\n * that can contains the box with width/height with applied transform.\n * Use to calculate the boxes around objects for controls.\n * @param {Number} width\n * @param {Number} height\n * @param {TMat2D} t\n * @returns {Point} size\n */\nexport const sizeAfterTransform = (\n  width: number,\n  height: number,\n  t: TMat2D\n) => {\n  const dimX = width / 2,\n    dimY = height / 2,\n    points = [\n      new Point(-dimX, -dimY),\n      new Point(dimX, -dimY),\n      new Point(-dimX, dimY),\n      new Point(dimX, dimY),\n    ].map((p) => p.transform(t)),\n    bbox = makeBoundingBoxFromPoints(points);\n  return new Point(bbox.width, bbox.height);\n};\n", "import { iMatrix } from '../../constants';\nimport type { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/Object';\nimport type { TMat2D } from '../../typedefs';\nimport { invertTransform, multiplyTransformMatrices } from './matrix';\nimport { applyTransformToObject } from './objectTransforms';\n\n/**\n * We are actually looking for the transformation from the destination plane to the source plane (change of basis matrix)\\\n * The object will exist on the destination plane and we want it to seem unchanged by it so we invert the destination matrix (`to`) and then apply the source matrix (`from`)\n * @param [from]\n * @param [to]\n * @returns\n */\nexport const calcPlaneChangeMatrix = (\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix\n) => multiplyTransformMatrices(invertTransform(to), from);\n\n/**\n * Sends a point from the source coordinate plane to the destination coordinate plane.\\\n * From the canvas/viewer's perspective the point remains unchanged.\n *\n * @example <caption>Send point from canvas plane to group plane</caption>\n * var obj = new Rect({ left: 20, top: 20, width: 60, height: 60, strokeWidth: 0 });\n * var group = new Group([obj], { strokeWidth: 0 });\n * var sentPoint1 = sendPointToPlane(new Point(50, 50), undefined, group.calcTransformMatrix());\n * var sentPoint2 = sendPointToPlane(new Point(50, 50), iMatrix, group.calcTransformMatrix());\n * console.log(sentPoint1, sentPoint2) //  both points print (0,0) which is the center of group\n *\n * @param {Point} point\n * @param {TMat2D} [from] plane matrix containing object. Passing `undefined` is equivalent to passing the identity matrix, which means `point` exists in the canvas coordinate plane.\n * @param {TMat2D} [to] destination plane matrix to contain object. Passing `undefined` means `point` should be sent to the canvas coordinate plane.\n * @returns {Point} transformed point\n */\nexport const sendPointToPlane = (\n  point: Point,\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix\n): Point => point.transform(calcPlaneChangeMatrix(from, to));\n\n/**\n * See {@link sendPointToPlane}\n */\nexport const sendVectorToPlane = (\n  point: Point,\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix\n): Point => point.transform(calcPlaneChangeMatrix(from, to), true);\n\n/**\n *\n * A util that abstracts applying transform to objects.\\\n * Sends `object` to the destination coordinate plane by applying the relevant transformations.\\\n * Changes the space/plane where `object` is drawn.\\\n * From the canvas/viewer's perspective `object` remains unchanged.\n *\n * @example <caption>Move clip path from one object to another while preserving it's appearance as viewed by canvas/viewer</caption>\n * let obj, obj2;\n * let clipPath = new Circle({ radius: 50 });\n * obj.clipPath = clipPath;\n * // render\n * sendObjectToPlane(clipPath, obj.calcTransformMatrix(), obj2.calcTransformMatrix());\n * obj.clipPath = undefined;\n * obj2.clipPath = clipPath;\n * // render, clipPath now clips obj2 but seems unchanged from the eyes of the viewer\n *\n * @example <caption>Clip an object's clip path with an existing object</caption>\n * let obj, existingObj;\n * let clipPath = new Circle({ radius: 50 });\n * obj.clipPath = clipPath;\n * let transformTo = multiplyTransformMatrices(obj.calcTransformMatrix(), clipPath.calcTransformMatrix());\n * sendObjectToPlane(existingObj, existingObj.group?.calcTransformMatrix(), transformTo);\n * clipPath.clipPath = existingObj;\n *\n * @param {FabricObject} object\n * @param {Matrix} [from] plane matrix containing object. Passing `undefined` is equivalent to passing the identity matrix, which means `object` is a direct child of canvas.\n * @param {Matrix} [to] destination plane matrix to contain object. Passing `undefined` means `object` should be sent to the canvas coordinate plane.\n * @returns {Matrix} the transform matrix that was applied to `object`\n */\nexport const sendObjectToPlane = (\n  object: FabricObject,\n  from?: TMat2D,\n  to?: TMat2D\n): TMat2D => {\n  const t = calcPlaneChangeMatrix(from, to);\n  applyTransformToObject(\n    object,\n    multiplyTransformMatrices(t, object.calcOwnMatrix())\n  );\n  return t;\n};\n", "import type {\n  BasicTransformEvent,\n  TModificationEvents,\n} from '../EventTypeDefs';\n\nexport const fireEvent = (\n  eventName: TModificationEvents,\n  options: BasicTransformEvent\n) => {\n  const {\n    transform: { target },\n  } = options;\n  target.canvas?.fire(`object:${eventName}`, {\n    ...options,\n    target,\n  });\n  target.fire(eventName, options);\n};\n", "import type { TOriginX, TOriginY } from '../../typedefs';\n\nconst originOffset = {\n  left: -0.5,\n  top: -0.5,\n  center: 0,\n  bottom: 0.5,\n  right: 0.5,\n};\n/**\n * Resolves origin value relative to center\n * @private\n * @param {TOriginX | TOriginY} originValue originX / originY\n * @returns number\n */\n\nexport const resolveOrigin = (\n  originValue: TOriginX | TOriginY | number\n): number =>\n  typeof originValue === 'string'\n    ? originOffset[originValue]\n    : originValue - 0.5;\n", "import type {\n  TPointerEvent,\n  Transform,\n  TransformAction,\n  BasicTransformEvent,\n} from '../EventTypeDefs';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { Point } from '../Point';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TOriginX, TOriginY } from '../typedefs';\nimport {\n  degreesToRadians,\n  radiansToDegrees,\n} from '../util/misc/radiansDegreesConversion';\nimport type { Control } from './Control';\nimport { CENTER } from '../constants';\n\nexport const NOT_ALLOWED_CURSOR = 'not-allowed';\n\n/**\n * @param {Boolean} alreadySelected true if target is already selected\n * @param {String} corner a string representing the corner ml, mr, tl ...\n * @param {Event} e Event object\n * @param {FabricObject} [target] inserted back to help overriding. Unused\n */\nexport const getActionFromCorner = (\n  alreadySelected: boolean,\n  corner: string | undefined,\n  e: TPointerEvent,\n  target: FabricObject\n) => {\n  if (!corner || !alreadySelected) {\n    return 'drag';\n  }\n  const control = target.controls[corner];\n  return control.getActionName(e, control, target);\n};\n\n/**\n * Checks if transform is centered\n * @param {Object} transform transform data\n * @return {Boolean} true if transform is centered\n */\nexport function isTransformCentered(transform: Transform) {\n  return transform.originX === CENTER && transform.originY === CENTER;\n}\n\nexport function invertOrigin(origin: TOriginX | TOriginY) {\n  return -resolveOrigin(origin) + 0.5;\n}\n\nexport const isLocked = (\n  target: FabricObject,\n  lockingKey:\n    | 'lockMovementX'\n    | 'lockMovementY'\n    | 'lockRotation'\n    | 'lockScalingX'\n    | 'lockScalingY'\n    | 'lockSkewingX'\n    | 'lockSkewingY'\n    | 'lockScalingFlip'\n) => target[lockingKey];\n\nexport const commonEventInfo: TransformAction<\n  Transform,\n  BasicTransformEvent\n> = (eventData, transform, x, y) => {\n  return {\n    e: eventData,\n    transform,\n    pointer: new Point(x, y),\n  };\n};\n\n/**\n * Combine control position and object angle to find the control direction compared\n * to the object center.\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n * @param {Control} control the control class\n * @return {Number} 0 - 7 a quadrant number\n */\nexport function findCornerQuadrant(\n  fabricObject: FabricObject,\n  control: Control\n): number {\n  //  angle is relative to canvas plane\n  const angle = fabricObject.getTotalAngle(),\n    cornerAngle =\n      angle + radiansToDegrees(Math.atan2(control.y, control.x)) + 360;\n  return Math.round((cornerAngle % 360) / 45);\n}\n\n/**\n * @returns the normalized point (rotated relative to center) in local coordinates\n */\nfunction normalizePoint(\n  target: FabricObject,\n  point: Point,\n  originX: TOriginX,\n  originY: TOriginY\n): Point {\n  const center = target.getRelativeCenterPoint(),\n    p =\n      typeof originX !== 'undefined' && typeof originY !== 'undefined'\n        ? target.translateToGivenOrigin(\n            center,\n            CENTER,\n            CENTER,\n            originX,\n            originY\n          )\n        : new Point(target.left, target.top),\n    p2 = target.angle\n      ? point.rotate(-degreesToRadians(target.angle), center)\n      : point;\n  return p2.subtract(p);\n}\n\n/**\n * Transforms a point to the offset from the given origin\n * @param {Object} transform\n * @param {String} originX\n * @param {String} originY\n * @param {number} x\n * @param {number} y\n * @return {Fabric.Point} the normalized point\n */\nexport function getLocalPoint(\n  { target, corner }: Transform,\n  originX: TOriginX,\n  originY: TOriginY,\n  x: number,\n  y: number\n) {\n  const control = target.controls[corner],\n    zoom = target.canvas?.getZoom() || 1,\n    padding = target.padding / zoom,\n    localPoint = normalizePoint(target, new Point(x, y), originX, originY);\n  if (localPoint.x >= padding) {\n    localPoint.x -= padding;\n  }\n  if (localPoint.x <= -padding) {\n    localPoint.x += padding;\n  }\n  if (localPoint.y >= padding) {\n    localPoint.y -= padding;\n  }\n  if (localPoint.y <= padding) {\n    localPoint.y += padding;\n  }\n  localPoint.x -= control.offsetX;\n  localPoint.y -= control.offsetY;\n  return localPoint;\n}\n", "import type { TransformActionHandler } from '../EventTypeDefs';\nimport { LEFT, TOP } from '../constants';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo, isLocked } from './util';\n\n/**\n * Action handler\n * @private\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if the translation occurred\n */\nexport const dragHandler: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y\n) => {\n  const { target, offsetX, offsetY } = transform,\n    newLeft = x - offsetX,\n    newTop = y - offsetY,\n    moveX = !isLocked(target, 'lockMovementX') && target.left !== newLeft,\n    moveY = !isLocked(target, 'lockMovementY') && target.top !== newTop;\n  moveX && target.set(LEFT, newLeft);\n  moveY && target.set(TOP, newTop);\n  if (moveX || moveY) {\n    fireEvent('moving', commonEventInfo(eventData, transform, x, y));\n  }\n  return moveX || moveY;\n};\n", "import type { TSVGReviver } from '../../typedefs';\nimport { uid } from '../../util/internals/uid';\nimport { colorPropToSVG, matrixToSVG } from '../../util/misc/svgParsing';\nimport { NONE } from '../../constants';\nimport type { FabricObject } from './FabricObject';\nimport { isFiller } from '../../util/typeAssertions';\n\nexport class FabricObjectSVGExportMixin {\n  /**\n   * When an object is being exported as SVG as a clippath, a reference inside the SVG is needed.\n   * This reference is a UID in the fabric namespace and is temporary stored here.\n   * @type {String}\n   */\n  declare clipPathId?: string;\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Boolean} skipShadow a boolean to skip shadow filter output\n   * @return {String}\n   */\n  getSvgStyles(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    skipShadow?: boolean\n  ) {\n    const fillRule = this.fillRule ? this.fillRule : 'nonzero',\n      strokeWidth = this.strokeWidth ? this.strokeWidth : '0',\n      strokeDashArray = this.strokeDashArray\n        ? this.strokeDashArray.join(' ')\n        : NONE,\n      strokeDashOffset = this.strokeDashOffset ? this.strokeDashOffset : '0',\n      strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',\n      strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',\n      strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',\n      opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',\n      visibility = this.visible ? '' : ' visibility: hidden;',\n      filter = skipShadow ? '' : this.getSvgFilter(),\n      fill = colorPropToSVG('fill', this.fill),\n      stroke = colorPropToSVG('stroke', this.stroke);\n\n    return [\n      stroke,\n      'stroke-width: ',\n      strokeWidth,\n      '; ',\n      'stroke-dasharray: ',\n      strokeDashArray,\n      '; ',\n      'stroke-linecap: ',\n      strokeLineCap,\n      '; ',\n      'stroke-dashoffset: ',\n      strokeDashOffset,\n      '; ',\n      'stroke-linejoin: ',\n      strokeLineJoin,\n      '; ',\n      'stroke-miterlimit: ',\n      strokeMiterLimit,\n      '; ',\n      fill,\n      'fill-rule: ',\n      fillRule,\n      '; ',\n      'opacity: ',\n      opacity,\n      ';',\n      filter,\n      visibility,\n    ].join('');\n  }\n\n  /**\n   * Returns filter for svg shadow\n   * @return {String}\n   */\n  getSvgFilter(this: FabricObjectSVGExportMixin & FabricObject) {\n    return this.shadow ? `filter: url(#SVGID_${this.shadow.id});` : '';\n  }\n\n  /**\n   * Returns id attribute for svg output\n   * @return {String}\n   */\n  getSvgCommons(\n    this: FabricObjectSVGExportMixin & FabricObject & { id?: string }\n  ) {\n    return [\n      this.id ? `id=\"${this.id}\" ` : '',\n      this.clipPath\n        ? `clip-path=\"url(#${\n            (this.clipPath as FabricObjectSVGExportMixin & FabricObject)\n              .clipPathId\n          })\" `\n        : '',\n    ].join('');\n  }\n\n  /**\n   * Returns transform-string for svg-export\n   * @param {Boolean} use the full transform or the single object one.\n   * @return {String}\n   */\n  getSvgTransform(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    full?: boolean,\n    additionalTransform = ''\n  ) {\n    const transform = full ? this.calcTransformMatrix() : this.calcOwnMatrix(),\n      svgTransform = `transform=\"${matrixToSVG(transform)}`;\n    return `${svgTransform}${additionalTransform}\" `;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * This function is implemented in each subclass\n   * This is just because typescript otherwise cryies all the time\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(reviver?: TSVGReviver): string[] {\n    return [''];\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toSVG(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    reviver?: TSVGReviver\n  ) {\n    return this._createBaseSVGMarkup(this._toSVG(reviver), {\n      reviver,\n    });\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toClipPathSVG(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    reviver?: TSVGReviver\n  ) {\n    return (\n      '\\t' +\n      this._createBaseClipPathSVGMarkup(this._toSVG(reviver), {\n        reviver,\n      })\n    );\n  }\n\n  /**\n   * @private\n   */\n  _createBaseClipPathSVGMarkup(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    objectMarkup: string[],\n    {\n      reviver,\n      additionalTransform = '',\n    }: { reviver?: TSVGReviver; additionalTransform?: string } = {}\n  ) {\n    const commonPieces = [\n        this.getSvgTransform(true, additionalTransform),\n        this.getSvgCommons(),\n      ].join(''),\n      // insert commons in the markup, style and svgCommons\n      index = objectMarkup.indexOf('COMMON_PARTS');\n    objectMarkup[index] = commonPieces;\n    return reviver ? reviver(objectMarkup.join('')) : objectMarkup.join('');\n  }\n\n  /**\n   * @private\n   */\n  _createBaseSVGMarkup(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    objectMarkup: string[],\n    {\n      noStyle,\n      reviver,\n      withShadow,\n      additionalTransform,\n    }: {\n      noStyle?: boolean;\n      reviver?: TSVGReviver;\n      withShadow?: boolean;\n      additionalTransform?: string;\n    } = {}\n  ): string {\n    const styleInfo = noStyle ? '' : `style=\"${this.getSvgStyles()}\" `,\n      shadowInfo = withShadow ? `style=\"${this.getSvgFilter()}\" ` : '',\n      clipPath = this.clipPath as FabricObjectSVGExportMixin & FabricObject,\n      vectorEffect = this.strokeUniform\n        ? 'vector-effect=\"non-scaling-stroke\" '\n        : '',\n      absoluteClipPath = clipPath && clipPath.absolutePositioned,\n      stroke = this.stroke,\n      fill = this.fill,\n      shadow = this.shadow,\n      markup = [],\n      // insert commons in the markup, style and svgCommons\n      index = objectMarkup.indexOf('COMMON_PARTS');\n    let clipPathMarkup;\n    if (clipPath) {\n      clipPath.clipPathId = `CLIPPATH_${uid()}`;\n      clipPathMarkup = `<clipPath id=\"${\n        clipPath.clipPathId\n      }\" >\\n${clipPath.toClipPathSVG(reviver)}</clipPath>\\n`;\n    }\n    if (absoluteClipPath) {\n      markup.push('<g ', shadowInfo, this.getSvgCommons(), ' >\\n');\n    }\n    markup.push(\n      '<g ',\n      this.getSvgTransform(false),\n      !absoluteClipPath ? shadowInfo + this.getSvgCommons() : '',\n      ' >\\n'\n    );\n    const commonPieces = [\n      styleInfo,\n      vectorEffect,\n      noStyle ? '' : this.addPaintOrder(),\n      ' ',\n      additionalTransform ? `transform=\"${additionalTransform}\" ` : '',\n    ].join('');\n    objectMarkup[index] = commonPieces;\n    if (isFiller(fill)) {\n      markup.push(fill.toSVG(this));\n    }\n    if (isFiller(stroke)) {\n      markup.push(stroke.toSVG(this));\n    }\n    if (shadow) {\n      markup.push(shadow.toSVG(this));\n    }\n    if (clipPath) {\n      markup.push(clipPathMarkup);\n    }\n    markup.push(objectMarkup.join(''));\n    markup.push('</g>\\n');\n    absoluteClipPath && markup.push('</g>\\n');\n    return reviver ? reviver(markup.join('')) : markup.join('');\n  }\n\n  addPaintOrder(this: FabricObjectSVGExportMixin & FabricObject) {\n    return this.paintFirst !== 'fill'\n      ? ` paint-order=\"${this.paintFirst}\" `\n      : '';\n  }\n}\n", "/**\n * Easing functions\n * @see {@link http://gizma.com/easing/ Easing Equations by Robert Penner}\n */\n\nimport { twoMathPi, halfPI } from '../../constants';\nimport type { TEasingFunction } from './types';\n\nconst normalize = (a: number, c: number, p: number, s: number) => {\n  if (a < Math.abs(c)) {\n    a = c;\n    s = p / 4;\n  } else {\n    //handle the 0/0 case:\n    if (c === 0 && a === 0) {\n      s = (p / twoMathPi) * Math.asin(1);\n    } else {\n      s = (p / twoMathPi) * Math.asin(c / a);\n    }\n  }\n  return { a, c, p, s };\n};\n\nconst elastic = (\n  a: number,\n  s: number,\n  p: number,\n  t: number,\n  d: number\n): number =>\n  a * Math.pow(2, 10 * (t -= 1)) * Math.sin(((t * d - s) * twoMathPi) / p);\n\n/**\n * Default sinusoidal easing\n */\nexport const defaultEasing: TEasingFunction = (t, b, c, d) =>\n  -c * Math.cos((t / d) * halfPI) + c + b;\n\n/**\n * Cubic easing in\n */\nexport const easeInCubic: TEasingFunction = (t, b, c, d) =>\n  c * (t / d) ** 3 + b;\n\n/**\n * Cubic easing out\n */\nexport const easeOutCubic: TEasingFunction = (t, b, c, d) =>\n  c * ((t / d - 1) ** 3 + 1) + b;\n\n/**\n * Cubic easing in and out\n */\nexport const easeInOutCubic: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 3 + b;\n  }\n  return (c / 2) * ((t - 2) ** 3 + 2) + b;\n};\n\n/**\n * Quartic easing in\n */\nexport const easeInQuart: TEasingFunction = (t, b, c, d) =>\n  c * (t /= d) * t ** 3 + b;\n\n/**\n * Quartic easing out\n */\nexport const easeOutQuart: TEasingFunction = (t, b, c, d) =>\n  -c * ((t = t / d - 1) * t ** 3 - 1) + b;\n\n/**\n * Quartic easing in and out\n */\nexport const easeInOutQuart: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 4 + b;\n  }\n  return (-c / 2) * ((t -= 2) * t ** 3 - 2) + b;\n};\n\n/**\n * Quintic easing in\n */\nexport const easeInQuint: TEasingFunction = (t, b, c, d) =>\n  c * (t / d) ** 5 + b;\n\n/**\n * Quintic easing out\n */\nexport const easeOutQuint: TEasingFunction = (t, b, c, d) =>\n  c * ((t / d - 1) ** 5 + 1) + b;\n\n/**\n * Quintic easing in and out\n */\nexport const easeInOutQuint: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 5 + b;\n  }\n  return (c / 2) * ((t - 2) ** 5 + 2) + b;\n};\n\n/**\n * Sinusoidal easing in\n */\nexport const easeInSine: TEasingFunction = (t, b, c, d) =>\n  -c * Math.cos((t / d) * halfPI) + c + b;\n\n/**\n * Sinusoidal easing out\n */\nexport const easeOutSine: TEasingFunction = (t, b, c, d) =>\n  c * Math.sin((t / d) * halfPI) + b;\n\n/**\n * Sinusoidal easing in and out\n */\nexport const easeInOutSine: TEasingFunction = (t, b, c, d) =>\n  (-c / 2) * (Math.cos((Math.PI * t) / d) - 1) + b;\n\n/**\n * Exponential easing in\n */\nexport const easeInExpo: TEasingFunction = (t, b, c, d) =>\n  t === 0 ? b : c * 2 ** (10 * (t / d - 1)) + b;\n\n/**\n * Exponential easing out\n */\nexport const easeOutExpo: TEasingFunction = (t, b, c, d) =>\n  t === d ? b + c : c * -(2 ** ((-10 * t) / d) + 1) + b;\n\n/**\n * Exponential easing in and out\n */\nexport const easeInOutExpo: TEasingFunction = (t, b, c, d) => {\n  if (t === 0) {\n    return b;\n  }\n  if (t === d) {\n    return b + c;\n  }\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * 2 ** (10 * (t - 1)) + b;\n  }\n  return (c / 2) * -(2 ** (-10 * --t) + 2) + b;\n};\n\n/**\n * Circular easing in\n */\nexport const easeInCirc: TEasingFunction = (t, b, c, d) =>\n  -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n\n/**\n * Circular easing out\n */\nexport const easeOutCirc: TEasingFunction = (t, b, c, d) =>\n  c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n\n/**\n * Circular easing in and out\n */\nexport const easeInOutCirc: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (-c / 2) * (Math.sqrt(1 - t ** 2) - 1) + b;\n  }\n  return (c / 2) * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n};\n\n/**\n * Elastic easing in\n */\nexport const easeInElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d;\n  if (t === 1) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * 0.3;\n  }\n  const { a: normA, s: normS, p: normP } = normalize(a, c, p, s);\n  return -elastic(normA, normS, normP, t, d) + b;\n};\n\n/**\n * Elastic easing out\n */\nexport const easeOutElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d;\n  if (t === 1) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * 0.3;\n  }\n  const { a: normA, s: normS, p: normP, c: normC } = normalize(a, c, p, s);\n  return (\n    normA * 2 ** (-10 * t) * Math.sin(((t * d - normS) * twoMathPi) / normP) +\n    normC +\n    b\n  );\n};\n\n/**\n * Elastic easing in and out\n */\nexport const easeInOutElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d / 2;\n  if (t === 2) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * (0.3 * 1.5);\n  }\n  const { a: normA, s: normS, p: normP, c: normC } = normalize(a, c, p, s);\n  if (t < 1) {\n    return -0.5 * elastic(normA, normS, normP, t, d) + b;\n  }\n  return (\n    normA *\n      Math.pow(2, -10 * (t -= 1)) *\n      Math.sin(((t * d - normS) * twoMathPi) / normP) *\n      0.5 +\n    normC +\n    b\n  );\n};\n\n/**\n * Backwards easing in\n */\nexport const easeInBack: TEasingFunction = (t, b, c, d, s = 1.70158) =>\n  c * (t /= d) * t * ((s + 1) * t - s) + b;\n\n/**\n * Backwards easing out\n */\nexport const easeOutBack: TEasingFunction = (t, b, c, d, s = 1.70158) =>\n  c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n\n/**\n * Backwards easing in and out\n */\nexport const easeInOutBack: TEasingFunction = (t, b, c, d, s = 1.70158) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * (t * t * (((s *= 1.525) + 1) * t - s)) + b;\n  }\n  return (c / 2) * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;\n};\n\n/**\n * Bouncing easing out\n */\nexport const easeOutBounce: TEasingFunction = (t, b, c, d) => {\n  if ((t /= d) < 1 / 2.75) {\n    return c * (7.5625 * t * t) + b;\n  } else if (t < 2 / 2.75) {\n    return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;\n  } else if (t < 2.5 / 2.75) {\n    return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;\n  } else {\n    return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;\n  }\n};\n\n/**\n * Bouncing easing in\n */\nexport const easeInBounce: TEasingFunction = (t, b, c, d) =>\n  c - easeOutBounce(d - t, 0, c, d) + b;\n\n/**\n * Bouncing easing in and out\n */\nexport const easeInOutBounce: TEasingFunction = (t, b, c, d) =>\n  t < d / 2\n    ? easeInBounce(t * 2, 0, c, d) * 0.5 + b\n    : easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\n\n/**\n * Quadratic easing in\n */\nexport const easeInQuad: TEasingFunction = (t, b, c, d) => c * (t /= d) * t + b;\n\n/**\n * Quadratic easing out\n */\nexport const easeOutQuad: TEasingFunction = (t, b, c, d) =>\n  -c * (t /= d) * (t - 2) + b;\n\n/**\n * Quadratic easing in and out\n */\nexport const easeInOutQuad: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 2 + b;\n  }\n  return (-c / 2) * (--t * (t - 2) - 1) + b;\n};\n", "import { noop } from '../../constants';\nimport { requestAnimFrame } from './AnimationFrameProvider';\nimport { runningAnimations } from './AnimationRegistry';\nimport { defaultEasing } from './easing';\nimport type {\n  AnimationState,\n  TAbortCallback,\n  TBaseAnimationOptions,\n  TEasingFunction,\n  TOnAnimationChangeCallback,\n} from './types';\n\nconst defaultAbort = () => false;\n\nexport abstract class AnimationBase<\n  T extends number | number[] = number | number[]\n> {\n  declare readonly startValue: T;\n  declare readonly endValue: T;\n  declare readonly duration: number;\n  declare readonly delay: number;\n\n  protected declare readonly byValue: T;\n  protected declare readonly easing: TEasingFunction<T>;\n\n  private declare readonly _onStart: VoidFunction;\n  private declare readonly _onChange: TOnAnimationChangeCallback<T, void>;\n  private declare readonly _onComplete: TOnAnimationChangeCallback<T, void>;\n  private declare readonly _abort: TAbortCallback<T>;\n\n  /**\n   * Used to register the animation to a target object\n   * so that it can be cancelled within the object context\n   */\n  declare readonly target?: unknown;\n\n  private _state: AnimationState = 'pending';\n  /**\n   * Time %, or the ratio of `timeElapsed / duration`\n   * @see tick\n   */\n  durationProgress = 0;\n  /**\n   * Value %, or the ratio of `(currentValue - startValue) / (endValue - startValue)`\n   */\n  valueProgress = 0;\n  /**\n   * Current value\n   */\n  declare value: T;\n  /**\n   * Animation start time ms\n   */\n  private declare startTime: number;\n\n  constructor({\n    startValue,\n    byValue,\n    duration = 500,\n    delay = 0,\n    easing = defaultEasing,\n    onStart = noop,\n    onChange = noop,\n    onComplete = noop,\n    abort = defaultAbort,\n    target,\n  }: TBaseAnimationOptions<T>) {\n    this.tick = this.tick.bind(this);\n\n    this.duration = duration;\n    this.delay = delay;\n    this.easing = easing;\n    this._onStart = onStart;\n    this._onChange = onChange;\n    this._onComplete = onComplete;\n    this._abort = abort;\n    this.target = target;\n\n    this.startValue = startValue;\n    this.byValue = byValue;\n    this.value = this.startValue;\n    this.endValue = Object.freeze(this.calculate(this.duration).value);\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  isDone() {\n    return this._state === 'aborted' || this._state === 'completed';\n  }\n\n  /**\n   * Calculate the current value based on the easing parameters\n   * @param timeElapsed in ms\n   * @protected\n   */\n  protected abstract calculate(timeElapsed: number): {\n    value: T;\n    valueProgress: number;\n  };\n\n  start() {\n    const firstTick: FrameRequestCallback = (timestamp) => {\n      if (this._state !== 'pending') return;\n      this.startTime = timestamp || +new Date();\n      this._state = 'running';\n      this._onStart();\n      this.tick(this.startTime);\n    };\n\n    this.register();\n\n    // setTimeout(cb, 0) will run cb on the next frame, causing a delay\n    // we don't want that\n    if (this.delay > 0) {\n      setTimeout(() => requestAnimFrame(firstTick), this.delay);\n    } else {\n      requestAnimFrame(firstTick);\n    }\n  }\n\n  private tick(t: number) {\n    const durationMs = (t || +new Date()) - this.startTime;\n    const boundDurationMs = Math.min(durationMs, this.duration);\n    this.durationProgress = boundDurationMs / this.duration;\n    const { value, valueProgress } = this.calculate(boundDurationMs);\n    this.value = Object.freeze(value);\n    this.valueProgress = valueProgress;\n\n    if (this._state === 'aborted') {\n      return;\n    } else if (\n      this._abort(this.value, this.valueProgress, this.durationProgress)\n    ) {\n      this._state = 'aborted';\n      this.unregister();\n    } else if (durationMs >= this.duration) {\n      this.durationProgress = this.valueProgress = 1;\n      this._onChange(this.endValue, this.valueProgress, this.durationProgress);\n      this._state = 'completed';\n      this._onComplete(\n        this.endValue,\n        this.valueProgress,\n        this.durationProgress\n      );\n      this.unregister();\n    } else {\n      this._onChange(this.value, this.valueProgress, this.durationProgress);\n      requestAnimFrame(this.tick);\n    }\n  }\n\n  private register() {\n    runningAnimations.push(this as unknown as AnimationBase);\n  }\n\n  private unregister() {\n    runningAnimations.remove(this as unknown as AnimationBase);\n  }\n\n  abort() {\n    this._state = 'aborted';\n    this.unregister();\n  }\n}\n", "import { AnimationBase } from './AnimationBase';\nimport type { ValueAnimationOptions } from './types';\n\nexport class ValueAnimation extends AnimationBase<number> {\n  constructor({\n    startValue = 0,\n    endValue = 100,\n    ...otherOptions\n  }: ValueAnimationOptions) {\n    super({\n      ...otherOptions,\n      startValue,\n      byValue: endValue - startValue,\n    });\n  }\n\n  protected calculate(timeElapsed: number) {\n    const value = this.easing(\n      timeElapsed,\n      this.startValue,\n      this.byValue,\n      this.duration\n    );\n    return {\n      value,\n      valueProgress: Math.abs((value - this.startValue) / this.byValue),\n    };\n  }\n}\n", "import { AnimationBase } from './AnimationBase';\nimport type { ArrayAnimationOptions } from './types';\n\nexport class ArrayAnimation extends AnimationBase<number[]> {\n  constructor({\n    startValue = [0],\n    endValue = [100],\n    ...options\n  }: ArrayAnimationOptions) {\n    super({\n      ...options,\n      startValue,\n      byValue: endValue.map((value, i) => value - startValue[i]),\n    });\n  }\n  protected calculate(timeElapsed: number) {\n    const values = this.startValue.map((value, i) =>\n      this.easing(timeElapsed, value, this.byValue[i], this.duration, i)\n    );\n    return {\n      value: values,\n      valueProgress: Math.abs(\n        (values[0] - this.startValue[0]) / this.byValue[0]\n      ),\n    };\n  }\n}\n", "export const capValue = (min: number, value: number, max: number) =>\n  Math.max(min, Math.min(value, max));\n", "import { Color } from '../../color/Color';\nimport type { TRGBAColorSource } from '../../color/typedefs';\nimport { halfPI } from '../../constants';\nimport { capValue } from '../misc/capValue';\nimport { AnimationBase } from './AnimationBase';\nimport type {\n  ColorAnimationOptions,\n  TEasingFunction,\n  TOnAnimationChangeCallback,\n} from './types';\n\nconst defaultColorEasing: TEasingFunction = (\n  timeElapsed,\n  startValue,\n  byValue,\n  duration\n) => {\n  const durationProgress = 1 - Math.cos((timeElapsed / duration) * halfPI);\n  return startValue + byValue * durationProgress;\n};\n\nconst wrapColorCallback = <R>(\n  callback?: TOnAnimationChangeCallback<string, R>\n) =>\n  callback &&\n  ((rgba: TRGBAColorSource, valueProgress: number, durationProgress: number) =>\n    callback(new Color(rgba).toRgba(), valueProgress, durationProgress));\n\nexport class ColorAnimation extends AnimationBase<TRGBAColorSource> {\n  constructor({\n    startValue,\n    endValue,\n    easing = defaultColorEasing,\n    onChange,\n    onComplete,\n    abort,\n    ...options\n  }: ColorAnimationOptions) {\n    const startColor = new Color(startValue).getSource();\n    const endColor = new Color(endValue).getSource();\n    super({\n      ...options,\n      startValue: startColor,\n      byValue: endColor.map(\n        (value, i) => value - startColor[i]\n      ) as TRGBAColorSource,\n      easing,\n      onChange: wrapColorCallback(onChange),\n      onComplete: wrapColorCallback(onComplete),\n      abort: wrapColorCallback(abort),\n    });\n  }\n  protected calculate(timeElapsed: number) {\n    const [r, g, b, a] = this.startValue.map((value, i) =>\n      this.easing(timeElapsed, value, this.byValue[i], this.duration, i)\n    ) as TRGBAColorSource;\n    const value = [\n      ...[r, g, b].map(Math.round),\n      capValue(0, a, 1),\n    ] as TRGBAColorSource;\n    return {\n      value,\n      valueProgress:\n        // to correctly calculate the change ratio we must find a changed value\n        value\n          .map((p, i) =>\n            this.byValue[i] !== 0\n              ? Math.abs((p - this.startValue[i]) / this.byValue[i])\n              : 0\n          )\n          .find((p) => p !== 0) || 0,\n    };\n  }\n}\n", "import { ValueAnimation } from './ValueAnimation';\nimport { ArrayAnimation } from './ArrayAnimation';\nimport { ColorAnimation } from './ColorAnimation';\nimport type {\n  ValueAnimationOptions,\n  ArrayAnimationOptions,\n  ColorAnimationOptions,\n} from './types';\nimport type { TColorArg } from '../../color/typedefs';\n\nexport type TAnimation<T extends number | number[] | TColorArg> =\n  T extends TColorArg\n    ? ColorAnimation\n    : T extends number[]\n    ? ArrayAnimation\n    : ValueAnimation;\n\nconst isArrayAnimation = (\n  options: ArrayAnimationOptions | ValueAnimationOptions\n): options is ArrayAnimationOptions => {\n  return Array.isArray(options.startValue) || Array.isArray(options.endValue);\n};\n\n/**\n * Changes value(s) from startValue to endValue within a certain period of time,\n * invoking callbacks as the value(s) change.\n *\n * @example\n * animate({\n *   startValue: 1,\n *   endValue: 0,\n *   onChange: (v) => {\n *     obj.set('opacity', v);\n *     // since we are running in a requested frame we should call `renderAll` and not `requestRenderAll`\n *     canvas.renderAll();\n *   }\n * });\n *\n * @example Using lists:\n * animate({\n *   startValue: [1, 2, 3],\n *   endValue: [2, 4, 6],\n *   onChange: ([x, y, zoom]) => {\n *     canvas.zoomToPoint(new Point(x, y), zoom);\n *     canvas.renderAll();\n *   }\n * });\n *\n */\nexport function animate(options: ArrayAnimationOptions): ArrayAnimation;\nexport function animate(options: ValueAnimationOptions): ValueAnimation;\nexport function animate<\n  T extends ValueAnimationOptions | ArrayAnimationOptions\n>(\n  options: T\n): T extends ArrayAnimationOptions ? ArrayAnimation : ValueAnimation;\nexport function animate<\n  T extends ValueAnimationOptions | ArrayAnimationOptions,\n  R extends T extends ArrayAnimationOptions ? ArrayAnimation : ValueAnimation\n>(options: T): R {\n  const animation = (\n    isArrayAnimation(options)\n      ? new ArrayAnimation(options)\n      : new ValueAnimation(options)\n  ) as R;\n  animation.start();\n  return animation;\n}\n\nexport function animateColor(options: ColorAnimationOptions) {\n  const animation = new ColorAnimation(options);\n  animation.start();\n  return animation;\n}\n", "import type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport type { TRadian } from '../../typedefs';\n\nconst unitVectorX = new Point(1, 0);\nconst zero = new Point();\n\n/**\n * Rotates `vector` with `radians`\n * @param {Point} vector The vector to rotate (x and y)\n * @param {Number} radians The radians of the angle for the rotation\n * @return {Point} The new rotated point\n */\nexport const rotateVector = (vector: Point, radians: TRadian) =>\n  vector.rotate(radians);\n\n/**\n * Creates a vector from points represented as a point\n *\n * @param {Point} from\n * @param {Point} to\n * @returns {Point} vector\n */\nexport const createVector = (from: XY, to: XY): Point =>\n  new Point(to).subtract(from);\n\n/**\n * return the magnitude of a vector\n * @return {number}\n */\nexport const magnitude = (point: Point) => point.distanceFrom(zero);\n\n/**\n * Calculates the angle between 2 vectors\n * @param {Point} a\n * @param {Point} b\n * @returns the angle in radians from `a` to `b`\n */\nexport const calcAngleBetweenVectors = (a: Point, b: Point): TRadian =>\n  Math.atan2(crossProduct(a, b), dotProduct(a, b)) as TRadian;\n\n/**\n * Calculates the angle between the x axis and the vector\n * @param {Point} v\n * @returns the angle in radians of `v`\n */\nexport const calcVectorRotation = (v: Point) =>\n  calcAngleBetweenVectors(unitVectorX, v);\n\n/**\n * @param {Point} v\n * @returns {Point} vector representing the unit vector pointing to the direction of `v`\n */\nexport const getUnitVector = (v: Point): Point =>\n  v.eq(zero) ? v : v.scalarDivide(magnitude(v));\n\n/**\n * @param {Point} v\n * @param {Boolean} [counterClockwise] the direction of the orthogonal vector, defaults to `true`\n * @returns {Point} the unit orthogonal vector\n */\nexport const getOrthonormalVector = (\n  v: Point,\n  counterClockwise = true\n): Point =>\n  getUnitVector(new Point(-v.y, v.x).scalarMultiply(counterClockwise ? 1 : -1));\n\n/**\n * Cross product of two vectors in 2D\n * @param {Point} a\n * @param {Point} b\n * @returns {number} the magnitude of Z vector\n */\nexport const crossProduct = (a: Point, b: Point): number =>\n  a.x * b.y - a.y * b.x;\n\n/**\n * Dot product of two vectors in 2D\n * @param {Point} a\n * @param {Point} b\n * @returns {number}\n */\nexport const dotProduct = (a: Point, b: Point): number => a.x * b.x + a.y * b.y;\n\n/**\n * Checks if the vector is between two others. It is considered\n * to be inside when the vector to be tested is between the\n * initial vector and the final vector (included) in a counterclockwise direction.\n * @param {Point} t vector to be tested\n * @param {Point} a initial vector\n * @param {Point} b final vector\n * @returns {boolean} true if the vector is among the others\n */\nexport const isBetweenVectors = (t: Point, a: Point, b: Point): boolean => {\n  if (t.eq(a) || t.eq(b)) return true;\n  const AxB = crossProduct(a, b),\n    AxT = crossProduct(a, t),\n    BxT = crossProduct(b, t);\n  return AxB >= 0 ? AxT >= 0 && BxT <= 0 : !(AxT <= 0 && BxT >= 0);\n};\n", "import { Point } from './Point';\nimport { createVector } from './util/misc/vectors';\n\n/* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n\nexport type IntersectionType = 'Intersection' | 'Coincident' | 'Parallel';\n\nexport class Intersection {\n  declare points: Point[];\n\n  declare status?: IntersectionType;\n\n  constructor(status?: IntersectionType) {\n    this.status = status;\n    this.points = [];\n  }\n\n  /**\n   * Used to verify if a point is alredy in the collection\n   * @param {Point} point\n   * @returns {boolean}\n   */\n  private includes(point: Point): boolean {\n    return this.points.some((p) => p.eq(point));\n  }\n\n  /**\n   * Appends points of intersection\n   * @param {...Point[]} points\n   * @return {Intersection} thisArg\n   * @chainable\n   */\n  private append(...points: Point[]): Intersection {\n    this.points = this.points.concat(\n      points.filter((point) => {\n        return !this.includes(point);\n      })\n    );\n    return this;\n  }\n\n  /**\n   * check if point T is on the segment or line defined between A and B\n   *\n   * @param {Point} T the point we are checking for\n   * @param {Point} A one extremity of the segment\n   * @param {Point} B the other extremity of the segment\n   * @param [infinite] if true checks if `T` is on the line defined by `A` and `B`\n   * @returns true if `T` is contained\n   */\n  static isPointContained(T: Point, A: Point, B: Point, infinite = false) {\n    if (A.eq(B)) {\n      // Edge case: the segment is a point, we check for coincidence,\n      // infinite param has no meaning because there are infinite lines to consider\n      return T.eq(A);\n    } else if (A.x === B.x) {\n      // Edge case: horizontal line.\n      // we first check if T.x has the same value, and then if T.y is contained between A.y and B.y\n      return (\n        T.x === A.x &&\n        (infinite || (T.y >= Math.min(A.y, B.y) && T.y <= Math.max(A.y, B.y)))\n      );\n    } else if (A.y === B.y) {\n      // Edge case: vertical line.\n      // we first check if T.y has the same value, and then if T.x is contained between A.x and B.x\n      return (\n        T.y === A.y &&\n        (infinite || (T.x >= Math.min(A.x, B.x) && T.x <= Math.max(A.x, B.x)))\n      );\n    } else {\n      // Generic case: sloped line.\n      // we check that AT has the same slope as AB\n      // for the segment case we need both the vectors to have the same direction and for AT to be lte AB in size\n      // for the infinite case we check the absolute value of the slope, since direction is meaningless\n      const AB = createVector(A, B);\n      const AT = createVector(A, T);\n      const s = AT.divide(AB);\n      return infinite\n        ? Math.abs(s.x) === Math.abs(s.y)\n        : s.x === s.y && s.x >= 0 && s.x <= 1;\n    }\n  }\n\n  /**\n   * Use the ray casting algorithm to determine if {@link point} is in the polygon defined by {@link points}\n   * @see https://en.wikipedia.org/wiki/Point_in_polygon\n   * @param point\n   * @param points polygon points\n   * @returns\n   */\n  static isPointInPolygon(point: Point, points: Point[]) {\n    const other = new Point(point).setX(\n      Math.min(point.x - 1, ...points.map((p) => p.x))\n    );\n    let hits = 0;\n    for (let index = 0; index < points.length; index++) {\n      const inter = this.intersectSegmentSegment(\n        // polygon side\n        points[index],\n        points[(index + 1) % points.length],\n        // ray\n        point,\n        other\n      );\n      if (inter.includes(point)) {\n        // point is on the polygon side\n        return true;\n      }\n      hits += Number(inter.status === 'Intersection');\n    }\n    return hits % 2 === 1;\n  }\n\n  /**\n   * Checks if a line intersects another\n   * @see {@link https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection line intersection}\n   * @see {@link https://en.wikipedia.org/wiki/Cramer%27s_rule Cramer's rule}\n   * @static\n   * @param {Point} a1\n   * @param {Point} a2\n   * @param {Point} b1\n   * @param {Point} b2\n   * @param {boolean} [aInfinite=true] check segment intersection by passing `false`\n   * @param {boolean} [bInfinite=true] check segment intersection by passing `false`\n   * @return {Intersection}\n   */\n  static intersectLineLine(\n    a1: Point,\n    a2: Point,\n    b1: Point,\n    b2: Point,\n    aInfinite = true,\n    bInfinite = true\n  ): Intersection {\n    const a2xa1x = a2.x - a1.x,\n      a2ya1y = a2.y - a1.y,\n      b2xb1x = b2.x - b1.x,\n      b2yb1y = b2.y - b1.y,\n      a1xb1x = a1.x - b1.x,\n      a1yb1y = a1.y - b1.y,\n      uaT = b2xb1x * a1yb1y - b2yb1y * a1xb1x,\n      ubT = a2xa1x * a1yb1y - a2ya1y * a1xb1x,\n      uB = b2yb1y * a2xa1x - b2xb1x * a2ya1y;\n    if (uB !== 0) {\n      const ua = uaT / uB,\n        ub = ubT / uB;\n      if (\n        (aInfinite || (0 <= ua && ua <= 1)) &&\n        (bInfinite || (0 <= ub && ub <= 1))\n      ) {\n        return new Intersection('Intersection').append(\n          new Point(a1.x + ua * a2xa1x, a1.y + ua * a2ya1y)\n        );\n      } else {\n        return new Intersection();\n      }\n    } else {\n      if (uaT === 0 || ubT === 0) {\n        const segmentsCoincide =\n          aInfinite ||\n          bInfinite ||\n          Intersection.isPointContained(a1, b1, b2) ||\n          Intersection.isPointContained(a2, b1, b2) ||\n          Intersection.isPointContained(b1, a1, a2) ||\n          Intersection.isPointContained(b2, a1, a2);\n        return new Intersection(segmentsCoincide ? 'Coincident' : undefined);\n      } else {\n        return new Intersection('Parallel');\n      }\n    }\n  }\n\n  /**\n   * Checks if a segment intersects a line\n   * @see {@link intersectLineLine} for line intersection\n   * @static\n   * @param {Point} s1 boundary point of segment\n   * @param {Point} s2 other boundary point of segment\n   * @param {Point} l1 point on line\n   * @param {Point} l2 other point on line\n   * @return {Intersection}\n   */\n  static intersectSegmentLine(\n    s1: Point,\n    s2: Point,\n    l1: Point,\n    l2: Point\n  ): Intersection {\n    return Intersection.intersectLineLine(s1, s2, l1, l2, false, true);\n  }\n\n  /**\n   * Checks if a segment intersects another\n   * @see {@link intersectLineLine} for line intersection\n   * @static\n   * @param {Point} a1 boundary point of segment\n   * @param {Point} a2 other boundary point of segment\n   * @param {Point} b1 boundary point of segment\n   * @param {Point} b2 other boundary point of segment\n   * @return {Intersection}\n   */\n  static intersectSegmentSegment(\n    a1: Point,\n    a2: Point,\n    b1: Point,\n    b2: Point\n  ): Intersection {\n    return Intersection.intersectLineLine(a1, a2, b1, b2, false, false);\n  }\n\n  /**\n   * Checks if line intersects polygon\n   *\n   * @todo account for stroke\n   *\n   * @static\n   * @see {@link intersectSegmentPolygon} for segment intersection\n   * @param {Point} a1 point on line\n   * @param {Point} a2 other point on line\n   * @param {Point[]} points polygon points\n   * @param {boolean} [infinite=true] check segment intersection by passing `false`\n   * @return {Intersection}\n   */\n  static intersectLinePolygon(\n    a1: Point,\n    a2: Point,\n    points: Point[],\n    infinite = true\n  ): Intersection {\n    const result = new Intersection();\n    const length = points.length;\n\n    for (let i = 0, b1, b2, inter; i < length; i++) {\n      b1 = points[i];\n      b2 = points[(i + 1) % length];\n      inter = Intersection.intersectLineLine(a1, a2, b1, b2, infinite, false);\n      if (inter.status === 'Coincident') {\n        return inter;\n      }\n      result.append(...inter.points);\n    }\n\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if segment intersects polygon\n   * @static\n   * @see {@link intersectLinePolygon} for line intersection\n   * @param {Point} a1 boundary point of segment\n   * @param {Point} a2 other boundary point of segment\n   * @param {Point[]} points polygon points\n   * @return {Intersection}\n   */\n  static intersectSegmentPolygon(\n    a1: Point,\n    a2: Point,\n    points: Point[]\n  ): Intersection {\n    return Intersection.intersectLinePolygon(a1, a2, points, false);\n  }\n\n  /**\n   * Checks if polygon intersects another polygon\n   *\n   * @todo account for stroke\n   *\n   * @static\n   * @param {Point[]} points1\n   * @param {Point[]} points2\n   * @return {Intersection}\n   */\n  static intersectPolygonPolygon(\n    points1: Point[],\n    points2: Point[]\n  ): Intersection {\n    const result = new Intersection(),\n      length = points1.length;\n    const coincidences: Intersection[] = [];\n\n    for (let i = 0; i < length; i++) {\n      const a1 = points1[i],\n        a2 = points1[(i + 1) % length],\n        inter = Intersection.intersectSegmentPolygon(a1, a2, points2);\n      if (inter.status === 'Coincident') {\n        coincidences.push(inter);\n        result.append(a1, a2);\n      } else {\n        result.append(...inter.points);\n      }\n    }\n\n    if (coincidences.length > 0 && coincidences.length === points1.length) {\n      return new Intersection('Coincident');\n    } else if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if polygon intersects rectangle\n   * @static\n   * @see {@link intersectPolygonPolygon} for polygon intersection\n   * @param {Point[]} points polygon points\n   * @param {Point} r1 top left point of rect\n   * @param {Point} r2 bottom right point of rect\n   * @return {Intersection}\n   */\n  static intersectPolygonRectangle(\n    points: Point[],\n    r1: Point,\n    r2: Point\n  ): Intersection {\n    const min = r1.min(r2),\n      max = r1.max(r2),\n      topRight = new Point(max.x, min.y),\n      bottomLeft = new Point(min.x, max.y);\n\n    return Intersection.intersectPolygonPolygon(points, [\n      min,\n      topRight,\n      max,\n      bottomLeft,\n    ]);\n  }\n}\n", "import { Point } from '../../Point';\nimport type { Group } from '../Group';\nimport type { TDegree, TOriginX, TOriginY } from '../../typedefs';\nimport { calcDimensionsMatrix, transformPoint } from '../../util/misc/matrix';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport { degreesToRadians } from '../../util/misc/radiansDegreesConversion';\nimport { CommonMethods } from '../../CommonMethods';\nimport { resolveOrigin } from '../../util/misc/resolveOrigin';\nimport type { BaseProps } from './types/BaseProps';\nimport type { FillStrokeProps } from './types/FillStrokeProps';\nimport { CENTER, LEFT, TOP } from '../../constants';\n\nexport class ObjectOrigin<EventSpec>\n  extends CommonMethods<EventSpec>\n  implements BaseProps, Pick<FillStrokeProps, 'strokeWidth' | 'strokeUniform'>\n{\n  declare top: number;\n  declare left: number;\n  declare width: number;\n  declare height: number;\n  declare flipX: boolean;\n  declare flipY: boolean;\n  declare scaleX: number;\n  declare scaleY: number;\n  declare skewX: number;\n  declare skewY: number;\n  declare originX: TOriginX;\n  declare originY: TOriginY;\n  declare angle: TDegree;\n  declare strokeWidth: number;\n  declare strokeUniform: boolean;\n\n  /**\n   * Object containing this object.\n   * can influence its size and position\n   */\n  declare group?: Group;\n\n  /**\n   * Calculate object bounding box dimensions from its properties scale, skew.\n   * This bounding box is aligned with object angle and not with canvas axis or screen.\n   * @param {Object} [options]\n   * @param {Number} [options.scaleX]\n   * @param {Number} [options.scaleY]\n   * @param {Number} [options.skewX]\n   * @param {Number} [options.skewY]\n   * @private\n   * @returns {Point} dimensions\n   */\n  _getTransformedDimensions(options: any = {}): Point {\n    const dimOptions = {\n      // if scaleX or scaleY are negative numbers,\n      // this will return dimensions that are negative.\n      // and this will break assumptions around the codebase\n      scaleX: this.scaleX,\n      scaleY: this.scaleY,\n      skewX: this.skewX,\n      skewY: this.skewY,\n      width: this.width,\n      height: this.height,\n      strokeWidth: this.strokeWidth,\n      ...options,\n    };\n    // stroke is applied before/after transformations are applied according to `strokeUniform`\n    const strokeWidth = dimOptions.strokeWidth;\n    let preScalingStrokeValue = strokeWidth,\n      postScalingStrokeValue = 0;\n\n    if (this.strokeUniform) {\n      preScalingStrokeValue = 0;\n      postScalingStrokeValue = strokeWidth;\n    }\n    const dimX = dimOptions.width + preScalingStrokeValue,\n      dimY = dimOptions.height + preScalingStrokeValue,\n      noSkew = dimOptions.skewX === 0 && dimOptions.skewY === 0;\n    let finalDimensions;\n    if (noSkew) {\n      finalDimensions = new Point(\n        dimX * dimOptions.scaleX,\n        dimY * dimOptions.scaleY\n      );\n    } else {\n      finalDimensions = sizeAfterTransform(\n        dimX,\n        dimY,\n        calcDimensionsMatrix(dimOptions)\n      );\n    }\n\n    return finalDimensions.scalarAdd(postScalingStrokeValue);\n  }\n\n  /**\n   * Translates the coordinates from a set of origin to another (based on the object's dimensions)\n   * @param {Point} point The point which corresponds to the originX and originY params\n   * @param {TOriginX} fromOriginX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\n   * @param {TOriginX} toOriginX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} toOriginY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToGivenOrigin(\n    point: Point,\n    fromOriginX: TOriginX,\n    fromOriginY: TOriginY,\n    toOriginX: TOriginX,\n    toOriginY: TOriginY\n  ): Point {\n    let x = point.x,\n      y = point.y;\n    const offsetX = resolveOrigin(toOriginX) - resolveOrigin(fromOriginX),\n      offsetY = resolveOrigin(toOriginY) - resolveOrigin(fromOriginY);\n\n    if (offsetX || offsetY) {\n      const dim = this._getTransformedDimensions();\n      x += offsetX * dim.x;\n      y += offsetY * dim.y;\n    }\n\n    return new Point(x, y);\n  }\n\n  /**\n   * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n   * @param {Point} point The point which corresponds to the originX and originY params\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToCenterPoint(\n    point: Point,\n    originX: TOriginX,\n    originY: TOriginY\n  ): Point {\n    const p = this.translateToGivenOrigin(\n      point,\n      originX,\n      originY,\n      CENTER,\n      CENTER\n    );\n    if (this.angle) {\n      return p.rotate(degreesToRadians(this.angle), point);\n    }\n    return p;\n  }\n\n  /**\n   * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\n   * @param {Point} center The point which corresponds to center of the object\n   * @param {OriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {OriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToOriginPoint(\n    center: Point,\n    originX: TOriginX,\n    originY: TOriginY\n  ): Point {\n    const p = this.translateToGivenOrigin(\n      center,\n      CENTER,\n      CENTER,\n      originX,\n      originY\n    );\n    if (this.angle) {\n      return p.rotate(degreesToRadians(this.angle), center);\n    }\n    return p;\n  }\n\n  /**\n   * Returns the center coordinates of the object relative to canvas\n   * @return {Point}\n   */\n  getCenterPoint(): Point {\n    const relCenter = this.getRelativeCenterPoint();\n    return this.group\n      ? transformPoint(relCenter, this.group.calcTransformMatrix())\n      : relCenter;\n  }\n\n  /**\n   * Returns the center coordinates of the object relative to it's parent\n   * @return {Point}\n   */\n  getRelativeCenterPoint(): Point {\n    return this.translateToCenterPoint(\n      new Point(this.left, this.top),\n      this.originX,\n      this.originY\n    );\n  }\n\n  /**\n   * Returns the coordinates of the object as if it has a different origin\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  getPointByOrigin(originX: TOriginX, originY: TOriginY): Point {\n    return this.translateToOriginPoint(\n      this.getRelativeCenterPoint(),\n      originX,\n      originY\n    );\n  }\n\n  /**\n   * Sets the position of the object taking into consideration the object's origin\n   * @param {Point} pos The new position of the object\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {void}\n   */\n  setPositionByOrigin(pos: Point, originX: TOriginX, originY: TOriginY) {\n    const center = this.translateToCenterPoint(pos, originX, originY),\n      position = this.translateToOriginPoint(\n        center,\n        this.originX,\n        this.originY\n      );\n    this.set({ left: position.x, top: position.y });\n  }\n\n  /**\n   * @private\n   */\n  _getLeftTopCoords() {\n    return this.translateToOriginPoint(\n      this.getRelativeCenterPoint(),\n      LEFT,\n      TOP\n    );\n  }\n}\n", "import type {\n  TBBox,\n  TCornerPoint,\n  TDegree,\n  TMat2D,\n  TOriginX,\n  TOriginY,\n} from '../../typedefs';\nimport { iMatrix } from '../../constants';\nimport { Intersection } from '../../Intersection';\nimport { Point } from '../../Point';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport {\n  createRotateMatrix,\n  createTranslateMatrix,\n  composeMatrix,\n  invertTransform,\n  multiplyTransformMatrices,\n  transformPoint,\n  calcPlaneRotation,\n} from '../../util/misc/matrix';\nimport { radiansToDegrees } from '../../util/misc/radiansDegreesConversion';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { StaticCanvas } from '../../canvas/StaticCanvas';\nimport { ObjectOrigin } from './ObjectOrigin';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport type { ControlProps } from './types/ControlProps';\nimport { resolveOrigin } from '../../util/misc/resolveOrigin';\n\ntype TMatrixCache = {\n  key: number[];\n  value: TMat2D;\n};\n\ntype TACoords = TCornerPoint;\n\nexport class ObjectGeometry<EventSpec extends ObjectEvents = ObjectEvents>\n  extends ObjectOrigin<EventSpec>\n  implements Pick<ControlProps, 'padding'>\n{\n  declare padding: number;\n\n  /**\n   * Describe object's corner position in scene coordinates.\n   * The coordinates are derived from the following:\n   * left, top, width, height, scaleX, scaleY, skewX, skewY, angle, strokeWidth.\n   * The coordinates do not depend on viewport changes.\n   * The coordinates get updated with {@link setCoords}.\n   * You can calculate them without updating with {@link calcACoords()}\n   */\n  declare aCoords: TACoords;\n\n  /**\n   * storage cache for object transform matrix\n   */\n  declare ownMatrixCache?: TMatrixCache;\n\n  /**\n   * storage cache for object full transform matrix\n   */\n  declare matrixCache?: TMatrixCache;\n\n  /**\n   * A Reference of the Canvas where the object is actually added\n   * @type StaticCanvas | Canvas;\n   * @default undefined\n   * @private\n   */\n  declare canvas?: StaticCanvas | Canvas;\n\n  /**\n   * @returns {number} x position according to object's {@link originX} property in canvas coordinate plane\n   */\n  getX(): number {\n    return this.getXY().x;\n  }\n\n  /**\n   * @param {number} value x position according to object's {@link originX} property in canvas coordinate plane\n   */\n  setX(value: number) {\n    this.setXY(this.getXY().setX(value));\n  }\n\n  /**\n   * @returns {number} y position according to object's {@link originY} property in canvas coordinate plane\n   */\n  getY(): number {\n    return this.getXY().y;\n  }\n\n  /**\n   * @param {number} value y position according to object's {@link originY} property in canvas coordinate plane\n   */\n  setY(value: number) {\n    this.setXY(this.getXY().setY(value));\n  }\n\n  /**\n   * @returns {number} x position according to object's {@link originX} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link getX}\n   */\n  getRelativeX(): number {\n    return this.left;\n  }\n\n  /**\n   * @param {number} value x position according to object's {@link originX} property in parent's coordinate plane\\\n   * if parent is canvas then this method is identical to {@link setX}\n   */\n  setRelativeX(value: number) {\n    this.left = value;\n  }\n\n  /**\n   * @returns {number} y position according to object's {@link originY} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link getY}\n   */\n  getRelativeY(): number {\n    return this.top;\n  }\n\n  /**\n   * @param {number} value y position according to object's {@link originY} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link setY}\n   */\n  setRelativeY(value: number) {\n    this.top = value;\n  }\n\n  /**\n   * @returns {Point} x position according to object's {@link originX} {@link originY} properties in canvas coordinate plane\n   */\n  getXY(): Point {\n    const relativePosition = this.getRelativeXY();\n    return this.group\n      ? transformPoint(relativePosition, this.group.calcTransformMatrix())\n      : relativePosition;\n  }\n\n  /**\n   * Set an object position to a particular point, the point is intended in absolute ( canvas ) coordinate.\n   * You can specify {@link originX} and {@link originY} values,\n   * that otherwise are the object's current values.\n   * @example <caption>Set object's bottom left corner to point (5,5) on canvas</caption>\n   * object.setXY(new Point(5, 5), 'left', 'bottom').\n   * @param {Point} point position in canvas coordinate plane\n   * @param {TOriginX} [originX] Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} [originY] Vertical origin: 'top', 'center' or 'bottom'\n   */\n  setXY(point: Point, originX?: TOriginX, originY?: TOriginY) {\n    if (this.group) {\n      point = transformPoint(\n        point,\n        invertTransform(this.group.calcTransformMatrix())\n      );\n    }\n    this.setRelativeXY(point, originX, originY);\n  }\n\n  /**\n   * @returns {Point} x,y position according to object's {@link originX} {@link originY} properties in parent's coordinate plane\n   */\n  getRelativeXY(): Point {\n    return new Point(this.left, this.top);\n  }\n\n  /**\n   * As {@link setXY}, but in current parent's coordinate plane (the current group if any or the canvas)\n   * @param {Point} point position according to object's {@link originX} {@link originY} properties in parent's coordinate plane\n   * @param {TOriginX} [originX] Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} [originY] Vertical origin: 'top', 'center' or 'bottom'\n   */\n  setRelativeXY(\n    point: Point,\n    originX: TOriginX = this.originX,\n    originY: TOriginY = this.originY\n  ) {\n    this.setPositionByOrigin(point, originX, originY);\n  }\n\n  /**\n   * @deprecated intermidiate method to be removed, do not use\n   */\n  protected isStrokeAccountedForInDimensions() {\n    return false;\n  }\n\n  /**\n   * @return {Point[]} [tl, tr, br, bl] in the scene plane\n   */\n  getCoords(): Point[] {\n    const { tl, tr, br, bl } =\n      this.aCoords || (this.aCoords = this.calcACoords());\n    const coords = [tl, tr, br, bl];\n    if (this.group) {\n      const t = this.group.calcTransformMatrix();\n      return coords.map((p) => transformPoint(p, t));\n    }\n    return coords;\n  }\n\n  /**\n   * Checks if object intersects with the scene rect formed by {@link tl} and {@link br}\n   */\n  intersectsWithRect(tl: Point, br: Point): boolean {\n    const intersection = Intersection.intersectPolygonRectangle(\n      this.getCoords(),\n      tl,\n      br\n    );\n    return intersection.status === 'Intersection';\n  }\n\n  /**\n   * Checks if object intersects with another object\n   * @param {Object} other Object to test\n   * @return {Boolean} true if object intersects with another object\n   */\n  intersectsWithObject(other: ObjectGeometry): boolean {\n    const intersection = Intersection.intersectPolygonPolygon(\n      this.getCoords(),\n      other.getCoords()\n    );\n\n    return (\n      intersection.status === 'Intersection' ||\n      intersection.status === 'Coincident' ||\n      other.isContainedWithinObject(this) ||\n      this.isContainedWithinObject(other)\n    );\n  }\n\n  /**\n   * Checks if object is fully contained within area of another object\n   * @param {Object} other Object to test\n   * @return {Boolean} true if object is fully contained within area of another object\n   */\n  isContainedWithinObject(other: ObjectGeometry): boolean {\n    const points = this.getCoords();\n    return points.every((point) => other.containsPoint(point));\n  }\n\n  /**\n   * Checks if object is fully contained within the scene rect formed by {@link tl} and {@link br}\n   */\n  isContainedWithinRect(tl: Point, br: Point): boolean {\n    const { left, top, width, height } = this.getBoundingRect();\n    return (\n      left >= tl.x &&\n      left + width <= br.x &&\n      top >= tl.y &&\n      top + height <= br.y\n    );\n  }\n\n  isOverlapping<T extends ObjectGeometry>(other: T): boolean {\n    return (\n      this.intersectsWithObject(other) ||\n      this.isContainedWithinObject(other) ||\n      other.isContainedWithinObject(this)\n    );\n  }\n\n  /**\n   * Checks if point is inside the object\n   * @param {Point} point Point to check against\n   * @return {Boolean} true if point is inside the object\n   */\n  containsPoint(point: Point): boolean {\n    return Intersection.isPointInPolygon(point, this.getCoords());\n  }\n\n  /**\n   * Checks if object is contained within the canvas with current viewportTransform\n   * the check is done stopping at first point that appears on screen\n   * @return {Boolean} true if object is fully or partially contained within canvas\n   */\n  isOnScreen(): boolean {\n    if (!this.canvas) {\n      return false;\n    }\n    const { tl, br } = this.canvas.vptCoords;\n    const points = this.getCoords();\n    // if some point is on screen, the object is on screen.\n    if (\n      points.some(\n        (point) =>\n          point.x <= br.x &&\n          point.x >= tl.x &&\n          point.y <= br.y &&\n          point.y >= tl.y\n      )\n    ) {\n      return true;\n    }\n    // no points on screen, check intersection with absolute coordinates\n    if (this.intersectsWithRect(tl, br)) {\n      return true;\n    }\n    // check if the object is so big that it contains the entire viewport\n    return this.containsPoint(tl.midPointFrom(br));\n  }\n\n  /**\n   * Checks if object is partially contained within the canvas with current viewportTransform\n   * @return {Boolean} true if object is partially contained within canvas\n   */\n  isPartiallyOnScreen(): boolean {\n    if (!this.canvas) {\n      return false;\n    }\n    const { tl, br } = this.canvas.vptCoords;\n    if (this.intersectsWithRect(tl, br)) {\n      return true;\n    }\n    const allPointsAreOutside = this.getCoords().every(\n      (point) =>\n        (point.x >= br.x || point.x <= tl.x) &&\n        (point.y >= br.y || point.y <= tl.y)\n    );\n    // check if the object is so big that it contains the entire viewport\n    return allPointsAreOutside && this.containsPoint(tl.midPointFrom(br));\n  }\n\n  /**\n   * Returns coordinates of object's bounding rectangle (left, top, width, height)\n   * the box is intended as aligned to axis of canvas.\n   * @return {Object} Object with left, top, width, height properties\n   */\n  getBoundingRect(): TBBox {\n    return makeBoundingBoxFromPoints(this.getCoords());\n  }\n\n  /**\n   * Returns width of an object's bounding box counting transformations\n   * @todo shouldn't this account for group transform and return the actual size in canvas coordinate plane?\n   * @return {Number} width value\n   */\n  getScaledWidth(): number {\n    return this._getTransformedDimensions().x;\n  }\n\n  /**\n   * Returns height of an object bounding box counting transformations\n   * @todo shouldn't this account for group transform and return the actual size in canvas coordinate plane?\n   * @return {Number} height value\n   */\n  getScaledHeight(): number {\n    return this._getTransformedDimensions().y;\n  }\n\n  /**\n   * Scales an object (equally by x and y)\n   * @param {Number} value Scale factor\n   * @return {void}\n   */\n  scale(value: number): void {\n    this._set('scaleX', value);\n    this._set('scaleY', value);\n    this.setCoords();\n  }\n\n  /**\n   * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\n   * @param {Number} value New width value\n   * @return {void}\n   */\n  scaleToWidth(value: number) {\n    // adjust to bounding rect factor so that rotated shapes would fit as well\n    const boundingRectFactor =\n      this.getBoundingRect().width / this.getScaledWidth();\n    return this.scale(value / this.width / boundingRectFactor);\n  }\n\n  /**\n   * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\n   * @param {Number} value New height value\n   * @return {void}\n   */\n  scaleToHeight(value: number) {\n    // adjust to bounding rect factor so that rotated shapes would fit as well\n    const boundingRectFactor =\n      this.getBoundingRect().height / this.getScaledHeight();\n    return this.scale(value / this.height / boundingRectFactor);\n  }\n\n  getCanvasRetinaScaling() {\n    return this.canvas?.getRetinaScaling() || 1;\n  }\n\n  /**\n   * Returns the object angle relative to canvas counting also the group property\n   * @returns {TDegree}\n   */\n  getTotalAngle(): TDegree {\n    return this.group\n      ? radiansToDegrees(calcPlaneRotation(this.calcTransformMatrix()))\n      : this.angle;\n  }\n\n  /**\n   * Retrieves viewportTransform from Object's canvas if available\n   * @return {TMat2D}\n   */\n  getViewportTransform(): TMat2D {\n    return this.canvas?.viewportTransform || (iMatrix.concat() as TMat2D);\n  }\n\n  /**\n   * Calculates the coordinates of the 4 corner of the bbox, in absolute coordinates.\n   * those never change with zoom or viewport changes.\n   * @return {TCornerPoint}\n   */\n  calcACoords(): TCornerPoint {\n    const rotateMatrix = createRotateMatrix({ angle: this.angle }),\n      { x, y } = this.getRelativeCenterPoint(),\n      tMatrix = createTranslateMatrix(x, y),\n      finalMatrix = multiplyTransformMatrices(tMatrix, rotateMatrix),\n      dim = this._getTransformedDimensions(),\n      w = dim.x / 2,\n      h = dim.y / 2;\n    return {\n      // corners\n      tl: transformPoint({ x: -w, y: -h }, finalMatrix),\n      tr: transformPoint({ x: w, y: -h }, finalMatrix),\n      bl: transformPoint({ x: -w, y: h }, finalMatrix),\n      br: transformPoint({ x: w, y: h }, finalMatrix),\n    };\n  }\n\n  /**\n   * Sets corner and controls position coordinates based on current angle, width and height, left and top.\n   * aCoords are used to quickly find an object on the canvas.\n   * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\n   */\n  setCoords(): void {\n    this.aCoords = this.calcACoords();\n  }\n\n  transformMatrixKey(skipGroup = false): number[] {\n    let prefix: number[] = [];\n    if (!skipGroup && this.group) {\n      prefix = this.group.transformMatrixKey(skipGroup);\n    }\n    prefix.push(\n      this.top,\n      this.left,\n      this.width,\n      this.height,\n      this.scaleX,\n      this.scaleY,\n      this.angle,\n      this.strokeWidth,\n      this.skewX,\n      this.skewY,\n      +this.flipX,\n      +this.flipY,\n      resolveOrigin(this.originX),\n      resolveOrigin(this.originY)\n    );\n\n    return prefix;\n  }\n\n  /**\n   * calculate transform matrix that represents the current transformations from the\n   * object's properties.\n   * @param {Boolean} [skipGroup] return transform matrix for object not counting parent transformations\n   * There are some situation in which this is useful to avoid the fake rotation.\n   * @return {TMat2D} transform matrix for the object\n   */\n  calcTransformMatrix(skipGroup = false): TMat2D {\n    let matrix = this.calcOwnMatrix();\n    if (skipGroup || !this.group) {\n      return matrix;\n    }\n    const key = this.transformMatrixKey(skipGroup),\n      cache = this.matrixCache;\n    if (cache && cache.key.every((x, i) => x === key[i])) {\n      return cache.value;\n    }\n    if (this.group) {\n      matrix = multiplyTransformMatrices(\n        this.group.calcTransformMatrix(false),\n        matrix\n      );\n    }\n    this.matrixCache = {\n      key,\n      value: matrix,\n    };\n    return matrix;\n  }\n\n  /**\n   * calculate transform matrix that represents the current transformations from the\n   * object's properties, this matrix does not include the group transformation\n   * @return {TMat2D} transform matrix for the object\n   */\n  calcOwnMatrix(): TMat2D {\n    const key = this.transformMatrixKey(true),\n      cache = this.ownMatrixCache;\n    if (cache && cache.key === key) {\n      return cache.value;\n    }\n    const center = this.getRelativeCenterPoint(),\n      options = {\n        angle: this.angle,\n        translateX: center.x,\n        translateY: center.y,\n        scaleX: this.scaleX,\n        scaleY: this.scaleY,\n        skewX: this.skewX,\n        skewY: this.skewY,\n        flipX: this.flipX,\n        flipY: this.flipY,\n      },\n      value = composeMatrix(options);\n    this.ownMatrixCache = {\n      key,\n      value,\n    };\n    return value;\n  }\n\n  /**\n   * Calculate object dimensions from its properties\n   * @private\n   * @returns {Point} dimensions\n   */\n  _getNonTransformedDimensions(): Point {\n    return new Point(this.width, this.height).scalarAdd(this.strokeWidth);\n  }\n\n  /**\n   * Calculate object dimensions for controls box, including padding and canvas zoom.\n   * and active selection\n   * @private\n   * @param {object} [options] transform options\n   * @returns {Point} dimensions\n   */\n  _calculateCurrentDimensions(options?: any): Point {\n    return this._getTransformedDimensions(options)\n      .transform(this.getViewportTransform(), true)\n      .scalarAdd(2 * this.padding);\n  }\n}\n", "import type { ObjectEvents } from '../../EventTypeDefs';\nimport type { Group } from '../Group';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { StaticCanvas } from '../../canvas/StaticCanvas';\nimport { ObjectGeometry } from './ObjectGeometry';\n\ntype TAncestor = StackedObject | Canvas | StaticCanvas;\ntype TCollection = Group | Canvas | StaticCanvas;\n\n/**\n * Strict: only ancestors that are objects (without canvas)\n */\nexport type Ancestors<Strict> = Strict extends true\n  ? [StackedObject | Group] | [StackedObject | Group, ...Group[]] | Group[]\n  :\n      | [StackedObject | Group | Canvas | StaticCanvas]\n      | [StackedObject | Group, Canvas | StaticCanvas]\n      | [StackedObject, ...Group[]]\n      | Group[]\n      | [StackedObject | Group, ...Group[], Canvas | StaticCanvas];\n\nexport type AncestryComparison<Strict> = {\n  /**\n   * common ancestors of `this` and`other`(may include`this` | `other`)\n   */\n  common: Ancestors<Strict>;\n  /**\n   * ancestors that are of `this` only\n   */\n  fork: Ancestors<Strict>;\n  /**\n   * ancestors that are of `other` only\n   */\n  otherFork: Ancestors<Strict>;\n};\n\nexport class StackedObject<\n  EventSpec extends ObjectEvents = ObjectEvents\n> extends ObjectGeometry<EventSpec> {\n  /**\n   * A reference to the parent of the object\n   * Used to keep the original parent ref when the object has been added to an ActiveSelection, hence loosing the `group` ref\n   */\n  declare parent?: Group;\n\n  /**\n   * Checks if object is descendant of target\n   * Should be used instead of {@link Group.contains} or {@link StaticCanvas.contains} for performance reasons\n   * @param {TAncestor} target\n   * @returns {boolean}\n   */\n  isDescendantOf(target: TAncestor): boolean {\n    const { parent, group } = this;\n    return (\n      parent === target ||\n      group === target ||\n      this.canvas === target ||\n      // walk up\n      (!!parent && parent.isDescendantOf(target)) ||\n      (!!group && group !== parent && group.isDescendantOf(target))\n    );\n  }\n\n  /**\n   *\n   * @param {boolean} [strict] returns only ancestors that are objects (without canvas)\n   * @returns {Ancestors} ancestors (excluding `ActiveSelection`) from bottom to top\n   */\n  getAncestors<T extends boolean>(strict?: T): Ancestors<T> {\n    const ancestors: TAncestor[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let parent: TAncestor | undefined = this;\n    do {\n      parent =\n        parent instanceof StackedObject\n          ? parent.parent ?? (!strict ? parent.canvas : undefined)\n          : undefined;\n      parent && ancestors.push(parent);\n    } while (parent);\n    return ancestors as Ancestors<T>;\n  }\n\n  /**\n   * Compare ancestors\n   *\n   * @param {StackedObject} other\n   * @param {boolean} [strict] finds only ancestors that are objects (without canvas)\n   * @returns {AncestryComparison} an object that represent the ancestry situation.\n   */\n  findCommonAncestors<T extends this, S extends boolean>(\n    other: T,\n    strict?: S\n  ): AncestryComparison<S> {\n    if (this === other) {\n      return {\n        fork: [],\n        otherFork: [],\n        common: [this, ...this.getAncestors(strict)],\n      } as AncestryComparison<S>;\n    }\n    const ancestors = this.getAncestors(strict);\n    const otherAncestors = other.getAncestors(strict);\n    //  if `this` has no ancestors and `this` is top ancestor of `other` we must handle the following case\n    if (\n      ancestors.length === 0 &&\n      otherAncestors.length > 0 &&\n      this === otherAncestors[otherAncestors.length - 1]\n    ) {\n      return {\n        fork: [],\n        otherFork: [\n          other,\n          ...otherAncestors.slice(0, otherAncestors.length - 1),\n        ],\n        common: [this],\n      } as AncestryComparison<S>;\n    }\n    //  compare ancestors\n    for (let i = 0, ancestor; i < ancestors.length; i++) {\n      ancestor = ancestors[i];\n      if (ancestor === other) {\n        return {\n          fork: [this, ...ancestors.slice(0, i)],\n          otherFork: [],\n          common: ancestors.slice(i),\n        } as AncestryComparison<S>;\n      }\n      for (let j = 0; j < otherAncestors.length; j++) {\n        if (this === otherAncestors[j]) {\n          return {\n            fork: [],\n            otherFork: [other, ...otherAncestors.slice(0, j)],\n            common: [this, ...ancestors],\n          } as AncestryComparison<S>;\n        }\n        if (ancestor === otherAncestors[j]) {\n          return {\n            fork: [this, ...ancestors.slice(0, i)],\n            otherFork: [other, ...otherAncestors.slice(0, j)],\n            common: ancestors.slice(i),\n          } as AncestryComparison<S>;\n        }\n      }\n    }\n    // nothing shared\n    return {\n      fork: [this, ...ancestors],\n      otherFork: [other, ...otherAncestors],\n      common: [],\n    } as AncestryComparison<S>;\n  }\n\n  /**\n   *\n   * @param {StackedObject} other\n   * @param {boolean} [strict] checks only ancestors that are objects (without canvas)\n   * @returns {boolean}\n   */\n  hasCommonAncestors<T extends this>(other: T, strict?: boolean): boolean {\n    const commonAncestors = this.findCommonAncestors(other, strict);\n    return commonAncestors && !!commonAncestors.common.length;\n  }\n\n  /**\n   *\n   * @param {FabricObject} other object to compare against\n   * @returns {boolean | undefined} if objects do not share a common ancestor or they are strictly equal it is impossible to determine which is in front of the other; in such cases the function returns `undefined`\n   */\n  isInFrontOf<T extends this>(other: T): boolean | undefined {\n    if (this === other) {\n      return undefined;\n    }\n    const ancestorData = this.findCommonAncestors(other);\n    if (!ancestorData) {\n      return undefined;\n    }\n    if (ancestorData.fork.includes(other as any)) {\n      return true;\n    }\n    if (ancestorData.otherFork.includes(this as any)) {\n      return false;\n    }\n    const firstCommonAncestor = ancestorData.common[0];\n    if (!firstCommonAncestor) {\n      return undefined;\n    }\n    const headOfFork = ancestorData.fork.pop(),\n      headOfOtherFork = ancestorData.otherFork.pop(),\n      thisIndex = (firstCommonAncestor as TCollection)._objects.indexOf(\n        headOfFork as any\n      ),\n      otherIndex = (firstCommonAncestor as TCollection)._objects.indexOf(\n        headOfOtherFork as any\n      );\n    return thisIndex > -1 && thisIndex > otherIndex;\n  }\n}\n", "import type { TColorArg } from '../../color/typedefs';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport type { TAnimation } from '../../util/animation/animate';\nimport { animate, animateColor } from '../../util/animation/animate';\nimport type {\n  AnimationOptions,\n  ArrayAnimationOptions,\n  ColorAnimationOptions,\n  ValueAnimationOptions,\n} from '../../util/animation/types';\nimport { StackedObject } from './StackedObject';\n\nexport abstract class AnimatableObject<\n  EventSpec extends ObjectEvents = ObjectEvents\n> extends StackedObject<EventSpec> {\n  /**\n   * List of properties to consider for animating colors.\n   * @type String[]\n   */\n  static colorProperties: string[] = ['fill', 'stroke', 'backgroundColor'];\n\n  /**\n   * Animates object's properties\n   * @param {Record<string, number | number[] | TColorArg>} animatable map of keys and end values\n   * @param {Partial<AnimationOptions<T>>} options\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}\n   * @return {Record<string, TAnimation<T>>} map of animation contexts\n   *\n   * As object — multiple properties\n   *\n   * object.animate({ left: ..., top: ... });\n   * object.animate({ left: ..., top: ... }, { duration: ... });\n   */\n  animate<T extends number | number[] | TColorArg>(\n    animatable: Record<string, T>,\n    options?: Partial<AnimationOptions<T>>\n  ): Record<string, TAnimation<T>> {\n    return Object.entries(animatable).reduce((acc, [key, endValue]) => {\n      acc[key] = this._animate(key, endValue, options);\n      return acc;\n    }, {} as Record<string, TAnimation<T>>);\n  }\n\n  /**\n   * @private\n   * @param {String} key Property to animate\n   * @param {String} to Value to animate to\n   * @param {Object} [options] Options object\n   */\n  _animate<T extends number | number[] | TColorArg>(\n    key: string,\n    endValue: T,\n    options: Partial<AnimationOptions<T>> = {}\n  ): TAnimation<T> {\n    const path = key.split('.');\n    const propIsColor = (\n      this.constructor as typeof AnimatableObject\n    ).colorProperties.includes(path[path.length - 1]);\n    const { abort, startValue, onChange, onComplete } = options;\n    const animationOptions = {\n      ...options,\n      target: this,\n      // path.reduce... is the current value in case start value isn't provided\n      startValue:\n        startValue ?? path.reduce((deep: any, key) => deep[key], this),\n      endValue,\n      abort: abort?.bind(this),\n      onChange: (\n        value: number | number[] | string,\n        valueProgress: number,\n        durationProgress: number\n      ) => {\n        path.reduce((deep: Record<string, any>, key, index) => {\n          if (index === path.length - 1) {\n            deep[key] = value;\n          }\n          return deep[key];\n        }, this);\n        onChange &&\n          // @ts-expect-error generic callback arg0 is wrong\n          onChange(value, valueProgress, durationProgress);\n      },\n      onComplete: (\n        value: number | number[] | string,\n        valueProgress: number,\n        durationProgress: number\n      ) => {\n        this.setCoords();\n        onComplete &&\n          // @ts-expect-error generic callback arg0 is wrong\n          onComplete(value, valueProgress, durationProgress);\n      },\n    } as AnimationOptions<T>;\n\n    return (\n      propIsColor\n        ? animateColor(animationOptions as ColorAnimationOptions)\n        : animate(\n            animationOptions as ValueAnimationOptions | ArrayAnimationOptions\n          )\n    ) as TAnimation<T>;\n  }\n}\n", "export function getSvgRegex(arr: string[]) {\n  return new RegExp('^(' + arr.join('|') + ')\\\\b', 'i');\n}\n", "import { getSvgRegex } from './getSvgRegex';\nimport { LEFT, TOP } from '../constants';\n\nexport const reNum = String.raw`(?:[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?)`;\n\nexport const svgNS = 'http://www.w3.org/2000/svg';\n\nexport const commaWsp = String.raw`(?:\\s+,?\\s*|,\\s*|$)`;\n\nexport const reFontDeclaration = new RegExp(\n  '(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*' +\n    '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(' +\n    reNum +\n    '(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|' +\n    reNum +\n    '))?\\\\s+(.*)'\n);\n\nexport const svgValidTagNames = [\n    'path',\n    'circle',\n    'polygon',\n    'polyline',\n    'ellipse',\n    'rect',\n    'line',\n    'image',\n    'text',\n  ],\n  svgViewBoxElements = ['symbol', 'image', 'marker', 'pattern', 'view', 'svg'],\n  svgInvalidAncestors = [\n    'pattern',\n    'defs',\n    'symbol',\n    'metadata',\n    'clipPath',\n    'mask',\n    'desc',\n  ],\n  svgValidParents = ['symbol', 'g', 'a', 'svg', 'clipPath', 'defs'],\n  attributesMap = {\n    cx: LEFT,\n    x: LEFT,\n    r: 'radius',\n    cy: TOP,\n    y: TOP,\n    display: 'visible',\n    visibility: 'visible',\n    transform: 'transformMatrix',\n    'fill-opacity': 'fillOpacity',\n    'fill-rule': 'fillRule',\n    'font-family': 'fontFamily',\n    'font-size': 'fontSize',\n    'font-style': 'fontStyle',\n    'font-weight': 'fontWeight',\n    'letter-spacing': 'charSpacing',\n    'paint-order': 'paintFirst',\n    'stroke-dasharray': 'strokeDashArray',\n    'stroke-dashoffset': 'strokeDashOffset',\n    'stroke-linecap': 'strokeLineCap',\n    'stroke-linejoin': 'strokeLineJoin',\n    'stroke-miterlimit': 'strokeMiterLimit',\n    'stroke-opacity': 'strokeOpacity',\n    'stroke-width': 'strokeWidth',\n    'text-decoration': 'textDecoration',\n    'text-anchor': 'textAnchor',\n    opacity: 'opacity',\n    'clip-path': 'clipPath',\n    'clip-rule': 'clipRule',\n    'vector-effect': 'strokeUniform',\n    'image-rendering': 'imageSmoothing',\n  },\n  fSize = 'font-size',\n  cPath = 'clip-path';\n\nexport const svgValidTagNamesRegEx = getSvgRegex(svgValidTagNames);\n\nexport const svgViewBoxElementsRegEx = getSvgRegex(svgViewBoxElements);\n\nexport const svgValidParentsRegEx = getSvgRegex(svgValidParents);\n\n// http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute\n// matches, e.g.: +14.56e-12, etc.\nexport const reViewBoxAttrValue = new RegExp(\n  '^' +\n    '\\\\s*(' +\n    reNum +\n    '+)\\\\s*,?' +\n    '\\\\s*(' +\n    reNum +\n    '+)\\\\s*,?' +\n    '\\\\s*(' +\n    reNum +\n    '+)\\\\s*,?' +\n    '\\\\s*(' +\n    reNum +\n    '+)\\\\s*' +\n    '$'\n);\n", "import { classRegistry } from './ClassRegistry';\nimport { Color } from './color/Color';\nimport { config } from './config';\nimport { reNum } from './parser/constants';\nimport { Point } from './Point';\nimport type { FabricObject } from './shapes/Object/FabricObject';\nimport type { TClassProperties } from './typedefs';\nimport { uid } from './util/internals/uid';\nimport { pickBy } from './util/misc/pick';\nimport { degreesToRadians } from './util/misc/radiansDegreesConversion';\nimport { toFixed } from './util/misc/toFixed';\nimport { rotateVector } from './util/misc/vectors';\n\n/**\n   * Regex matching shadow offsetX, offsetY and blur (ex: \"2px 2px 10px rgba(0,0,0,0.2)\", \"rgb(0,255,0) 2px 2px\")\n   * - (?:\\s|^): This part captures either a whitespace character (\\s) or the beginning of a line (^). It's non-capturing (due to (?:...)), meaning it doesn't create a capturing group.\n   * - (-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?: This captures the first component of the shadow, which is the horizontal offset. Breaking it down:\n   *   - (-?\\d+): Captures an optional minus sign followed by one or more digits (integer part of the number).\n   *   - (?:\\.\\d*)?: Optionally captures a decimal point followed by zero or more digits (decimal part of the number).\n   *   - (?:px)?: Optionally captures the \"px\" unit.\n   *   - (?:\\s?|$): Captures either an optional whitespace or the end of the line. This whole part is wrapped in a non-capturing group and marked as optional with ?.\n   * - (-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?: Similar to the previous step, this captures the vertical offset.\n\n(\\d+(?:\\.\\d*)?(?:px)?)?: This captures the blur radius. It's similar to the horizontal offset but without the optional minus sign.\n\n(?:\\s+(-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?){0,1}: This captures an optional part for the color. It allows for whitespace followed by a component with an optional minus sign, digits, decimal point, and \"px\" unit.\n\n(?:$|\\s): This captures either the end of the line or a whitespace character. It ensures that the match ends either at the end of the string or with a whitespace character.\n   */\n// eslint-disable-next-line max-len\n\nconst shadowOffsetRegex = '(-?\\\\d+(?:\\\\.\\\\d*)?(?:px)?(?:\\\\s?|$))?';\n\nconst reOffsetsAndBlur = new RegExp(\n  '(?:\\\\s|^)' +\n    shadowOffsetRegex +\n    shadowOffsetRegex +\n    '(' +\n    reNum +\n    '?(?:px)?)?(?:\\\\s?|$)(?:$|\\\\s)'\n);\n\nexport const shadowDefaultValues: Partial<TClassProperties<Shadow>> = {\n  color: 'rgb(0,0,0)',\n  blur: 0,\n  offsetX: 0,\n  offsetY: 0,\n  affectStroke: false,\n  includeDefaultValues: true,\n  nonScaling: false,\n};\n\nexport type SerializedShadowOptions = {\n  color: string;\n  blur: number;\n  offsetX: number;\n  offsetY: number;\n  affectStroke: boolean;\n  nonScaling: boolean;\n  type: string;\n};\n\nexport class Shadow {\n  /**\n   * Shadow color\n   * @type String\n   * @default\n   */\n  declare color: string;\n\n  /**\n   * Shadow blur\n   * @type Number\n   */\n  declare blur: number;\n\n  /**\n   * Shadow horizontal offset\n   * @type Number\n   * @default\n   */\n  declare offsetX: number;\n\n  /**\n   * Shadow vertical offset\n   * @type Number\n   * @default\n   */\n  declare offsetY: number;\n\n  /**\n   * Whether the shadow should affect stroke operations\n   * @type Boolean\n   * @default\n   */\n  declare affectStroke: boolean;\n\n  /**\n   * Indicates whether toObject should include default values\n   * @type Boolean\n   * @default\n   */\n  declare includeDefaultValues: boolean;\n\n  /**\n   * When `false`, the shadow will scale with the object.\n   * When `true`, the shadow's offsetX, offsetY, and blur will not be affected by the object's scale.\n   * default to false\n   * @type Boolean\n   * @default\n   */\n  declare nonScaling: boolean;\n\n  declare id: number;\n\n  static ownDefaults = shadowDefaultValues;\n\n  static type = 'shadow';\n\n  /**\n   * @see {@link http://fabricjs.com/shadows|Shadow demo}\n   * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetY properties or string (e.g. \"rgba(0,0,0,0.2) 2px 2px 10px\")\n   */\n  constructor(options: Partial<TClassProperties<Shadow>>);\n  constructor(svgAttribute: string);\n  constructor(arg0: string | Partial<TClassProperties<Shadow>>) {\n    const options: Partial<TClassProperties<Shadow>> =\n      typeof arg0 === 'string' ? Shadow.parseShadow(arg0) : arg0;\n    Object.assign(this, Shadow.ownDefaults);\n    for (const prop in options) {\n      // @ts-expect-error for loops are so messy in TS\n      this[prop] = options[prop];\n    }\n\n    this.id = uid();\n  }\n\n  /**\n   * @param {String} value Shadow value to parse\n   * @return {Object} Shadow object with color, offsetX, offsetY and blur\n   */\n  static parseShadow(value: string) {\n    const shadowStr = value.trim(),\n      [, offsetX = 0, offsetY = 0, blur = 0] = (\n        reOffsetsAndBlur.exec(shadowStr) || []\n      ).map((value) => parseFloat(value) || 0),\n      color = (shadowStr.replace(reOffsetsAndBlur, '') || 'rgb(0,0,0)').trim();\n\n    return {\n      color,\n      offsetX,\n      offsetY,\n      blur,\n    };\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow\n   * @return {String} Returns CSS3 text-shadow declaration\n   */\n  toString() {\n    return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');\n  }\n\n  /**\n   * Returns SVG representation of a shadow\n   * @param {FabricObject} object\n   * @return {String} SVG representation of a shadow\n   */\n  toSVG(object: FabricObject) {\n    const offset = rotateVector(\n        new Point(this.offsetX, this.offsetY),\n        degreesToRadians(-object.angle)\n      ),\n      BLUR_BOX = 20,\n      color = new Color(this.color);\n    let fBoxX = 40,\n      fBoxY = 40;\n\n    if (object.width && object.height) {\n      //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion\n      // we add some extra space to filter box to contain the blur ( 20 )\n      fBoxX =\n        toFixed(\n          (Math.abs(offset.x) + this.blur) / object.width,\n          config.NUM_FRACTION_DIGITS\n        ) *\n          100 +\n        BLUR_BOX;\n      fBoxY =\n        toFixed(\n          (Math.abs(offset.y) + this.blur) / object.height,\n          config.NUM_FRACTION_DIGITS\n        ) *\n          100 +\n        BLUR_BOX;\n    }\n    if (object.flipX) {\n      offset.x *= -1;\n    }\n    if (object.flipY) {\n      offset.y *= -1;\n    }\n\n    return `<filter id=\"SVGID_${this.id}\" y=\"-${fBoxY}%\" height=\"${\n      100 + 2 * fBoxY\n    }%\" x=\"-${fBoxX}%\" width=\"${\n      100 + 2 * fBoxX\n    }%\" >\\n\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"${toFixed(\n      this.blur ? this.blur / 2 : 0,\n      config.NUM_FRACTION_DIGITS\n    )}\"></feGaussianBlur>\\n\\t<feOffset dx=\"${toFixed(\n      offset.x,\n      config.NUM_FRACTION_DIGITS\n    )}\" dy=\"${toFixed(\n      offset.y,\n      config.NUM_FRACTION_DIGITS\n    )}\" result=\"oBlur\" ></feOffset>\\n\\t<feFlood flood-color=\"${color.toRgb()}\" flood-opacity=\"${color.getAlpha()}\"/>\\n\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n\\t<feMerge>\\n\\t\\t<feMergeNode></feMergeNode>\\n\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n\\t</feMerge>\\n</filter>\\n`;\n  }\n\n  /**\n   * Returns object representation of a shadow\n   * @return {Object} Object representation of a shadow instance\n   */\n  toObject() {\n    const data: SerializedShadowOptions = {\n      color: this.color,\n      blur: this.blur,\n      offsetX: this.offsetX,\n      offsetY: this.offsetY,\n      affectStroke: this.affectStroke,\n      nonScaling: this.nonScaling,\n      type: (this.constructor as typeof Shadow).type,\n    };\n    const defaults = Shadow.ownDefaults as SerializedShadowOptions;\n    return !this.includeDefaultValues\n      ? pickBy(data, (value, key) => value !== defaults[key])\n      : data;\n  }\n\n  static async fromObject(options: Partial<TClassProperties<Shadow>>) {\n    return new this(options);\n  }\n}\n\nclassRegistry.setClass(Shadow, 'shadow');\n", "export const cloneDeep = <T extends object>(object: T): T =>\n  JSON.parse(JSON.stringify(object));\n", "import { TOP, LEFT } from '../../constants';\nimport type { TClassProperties } from '../../typedefs';\nimport type { InteractiveFabricObject } from './InteractiveObject';\nimport type { FabricObject } from './Object';\n\nexport const stateProperties = [\n  TOP,\n  LEFT,\n  'scaleX',\n  'scaleY',\n  'flipX',\n  'flipY',\n  'originX',\n  'originY',\n  'angle',\n  'opacity',\n  'globalCompositeOperation',\n  'shadow',\n  'visible',\n  'skewX',\n  'skewY',\n];\n\nexport const cacheProperties = [\n  'fill',\n  'stroke',\n  'strokeWidth',\n  'strokeDashArray',\n  'width',\n  'height',\n  'paintFirst',\n  'strokeUniform',\n  'strokeLineCap',\n  'strokeDashOffset',\n  'strokeLineJoin',\n  'strokeMiterLimit',\n  'backgroundColor',\n  'clipPath',\n];\n\nexport const fabricObjectDefaultValues: Partial<\n  TClassProperties<FabricObject>\n> = {\n  // see composeMatrix() to see order of transforms. First defaults listed based on this\n  top: 0,\n  left: 0,\n  width: 0,\n  height: 0,\n  angle: 0,\n  flipX: false,\n  flipY: false,\n  scaleX: 1,\n  scaleY: 1,\n  minScaleLimit: 0,\n  skewX: 0,\n  skewY: 0,\n  originX: LEFT,\n  originY: TOP,\n  strokeWidth: 1,\n  strokeUniform: false,\n  padding: 0,\n  opacity: 1,\n  paintFirst: 'fill',\n  fill: 'rgb(0,0,0)',\n  fillRule: 'nonzero',\n  stroke: null,\n  strokeDashArray: null,\n  strokeDashOffset: 0,\n  strokeLineCap: 'butt',\n  strokeLineJoin: 'miter',\n  strokeMiterLimit: 4,\n  globalCompositeOperation: 'source-over',\n  backgroundColor: '',\n  shadow: null,\n  visible: true,\n  includeDefaultValues: true,\n  excludeFromExport: false,\n  objectCaching: true,\n  clipPath: undefined,\n  inverted: false,\n  absolutePositioned: false,\n  centeredRotation: true,\n  centeredScaling: false,\n  dirty: true,\n} as const;\n\nexport const interactiveObjectDefaultValues: Partial<\n  TClassProperties<InteractiveFabricObject>\n> = {\n  noScaleCache: true,\n  lockMovementX: false,\n  lockMovementY: false,\n  lockRotation: false,\n  lockScalingX: false,\n  lockScalingY: false,\n  lockSkewingX: false,\n  lockSkewingY: false,\n  lockScalingFlip: false,\n  cornerSize: 13,\n  touchCornerSize: 24,\n  transparentCorners: true,\n  cornerColor: 'rgb(178,204,255)',\n  cornerStrokeColor: '',\n  cornerStyle: 'rect',\n  cornerDashArray: null,\n  hasControls: true,\n  borderColor: 'rgb(178,204,255)',\n  borderDashArray: null,\n  borderOpacityWhenMoving: 0.4,\n  borderScaleFactor: 1,\n  hasBorders: true,\n  selectionBackgroundColor: '',\n  selectable: true,\n  evented: true,\n  perPixelTargetFind: false,\n  activeOn: 'down',\n  hoverCursor: null,\n  moveCursor: null,\n};\n", "import { cache } from '../../cache';\nimport { config } from '../../config';\nimport {\n  ALIASING_LIMIT,\n  CENTER,\n  iMatrix,\n  LEFT,\n  TOP,\n  VERSION,\n} from '../../constants';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport { AnimatableObject } from './AnimatableObject';\nimport { Point } from '../../Point';\nimport { Shadow } from '../../Shadow';\nimport type {\n  TDegree,\n  TFiller,\n  TSize,\n  TCacheCanvasDimensions,\n  Abortable,\n  TOptions,\n  ImageFormat,\n} from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport { runningAnimations } from '../../util/animation/AnimationRegistry';\nimport { cloneDeep } from '../../util/internals/cloneDeep';\nimport { capValue } from '../../util/misc/capValue';\nimport { createCanvasElement, toDataURL } from '../../util/misc/dom';\nimport { invertTransform, qrDecompose } from '../../util/misc/matrix';\nimport { enlivenObjectEnlivables } from '../../util/misc/objectEnlive';\nimport {\n  resetObjectTransform,\n  saveObjectTransform,\n} from '../../util/misc/objectTransforms';\nimport { sendObjectToPlane } from '../../util/misc/planeChange';\nimport { pick, pickBy } from '../../util/misc/pick';\nimport { toFixed } from '../../util/misc/toFixed';\nimport type { Group } from '../Group';\nimport { StaticCanvas } from '../../canvas/StaticCanvas';\nimport {\n  isFiller,\n  isSerializableFiller,\n  isTextObject,\n} from '../../util/typeAssertions';\nimport type { FabricImage } from '../Image';\nimport {\n  cacheProperties,\n  fabricObjectDefaultValues,\n  stateProperties,\n} from './defaultValues';\nimport type { Gradient } from '../../gradient/Gradient';\nimport type { Pattern } from '../../Pattern';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { SerializedObjectProps } from './types/SerializedObjectProps';\nimport type { ObjectProps } from './types/ObjectProps';\nimport { getDevicePixelRatio, getEnv } from '../../env';\nimport { log } from '../../util/internals/console';\n\nexport type TCachedFabricObject<T extends FabricObject = FabricObject> = T &\n  Required<\n    Pick<\n      T,\n      | 'zoomX'\n      | 'zoomY'\n      | '_cacheCanvas'\n      | '_cacheContext'\n      | 'cacheTranslationX'\n      | 'cacheTranslationY'\n    >\n  > & {\n    _cacheContext: CanvasRenderingContext2D;\n  };\n\nexport type ObjectToCanvasElementOptions = {\n  format?: ImageFormat;\n  /** Multiplier to scale by */\n  multiplier?: number;\n  /** Cropping left offset. Introduced in v1.2.14 */\n  left?: number;\n  /** Cropping top offset. Introduced in v1.2.14 */\n  top?: number;\n  /** Cropping width. Introduced in v1.2.14 */\n  width?: number;\n  /** Cropping height. Introduced in v1.2.14 */\n  height?: number;\n  /** Enable retina scaling for clone image. Introduce in 1.6.4 */\n  enableRetinaScaling?: boolean;\n  /** Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4 */\n  withoutTransform?: boolean;\n  /** Remove current object shadow. Introduced in 2.4.2 */\n  withoutShadow?: boolean;\n  /** Account for canvas viewport transform */\n  viewportTransform?: boolean;\n  /** Function to create the output canvas to export onto */\n  canvasProvider?: <T extends StaticCanvas>(el?: HTMLCanvasElement) => T;\n};\n\ntype toDataURLOptions = ObjectToCanvasElementOptions & {\n  quality?: number;\n};\n\n/**\n * Root object class from which all 2d shape classes inherit from\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}\n *\n * @fires added\n * @fires removed\n *\n * @fires selected\n * @fires deselected\n *\n * @fires rotating\n * @fires scaling\n * @fires moving\n * @fires skewing\n * @fires modified\n *\n * @fires mousedown\n * @fires mouseup\n * @fires mouseover\n * @fires mouseout\n * @fires mousewheel\n * @fires mousedblclick\n *\n * @fires dragover\n * @fires dragenter\n * @fires dragleave\n * @fires drop\n */\nexport class FabricObject<\n    Props extends TOptions<ObjectProps> = Partial<ObjectProps>,\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents\n  >\n  extends AnimatableObject<EventSpec>\n  implements ObjectProps\n{\n  declare minScaleLimit: number;\n\n  declare opacity: number;\n\n  declare paintFirst: 'fill' | 'stroke';\n  declare fill: string | TFiller | null;\n  declare fillRule: CanvasFillRule;\n  declare stroke: string | TFiller | null;\n  declare strokeDashArray: number[] | null;\n  declare strokeDashOffset: number;\n  declare strokeLineCap: CanvasLineCap;\n  declare strokeLineJoin: CanvasLineJoin;\n  declare strokeMiterLimit: number;\n\n  declare globalCompositeOperation: GlobalCompositeOperation;\n  declare backgroundColor: string;\n\n  declare shadow: Shadow | null;\n\n  declare visible: boolean;\n\n  declare includeDefaultValues: boolean;\n  declare excludeFromExport: boolean;\n\n  declare objectCaching: boolean;\n\n  declare clipPath?: FabricObject;\n  declare inverted: boolean;\n  declare absolutePositioned: boolean;\n  declare centeredRotation: boolean;\n  declare centeredScaling: boolean;\n\n  /**\n   * This list of properties is used to check if the state of an object is changed.\n   * This state change now is only used for children of groups to understand if a group\n   * needs its cache regenerated during a .set call\n   * @type Array\n   */\n  static stateProperties: string[] = stateProperties;\n\n  /**\n   * List of properties to consider when checking if cache needs refresh\n   * Those properties are checked by\n   * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\n   * and refreshed at the next render\n   * @type Array\n   */\n  static cacheProperties: string[] = cacheProperties;\n\n  /**\n   * When set to `true`, object's cache will be rerendered next render call.\n   * since 1.7.0\n   * @type Boolean\n   * @default true\n   */\n  declare dirty: boolean;\n\n  /**\n   * Quick access for the _cacheCanvas rendering context\n   * This is part of the objectCaching feature\n   * since 1.7.0\n   * @type boolean\n   * @default undefined\n   * @private\n   */\n  _cacheContext: CanvasRenderingContext2D | null = null;\n\n  /**\n   * A reference to the HTMLCanvasElement that is used to contain the cache of the object\n   * this canvas element is resized and cleared as needed\n   * Is marked private, you can read it, don't use it since it is handled by fabric\n   * since 1.7.0\n   * @type HTMLCanvasElement\n   * @default undefined\n   * @private\n   */\n  declare _cacheCanvas?: HTMLCanvasElement;\n\n  /**\n   * Size of the cache canvas, width\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheWidth?: number;\n\n  /**\n   * Size of the cache canvas, height\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheHeight?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, X axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare zoomX?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, Y axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare zoomY?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, Y axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheTranslationX?: number;\n\n  /**\n   * translation of the cacheCanvas away from the center, for subpixel accuracy and crispness\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheTranslationY?: number;\n\n  /**\n   * A reference to the parent of the object, usually a Group\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare group?: Group;\n\n  /**\n   * Indicate if the object is sitting on a cache dedicated to it\n   * or is part of a larger cache for many object ( a group for example)\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare ownCaching?: boolean;\n\n  /**\n   * Private. indicates if the object inside a group is on a transformed context or not\n   * or is part of a larger cache for many object ( a group for example)\n   * @type boolean\n   * @default undefined\n   * @private\n   */\n  declare _transformDone?: boolean;\n\n  static ownDefaults = fabricObjectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return FabricObject.ownDefaults;\n  }\n\n  /**\n   * The class type. Used to identify which class this is.\n   * This is used for serialization purposes and internally it can be used\n   * to identify classes. As a developer you could use `instance of Class`\n   * but to avoid importing all the code and blocking tree shaking we try\n   * to avoid doing that.\n   */\n  static type = 'FabricObject';\n\n  /**\n   * Legacy identifier of the class. Prefer using utils like isType or instanceOf\n   * Will be removed in fabric 7 or 8.\n   * The setter exists because is very hard to catch all the ways in which a type value\n   * could be set in the instance\n   * @TODO add sustainable warning message\n   * @type string\n   * @deprecated\n   */\n  get type() {\n    const name = (this.constructor as typeof FabricObject).type;\n    if (name === 'FabricObject') {\n      return 'object';\n    }\n    return name.toLowerCase();\n  }\n\n  set type(value) {\n    log('warn', 'Setting type has no effect', value);\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, FabricObject.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * Create a the canvas used to keep the cached copy of the object\n   * @private\n   */\n  _createCacheCanvas() {\n    this._cacheCanvas = createCanvasElement();\n    this._cacheContext = this._cacheCanvas.getContext('2d');\n    this._updateCacheCanvas();\n    // if canvas gets created, is empty, so dirty.\n    this.dirty = true;\n  }\n\n  /**\n   * Limit the cache dimensions so that X * Y do not cross config.perfLimitSizeTotal\n   * and each side do not cross fabric.cacheSideLimit\n   * those numbers are configurable so that you can get as much detail as you want\n   * making bargain with performances.\n   * @param {Object} dims\n   * @param {Object} dims.width width of canvas\n   * @param {Object} dims.height height of canvas\n   * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _limitCacheSize(\n    dims: TSize & { zoomX: number; zoomY: number; capped: boolean } & any\n  ) {\n    const width = dims.width,\n      height = dims.height,\n      max = config.maxCacheSideLimit,\n      min = config.minCacheSideLimit;\n    if (\n      width <= max &&\n      height <= max &&\n      width * height <= config.perfLimitSizeTotal\n    ) {\n      if (width < min) {\n        dims.width = min;\n      }\n      if (height < min) {\n        dims.height = min;\n      }\n      return dims;\n    }\n    const ar = width / height,\n      [limX, limY] = cache.limitDimsByArea(ar),\n      x = capValue(min, limX, max),\n      y = capValue(min, limY, max);\n    if (width > x) {\n      dims.zoomX /= width / x;\n      dims.width = x;\n      dims.capped = true;\n    }\n    if (height > y) {\n      dims.zoomY /= height / y;\n      dims.height = y;\n      dims.capped = true;\n    }\n    return dims;\n  }\n\n  /**\n   * Return the dimension and the zoom level needed to create a cache canvas\n   * big enough to host the object to be cached.\n   * @private\n   * @return {Object}.x width of object to be cached\n   * @return {Object}.y height of object to be cached\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _getCacheCanvasDimensions(): TCacheCanvasDimensions {\n    const objectScale = this.getTotalObjectScaling(),\n      // calculate dimensions without skewing\n      dim = this._getTransformedDimensions({ skewX: 0, skewY: 0 }),\n      neededX = (dim.x * objectScale.x) / this.scaleX,\n      neededY = (dim.y * objectScale.y) / this.scaleY;\n    return {\n      // for sure this ALIASING_LIMIT is slightly creating problem\n      // in situation in which the cache canvas gets an upper limit\n      // also objectScale contains already scaleX and scaleY\n      width: neededX + ALIASING_LIMIT,\n      height: neededY + ALIASING_LIMIT,\n      zoomX: objectScale.x,\n      zoomY: objectScale.y,\n      x: neededX,\n      y: neededY,\n    };\n  }\n\n  /**\n   * Update width and height of the canvas for cache\n   * returns true or false if canvas needed resize.\n   * @private\n   * @return {Boolean} true if the canvas has been resized\n   */\n  _updateCacheCanvas() {\n    const canvas = this._cacheCanvas,\n      context = this._cacheContext,\n      dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\n      minCacheSize = config.minCacheSideLimit,\n      width = dims.width,\n      height = dims.height,\n      zoomX = dims.zoomX,\n      zoomY = dims.zoomY,\n      dimensionsChanged =\n        width !== this.cacheWidth || height !== this.cacheHeight,\n      zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY;\n\n    if (!canvas || !context) {\n      return false;\n    }\n\n    let drawingWidth,\n      drawingHeight,\n      shouldRedraw = dimensionsChanged || zoomChanged,\n      additionalWidth = 0,\n      additionalHeight = 0,\n      shouldResizeCanvas = false;\n\n    if (dimensionsChanged) {\n      const canvasWidth = (this._cacheCanvas as HTMLCanvasElement).width,\n        canvasHeight = (this._cacheCanvas as HTMLCanvasElement).height,\n        sizeGrowing = width > canvasWidth || height > canvasHeight,\n        sizeShrinking =\n          (width < canvasWidth * 0.9 || height < canvasHeight * 0.9) &&\n          canvasWidth > minCacheSize &&\n          canvasHeight > minCacheSize;\n      shouldResizeCanvas = sizeGrowing || sizeShrinking;\n      if (\n        sizeGrowing &&\n        !dims.capped &&\n        (width > minCacheSize || height > minCacheSize)\n      ) {\n        additionalWidth = width * 0.1;\n        additionalHeight = height * 0.1;\n      }\n    }\n    if (isTextObject(this) && this.path) {\n      shouldRedraw = true;\n      shouldResizeCanvas = true;\n      // IMHO in those lines we are using zoomX and zoomY not the this version.\n      additionalWidth += this.getHeightOfLine(0) * this.zoomX!;\n      additionalHeight += this.getHeightOfLine(0) * this.zoomY!;\n    }\n    if (shouldRedraw) {\n      if (shouldResizeCanvas) {\n        canvas.width = Math.ceil(width + additionalWidth);\n        canvas.height = Math.ceil(height + additionalHeight);\n      } else {\n        context.setTransform(1, 0, 0, 1, 0, 0);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      }\n      drawingWidth = dims.x / 2;\n      drawingHeight = dims.y / 2;\n      this.cacheTranslationX =\n        Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;\n      this.cacheTranslationY =\n        Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;\n      this.cacheWidth = width;\n      this.cacheHeight = height;\n      context.translate(this.cacheTranslationX, this.cacheTranslationY);\n      context.scale(zoomX, zoomY);\n      this.zoomX = zoomX;\n      this.zoomY = zoomY;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Sets object's properties from options, for class constructor only.\n   * Needs to be overridden for different defaults.\n   * @protected\n   * @param {Object} [options] Options object\n   */\n  protected setOptions(options: Record<string, any> = {}) {\n    this._setOptions(options);\n  }\n\n  /**\n   * Transforms context when rendering an object\n   * @param {CanvasRenderingContext2D} ctx Context\n   */\n  transform(ctx: CanvasRenderingContext2D) {\n    const needFullTransform =\n      (this.group && !this.group._transformDone) ||\n      (this.group && this.canvas && ctx === (this.canvas as Canvas).contextTop);\n    const m = this.calcTransformMatrix(!needFullTransform);\n    ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n  }\n\n  /**\n   * Returns an object representation of an instance\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject(propertiesToInclude: any[] = []): any {\n    const NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS,\n      clipPathData =\n        this.clipPath && !this.clipPath.excludeFromExport\n          ? {\n              ...this.clipPath.toObject(propertiesToInclude),\n              inverted: this.clipPath.inverted,\n              absolutePositioned: this.clipPath.absolutePositioned,\n            }\n          : null,\n      object = {\n        ...pick(this, propertiesToInclude as (keyof this)[]),\n        type: (this.constructor as typeof FabricObject).type,\n        version: VERSION,\n        originX: this.originX,\n        originY: this.originY,\n        left: toFixed(this.left, NUM_FRACTION_DIGITS),\n        top: toFixed(this.top, NUM_FRACTION_DIGITS),\n        width: toFixed(this.width, NUM_FRACTION_DIGITS),\n        height: toFixed(this.height, NUM_FRACTION_DIGITS),\n        fill: isSerializableFiller(this.fill)\n          ? this.fill.toObject()\n          : this.fill,\n        stroke: isSerializableFiller(this.stroke)\n          ? this.stroke.toObject()\n          : this.stroke,\n        strokeWidth: toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),\n        strokeDashArray: this.strokeDashArray\n          ? this.strokeDashArray.concat()\n          : this.strokeDashArray,\n        strokeLineCap: this.strokeLineCap,\n        strokeDashOffset: this.strokeDashOffset,\n        strokeLineJoin: this.strokeLineJoin,\n        strokeUniform: this.strokeUniform,\n        strokeMiterLimit: toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),\n        scaleX: toFixed(this.scaleX, NUM_FRACTION_DIGITS),\n        scaleY: toFixed(this.scaleY, NUM_FRACTION_DIGITS),\n        angle: toFixed(this.angle, NUM_FRACTION_DIGITS),\n        flipX: this.flipX,\n        flipY: this.flipY,\n        opacity: toFixed(this.opacity, NUM_FRACTION_DIGITS),\n        shadow:\n          this.shadow && this.shadow.toObject\n            ? this.shadow.toObject()\n            : this.shadow,\n        visible: this.visible,\n        backgroundColor: this.backgroundColor,\n        fillRule: this.fillRule,\n        paintFirst: this.paintFirst,\n        globalCompositeOperation: this.globalCompositeOperation,\n        skewX: toFixed(this.skewX, NUM_FRACTION_DIGITS),\n        skewY: toFixed(this.skewY, NUM_FRACTION_DIGITS),\n        ...(clipPathData ? { clipPath: clipPathData } : null),\n      };\n\n    return !this.includeDefaultValues\n      ? this._removeDefaultValues(object)\n      : object;\n  }\n\n  /**\n   * Returns (dataless) object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toDatalessObject(propertiesToInclude?: any[]): any {\n    // will be overwritten by subclasses\n    return this.toObject(propertiesToInclude);\n  }\n\n  /**\n   * @private\n   * @param {Object} object\n   */\n  _removeDefaultValues<T extends object>(object: T): Partial<T> {\n    // getDefaults() ( get from static ownDefaults ) should win over prototype since anyway they get assigned to instance\n    // ownDefault vs prototype is swappable only if you change all the fabric objects consistently.\n    const defaults = (this.constructor as typeof FabricObject).getDefaults();\n    const hasStaticDefaultValues = Object.keys(defaults).length > 0;\n    const baseValues = hasStaticDefaultValues\n      ? defaults\n      : Object.getPrototypeOf(this);\n\n    return pickBy(object, (value, key) => {\n      if (key === LEFT || key === TOP || key === 'type') {\n        return true;\n      }\n      const baseValue = baseValues[key];\n      return (\n        value !== baseValue &&\n        // basically a check for [] === []\n        !(\n          Array.isArray(value) &&\n          Array.isArray(baseValue) &&\n          value.length === 0 &&\n          baseValue.length === 0\n        )\n      );\n    });\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @return {String}\n   */\n  toString() {\n    return `#<${(this.constructor as typeof FabricObject).type}>`;\n  }\n\n  /**\n   * Return the object scale factor counting also the group scaling\n   * @return {Point}\n   */\n  getObjectScaling() {\n    // if the object is a top level one, on the canvas, we go for simple aritmetic\n    // otherwise the complex method with angles will return approximations and decimals\n    // and will likely kill the cache when not needed\n    // https://github.com/fabricjs/fabric.js/issues/7157\n    if (!this.group) {\n      return new Point(Math.abs(this.scaleX), Math.abs(this.scaleY));\n    }\n    // if we are inside a group total zoom calculation is complex, we defer to generic matrices\n    const options = qrDecompose(this.calcTransformMatrix());\n    return new Point(Math.abs(options.scaleX), Math.abs(options.scaleY));\n  }\n\n  /**\n   * Return the object scale factor counting also the group scaling, zoom and retina\n   * @return {Object} object with scaleX and scaleY properties\n   */\n  getTotalObjectScaling() {\n    const scale = this.getObjectScaling();\n    if (this.canvas) {\n      const zoom = this.canvas.getZoom();\n      const retina = this.getCanvasRetinaScaling();\n      return scale.scalarMultiply(zoom * retina);\n    }\n    return scale;\n  }\n\n  /**\n   * Return the object opacity counting also the group property\n   * @return {Number}\n   */\n  getObjectOpacity() {\n    let opacity = this.opacity;\n    if (this.group) {\n      opacity *= this.group.getObjectOpacity();\n    }\n    return opacity;\n  }\n\n  /**\n   * Makes sure the scale is valid and modifies it if necessary\n   * @todo: this is a control action issue, not a geometry one\n   * @private\n   * @param {Number} value, unconstrained\n   * @return {Number} constrained value;\n   */\n  _constrainScale(value: number): number {\n    if (Math.abs(value) < this.minScaleLimit) {\n      if (value < 0) {\n        return -this.minScaleLimit;\n      } else {\n        return this.minScaleLimit;\n      }\n    } else if (value === 0) {\n      return 0.0001;\n    }\n    return value;\n  }\n\n  /**\n   * Handles setting values on the instance and handling internal side effects\n   * @protected\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    if (key === 'scaleX' || key === 'scaleY') {\n      value = this._constrainScale(value);\n    }\n    if (key === 'scaleX' && value < 0) {\n      this.flipX = !this.flipX;\n      value *= -1;\n    } else if (key === 'scaleY' && value < 0) {\n      this.flipY = !this.flipY;\n      value *= -1;\n      // i don't like this automatic initialization here\n    } else if (key === 'shadow' && value && !(value instanceof Shadow)) {\n      value = new Shadow(value);\n    }\n\n    const isChanged = this[key as keyof this] !== value;\n    this[key as keyof this] = value;\n\n    // invalidate caches\n    if (\n      isChanged &&\n      (this.constructor as typeof FabricObject).cacheProperties.includes(key)\n    ) {\n      this.dirty = true;\n    }\n    // a dirty child makes the parent dirty.\n    // but a non dirty child does not make the parent not dirty.\n    // the parent could be dirty for some other reason.\n    this.parent &&\n      (this.dirty ||\n        (isChanged &&\n          (this.constructor as typeof FabricObject).stateProperties.includes(\n            key\n          ))) &&\n      this.parent._set('dirty', true);\n\n    return this;\n  }\n\n  /*\n   * @private\n   * return if the object would be visible in rendering\n   * @memberOf FabricObject.prototype\n   * @return {Boolean}\n   */\n  isNotVisible() {\n    return (\n      this.opacity === 0 ||\n      (!this.width && !this.height && this.strokeWidth === 0) ||\n      !this.visible\n    );\n  }\n\n  /**\n   * Renders an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    // do not render if width/height are zeros or object is not visible\n    if (this.isNotVisible()) {\n      return;\n    }\n    if (\n      this.canvas &&\n      this.canvas.skipOffscreen &&\n      !this.group &&\n      !this.isOnScreen()\n    ) {\n      return;\n    }\n    ctx.save();\n    this._setupCompositeOperation(ctx);\n    this.drawSelectionBackground(ctx);\n    this.transform(ctx);\n    this._setOpacity(ctx);\n    this._setShadow(ctx);\n    if (this.shouldCache()) {\n      this.renderCache();\n      (this as TCachedFabricObject).drawCacheOnCanvas(ctx);\n    } else {\n      this._removeCacheCanvas();\n      this.drawObject(ctx);\n      this.dirty = false;\n    }\n    ctx.restore();\n  }\n\n  drawSelectionBackground(ctx: CanvasRenderingContext2D) {\n    /* no op */\n  }\n\n  renderCache(options?: any) {\n    options = options || {};\n    if (!this._cacheCanvas || !this._cacheContext) {\n      this._createCacheCanvas();\n    }\n    if (this.isCacheDirty() && this._cacheContext) {\n      this.drawObject(this._cacheContext, options.forClipping);\n      this.dirty = false;\n    }\n  }\n\n  /**\n   * Remove cacheCanvas and its dimensions from the objects\n   */\n  _removeCacheCanvas() {\n    this._cacheCanvas = undefined;\n    this._cacheContext = null;\n    this.cacheWidth = 0;\n    this.cacheHeight = 0;\n  }\n\n  /**\n   * return true if the object will draw a stroke\n   * Does not consider text styles. This is just a shortcut used at rendering time\n   * We want it to be an approximation and be fast.\n   * wrote to avoid extra caching, it has to return true when stroke happens,\n   * can guess when it will not happen at 100% chance, does not matter if it misses\n   * some use case where the stroke is invisible.\n   * @since 3.0.0\n   * @returns Boolean\n   */\n  hasStroke() {\n    return (\n      this.stroke && this.stroke !== 'transparent' && this.strokeWidth !== 0\n    );\n  }\n\n  /**\n   * return true if the object will draw a fill\n   * Does not consider text styles. This is just a shortcut used at rendering time\n   * We want it to be an approximation and be fast.\n   * wrote to avoid extra caching, it has to return true when fill happens,\n   * can guess when it will not happen at 100% chance, does not matter if it misses\n   * some use case where the fill is invisible.\n   * @since 3.0.0\n   * @returns Boolean\n   */\n  hasFill() {\n    return this.fill && this.fill !== 'transparent';\n  }\n\n  /**\n   * When set to `true`, force the object to have its own cache, even if it is inside a group\n   * it may be needed when your object behave in a particular way on the cache and always needs\n   * its own isolated canvas to render correctly.\n   * Created to be overridden\n   * since 1.7.12\n   * @returns Boolean\n   */\n  needsItsOwnCache() {\n    if (\n      this.paintFirst === 'stroke' &&\n      this.hasFill() &&\n      this.hasStroke() &&\n      !!this.shadow\n    ) {\n      return true;\n    }\n    if (this.clipPath) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Decide if the object should cache or not. Create its own cache level\n   * objectCaching is a global flag, wins over everything\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step. None of the fabric classes requires it.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * Read as: cache if is needed, or if the feature is enabled but we are not already caching.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    this.ownCaching =\n      this.needsItsOwnCache() ||\n      (this.objectCaching && (!this.parent || !this.parent.isOnACache()));\n    return this.ownCaching;\n  }\n\n  /**\n   * Check if this object will cast a shadow with an offset.\n   * used by Group.shouldCache to know if child has a shadow recursively\n   * @return {Boolean}\n   * @deprecated\n   */\n  willDrawShadow() {\n    return (\n      !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0)\n    );\n  }\n\n  /**\n   * Execute the drawing operation for an object clipPath\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {FabricObject} clipPath\n   */\n  drawClipPathOnCache(\n    ctx: CanvasRenderingContext2D,\n    clipPath: TCachedFabricObject\n  ) {\n    ctx.save();\n    // DEBUG: uncomment this line, comment the following\n    // ctx.globalAlpha = 0.4\n    if (clipPath.inverted) {\n      ctx.globalCompositeOperation = 'destination-out';\n    } else {\n      ctx.globalCompositeOperation = 'destination-in';\n    }\n    //ctx.scale(1 / 2, 1 / 2);\n    if (clipPath.absolutePositioned) {\n      const m = invertTransform(this.calcTransformMatrix());\n      ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n    }\n    clipPath.transform(ctx);\n    ctx.scale(1 / clipPath.zoomX, 1 / clipPath.zoomY);\n    ctx.drawImage(\n      clipPath._cacheCanvas,\n      -clipPath.cacheTranslationX,\n      -clipPath.cacheTranslationY\n    );\n    ctx.restore();\n  }\n\n  /**\n   * Execute the drawing operation for an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {boolean} forClipping apply clipping styles\n   */\n  drawObject(ctx: CanvasRenderingContext2D, forClipping?: boolean) {\n    const originalFill = this.fill,\n      originalStroke = this.stroke;\n    if (forClipping) {\n      this.fill = 'black';\n      this.stroke = '';\n      this._setClippingProperties(ctx);\n    } else {\n      this._renderBackground(ctx);\n    }\n    this._render(ctx);\n    this._drawClipPath(ctx, this.clipPath);\n    this.fill = originalFill;\n    this.stroke = originalStroke;\n  }\n\n  /**\n   * Prepare clipPath state and cache and draw it on instance's cache\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {FabricObject} clipPath\n   */\n  _drawClipPath(ctx: CanvasRenderingContext2D, clipPath?: FabricObject) {\n    if (!clipPath) {\n      return;\n    }\n    // needed to setup a couple of variables\n    // path canvas gets overridden with this one.\n    // TODO find a better solution?\n    clipPath._set('canvas', this.canvas);\n    clipPath.shouldCache();\n    clipPath._transformDone = true;\n    clipPath.renderCache({ forClipping: true });\n    this.drawClipPathOnCache(ctx, clipPath as TCachedFabricObject);\n  }\n\n  /**\n   * Paint the cached copy of the object on the target context.\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawCacheOnCanvas(this: TCachedFabricObject, ctx: CanvasRenderingContext2D) {\n    ctx.scale(1 / this.zoomX, 1 / this.zoomY);\n    ctx.drawImage(\n      this._cacheCanvas,\n      -this.cacheTranslationX,\n      -this.cacheTranslationY\n    );\n  }\n\n  /**\n   * Check if cache is dirty\n   * @param {Boolean} skipCanvas skip canvas checks because this object is painted\n   * on parent canvas.\n   */\n  isCacheDirty(skipCanvas = false) {\n    if (this.isNotVisible()) {\n      return false;\n    }\n    if (\n      this._cacheCanvas &&\n      this._cacheContext &&\n      !skipCanvas &&\n      this._updateCacheCanvas()\n    ) {\n      // in this case the context is already cleared.\n      return true;\n    } else {\n      if (this.dirty || (this.clipPath && this.clipPath.absolutePositioned)) {\n        if (this._cacheCanvas && this._cacheContext && !skipCanvas) {\n          const width = this.cacheWidth! / this.zoomX!;\n          const height = this.cacheHeight! / this.zoomY!;\n          this._cacheContext.clearRect(-width / 2, -height / 2, width, height);\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Draws a background for the object big as its untransformed dimensions\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderBackground(ctx: CanvasRenderingContext2D) {\n    if (!this.backgroundColor) {\n      return;\n    }\n    const dim = this._getNonTransformedDimensions();\n    ctx.fillStyle = this.backgroundColor;\n\n    ctx.fillRect(-dim.x / 2, -dim.y / 2, dim.x, dim.y);\n    // if there is background color no other shadows\n    // should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _setOpacity(ctx: CanvasRenderingContext2D) {\n    if (this.group && !this.group._transformDone) {\n      ctx.globalAlpha = this.getObjectOpacity();\n    } else {\n      ctx.globalAlpha *= this.opacity;\n    }\n  }\n\n  _setStrokeStyles(\n    ctx: CanvasRenderingContext2D,\n    decl: Pick<\n      this,\n      | 'stroke'\n      | 'strokeWidth'\n      | 'strokeLineCap'\n      | 'strokeDashOffset'\n      | 'strokeLineJoin'\n      | 'strokeMiterLimit'\n    >\n  ) {\n    const stroke = decl.stroke;\n    if (stroke) {\n      ctx.lineWidth = decl.strokeWidth;\n      ctx.lineCap = decl.strokeLineCap;\n      ctx.lineDashOffset = decl.strokeDashOffset;\n      ctx.lineJoin = decl.strokeLineJoin;\n      ctx.miterLimit = decl.strokeMiterLimit;\n      if (isFiller(stroke)) {\n        if (\n          (stroke as Gradient<'linear'>).gradientUnits === 'percentage' ||\n          (stroke as Gradient<'linear'>).gradientTransform ||\n          (stroke as Pattern).patternTransform\n        ) {\n          // need to transform gradient in a pattern.\n          // this is a slow process. If you are hitting this codepath, and the object\n          // is not using caching, you should consider switching it on.\n          // we need a canvas as big as the current object caching canvas.\n          this._applyPatternForTransformedGradient(ctx, stroke);\n        } else {\n          // is a simple gradient or pattern\n          ctx.strokeStyle = stroke.toLive(ctx)!;\n          this._applyPatternGradientTransform(ctx, stroke);\n        }\n      } else {\n        // is a color\n        ctx.strokeStyle = decl.stroke as string;\n      }\n    }\n  }\n\n  _setFillStyles(ctx: CanvasRenderingContext2D, { fill }: Pick<this, 'fill'>) {\n    if (fill) {\n      if (isFiller(fill)) {\n        ctx.fillStyle = fill.toLive(ctx)!;\n        this._applyPatternGradientTransform(ctx, fill);\n      } else {\n        ctx.fillStyle = fill;\n      }\n    }\n  }\n\n  _setClippingProperties(ctx: CanvasRenderingContext2D) {\n    ctx.globalAlpha = 1;\n    ctx.strokeStyle = 'transparent';\n    ctx.fillStyle = '#000000';\n  }\n\n  /**\n   * @private\n   * Sets line dash\n   * @param {CanvasRenderingContext2D} ctx Context to set the dash line on\n   * @param {Array} dashArray array representing dashes\n   */\n  _setLineDash(ctx: CanvasRenderingContext2D, dashArray?: number[] | null) {\n    if (!dashArray || dashArray.length === 0) {\n      return;\n    }\n    // Spec requires the concatenation of two copies of the dash array when the number of elements is odd\n    if (1 & dashArray.length) {\n      dashArray.push(...dashArray);\n    }\n    ctx.setLineDash(dashArray);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _setShadow(ctx: CanvasRenderingContext2D) {\n    if (!this.shadow) {\n      return;\n    }\n\n    const shadow = this.shadow,\n      canvas = this.canvas,\n      retinaScaling = this.getCanvasRetinaScaling(),\n      [sx, , , sy] = canvas?.viewportTransform || iMatrix,\n      multX = sx * retinaScaling,\n      multY = sy * retinaScaling,\n      scaling = shadow.nonScaling ? new Point(1, 1) : this.getObjectScaling();\n    ctx.shadowColor = shadow.color;\n    ctx.shadowBlur =\n      (shadow.blur *\n        config.browserShadowBlurConstant *\n        (multX + multY) *\n        (scaling.x + scaling.y)) /\n      4;\n    ctx.shadowOffsetX = shadow.offsetX * multX * scaling.x;\n    ctx.shadowOffsetY = shadow.offsetY * multY * scaling.y;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _removeShadow(ctx: CanvasRenderingContext2D) {\n    if (!this.shadow) {\n      return;\n    }\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {TFiller} filler {@link Pattern} or {@link Gradient}\n   */\n  _applyPatternGradientTransform(\n    ctx: CanvasRenderingContext2D,\n    filler: TFiller\n  ) {\n    if (!isFiller(filler)) {\n      return { offsetX: 0, offsetY: 0 };\n    }\n    const t =\n      (filler as Gradient<'linear'>).gradientTransform ||\n      (filler as Pattern).patternTransform;\n    const offsetX = -this.width / 2 + filler.offsetX || 0,\n      offsetY = -this.height / 2 + filler.offsetY || 0;\n\n    if ((filler as Gradient<'linear'>).gradientUnits === 'percentage') {\n      ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);\n    } else {\n      ctx.transform(1, 0, 0, 1, offsetX, offsetY);\n    }\n    if (t) {\n      ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\n    }\n    return { offsetX: offsetX, offsetY: offsetY };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderPaintInOrder(ctx: CanvasRenderingContext2D) {\n    if (this.paintFirst === 'stroke') {\n      this._renderStroke(ctx);\n      this._renderFill(ctx);\n    } else {\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    }\n  }\n\n  /**\n   * @private\n   * function that actually render something on the context.\n   * empty here to allow Obects to work on tests to benchmark fabric functionalites\n   * not related to rendering\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    // placeholder to be overridden\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderFill(ctx: CanvasRenderingContext2D) {\n    if (!this.fill) {\n      return;\n    }\n\n    ctx.save();\n    this._setFillStyles(ctx, this);\n    if (this.fillRule === 'evenodd') {\n      ctx.fill('evenodd');\n    } else {\n      ctx.fill();\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderStroke(ctx: CanvasRenderingContext2D) {\n    if (!this.stroke || this.strokeWidth === 0) {\n      return;\n    }\n\n    if (this.shadow && !this.shadow.affectStroke) {\n      this._removeShadow(ctx);\n    }\n\n    ctx.save();\n    if (this.strokeUniform) {\n      const scaling = this.getObjectScaling();\n      ctx.scale(1 / scaling.x, 1 / scaling.y);\n    }\n    this._setLineDash(ctx, this.strokeDashArray);\n    this._setStrokeStyles(ctx, this);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  /**\n   * This function try to patch the missing gradientTransform on canvas gradients.\n   * transforming a context to transform the gradient, is going to transform the stroke too.\n   * we want to transform the gradient but not the stroke operation, so we create\n   * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n   * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n   * is limited.\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Gradient} filler\n   */\n  _applyPatternForTransformedGradient(\n    ctx: CanvasRenderingContext2D,\n    filler: TFiller\n  ) {\n    const dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\n      pCanvas = createCanvasElement(),\n      retinaScaling = this.getCanvasRetinaScaling(),\n      width = dims.x / this.scaleX / retinaScaling,\n      height = dims.y / this.scaleY / retinaScaling;\n    // in case width and height are less than 1px, we have to round up.\n    // since the pattern is no-repeat, this is fine\n    pCanvas.width = Math.ceil(width);\n    pCanvas.height = Math.ceil(height);\n    const pCtx = pCanvas.getContext('2d');\n    if (!pCtx) {\n      return;\n    }\n    pCtx.beginPath();\n    pCtx.moveTo(0, 0);\n    pCtx.lineTo(width, 0);\n    pCtx.lineTo(width, height);\n    pCtx.lineTo(0, height);\n    pCtx.closePath();\n    pCtx.translate(width / 2, height / 2);\n    pCtx.scale(\n      dims.zoomX / this.scaleX / retinaScaling,\n      dims.zoomY / this.scaleY / retinaScaling\n    );\n    this._applyPatternGradientTransform(pCtx, filler);\n    pCtx.fillStyle = filler.toLive(ctx)!;\n    pCtx.fill();\n    ctx.translate(\n      -this.width / 2 - this.strokeWidth / 2,\n      -this.height / 2 - this.strokeWidth / 2\n    );\n    ctx.scale(\n      (retinaScaling * this.scaleX) / dims.zoomX,\n      (retinaScaling * this.scaleY) / dims.zoomY\n    );\n    ctx.strokeStyle = pCtx.createPattern(pCanvas, 'no-repeat') ?? '';\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement() {\n    return new Point(this.left + this.width / 2, this.top + this.height / 2);\n  }\n\n  /**\n   * Clones an instance.\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @returns {Promise<FabricObject>}\n   */\n  clone(propertiesToInclude?: string[]): Promise<this> {\n    const objectForm = this.toObject(propertiesToInclude);\n    return (this.constructor as typeof FabricObject).fromObject(\n      objectForm\n    ) as unknown as Promise<this>;\n  }\n\n  /**\n   * Creates an instance of Image out of an object\n   * makes use of toCanvasElement.\n   * Once this method was based on toDataUrl and loadImage, so it also had a quality\n   * and format option. toCanvasElement is faster and produce no loss of quality.\n   * If you need to get a real Jpeg or Png from an object, using toDataURL is the right way to do it.\n   * toCanvasElement and then toBlob from the obtained canvas is also a good option.\n   * @todo fix the export type, it could not be Image but the type that getClass return for 'image'.\n   * @param {ObjectToCanvasElementOptions} [options] for clone as image, passed to toDataURL\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @return {FabricImage} Object cloned as image.\n   */\n  cloneAsImage(options: ObjectToCanvasElementOptions): FabricImage {\n    const canvasEl = this.toCanvasElement(options);\n    // TODO: how to import Image w/o an import cycle?\n    const ImageClass = classRegistry.getClass<typeof FabricImage>('image');\n    return new ImageClass(canvasEl);\n  }\n\n  /**\n   * Converts an object into a HTMLCanvas element\n   * @param {ObjectToCanvasElementOptions} options Options object\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @param {Boolean} [options.viewportTransform] Account for canvas viewport transform\n   * @param {(el?: HTMLCanvasElement) => StaticCanvas} [options.canvasProvider] Create the output canvas\n   * @return {HTMLCanvasElement} Returns DOM element <canvas> with the FabricObject\n   */\n  toCanvasElement(options: ObjectToCanvasElementOptions = {}) {\n    const origParams = saveObjectTransform(this),\n      originalGroup = this.group,\n      originalShadow = this.shadow,\n      abs = Math.abs,\n      retinaScaling = options.enableRetinaScaling ? getDevicePixelRatio() : 1,\n      multiplier = (options.multiplier || 1) * retinaScaling,\n      canvasProvider: (el: HTMLCanvasElement) => StaticCanvas =\n        options.canvasProvider ||\n        ((el: HTMLCanvasElement) =>\n          new StaticCanvas(el, {\n            enableRetinaScaling: false,\n            renderOnAddRemove: false,\n            skipOffscreen: false,\n          }));\n    delete this.group;\n    if (options.withoutTransform) {\n      resetObjectTransform(this);\n    }\n    if (options.withoutShadow) {\n      this.shadow = null;\n    }\n    if (options.viewportTransform) {\n      sendObjectToPlane(this, this.getViewportTransform());\n    }\n\n    this.setCoords();\n    const el = createCanvasElement(),\n      boundingRect = this.getBoundingRect(),\n      shadow = this.shadow,\n      shadowOffset = new Point();\n\n    if (shadow) {\n      const shadowBlur = shadow.blur;\n      const scaling = shadow.nonScaling\n        ? new Point(1, 1)\n        : this.getObjectScaling();\n      // consider non scaling shadow.\n      shadowOffset.x =\n        2 * Math.round(abs(shadow.offsetX) + shadowBlur) * abs(scaling.x);\n      shadowOffset.y =\n        2 * Math.round(abs(shadow.offsetY) + shadowBlur) * abs(scaling.y);\n    }\n    const width = boundingRect.width + shadowOffset.x,\n      height = boundingRect.height + shadowOffset.y;\n    // if the current width/height is not an integer\n    // we need to make it so.\n    el.width = Math.ceil(width);\n    el.height = Math.ceil(height);\n    const canvas = canvasProvider(el);\n    if (options.format === 'jpeg') {\n      canvas.backgroundColor = '#fff';\n    }\n    this.setPositionByOrigin(\n      new Point(canvas.width / 2, canvas.height / 2),\n      CENTER,\n      CENTER\n    );\n    const originalCanvas = this.canvas;\n    // static canvas and canvas have both an array of InteractiveObjects\n    // @ts-expect-error this needs to be fixed somehow, or ignored globally\n    canvas._objects = [this];\n    this.set('canvas', canvas);\n    this.setCoords();\n    const canvasEl = canvas.toCanvasElement(multiplier || 1, options);\n    this.set('canvas', originalCanvas);\n    this.shadow = originalShadow;\n    if (originalGroup) {\n      this.group = originalGroup;\n    }\n    this.set(origParams);\n    this.setCoords();\n    // canvas.dispose will call image.dispose that will nullify the elements\n    // since this canvas is a simple element for the process, we remove references\n    // to objects in this way in order to avoid object trashing.\n    canvas._objects = [];\n    // since render has settled it is safe to destroy canvas\n    canvas.destroy();\n    return canvasEl;\n  }\n\n  /**\n   * Converts an object into a data-url-like string\n   * @param {Object} options Options object\n   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n   */\n  toDataURL(options: toDataURLOptions = {}) {\n    return toDataURL(\n      this.toCanvasElement(options),\n      options.format || 'png',\n      options.quality || 1\n    );\n  }\n\n  /**\n   * Returns true if any of the specified types is identical to the type of an instance\n   * @param {String} type Type to check against\n   * @return {Boolean}\n   */\n  isType(...types: string[]) {\n    return (\n      types.includes((this.constructor as typeof FabricObject).type) ||\n      types.includes(this.type)\n    );\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity of this instance (is 1 unless subclassed)\n   */\n  complexity() {\n    return 1;\n  }\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON() {\n    // delegate, not alias\n    return this.toObject();\n  }\n\n  /**\n   * Sets \"angle\" of an instance with centered rotation\n   * @param {TDegree} angle Angle value (in degrees)\n   */\n  rotate(angle: TDegree) {\n    const { centeredRotation, originX, originY } = this;\n\n    if (centeredRotation) {\n      const { x, y } = this.getRelativeCenterPoint();\n      this.originX = CENTER;\n      this.originY = CENTER;\n      this.left = x;\n      this.top = y;\n    }\n\n    this.set('angle', angle);\n\n    if (centeredRotation) {\n      const { x, y } = this.translateToOriginPoint(\n        this.getRelativeCenterPoint(),\n        originX,\n        originY\n      );\n      this.left = x;\n      this.top = y;\n      this.originX = originX;\n      this.originY = originY;\n    }\n  }\n\n  /**\n   * This callback function is called by the parent group of an object every\n   * time a non-delegated property changes on the group. It is passed the key\n   * and value as parameters. Not adding in this function's signature to avoid\n   * Travis build error about unused variables.\n   */\n  setOnGroup() {\n    // implemented by sub-classes, as needed.\n  }\n\n  /**\n   * Sets canvas globalCompositeOperation for specific object\n   * custom composition operation for the particular object can be specified using globalCompositeOperation property\n   * @param {CanvasRenderingContext2D} ctx Rendering canvas context\n   */\n  _setupCompositeOperation(ctx: CanvasRenderingContext2D) {\n    if (this.globalCompositeOperation) {\n      ctx.globalCompositeOperation = this.globalCompositeOperation;\n    }\n  }\n\n  /**\n   * cancel instance's running animations\n   * override if necessary to dispose artifacts such as `clipPath`\n   */\n  dispose() {\n    runningAnimations.cancelByTarget(this);\n    this.off();\n    this._set('canvas', undefined);\n    // clear caches\n    this._cacheCanvas && getEnv().dispose(this._cacheCanvas);\n    this._cacheCanvas = undefined;\n    this._cacheContext = null;\n  }\n\n  /**\n   *\n   * @param {Function} klass\n   * @param {object} object\n   * @param {object} [options]\n   * @param {string} [options.extraParam] property to pass as first argument to the constructor\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricObject>}\n   */\n  static _fromObject<S extends FabricObject>(\n    { type, ...object }: Record<string, unknown>,\n    { extraParam, ...options }: Abortable & { extraParam?: string } = {}\n  ): Promise<S> {\n    return enlivenObjectEnlivables<any>(cloneDeep(object), options).then(\n      (enlivedMap) => {\n        const allOptions = { ...options, ...enlivedMap };\n        // from the resulting enlived options, extract options.extraParam to arg0\n        // to avoid accidental overrides later\n        if (extraParam) {\n          const { [extraParam]: arg0, ...rest } = allOptions;\n          // @ts-expect-error different signature\n          return new this(arg0, rest);\n        } else {\n          return new this(allOptions);\n        }\n      }\n    ) as Promise<S>;\n  }\n\n  /**\n   *\n   * @param {object} object\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricObject>}\n   */\n  static fromObject<T extends TOptions<SerializedObjectProps>>(\n    object: T,\n    options?: Abortable\n  ) {\n    return this._fromObject(object, options);\n  }\n}\n\nclassRegistry.setClass(FabricObject);\nclassRegistry.setClass(FabricObject, 'object');\n", "import type {\n  TModificationEvents,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo } from './util';\n\n/**\n * Wrap an action handler with firing an event if the action is performed\n * @param {Function} actionHandler the function to wrap\n * @return {Function} a function with an action handler signature\n */\nexport const wrapWithFireEvent = <T extends Transform>(\n  eventName: TModificationEvents,\n  actionHandler: TransformActionHandler<T>\n) => {\n  return ((eventData, transform, x, y) => {\n    const actionPerformed = actionHandler(eventData, transform, x, y);\n    if (actionPerformed) {\n      fireEvent(eventName, commonEventInfo(eventData, transform, x, y));\n    }\n    return actionPerformed;\n  }) as TransformActionHandler<T>;\n};\n", "import type { Transform, TransformActionHandler } from '../EventTypeDefs';\n\n/**\n * Wrap an action handler with saving/restoring object position on the transform.\n * this is the code that permits to objects to keep their position while transforming.\n * @param {Function} actionHandler the function to wrap\n * @return {Function} a function with an action handler signature\n */\nexport function wrapWithFixedAnchor<T extends Transform>(\n  actionHandler: TransformActionHandler<T>\n) {\n  return ((eventData, transform, x, y) => {\n    const { target, originX, originY } = transform,\n      centerPoint = target.getRelativeCenterPoint(),\n      constraint = target.translateToOriginPoint(centerPoint, originX, originY),\n      actionPerformed = actionHandler(eventData, transform, x, y);\n    // flipping requires to change the transform origin, so we read from the mutated transform\n    // instead of leveraging the one destructured before\n    target.setPositionByOrigin(\n      constraint,\n      transform.originX,\n      transform.originY\n    );\n    return actionPerformed;\n  }) as TransformActionHandler<T>;\n}\n", "import type { TransformActionHandler } from '../EventTypeDefs';\nimport { CENTER, LEFT, RIGHT } from '../constants';\nimport { getLocalPoint, isTransformCentered } from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\n\n/**\n * Action handler to change object's width\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const changeObjectWidth: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y\n) => {\n  const localPoint = getLocalPoint(\n    transform,\n    transform.originX,\n    transform.originY,\n    x,\n    y\n  );\n  //  make sure the control changes width ONLY from it's side of target\n  if (\n    transform.originX === CENTER ||\n    (transform.originX === RIGHT && localPoint.x < 0) ||\n    (transform.originX === LEFT && localPoint.x > 0)\n  ) {\n    const { target } = transform,\n      strokePadding =\n        target.strokeWidth / (target.strokeUniform ? target.scaleX : 1),\n      multiplier = isTransformCentered(transform) ? 2 : 1,\n      oldWidth = target.width,\n      newWidth = Math.ceil(\n        Math.abs((localPoint.x * multiplier) / target.scaleX) - strokePadding\n      );\n    target.set('width', Math.max(newWidth, 0));\n    //  check against actual target width in case `newWidth` was rejected\n    return oldWidth !== target.width;\n  }\n  return false;\n};\n\nexport const changeWidth = wrapWithFireEvent(\n  'resizing',\n  wrapWithFixedAnchor(changeObjectWidth)\n);\n", "import { twoMathPi } from '../constants';\nimport type { InteractiveFabricObject } from '../shapes/Object/InteractiveObject';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport type { Control } from './Control';\n\nexport type ControlRenderingStyleOverride = Partial<\n  Pick<\n    InteractiveFabricObject,\n    | 'cornerStyle'\n    | 'cornerSize'\n    | 'cornerColor'\n    | 'cornerStrokeColor'\n    | 'cornerDashArray'\n    | 'transparentCorners'\n  >\n>;\n\nexport type ControlRenderer = (\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject\n) => void;\n\n/**\n * Render a round control, as per fabric features.\n * This function is written to respect object properties like transparentCorners, cornerSize\n * cornerColor, cornerStrokeColor\n * plus the addition of offsetY and offsetX.\n * @param {CanvasRenderingContext2D} ctx context to render on\n * @param {Number} left x coordinate where the control center should be\n * @param {Number} top y coordinate where the control center should be\n * @param {Object} styleOverride override for FabricObject controls style\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n */\nexport function renderCircleControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject\n) {\n  styleOverride = styleOverride || {};\n  const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n    ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n    transparentCorners =\n      typeof styleOverride.transparentCorners !== 'undefined'\n        ? styleOverride.transparentCorners\n        : fabricObject.transparentCorners,\n    methodName = transparentCorners ? 'stroke' : 'fill',\n    stroke =\n      !transparentCorners &&\n      (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor);\n  let myLeft = left,\n    myTop = top,\n    size;\n  ctx.save();\n  ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor || '';\n  ctx.strokeStyle =\n    styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || '';\n  // TODO: use proper ellipse code.\n  if (xSize > ySize) {\n    size = xSize;\n    ctx.scale(1.0, ySize / xSize);\n    myTop = (top * xSize) / ySize;\n  } else if (ySize > xSize) {\n    size = ySize;\n    ctx.scale(xSize / ySize, 1.0);\n    myLeft = (left * ySize) / xSize;\n  } else {\n    size = xSize;\n  }\n  // this is still wrong\n  ctx.lineWidth = 1;\n  ctx.beginPath();\n  ctx.arc(myLeft, myTop, size / 2, 0, twoMathPi, false);\n  ctx[methodName]();\n  if (stroke) {\n    ctx.stroke();\n  }\n  ctx.restore();\n}\n\n/**\n * Render a square control, as per fabric features.\n * This function is written to respect object properties like transparentCorners, cornerSize\n * cornerColor, cornerStrokeColor\n * plus the addition of offsetY and offsetX.\n * @param {CanvasRenderingContext2D} ctx context to render on\n * @param {Number} left x coordinate where the control center should be\n * @param {Number} top y coordinate where the control center should be\n * @param {Object} styleOverride override for FabricObject controls style\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n */\nexport function renderSquareControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject\n) {\n  styleOverride = styleOverride || {};\n  const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n    ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n    transparentCorners =\n      typeof styleOverride.transparentCorners !== 'undefined'\n        ? styleOverride.transparentCorners\n        : fabricObject.transparentCorners,\n    methodName = transparentCorners ? 'stroke' : 'fill',\n    stroke =\n      !transparentCorners &&\n      (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor),\n    xSizeBy2 = xSize / 2,\n    ySizeBy2 = ySize / 2;\n  ctx.save();\n  ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor || '';\n  ctx.strokeStyle =\n    styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || '';\n  // this is still wrong\n  ctx.lineWidth = 1;\n  ctx.translate(left, top);\n  //  angle is relative to canvas plane\n  const angle = fabricObject.getTotalAngle();\n  ctx.rotate(degreesToRadians(angle));\n  // this does not work, and fixed with ( && ) does not make sense.\n  // to have real transparent corners we need the controls on upperCanvas\n  // transparentCorners || ctx.clearRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n  ctx[`${methodName}Rect`](-xSizeBy2, -ySizeBy2, xSize, ySize);\n  if (stroke) {\n    ctx.strokeRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n  }\n  ctx.restore();\n}\n", "/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type {\n  ControlActionHandler,\n  TPointerEvent,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { Intersection } from '../Intersection';\nimport { Point } from '../Point';\nimport type { InteractiveFabricObject } from '../shapes/Object/InteractiveObject';\nimport type { TCornerPoint, TDegree, TMat2D } from '../typedefs';\nimport {\n  createRotateMatrix,\n  createScaleMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrixArray,\n} from '../util/misc/matrix';\nimport type { ControlRenderingStyleOverride } from './controlRendering';\nimport { renderCircleControl, renderSquareControl } from './controlRendering';\n\nexport class Control {\n  /**\n   * keep track of control visibility.\n   * mainly for backward compatibility.\n   * if you do not want to see a control, you can remove it\n   * from the control set.\n   * @type {Boolean}\n   * @default true\n   */\n  visible = true;\n\n  /**\n   * Name of the action that the control will likely execute.\n   * This is optional. FabricJS uses to identify what the user is doing for some\n   * extra optimizations. If you are writing a custom control and you want to know\n   * somewhere else in the code what is going on, you can use this string here.\n   * you can also provide a custom getActionName if your control run multiple actions\n   * depending on some external state.\n   * default to scale since is the most common, used on 4 corners by default\n   * @type {String}\n   * @default 'scale'\n   */\n  actionName = 'scale';\n\n  /**\n   * Drawing angle of the control.\n   * NOT used for now, but name marked as needed for internal logic\n   * example: to reuse the same drawing function for different rotated controls\n   * @type {Number}\n   * @default 0\n   */\n  angle = 0;\n\n  /**\n   * Relative position of the control. X\n   * 0,0 is the center of the Object, while -0.5 (left) or 0.5 (right) are the extremities\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  x = 0;\n\n  /**\n   * Relative position of the control. Y\n   * 0,0 is the center of the Object, while -0.5 (top) or 0.5 (bottom) are the extremities\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  y = 0;\n\n  /**\n   * Horizontal offset of the control from the defined position. In pixels\n   * Positive offset moves the control to the right, negative to the left.\n   * It used when you want to have position of control that does not scale with\n   * the bounding box. Example: rotation control is placed at x:0, y: 0.5 on\n   * the boundind box, with an offset of 30 pixels vertically. Those 30 pixels will\n   * stay 30 pixels no matter how the object is big. Another example is having 2\n   * controls in the corner, that stay in the same position when the object scale.\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  offsetX = 0;\n\n  /**\n   * Vertical offset of the control from the defined position. In pixels\n   * Positive offset moves the control to the bottom, negative to the top.\n   * @type {Number}\n   * @default 0\n   */\n  offsetY = 0;\n\n  /**\n   * Sets the length of the control. If null, defaults to object's cornerSize.\n   * Expects both sizeX and sizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  sizeX = 0;\n\n  /**\n   * Sets the height of the control. If null, defaults to object's cornerSize.\n   * Expects both sizeX and sizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  sizeY = 0;\n\n  /**\n   * Sets the length of the touch area of the control. If null, defaults to object's touchCornerSize.\n   * Expects both touchSizeX and touchSizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  touchSizeX = 0;\n\n  /**\n   * Sets the height of the touch area of the control. If null, defaults to object's touchCornerSize.\n   * Expects both touchSizeX and touchSizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  touchSizeY = 0;\n\n  /**\n   * Css cursor style to display when the control is hovered.\n   * if the method `cursorStyleHandler` is provided, this property is ignored.\n   * @type {String}\n   * @default 'crosshair'\n   */\n  cursorStyle = 'crosshair';\n\n  /**\n   * If controls has an offsetY or offsetX, draw a line that connects\n   * the control to the bounding box\n   * @type {Boolean}\n   * @default false\n   */\n  withConnection = false;\n\n  constructor(options?: Partial<Control>) {\n    Object.assign(this, options);\n  }\n\n  /**\n   * The control actionHandler, provide one to handle action ( control being moved )\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare actionHandler: TransformActionHandler;\n\n  /**\n   * The control handler for mouse down, provide one to handle mouse down on control\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare mouseDownHandler?: ControlActionHandler;\n\n  /**\n   * The control mouseUpHandler, provide one to handle an effect on mouse up.\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare mouseUpHandler?: ControlActionHandler;\n\n  shouldActivate(\n    controlKey: string,\n    fabricObject: InteractiveFabricObject,\n    pointer: Point,\n    { tl, tr, br, bl }: TCornerPoint\n  ) {\n    // TODO: locking logic can be handled here instead of in the control handler logic\n    return (\n      fabricObject.canvas?.getActiveObject() === fabricObject &&\n      fabricObject.isControlVisible(controlKey) &&\n      Intersection.isPointInPolygon(pointer, [tl, tr, br, bl])\n    );\n  }\n\n  /**\n   * Returns control actionHandler\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getActionHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control\n  ): TransformActionHandler | undefined {\n    return this.actionHandler;\n  }\n\n  /**\n   * Returns control mouseDown handler\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getMouseDownHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control\n  ): ControlActionHandler | undefined {\n    return this.mouseDownHandler;\n  }\n\n  /**\n   * Returns control mouseUp handler.\n   * During actions the fabricObject or the control can be of different obj\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getMouseUpHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control\n  ): ControlActionHandler | undefined {\n    return this.mouseUpHandler;\n  }\n\n  /**\n   * Returns control cursorStyle for css using cursorStyle. If you need a more elaborate\n   * function you can pass one in the constructor\n   * the cursorStyle property\n   * @param {Event} eventData the native mouse event\n   * @param {Control} control the current control ( likely this)\n   * @param {FabricObject} object on which the control is displayed\n   * @return {String}\n   */\n  cursorStyleHandler(\n    eventData: TPointerEvent,\n    control: Control,\n    fabricObject: InteractiveFabricObject\n  ) {\n    return control.cursorStyle;\n  }\n\n  /**\n   * Returns the action name. The basic implementation just return the actionName property.\n   * @param {Event} eventData the native mouse event\n   * @param {Control} control the current control ( likely this)\n   * @param {FabricObject} object on which the control is displayed\n   * @return {String}\n   */\n  getActionName(\n    eventData: TPointerEvent,\n    control: Control,\n    fabricObject: InteractiveFabricObject\n  ) {\n    return control.actionName;\n  }\n\n  /**\n   * Returns controls visibility\n   * @param {FabricObject} object on which the control is displayed\n   * @param {String} controlKey key where the control is memorized on the\n   * @return {Boolean}\n   */\n  getVisibility(fabricObject: InteractiveFabricObject, controlKey: string) {\n    return fabricObject._controlsVisibility?.[controlKey] ?? this.visible;\n  }\n\n  /**\n   * Sets controls visibility\n   * @param {Boolean} visibility for the object\n   * @return {Void}\n   */\n  setVisibility(\n    visibility: boolean,\n    name: string,\n    fabricObject: InteractiveFabricObject\n  ) {\n    this.visible = visibility;\n  }\n\n  positionHandler(\n    dim: Point,\n    finalMatrix: TMat2D,\n    fabricObject: InteractiveFabricObject,\n    currentControl: Control\n  ) {\n    return new Point(\n      this.x * dim.x + this.offsetX,\n      this.y * dim.y + this.offsetY\n    ).transform(finalMatrix);\n  }\n\n  /**\n   * Returns the coords for this control based on object values.\n   * @param {Number} objectAngle angle from the fabric object holding the control\n   * @param {Number} objectCornerSize cornerSize from the fabric object holding the control (or touchCornerSize if\n   *   isTouch is true)\n   * @param {Number} centerX x coordinate where the control center should be\n   * @param {Number} centerY y coordinate where the control center should be\n   * @param {boolean} isTouch true if touch corner, false if normal corner\n   */\n  calcCornerCoords(\n    angle: TDegree,\n    objectCornerSize: number,\n    centerX: number,\n    centerY: number,\n    isTouch: boolean,\n    fabricObject: InteractiveFabricObject\n  ) {\n    const t = multiplyTransformMatrixArray([\n      createTranslateMatrix(centerX, centerY),\n      createRotateMatrix({ angle }),\n      createScaleMatrix(\n        (isTouch ? this.touchSizeX : this.sizeX) || objectCornerSize,\n        (isTouch ? this.touchSizeY : this.sizeY) || objectCornerSize\n      ),\n    ]);\n    return {\n      tl: new Point(-0.5, -0.5).transform(t),\n      tr: new Point(0.5, -0.5).transform(t),\n      br: new Point(0.5, 0.5).transform(t),\n      bl: new Point(-0.5, 0.5).transform(t),\n    };\n  }\n\n  /**\n   * Render function for the control.\n   * When this function runs the context is unscaled. unrotate. Just retina scaled.\n   * all the functions will have to translate to the point left,top before starting Drawing\n   * if they want to draw a control where the position is detected.\n   * left and top are the result of the positionHandler function\n   * @param {RenderingContext2D} ctx the context where the control will be drawn\n   * @param {Number} left position of the canvas where we are about to render the control.\n   * @param {Number} top position of the canvas where we are about to render the control.\n   * @param {Object} styleOverride\n   * @param {FabricObject} fabricObject the object where the control is about to be rendered\n   */\n  render(\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: InteractiveFabricObject\n  ) {\n    styleOverride = styleOverride || {};\n    switch (styleOverride.cornerStyle || fabricObject.cornerStyle) {\n      case 'circle':\n        renderCircleControl.call(\n          this,\n          ctx,\n          left,\n          top,\n          styleOverride,\n          fabricObject\n        );\n        break;\n      default:\n        renderSquareControl.call(\n          this,\n          ctx,\n          left,\n          top,\n          styleOverride,\n          fabricObject\n        );\n    }\n  }\n}\n", "import type {\n  ControlCursorCallback,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { radiansToDegrees } from '../util/misc/radiansDegreesConversion';\nimport { isLocked, NOT_ALLOWED_CURSOR } from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\n\n/**\n * Find the correct style for the control that is used for rotation.\n * this function is very simple and it just take care of not-allowed or standard cursor\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const rotationStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject\n) => {\n  if (fabricObject.lockRotation) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  return control.cursorStyle;\n};\n\n/**\n * Action handler for rotation and snapping, without anchor point.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n * @private\n */\nconst rotateObjectWithSnapping: TransformActionHandler = (\n  eventData,\n  { target, ex, ey, theta, originX, originY },\n  x,\n  y\n) => {\n  const pivotPoint = target.translateToOriginPoint(\n    target.getRelativeCenterPoint(),\n    originX,\n    originY\n  );\n\n  if (isLocked(target, 'lockRotation')) {\n    return false;\n  }\n\n  const lastAngle = Math.atan2(ey - pivotPoint.y, ex - pivotPoint.x),\n    curAngle = Math.atan2(y - pivotPoint.y, x - pivotPoint.x);\n  let angle = radiansToDegrees(curAngle - lastAngle + theta);\n\n  if (target.snapAngle && target.snapAngle > 0) {\n    const snapAngle = target.snapAngle,\n      snapThreshold = target.snapThreshold || snapAngle,\n      rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle,\n      leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;\n\n    if (Math.abs(angle - leftAngleLocked) < snapThreshold) {\n      angle = leftAngleLocked;\n    } else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {\n      angle = rightAngleLocked;\n    }\n  }\n\n  // normalize angle to positive value\n  if (angle < 0) {\n    angle = 360 + angle;\n  }\n  angle %= 360;\n\n  const hasRotated = target.angle !== angle;\n  // TODO: why aren't we using set?\n  target.angle = angle;\n  return hasRotated;\n};\n\nexport const rotationWithSnapping = wrapWithFireEvent(\n  'rotating',\n  wrapWithFixedAnchor(rotateObjectWithSnapping)\n);\n", "import type {\n  ControlCursorCallback,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TAxis } from '../typedefs';\nimport type { Canvas } from '../canvas/Canvas';\nimport {\n  findCornerQuadrant,\n  getLocalPoint,\n  invertOrigin,\n  isLocked,\n  isTransformCentered,\n  NOT_ALLOWED_CURSOR,\n} from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\n\ntype ScaleTransform = Transform & {\n  gestureScale?: number;\n  signX?: number;\n  signY?: number;\n};\n\ntype ScaleBy = TAxis | 'equally' | '' | undefined;\n\n/**\n * Inspect event and fabricObject properties to understand if the scaling action\n * @param {Event} eventData from the user action\n * @param {FabricObject} fabricObject the fabric object about to scale\n * @return {Boolean} true if scale is proportional\n */\nexport function scaleIsProportional(\n  eventData: TPointerEvent,\n  fabricObject: FabricObject\n): boolean {\n  const canvas = fabricObject.canvas as Canvas,\n    uniformIsToggled = eventData[canvas.uniScaleKey!];\n  return (\n    (canvas.uniformScaling && !uniformIsToggled) ||\n    (!canvas.uniformScaling && uniformIsToggled)\n  );\n}\n\n/**\n * Inspect fabricObject to understand if the current scaling action is allowed\n * @param {FabricObject} fabricObject the fabric object about to scale\n * @param {String} by 'x' or 'y' or ''\n * @param {Boolean} scaleProportionally true if we are trying to scale proportionally\n * @return {Boolean} true if scaling is not allowed at current conditions\n */\nexport function scalingIsForbidden(\n  fabricObject: FabricObject,\n  by: ScaleBy,\n  scaleProportionally: boolean\n) {\n  const lockX = isLocked(fabricObject, 'lockScalingX'),\n    lockY = isLocked(fabricObject, 'lockScalingY');\n  if (lockX && lockY) {\n    return true;\n  }\n  if (!by && (lockX || lockY) && scaleProportionally) {\n    return true;\n  }\n  if (lockX && by === 'x') {\n    return true;\n  }\n  if (lockY && by === 'y') {\n    return true;\n  }\n  // code crashes because of a division by 0 if a 0 sized object is scaled\n  // forbid to prevent scaling to happen. ISSUE-9475\n  const { width, height, strokeWidth } = fabricObject;\n  if (width === 0 && strokeWidth === 0 && by !== 'y') {\n    return true;\n  }\n  if (height === 0 && strokeWidth === 0 && by !== 'x') {\n    return true;\n  }\n  return false;\n}\n\nconst scaleMap = ['e', 'se', 's', 'sw', 'w', 'nw', 'n', 'ne', 'e'];\n\n/**\n * return the correct cursor style for the scale action\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const scaleCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject\n) => {\n  const scaleProportionally = scaleIsProportional(eventData, fabricObject),\n    by =\n      control.x !== 0 && control.y === 0\n        ? 'x'\n        : control.x === 0 && control.y !== 0\n        ? 'y'\n        : '';\n  if (scalingIsForbidden(fabricObject, by, scaleProportionally)) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  const n = findCornerQuadrant(fabricObject, control);\n  return `${scaleMap[n]}-resize`;\n};\n\n/**\n * Basic scaling logic, reused with different constrain for scaling X,Y, freely or equally.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @param {Object} options additional information for scaling\n * @param {String} options.by 'x', 'y', 'equally' or '' to indicate type of scaling\n * @return {Boolean} true if some change happened\n * @private\n */\nfunction scaleObject(\n  eventData: TPointerEvent,\n  transform: ScaleTransform,\n  x: number,\n  y: number,\n  options: { by?: ScaleBy } = {}\n) {\n  const target = transform.target,\n    by = options.by,\n    scaleProportionally = scaleIsProportional(eventData, target),\n    forbidScaling = scalingIsForbidden(target, by, scaleProportionally);\n  let newPoint, scaleX, scaleY, dim, signX, signY;\n\n  if (forbidScaling) {\n    return false;\n  }\n  if (transform.gestureScale) {\n    scaleX = transform.scaleX * transform.gestureScale;\n    scaleY = transform.scaleY * transform.gestureScale;\n  } else {\n    newPoint = getLocalPoint(\n      transform,\n      transform.originX,\n      transform.originY,\n      x,\n      y\n    );\n    // use of sign: We use sign to detect change of direction of an action. sign usually change when\n    // we cross the origin point with the mouse. So a scale flip for example. There is an issue when scaling\n    // by center and scaling using one middle control ( default: mr, mt, ml, mb), the mouse movement can easily\n    // cross many time the origin point and flip the object. so we need a way to filter out the noise.\n    // This ternary here should be ok to filter out X scaling when we want Y only and vice versa.\n    signX = by !== 'y' ? Math.sign(newPoint.x || transform.signX || 1) : 1;\n    signY = by !== 'x' ? Math.sign(newPoint.y || transform.signY || 1) : 1;\n    if (!transform.signX) {\n      transform.signX = signX;\n    }\n    if (!transform.signY) {\n      transform.signY = signY;\n    }\n\n    if (\n      isLocked(target, 'lockScalingFlip') &&\n      (transform.signX !== signX || transform.signY !== signY)\n    ) {\n      return false;\n    }\n\n    dim = target._getTransformedDimensions();\n    // missing detection of flip and logic to switch the origin\n    if (scaleProportionally && !by) {\n      // uniform scaling\n      const distance = Math.abs(newPoint.x) + Math.abs(newPoint.y),\n        { original } = transform,\n        originalDistance =\n          Math.abs((dim.x * original.scaleX) / target.scaleX) +\n          Math.abs((dim.y * original.scaleY) / target.scaleY),\n        scale = distance / originalDistance;\n      scaleX = original.scaleX * scale;\n      scaleY = original.scaleY * scale;\n    } else {\n      scaleX = Math.abs((newPoint.x * target.scaleX) / dim.x);\n      scaleY = Math.abs((newPoint.y * target.scaleY) / dim.y);\n    }\n    // if we are scaling by center, we need to double the scale\n    if (isTransformCentered(transform)) {\n      scaleX *= 2;\n      scaleY *= 2;\n    }\n    if (transform.signX !== signX && by !== 'y') {\n      transform.originX = invertOrigin(transform.originX);\n      scaleX *= -1;\n      transform.signX = signX;\n    }\n    if (transform.signY !== signY && by !== 'x') {\n      transform.originY = invertOrigin(transform.originY);\n      scaleY *= -1;\n      transform.signY = signY;\n    }\n  }\n  // minScale is taken care of in the setter.\n  const oldScaleX = target.scaleX,\n    oldScaleY = target.scaleY;\n  if (!by) {\n    !isLocked(target, 'lockScalingX') && target.set('scaleX', scaleX);\n    !isLocked(target, 'lockScalingY') && target.set('scaleY', scaleY);\n  } else {\n    // forbidden cases already handled on top here.\n    by === 'x' && target.set('scaleX', scaleX);\n    by === 'y' && target.set('scaleY', scaleY);\n  }\n  return oldScaleX !== target.scaleX || oldScaleY !== target.scaleY;\n}\n\n/**\n * Generic scaling logic, to scale from corners either equally or freely.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scaleObjectFromCorner: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y\n) => {\n  return scaleObject(eventData, transform, x, y);\n};\n\n/**\n * Scaling logic for the X axis.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nconst scaleObjectX: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y\n) => {\n  return scaleObject(eventData, transform, x, y, { by: 'x' });\n};\n\n/**\n * Scaling logic for the Y axis.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nconst scaleObjectY: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y\n) => {\n  return scaleObject(eventData, transform, x, y, { by: 'y' });\n};\n\nexport const scalingEqually = wrapWithFireEvent(\n  'scaling',\n  wrapWithFixedAnchor(scaleObjectFromCorner)\n);\n\nexport const scalingX = wrapWithFireEvent(\n  'scaling',\n  wrapWithFixedAnchor(scaleObjectX)\n);\n\nexport const scalingY = wrapWithFireEvent(\n  'scaling',\n  wrapWithFixedAnchor(scaleObjectY)\n);\n", "import type {\n  ControlCursorCallback,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { Point } from '../Point';\nimport type { TAxis, TAxisKey } from '../typedefs';\nimport {\n  degreesToRadians,\n  radiansToDegrees,\n} from '../util/misc/radiansDegreesConversion';\nimport {\n  findCornerQuadrant,\n  getLocalPoint,\n  isLocked,\n  NOT_ALLOWED_CURSOR,\n} from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\nimport { CENTER } from '../constants';\n\nexport type SkewTransform = Transform & { skewingSide: -1 | 1 };\n\nconst AXIS_KEYS: Record<\n  TAxis,\n  {\n    counterAxis: TAxis;\n    scale: TAxisKey<'scale'>;\n    skew: TAxisKey<'skew'>;\n    lockSkewing: TAxisKey<'lockSkewing'>;\n    origin: TAxisKey<'origin'>;\n    flip: TAxisKey<'flip'>;\n  }\n> = {\n  x: {\n    counterAxis: 'y',\n    scale: 'scaleX',\n    skew: 'skewX',\n    lockSkewing: 'lockSkewingX',\n    origin: 'originX',\n    flip: 'flipX',\n  },\n  y: {\n    counterAxis: 'x',\n    scale: 'scaleY',\n    skew: 'skewY',\n    lockSkewing: 'lockSkewingY',\n    origin: 'originY',\n    flip: 'flipY',\n  },\n};\n\nconst skewMap = ['ns', 'nesw', 'ew', 'nwse'];\n\n/**\n * return the correct cursor style for the skew action\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const skewCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject\n) => {\n  if (control.x !== 0 && isLocked(fabricObject, 'lockSkewingY')) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  if (control.y !== 0 && isLocked(fabricObject, 'lockSkewingX')) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  const n = findCornerQuadrant(fabricObject, control) % 4;\n  return `${skewMap[n]}-resize`;\n};\n\n/**\n * Since skewing is applied before scaling, calculations are done in a scaleless plane\n * @see https://github.com/fabricjs/fabric.js/pull/8380\n */\nfunction skewObject(\n  axis: TAxis,\n  { target, ex, ey, skewingSide, ...transform }: SkewTransform,\n  pointer: Point\n) {\n  const { skew: skewKey } = AXIS_KEYS[axis],\n    offset = pointer\n      .subtract(new Point(ex, ey))\n      .divide(new Point(target.scaleX, target.scaleY))[axis],\n    skewingBefore = target[skewKey],\n    skewingStart = transform[skewKey],\n    shearingStart = Math.tan(degreesToRadians(skewingStart)),\n    // let a, b be the size of target\n    // let a' be the value of a after applying skewing\n    // then:\n    // a' = a + b * skewA => skewA = (a' - a) / b\n    // the value b is tricky since skewY is applied before skewX\n    b =\n      axis === 'y'\n        ? target._getTransformedDimensions({\n            scaleX: 1,\n            scaleY: 1,\n            // since skewY is applied before skewX, b (=width) is not affected by skewX\n            skewX: 0,\n          }).x\n        : target._getTransformedDimensions({\n            scaleX: 1,\n            scaleY: 1,\n          }).y;\n\n  const shearing =\n    (2 * offset * skewingSide) /\n      // we max out fractions to safeguard from asymptotic behavior\n      Math.max(b, 1) +\n    // add starting state\n    shearingStart;\n\n  const skewing = radiansToDegrees(Math.atan(shearing));\n\n  target.set(skewKey, skewing);\n  const changed = skewingBefore !== target[skewKey];\n\n  if (changed && axis === 'y') {\n    // we don't want skewing to affect scaleX\n    // so we factor it by the inverse skewing diff to make it seem unchanged to the viewer\n    const { skewX, scaleX } = target,\n      dimBefore = target._getTransformedDimensions({ skewY: skewingBefore }),\n      dimAfter = target._getTransformedDimensions(),\n      compensationFactor = skewX !== 0 ? dimBefore.x / dimAfter.x : 1;\n    compensationFactor !== 1 &&\n      target.set('scaleX', compensationFactor * scaleX);\n  }\n\n  return changed;\n}\n\n/**\n * Wrapped Action handler for skewing on a given axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nfunction skewHandler(\n  axis: TAxis,\n  eventData: TPointerEvent,\n  transform: Transform,\n  x: number,\n  y: number\n) {\n  const { target } = transform,\n    {\n      counterAxis,\n      origin: originKey,\n      lockSkewing: lockSkewingKey,\n      skew: skewKey,\n      flip: flipKey,\n    } = AXIS_KEYS[axis];\n  if (isLocked(target, lockSkewingKey)) {\n    return false;\n  }\n\n  const { origin: counterOriginKey, flip: counterFlipKey } =\n      AXIS_KEYS[counterAxis],\n    counterOriginFactor =\n      resolveOrigin(transform[counterOriginKey]) *\n      (target[counterFlipKey] ? -1 : 1),\n    // if the counter origin is top/left (= -0.5) then we are skewing x/y values on the bottom/right side of target respectively.\n    // if the counter origin is bottom/right (= 0.5) then we are skewing x/y values on the top/left side of target respectively.\n    // skewing direction on the top/left side of target is OPPOSITE to the direction of the movement of the pointer,\n    // so we factor skewing direction by this value.\n    skewingSide = (-Math.sign(counterOriginFactor) *\n      (target[flipKey] ? -1 : 1)) as 1 | -1,\n    skewingDirection =\n      ((target[skewKey] === 0 &&\n        // in case skewing equals 0 we use the pointer offset from target center to determine the direction of skewing\n        getLocalPoint(transform, CENTER, CENTER, x, y)[axis] > 0) ||\n      // in case target has skewing we use that as the direction\n      target[skewKey] > 0\n        ? 1\n        : -1) * skewingSide,\n    // anchor to the opposite side of the skewing direction\n    // normalize value from [-1, 1] to origin value [0, 1]\n    origin = -skewingDirection * 0.5 + 0.5;\n\n  const finalHandler = wrapWithFireEvent<SkewTransform>(\n    'skewing',\n    wrapWithFixedAnchor((eventData, transform, x, y) =>\n      skewObject(axis, transform, new Point(x, y))\n    )\n  );\n\n  return finalHandler(\n    eventData,\n    {\n      ...transform,\n      [originKey]: origin,\n      skewingSide,\n    },\n    x,\n    y\n  );\n}\n\n/**\n * Wrapped Action handler for skewing on the X axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const skewHandlerX: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y\n) => {\n  return skewHandler('x', eventData, transform, x, y);\n};\n\n/**\n * Wrapped Action handler for skewing on the Y axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const skewHandlerY: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y\n) => {\n  return skewHandler('y', eventData, transform, x, y);\n};\n", "import type {\n  ControlCallback,\n  ControlCursorCallback,\n  TPointerEvent,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TAxisKey } from '../typedefs';\nimport { scaleCursorStyleHandler, scalingX, scalingY } from './scale';\nimport { skewCursorStyleHandler, skewHandlerX, skewHandlerY } from './skew';\n\nfunction isAltAction(eventData: TPointerEvent, target: FabricObject) {\n  return eventData[target.canvas!.altActionKey!];\n}\n\n/**\n * Inspect event, control and fabricObject to return the correct action name\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} an action name\n */\nexport const scaleOrSkewActionName: ControlCallback<\n  TAxisKey<'skew' | 'scale'> | ''\n> = (eventData, control, fabricObject) => {\n  const isAlternative = isAltAction(eventData, fabricObject);\n  if (control.x === 0) {\n    // then is scaleY or skewX\n    return isAlternative ? 'skewX' : 'scaleY';\n  }\n  if (control.y === 0) {\n    // then is scaleY or skewX\n    return isAlternative ? 'skewY' : 'scaleX';\n  }\n  return '';\n};\n\n/**\n * Combine skew and scale style handlers to cover fabric standard use case\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const scaleSkewCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject\n) => {\n  return isAltAction(eventData, fabricObject)\n    ? skewCursorStyleHandler(eventData, control, fabricObject)\n    : scaleCursorStyleHandler(eventData, control, fabricObject);\n};\n/**\n * Composed action handler to either scale X or skew Y\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scalingXOrSkewingY: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y\n) => {\n  return isAltAction(eventData, transform.target)\n    ? skewHandlerY(eventData, transform, x, y)\n    : scalingX(eventData, transform, x, y);\n};\n\n/**\n * Composed action handler to either scale Y or skew X\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scalingYOrSkewingX: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y\n) => {\n  return isAltAction(eventData, transform.target)\n    ? skewHandlerX(eventData, transform, x, y)\n    : scalingY(eventData, transform, x, y);\n};\n", "import { changeWidth } from './changeWidth';\nimport { Control } from './Control';\nimport { rotationStyleHandler, rotationWithSnapping } from './rotate';\nimport { scaleCursorStyleHandler, scalingEqually } from './scale';\nimport {\n  scaleOrSkewActionName,\n  scaleSkewCursorStyleHandler,\n  scalingXOrSkewingY,\n  scalingYOrSkewingX,\n} from './scaleSkew';\n\n// use this function if you want to generate new controls for every instance\nexport const createObjectDefaultControls = () => ({\n  ml: new Control({\n    x: -0.5,\n    y: 0,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingXOrSkewingY,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mr: new Control({\n    x: 0.5,\n    y: 0,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingXOrSkewingY,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mb: new Control({\n    x: 0,\n    y: 0.5,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingYOrSkewingX,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mt: new Control({\n    x: 0,\n    y: -0.5,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingYOrSkewingX,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  tl: new Control({\n    x: -0.5,\n    y: -0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  tr: new Control({\n    x: 0.5,\n    y: -0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  bl: new Control({\n    x: -0.5,\n    y: 0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  br: new Control({\n    x: 0.5,\n    y: 0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  mtr: new Control({\n    x: 0,\n    y: -0.5,\n    actionHandler: rotationWithSnapping,\n    cursorStyleHandler: rotationStyleHandler,\n    offsetY: -40,\n    withConnection: true,\n    actionName: 'rotate',\n  }),\n});\n\nexport const createResizeControls = () => ({\n  mr: new Control({\n    x: 0.5,\n    y: 0,\n    actionHandler: changeWidth,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionName: 'resizing',\n  }),\n  ml: new Control({\n    x: -0.5,\n    y: 0,\n    actionHandler: changeWidth,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionName: 'resizing',\n  }),\n});\n\nexport const createTextboxDefaultControls = () => ({\n  ...createObjectDefaultControls(),\n  ...createResizeControls(),\n});\n", "import { Point, ZERO } from '../../Point';\nimport type { TCornerPoint, TDegree } from '../../typedefs';\nimport { FabricObject } from './Object';\nimport { degreesToRadians } from '../../util/misc/radiansDegreesConversion';\nimport type { TQrDecomposeOut } from '../../util/misc/matrix';\nimport {\n  calcDimensionsMatrix,\n  createRotateMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from '../../util/misc/matrix';\nimport type { Control } from '../../controls/Control';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport type { ObjectEvents, TPointerEvent } from '../../EventTypeDefs';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { ControlRenderingStyleOverride } from '../../controls/controlRendering';\nimport type { FabricObjectProps } from './types/FabricObjectProps';\nimport type { TFabricObjectProps, SerializedObjectProps } from './types';\nimport { createObjectDefaultControls } from '../../controls/commonControls';\nimport { interactiveObjectDefaultValues } from './defaultValues';\n\nexport type TOCoord = Point & {\n  corner: TCornerPoint;\n  touchCorner: TCornerPoint;\n};\n\nexport type TControlSet = Record<string, Control>;\n\nexport type TBorderRenderingStyleOverride = Partial<\n  Pick<InteractiveFabricObject, 'borderColor' | 'borderDashArray'>\n>;\n\nexport type TStyleOverride = ControlRenderingStyleOverride &\n  TBorderRenderingStyleOverride &\n  Partial<\n    Pick<InteractiveFabricObject, 'hasBorders' | 'hasControls'> & {\n      forActiveSelection: boolean;\n    }\n  >;\n\nexport class InteractiveFabricObject<\n    Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements FabricObjectProps\n{\n  declare noScaleCache: boolean;\n\n  declare snapAngle?: TDegree;\n  declare snapThreshold?: TDegree;\n\n  declare lockMovementX: boolean;\n  declare lockMovementY: boolean;\n  declare lockRotation: boolean;\n  declare lockScalingX: boolean;\n  declare lockScalingY: boolean;\n  declare lockSkewingX: boolean;\n  declare lockSkewingY: boolean;\n  declare lockScalingFlip: boolean;\n\n  declare cornerSize: number;\n  declare touchCornerSize: number;\n  declare transparentCorners: boolean;\n  declare cornerColor: string;\n  declare cornerStrokeColor: string;\n  declare cornerStyle: 'rect' | 'circle';\n  declare cornerDashArray: number[] | null;\n  declare hasControls: boolean;\n\n  declare borderColor: string;\n  declare borderDashArray: number[] | null;\n  declare borderOpacityWhenMoving: number;\n  declare borderScaleFactor: number;\n  declare hasBorders: boolean;\n  declare selectionBackgroundColor: string;\n\n  declare selectable: boolean;\n  declare evented: boolean;\n  declare perPixelTargetFind: boolean;\n  declare activeOn: 'down' | 'up';\n\n  declare hoverCursor: CSSStyleDeclaration['cursor'] | null;\n  declare moveCursor: CSSStyleDeclaration['cursor'] | null;\n\n  /**\n   * The object's controls' position in viewport coordinates\n   * Calculated by {@link Control#positionHandler} and {@link Control#calcCornerCoords}, depending on {@link padding}.\n   * `corner/touchCorner` describe the 4 points forming the interactive area of the corner.\n   * Used to draw and locate controls.\n   */\n  declare oCoords: Record<string, TOCoord>;\n\n  /**\n   * keeps the value of the last hovered corner during mouse move.\n   * 0 is no corner, or 'mt', 'ml', 'mtr' etc..\n   * It should be private, but there is no harm in using it as\n   * a read-only property.\n   * this isn't cleaned automatically. Non selected objects may have wrong values\n   * @type [string]\n   */\n  declare __corner?: string;\n\n  /**\n   * a map of control visibility for this object.\n   * this was left when controls were introduced to not break the api too much\n   * this takes priority over the generic control visibility\n   */\n  declare _controlsVisibility: Record<string, boolean>;\n\n  /**\n   * holds the controls for the object.\n   * controls are added by default_controls.js\n   */\n  declare controls: TControlSet;\n\n  /**\n   * internal boolean to signal the code that the object is\n   * part of the move action.\n   */\n  declare isMoving?: boolean;\n\n  /**\n   * A boolean used from the gesture module to keep tracking of a scaling\n   * action when there is no scaling transform in place.\n   * This is an edge case and is used twice in all codebase.\n   * Probably added to keep track of some performance issues\n   * @TODO use git blame to investigate why it was added\n   * DON'T USE IT. WE WILL TRY TO REMOVE IT\n   */\n  declare _scaling?: boolean;\n\n  declare canvas?: Canvas;\n\n  static ownDefaults = interactiveObjectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...InteractiveFabricObject.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(\n      this,\n      (this.constructor as typeof InteractiveFabricObject).createControls(),\n      InteractiveFabricObject.ownDefaults\n    );\n    this.setOptions(options);\n  }\n\n  /**\n   * Creates the default control object.\n   * If you prefer to have on instance of controls shared among all objects\n   * make this function return an empty object and add controls to the ownDefaults\n   * @param {Object} [options] Options object\n   */\n  static createControls(): { controls: Record<string, Control> } {\n    return { controls: createObjectDefaultControls() };\n  }\n\n  /**\n   * Update width and height of the canvas for cache\n   * returns true or false if canvas needed resize.\n   * @private\n   * @return {Boolean} true if the canvas has been resized\n   */\n  _updateCacheCanvas() {\n    const targetCanvas = this.canvas;\n    if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {\n      const transform = targetCanvas._currentTransform,\n        target = transform.target,\n        action = transform.action;\n      if (\n        this === (target as unknown as this) &&\n        action &&\n        action.startsWith('scale')\n      ) {\n        return false;\n      }\n    }\n    return super._updateCacheCanvas();\n  }\n\n  getActiveControl() {\n    const key = this.__corner;\n    return key\n      ? {\n          key,\n          control: this.controls[key],\n          coord: this.oCoords[key],\n        }\n      : undefined;\n  }\n\n  /**\n   * Determines which corner is under the mouse cursor, represented by `pointer`.\n   * This function is return a corner only if the object is the active one.\n   * This is done to avoid selecting corner of non active object and activating transformations\n   * rather than drag action. The default behavior of fabricJS is that if you want to transform\n   * an object, first you select it to show the control set\n   * @private\n   * @param {Object} pointer The pointer indicating the mouse position\n   * @param {boolean} forTouch indicates if we are looking for interaction area with a touch action\n   * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or 0 if nothing is found.\n   */\n  findControl(\n    pointer: Point,\n    forTouch = false\n  ): { key: string; control: Control; coord: TOCoord } | undefined {\n    if (!this.hasControls || !this.canvas) {\n      return undefined;\n    }\n\n    this.__corner = undefined;\n    const cornerEntries = Object.entries(this.oCoords);\n    for (let i = cornerEntries.length - 1; i >= 0; i--) {\n      const [key, corner] = cornerEntries[i];\n      const control = this.controls[key];\n\n      if (\n        control.shouldActivate(\n          key,\n          this,\n          pointer,\n          forTouch ? corner.touchCorner : corner.corner\n        )\n      ) {\n        // this.canvas.contextTop.fillRect(pointer.x - 1, pointer.y - 1, 2, 2);\n        this.__corner = key;\n\n        return { key, control, coord: this.oCoords[key] };\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Calculates the coordinates of the center of each control plus the corners of the control itself\n   * This basically just delegates to each control positionHandler\n   * WARNING: changing what is passed to positionHandler is a breaking change, since position handler\n   * is a public api and should be done just if extremely necessary\n   * @return {Record<string, TOCoord>}\n   */\n  calcOCoords(): Record<string, TOCoord> {\n    const vpt = this.getViewportTransform(),\n      center = this.getCenterPoint(),\n      tMatrix = createTranslateMatrix(center.x, center.y),\n      rMatrix = createRotateMatrix({\n        angle: this.getTotalAngle() - (!!this.group && this.flipX ? 180 : 0),\n      }),\n      positionMatrix = multiplyTransformMatrices(tMatrix, rMatrix),\n      startMatrix = multiplyTransformMatrices(vpt, positionMatrix),\n      finalMatrix = multiplyTransformMatrices(startMatrix, [\n        1 / vpt[0],\n        0,\n        0,\n        1 / vpt[3],\n        0,\n        0,\n      ]),\n      transformOptions = this.group\n        ? qrDecompose(this.calcTransformMatrix())\n        : undefined;\n    // decomposing could bring negative scaling and `_calculateCurrentDimensions` can't take it\n    if (transformOptions) {\n      transformOptions.scaleX = Math.abs(transformOptions.scaleX);\n      transformOptions.scaleY = Math.abs(transformOptions.scaleY);\n    }\n    const dim = this._calculateCurrentDimensions(transformOptions),\n      coords: Record<string, TOCoord> = {};\n\n    this.forEachControl((control, key) => {\n      const position = control.positionHandler(dim, finalMatrix, this, control);\n      // coords[key] are sometimes used as points. Those are points to which we add\n      // the property corner and touchCorner from `_calcCornerCoords`.\n      // don't remove this assign for an object spread.\n      coords[key] = Object.assign(\n        position,\n        this._calcCornerCoords(control, position)\n      );\n    });\n\n    // debug code\n    /*\n      const canvas = this.canvas;\n      setTimeout(function () {\n      if (!canvas) return;\n        canvas.contextTop.clearRect(0, 0, 700, 700);\n        canvas.contextTop.fillStyle = 'green';\n        Object.keys(coords).forEach(function(key) {\n          const control = coords[key];\n          canvas.contextTop.fillRect(control.x, control.y, 3, 3);\n        });\n      } 50);\n    */\n    return coords;\n  }\n\n  /**\n   * Sets the coordinates that determine the interaction area of each control\n   * note: if we would switch to ROUND corner area, all of this would disappear.\n   * everything would resolve to a single point and a pythagorean theorem for the distance\n   * @todo evaluate simplification of code switching to circle interaction area at runtime\n   * @private\n   */\n  private _calcCornerCoords(control: Control, position: Point) {\n    const angle = this.getTotalAngle();\n    const corner = control.calcCornerCoords(\n      angle,\n      this.cornerSize,\n      position.x,\n      position.y,\n      false,\n      this\n    );\n    const touchCorner = control.calcCornerCoords(\n      angle,\n      this.touchCornerSize,\n      position.x,\n      position.y,\n      true,\n      this\n    );\n    return { corner, touchCorner };\n  }\n\n  /**\n   * @override set controls' coordinates as well\n   * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\n   * @return {void}\n   */\n  setCoords(): void {\n    super.setCoords();\n    this.canvas && (this.oCoords = this.calcOCoords());\n  }\n\n  /**\n   * Calls a function for each control. The function gets called,\n   * with the control, the control's key and the object that is calling the iterator\n   * @param {Function} fn function to iterate over the controls over\n   */\n  forEachControl(\n    fn: (\n      control: Control,\n      key: string,\n      fabricObject: InteractiveFabricObject\n    ) => any\n  ) {\n    for (const i in this.controls) {\n      fn(this.controls[i], i, this);\n    }\n  }\n\n  /**\n   * Draws a colored layer behind the object, inside its selection borders.\n   * Requires public options: padding, selectionBackgroundColor\n   * this function is called when the context is transformed\n   * has checks to be skipped when the object is on a staticCanvas\n   * @todo evaluate if make this disappear in favor of a pre-render hook for objects\n   * this was added by Andrea Bogazzi to make possible some feature for work reasons\n   * it seemed a good option, now is an edge case\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   */\n  drawSelectionBackground(ctx: CanvasRenderingContext2D): void {\n    if (\n      !this.selectionBackgroundColor ||\n      (this.canvas && (this.canvas._activeObject as unknown as this) !== this)\n    ) {\n      return;\n    }\n    ctx.save();\n    const center = this.getRelativeCenterPoint(),\n      wh = this._calculateCurrentDimensions(),\n      vpt = this.getViewportTransform();\n    ctx.translate(center.x, center.y);\n    ctx.scale(1 / vpt[0], 1 / vpt[3]);\n    ctx.rotate(degreesToRadians(this.angle));\n    ctx.fillStyle = this.selectionBackgroundColor;\n    ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);\n    ctx.restore();\n  }\n\n  /**\n   * @public override this function in order to customize the drawing of the control box, e.g. rounded corners, different border style.\n   * @param {CanvasRenderingContext2D} ctx ctx is rotated and translated so that (0,0) is at object's center\n   * @param {Point} size the control box size used\n   */\n  strokeBorders(ctx: CanvasRenderingContext2D, size: Point): void {\n    ctx.strokeRect(-size.x / 2, -size.y / 2, size.x, size.y);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {Point} size\n   * @param {TStyleOverride} styleOverride object to override the object style\n   */\n  _drawBorders(\n    ctx: CanvasRenderingContext2D,\n    size: Point,\n    styleOverride: TStyleOverride = {}\n  ): void {\n    const options = {\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      borderDashArray: this.borderDashArray,\n      ...styleOverride,\n    };\n    ctx.save();\n    ctx.strokeStyle = options.borderColor;\n    this._setLineDash(ctx, options.borderDashArray);\n    this.strokeBorders(ctx, size);\n    options.hasControls && this.drawControlsConnectingLines(ctx, size);\n    ctx.restore();\n  }\n\n  /**\n   * Renders controls and borders for the object\n   * the context here is not transformed\n   * @todo move to interactivity\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {TStyleOverride} [styleOverride] properties to override the object style\n   */\n  _renderControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride: TStyleOverride = {}\n  ) {\n    const { hasBorders, hasControls } = this;\n    const styleOptions = {\n      hasBorders,\n      hasControls,\n      ...styleOverride,\n    };\n    const vpt = this.getViewportTransform(),\n      shouldDrawBorders = styleOptions.hasBorders,\n      shouldDrawControls = styleOptions.hasControls;\n    const matrix = multiplyTransformMatrices(vpt, this.calcTransformMatrix());\n    const options = qrDecompose(matrix);\n    ctx.save();\n    ctx.translate(options.translateX, options.translateY);\n    ctx.lineWidth = 1 * this.borderScaleFactor;\n    // since interactive groups have been introduced, an object could be inside a group and needing controls\n    // the following equality check `this.group === this.parent` covers:\n    // object without a group ( undefined === undefined )\n    // object inside a group\n    // excludes object inside a group but multi selected since group and parent will differ in value\n    if (this.group === this.parent) {\n      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n    }\n    if (this.flipX) {\n      options.angle -= 180;\n    }\n    ctx.rotate(degreesToRadians(this.group ? options.angle : this.angle));\n    shouldDrawBorders && this.drawBorders(ctx, options, styleOverride);\n    shouldDrawControls && this.drawControls(ctx, styleOverride);\n    ctx.restore();\n  }\n\n  /**\n   * Draws borders of an object's bounding box.\n   * Requires public properties: width, height\n   * Requires public options: padding, borderColor\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {object} options object representing current object parameters\n   * @param {TStyleOverride} [styleOverride] object to override the object style\n   */\n  drawBorders(\n    ctx: CanvasRenderingContext2D,\n    options: TQrDecomposeOut,\n    styleOverride: TStyleOverride\n  ): void {\n    let size;\n    if ((styleOverride && styleOverride.forActiveSelection) || this.group) {\n      const bbox = sizeAfterTransform(\n          this.width,\n          this.height,\n          calcDimensionsMatrix(options)\n        ),\n        stroke = !this.isStrokeAccountedForInDimensions()\n          ? (this.strokeUniform\n              ? new Point().scalarAdd(this.canvas ? this.canvas.getZoom() : 1)\n              : // this is extremely confusing. options comes from the upper function\n                // and is the qrDecompose of a matrix that takes in account zoom too\n                new Point(options.scaleX, options.scaleY)\n            ).scalarMultiply(this.strokeWidth)\n          : ZERO;\n      size = bbox\n        .add(stroke)\n        .scalarAdd(this.borderScaleFactor)\n        .scalarAdd(this.padding * 2);\n    } else {\n      size = this._calculateCurrentDimensions().scalarAdd(\n        this.borderScaleFactor\n      );\n    }\n    this._drawBorders(ctx, size, styleOverride);\n  }\n\n  /**\n   * Draws lines from a borders of an object's bounding box to controls that have `withConnection` property set.\n   * Requires public properties: width, height\n   * Requires public options: padding, borderColor\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {Point} size object size x = width, y = height\n   */\n  drawControlsConnectingLines(\n    ctx: CanvasRenderingContext2D,\n    size: Point\n  ): void {\n    let shouldStroke = false;\n\n    ctx.beginPath();\n    this.forEachControl((control, key) => {\n      // in this moment, the ctx is centered on the object.\n      // width and height of the above function are the size of the bbox.\n      if (control.withConnection && control.getVisibility(this, key)) {\n        // reset movement for each control\n        shouldStroke = true;\n        ctx.moveTo(control.x * size.x, control.y * size.y);\n        ctx.lineTo(\n          control.x * size.x + control.offsetX,\n          control.y * size.y + control.offsetY\n        );\n      }\n    });\n    shouldStroke && ctx.stroke();\n  }\n\n  /**\n   * Draws corners of an object's bounding box.\n   * Requires public properties: width, height\n   * Requires public options: cornerSize, padding\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {ControlRenderingStyleOverride} styleOverride object to override the object style\n   */\n  drawControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride: ControlRenderingStyleOverride = {}\n  ) {\n    ctx.save();\n    const retinaScaling = this.getCanvasRetinaScaling();\n    const { cornerStrokeColor, cornerDashArray, cornerColor } = this;\n    const options = {\n      cornerStrokeColor,\n      cornerDashArray,\n      cornerColor,\n      ...styleOverride,\n    };\n    ctx.setTransform(retinaScaling, 0, 0, retinaScaling, 0, 0);\n    ctx.strokeStyle = ctx.fillStyle = options.cornerColor;\n    if (!this.transparentCorners) {\n      ctx.strokeStyle = options.cornerStrokeColor;\n    }\n    this._setLineDash(ctx, options.cornerDashArray);\n    this.setCoords();\n    this.forEachControl((control, key) => {\n      if (control.getVisibility(this, key)) {\n        const p = this.oCoords[key];\n        control.render(ctx, p.x, p.y, options, this);\n      }\n    });\n    ctx.restore();\n  }\n\n  /**\n   * Returns true if the specified control is visible, false otherwise.\n   * @param {string} controlKey The key of the control. Possible values are usually 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr',\n   * but since the control api allow for any control name, can be any string.\n   * @returns {boolean} true if the specified control is visible, false otherwise\n   */\n  isControlVisible(controlKey: string): boolean {\n    return (\n      this.controls[controlKey] &&\n      this.controls[controlKey].getVisibility(this, controlKey)\n    );\n  }\n\n  /**\n   * Sets the visibility of the specified control.\n   * please do not use.\n   * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n   * but since the control api allow for any control name, can be any string.\n   * @param {Boolean} visible true to set the specified control visible, false otherwise\n   * @todo discuss this overlap of priority here with the team. Andrea Bogazzi for details\n   */\n  setControlVisible(controlKey: string, visible: boolean) {\n    if (!this._controlsVisibility) {\n      this._controlsVisibility = {};\n    }\n    this._controlsVisibility[controlKey] = visible;\n  }\n\n  /**\n   * Sets the visibility state of object controls, this is just a bulk option for setControlVisible;\n   * @param {Record<string, boolean>} [options] with an optional key per control\n   * example: {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\n   */\n  setControlsVisibility(options: Record<string, boolean> = {}) {\n    Object.entries(options).forEach(([controlKey, visibility]) =>\n      this.setControlVisible(controlKey, visibility)\n    );\n  }\n\n  /**\n   * Clears the canvas.contextTop in a specific area that corresponds to the object's bounding box\n   * that is in the canvas.contextContainer.\n   * This function is used to clear pieces of contextTop where we render ephemeral effects on top of the object.\n   * Example: blinking cursor text selection, drag effects.\n   * @todo discuss swapping restoreManually with a renderCallback, but think of async issues\n   * @param {Boolean} [restoreManually] When true won't restore the context after clear, in order to draw something else.\n   * @return {CanvasRenderingContext2D|undefined} canvas.contextTop that is either still transformed\n   * with the object transformMatrix, or restored to neutral transform\n   */\n  clearContextTop(\n    restoreManually?: boolean\n  ): CanvasRenderingContext2D | undefined {\n    if (!this.canvas) {\n      return;\n    }\n    const ctx = this.canvas.contextTop;\n    if (!ctx) {\n      return;\n    }\n    const v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    this.transform(ctx);\n    // we add 4 pixel, to be sure to do not leave any pixel out\n    const width = this.width + 4,\n      height = this.height + 4;\n    ctx.clearRect(-width / 2, -height / 2, width, height);\n\n    restoreManually || ctx.restore();\n    return ctx;\n  }\n\n  /**\n   * This callback function is called every time _discardActiveObject or _setActiveObject\n   * try to to deselect this object. If the function returns true, the process is cancelled\n   * @param {Object} [options] options sent from the upper functions\n   * @param {TPointerEvent} [options.e] event if the process is generated by an event\n   * @param {FabricObject} [options.object] next object we are setting as active, and reason why\n   * this is being deselected\n   */\n  onDeselect(options?: {\n    e?: TPointerEvent;\n    object?: InteractiveFabricObject;\n  }): boolean {\n    // implemented by sub-classes, as needed.\n    return false;\n  }\n\n  /**\n   * This callback function is called every time _discardActiveObject or _setActiveObject\n   * try to to select this object. If the function returns true, the process is cancelled\n   * @param {Object} [options] options sent from the upper functions\n   * @param {Event} [options.e] event if the process is generated by an event\n   */\n  onSelect(options?: { e?: TPointerEvent }): boolean {\n    // implemented by sub-classes, as needed.\n    return false;\n  }\n\n  /**\n   * Override to customize Drag behavior\n   * Fired from {@link Canvas#_onMouseMove}\n   * @returns true in order for the window to start a drag session\n   */\n  shouldStartDragging(e: TPointerEvent) {\n    return false;\n  }\n\n  /**\n   * Override to customize Drag behavior\\\n   * Fired once a drag session has started\n   * @returns true to handle the drag event\n   */\n  onDragStart(e: DragEvent) {\n    return false;\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * @public\n   * @param {DragEvent} e\n   * @returns {boolean} true if the object currently dragged can be dropped on the target\n   */\n  canDrop(e: DragEvent): boolean {\n    return false;\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * render a specific effect when an object is the source of a drag event\n   * example: render the selection status for the part of text that is being dragged from a text object\n   * @public\n   * @param {DragEvent} e\n   */\n  renderDragSourceEffect(e: DragEvent) {\n    // for subclasses\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * render a specific effect when an object is the target of a drag event\n   * used to show that the underly object can receive a drop, or to show how the\n   * object will change when dropping. example: show the cursor where the text is about to be dropped\n   * @public\n   * @param {DragEvent} e\n   */\n  renderDropTargetEffect(e: DragEvent) {\n    // for subclasses\n  }\n}\n", "import type { Constructor } from '../typedefs';\n\n/***\n * https://www.typescriptlang.org/docs/handbook/mixins.html#alternative-pattern\n */\nexport function applyMixins<T extends Constructor, S extends Constructor>(\n  derivedCtor: T,\n  constructors: S[]\n) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      name !== 'constructor' &&\n        Object.defineProperty(\n          derivedCtor.prototype,\n          name,\n          Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n            Object.create(null)\n        );\n    });\n  });\n  return derivedCtor as T & { prototype: InstanceType<T & S> };\n}\n", "import type { ObjectEvents } from '../../EventTypeDefs';\nimport { FabricObjectSVGExportMixin } from './FabricObjectSVGExportMixin';\nimport { InteractiveFabricObject } from './InteractiveObject';\nimport { applyMixins } from '../../util/applyMixins';\nimport type { FabricObjectProps } from './types/FabricObjectProps';\nimport type { TFabricObjectProps, SerializedObjectProps } from './types';\nimport { classRegistry } from '../../ClassRegistry';\n\n// TODO somehow we have to make a tree-shakeable import\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface, @typescript-eslint/no-unused-vars\nexport interface FabricObject<\n  Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  EventSpec extends ObjectEvents = ObjectEvents\n> extends FabricObjectSVGExportMixin {}\n\nexport class FabricObject<\n  Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  EventSpec extends ObjectEvents = ObjectEvents\n> extends InteractiveFabricObject<Props, SProps, EventSpec> {}\n\napplyMixins(FabricObject, [FabricObjectSVGExportMixin]);\n\nclassRegistry.setClass(FabricObject);\nclassRegistry.setClass(FabricObject, 'object');\n\nexport { cacheProperties } from './defaultValues';\n", "/**\n * Returns true if context has transparent pixel\n * at specified location (taking tolerance into account)\n * @param {CanvasRenderingContext2D} ctx context\n * @param {Number} x x coordinate in canvasElementCoordinate, not fabric space. integer\n * @param {Number} y y coordinate in canvasElementCoordinate, not fabric space. integer\n * @param {Number} tolerance Tolerance pixels around the point, not alpha tolerance, integer\n * @return {boolean} true if transparent\n */\nexport const isTransparent = (\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  tolerance: number\n): boolean => {\n  tolerance = Math.round(tolerance);\n  const size = tolerance * 2 + 1;\n  const { data } = ctx.getImageData(x - tolerance, y - tolerance, size, size);\n\n  // Split image data - for tolerance > 1, pixelDataSize = 4;\n  for (let i = 3; i < data.length; i += 4) {\n    const alphaChannel = data[i];\n    if (alphaChannel > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n", "import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { degreesToRadians } from '../radiansDegreesConversion';\nimport { createVector } from '../vectors';\nimport type { TProjectStrokeOnPointsOptions, TProjection } from './types';\n\n/**\n * @see https://github.com/fabricjs/fabric.js/pull/8344\n * @todo consider removing skewing from points before calculating stroke projection,\n * see https://github.com/fabricjs/fabric.js/commit/494a10ee2f8c2278ae9a55b20bf50cf6ee25b064#commitcomment-94751537\n */\nexport abstract class StrokeProjectionsBase {\n  declare options: TProjectStrokeOnPointsOptions;\n  declare scale: Point;\n  declare strokeUniformScalar: Point;\n  declare strokeProjectionMagnitude: number;\n\n  constructor(options: TProjectStrokeOnPointsOptions) {\n    this.options = options;\n    this.strokeProjectionMagnitude = this.options.strokeWidth / 2;\n    this.scale = new Point(this.options.scaleX, this.options.scaleY);\n    this.strokeUniformScalar = this.options.strokeUniform\n      ? new Point(1 / this.options.scaleX, 1 / this.options.scaleY)\n      : new Point(1, 1);\n  }\n\n  /**\n   * When the stroke is uniform, scaling affects the arrangement of points. So we must take it into account.\n   */\n  protected createSideVector(from: XY, to: XY) {\n    const v = createVector(from, to);\n    return this.options.strokeUniform ? v.multiply(this.scale) : v;\n  }\n\n  protected abstract calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude?: number\n  ): Point;\n\n  protected projectOrthogonally(from: Point, to: Point, magnitude?: number) {\n    return this.applySkew(\n      from.add(this.calcOrthogonalProjection(from, to, magnitude))\n    );\n  }\n\n  protected isSkewed() {\n    return this.options.skewX !== 0 || this.options.skewY !== 0;\n  }\n\n  protected applySkew(point: Point) {\n    const p = new Point(point);\n    // skewY must be applied before skewX as this distortion affects skewX calculation\n    p.y += p.x * Math.tan(degreesToRadians(this.options.skewY));\n    p.x += p.y * Math.tan(degreesToRadians(this.options.skewX));\n    return p;\n  }\n\n  protected scaleUnitVector(unitVector: Point, scalar: number) {\n    return unitVector.multiply(this.strokeUniformScalar).scalarMultiply(scalar);\n  }\n\n  protected abstract projectPoints(): Point[];\n\n  public abstract project(): TProjection[];\n}\n", "import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { halfPI, twoMathPi } from '../../../constants';\nimport type { TRadian } from '../../../typedefs';\nimport { degreesToRadians } from '../radiansDegreesConversion';\nimport {\n  calcAngleBetweenVectors,\n  calcVectorRotation,\n  crossProduct,\n  getOrthonormalVector,\n  getUnitVector,\n  isBetweenVectors,\n  magnitude,\n  rotateVector,\n} from '../vectors';\nimport { StrokeProjectionsBase } from './StrokeProjectionsBase';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\nconst zeroVector = new Point();\n\n/**\n * class in charge of finding projections for each type of line join\n * @see {@link [Closed path projections at #8344](https://github.com/fabricjs/fabric.js/pull/8344#2-closed-path)}\n *\n * - MDN:\n *   - https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin\n *   - https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linejoin\n * - Spec: https://svgwg.org/svg2-draft/painting.html#StrokeLinejoinProperty\n * - Playground to understand how the line joins works: https://hypertolosana.github.io/efficient-webgl-stroking/index.html\n * - View the calculated projections for each of the control points: https://codesandbox.io/s/project-stroke-points-with-context-to-trace-b8jc4j?file=/src/index.js\n *\n */\nexport class StrokeLineJoinProjections extends StrokeProjectionsBase {\n  /**\n   * The point being projected (the angle ∠BAC)\n   */\n  declare A: Point;\n  /**\n   * The point before A\n   */\n  declare B: Point;\n  /**\n   * The point after A\n   */\n  declare C: Point;\n  /**\n   * The AB vector\n   */\n  AB: Point;\n  /**\n   * The AC vector\n   */\n  AC: Point;\n  /**\n   * The angle of A (∠BAC)\n   */\n  alpha: TRadian;\n  /**\n   * The bisector of A (∠BAC)\n   */\n  bisector: Point;\n\n  static getOrthogonalRotationFactor(vector1: Point, vector2?: Point) {\n    const angle = vector2\n      ? calcAngleBetweenVectors(vector1, vector2)\n      : calcVectorRotation(vector1);\n    return Math.abs(angle) < halfPI ? -1 : 1;\n  }\n\n  constructor(A: XY, B: XY, C: XY, options: TProjectStrokeOnPointsOptions) {\n    super(options);\n    this.A = new Point(A);\n    this.B = new Point(B);\n    this.C = new Point(C);\n    this.AB = this.createSideVector(this.A, this.B);\n    this.AC = this.createSideVector(this.A, this.C);\n    this.alpha = calcAngleBetweenVectors(this.AB, this.AC);\n    this.bisector = getUnitVector(\n      // if AC is also the zero vector nothing will be projected\n      // in that case the next point will handle the projection\n      rotateVector(this.AB.eq(zeroVector) ? this.AC : this.AB, this.alpha / 2)\n    );\n  }\n\n  calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude: number = this.strokeProjectionMagnitude\n  ) {\n    const vector = this.createSideVector(from, to);\n    const orthogonalProjection = getOrthonormalVector(vector);\n    const correctSide = StrokeLineJoinProjections.getOrthogonalRotationFactor(\n      orthogonalProjection,\n      this.bisector\n    );\n    return this.scaleUnitVector(orthogonalProjection, magnitude * correctSide);\n  }\n\n  /**\n   * BEVEL\n   * Calculation: the projection points are formed by the vector orthogonal to the vertex.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-2-bevel\n   */\n  projectBevel() {\n    const projections: Point[] = [];\n    // if `alpha` equals 0 or 2*PI, the projections are the same for `B` and `C`\n    (this.alpha % twoMathPi === 0 ? [this.B] : [this.B, this.C]).forEach(\n      (to) => {\n        projections.push(this.projectOrthogonally(this.A, to));\n        projections.push(\n          this.projectOrthogonally(this.A, to, -this.strokeProjectionMagnitude)\n        );\n      }\n    );\n    return projections;\n  }\n\n  /**\n   * MITER\n   * Calculation: the corner is formed by extending the outer edges of the stroke\n   * at the tangents of the path segments until they intersect.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-1-miter\n   */\n  projectMiter() {\n    const projections: Point[] = [],\n      alpha = Math.abs(this.alpha),\n      hypotUnitScalar = 1 / Math.sin(alpha / 2),\n      miterVector = this.scaleUnitVector(\n        this.bisector,\n        -this.strokeProjectionMagnitude * hypotUnitScalar\n      );\n\n    // When two line segments meet at a sharp angle, it is possible for the join to extend,\n    // far beyond the thickness of the line stroking the path. The stroke-miterlimit imposes\n    // a limit on the extent of the line join.\n    // MDN: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit\n    // When the stroke is uniform, scaling changes the arrangement of points, this changes the miter-limit\n    const strokeMiterLimit = this.options.strokeUniform\n      ? magnitude(\n          this.scaleUnitVector(this.bisector, this.options.strokeMiterLimit)\n        )\n      : this.options.strokeMiterLimit;\n\n    if (\n      magnitude(miterVector) / this.strokeProjectionMagnitude <=\n      strokeMiterLimit\n    ) {\n      projections.push(this.applySkew(this.A.add(miterVector)));\n    }\n    /* when the miter-limit is reached, the stroke line join becomes of type bevel.\n      We always need two orthogonal projections which are basically bevel-type projections,\n      so regardless of whether the miter-limit was reached or not, we include these projections.\n    */\n    projections.push(...this.projectBevel());\n\n    return projections;\n  }\n\n  /**\n   * ROUND (without skew)\n   * Calculation: the projections are the two vectors parallel to X and Y axes\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-3-1-round-without-skew\n   */\n  private projectRoundNoSkew(startCircle: Point, endCircle: Point) {\n    const projections: Point[] = [],\n      // correctSide is used to only consider projecting for the outer side\n      correctSide = new Point(\n        StrokeLineJoinProjections.getOrthogonalRotationFactor(this.bisector),\n        StrokeLineJoinProjections.getOrthogonalRotationFactor(\n          new Point(this.bisector.y, this.bisector.x)\n        )\n      ),\n      radiusOnAxisX = new Point(1, 0)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar)\n        .multiply(correctSide),\n      radiusOnAxisY = new Point(0, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar)\n        .multiply(correctSide);\n\n    [radiusOnAxisX, radiusOnAxisY].forEach((vector) => {\n      if (isBetweenVectors(vector, startCircle, endCircle)) {\n        projections.push(this.A.add(vector));\n      }\n    });\n    return projections;\n  }\n\n  /**\n   * ROUND (with skew)\n   * Calculation: the projections are the points furthest from the vertex in\n   * the direction of the X and Y axes after distortion.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-3-2-round-skew\n   */\n  private projectRoundWithSkew(startCircle: Point, endCircle: Point) {\n    const projections: Point[] = [];\n\n    const { skewX, skewY, scaleX, scaleY, strokeUniform } = this.options,\n      shearing = new Point(\n        Math.tan(degreesToRadians(skewX)),\n        Math.tan(degreesToRadians(skewY))\n      );\n    // The points furthest from the vertex in the direction of the X and Y axes after distortion\n    const circleRadius = this.strokeProjectionMagnitude,\n      newY = strokeUniform\n        ? circleRadius /\n          scaleY /\n          Math.sqrt(1 / scaleY ** 2 + (1 / scaleX ** 2) * shearing.y ** 2)\n        : circleRadius / Math.sqrt(1 + shearing.y ** 2),\n      furthestY = new Point(\n        // Safe guard due to floating point precision. In some situations the square root\n        // was returning NaN because of a negative number close to zero.\n        Math.sqrt(Math.max(circleRadius ** 2 - newY ** 2, 0)),\n        newY\n      ),\n      newX = strokeUniform\n        ? circleRadius /\n          Math.sqrt(\n            1 +\n              (shearing.x ** 2 * (1 / scaleY) ** 2) /\n                (1 / scaleX + (1 / scaleX) * shearing.x * shearing.y) ** 2\n          )\n        : circleRadius /\n          Math.sqrt(1 + shearing.x ** 2 / (1 + shearing.x * shearing.y) ** 2),\n      furthestX = new Point(\n        newX,\n        Math.sqrt(Math.max(circleRadius ** 2 - newX ** 2, 0))\n      );\n\n    [\n      furthestX,\n      furthestX.scalarMultiply(-1),\n      furthestY,\n      furthestY.scalarMultiply(-1),\n    ]\n      // We need to skew the vector here as this information is used to check if\n      // it is between the start and end of the circle segment\n      .map((vector) =>\n        this.applySkew(\n          strokeUniform ? vector.multiply(this.strokeUniformScalar) : vector\n        )\n      )\n      .forEach((vector) => {\n        if (isBetweenVectors(vector, startCircle, endCircle)) {\n          projections.push(this.applySkew(this.A).add(vector));\n        }\n      });\n\n    return projections;\n  }\n\n  projectRound() {\n    const projections: Point[] = [];\n    /* Include the start and end points of the circle segment, so that only\n      the projections contained within it are included */\n    // add the orthogonal projections (start and end points of circle segment)\n    projections.push(...this.projectBevel());\n    // let's determines which one of the orthogonal projection is the beginning and end of the circle segment.\n    // when `alpha` equals 0 or 2*PI, we have a straight line, so the way to find the start/end is different.\n    const isStraightLine = this.alpha % twoMathPi === 0,\n      // change the origin of the projections to point A\n      // so that the cross product calculation is correct\n      newOrigin = this.applySkew(this.A),\n      proj0 = projections[isStraightLine ? 0 : 2].subtract(newOrigin),\n      proj1 = projections[isStraightLine ? 1 : 0].subtract(newOrigin),\n      // when `isStraightLine` === true, we compare with the vector opposite AB, otherwise we compare with the bisector.\n      comparisonVector = isStraightLine\n        ? this.applySkew(this.AB.scalarMultiply(-1))\n        : this.applySkew(\n            this.bisector.multiply(this.strokeUniformScalar).scalarMultiply(-1)\n          ),\n      // the beginning of the circle segment is always to the right of the comparison vector (cross product > 0)\n      isProj0Start = crossProduct(proj0, comparisonVector) > 0,\n      startCircle = isProj0Start ? proj0 : proj1,\n      endCircle = isProj0Start ? proj1 : proj0;\n    if (!this.isSkewed()) {\n      projections.push(...this.projectRoundNoSkew(startCircle, endCircle));\n    } else {\n      projections.push(...this.projectRoundWithSkew(startCircle, endCircle));\n    }\n    return projections;\n  }\n\n  /**\n   * Project stroke width on points returning projections for each point as follows:\n   * - `miter`: 1 point corresponding to the outer boundary. If the miter limit is exceeded, it will be 2 points (becomes bevel)\n   * - `bevel`: 2 points corresponding to the bevel possible boundaries, orthogonal to the stroke.\n   * - `round`: same as `bevel` when it has no skew, with skew are 4 points.\n   */\n  protected projectPoints() {\n    switch (this.options.strokeLineJoin) {\n      case 'miter':\n        return this.projectMiter();\n      case 'round':\n        return this.projectRound();\n      default:\n        return this.projectBevel();\n    }\n  }\n\n  public project(): TProjection[] {\n    return this.projectPoints().map((point) => ({\n      originPoint: this.A,\n      projectedPoint: point,\n      angle: this.alpha,\n      bisector: this.bisector,\n    }));\n  }\n}\n", "import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { getOrthonormalVector, getUnitVector } from '../vectors';\nimport { StrokeLineJoinProjections } from './StrokeLineJoinProjections';\nimport { StrokeProjectionsBase } from './StrokeProjectionsBase';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\n/**\n * class in charge of finding projections for each type of line cap for start/end of an open path\n * @see {@link [Open path projections at #8344](https://github.com/fabricjs/fabric.js/pull/8344#1-open-path)}\n *\n * Reference:\n * - MDN:\n *   - https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap\n *   - https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap\n * - Spec: https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-linecap-dev\n * - Playground to understand how the line joins works: https://hypertolosana.github.io/efficient-webgl-stroking/index.html\n * - View the calculated projections for each of the control points: https://codesandbox.io/s/project-stroke-points-with-context-to-trace-b8jc4j?file=/src/index.js\n */\nexport class StrokeLineCapProjections extends StrokeProjectionsBase {\n  /**\n   * edge point\n   */\n  declare A: Point;\n  /**\n   * point next to edge point\n   */\n  declare T: Point;\n\n  constructor(A: XY, T: XY, options: TProjectStrokeOnPointsOptions) {\n    super(options);\n    this.A = new Point(A);\n    this.T = new Point(T);\n  }\n\n  calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude: number = this.strokeProjectionMagnitude\n  ) {\n    const vector = this.createSideVector(from, to);\n    return this.scaleUnitVector(getOrthonormalVector(vector), magnitude);\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Butt\n   * Calculation: to find the projections, just find the points orthogonal to the stroke\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-1-butt\n   */\n  projectButt() {\n    return [\n      this.projectOrthogonally(this.A, this.T, this.strokeProjectionMagnitude),\n      this.projectOrthogonally(this.A, this.T, -this.strokeProjectionMagnitude),\n    ];\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Round\n   * Calculation: same as stroke line join `round`\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-2-round\n   */\n  projectRound() {\n    const projections: Point[] = [];\n\n    if (!this.isSkewed() && this.A.eq(this.T)) {\n      /* 1 point case without `skew`\n        When `strokeUniform` is true, scaling has no effect.\n        So we divide by scale, to remove its effect.\n      */\n      const projection = new Point(1, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar);\n      projections.push(\n        this.applySkew(this.A.add(projection)),\n        this.applySkew(this.A.subtract(projection))\n      );\n    } else {\n      projections.push(\n        ...new StrokeLineJoinProjections(\n          this.A,\n          this.T,\n          this.T,\n          this.options\n        ).projectRound()\n      );\n    }\n\n    return projections;\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Square\n   * Calculation: project a rectangle of points on the stroke in the opposite direction of the vector `AT`\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-3-square\n   */\n  projectSquare() {\n    const projections: Point[] = [];\n\n    if (this.A.eq(this.T)) {\n      /* 1 point case without `skew`\n        When `strokeUniform` is true, scaling has no effect.\n        So we divide by scale, to remove its effect.\n      */\n      const projection = new Point(1, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar);\n      projections.push(this.A.add(projection), this.A.subtract(projection));\n    } else {\n      const orthogonalProjection = this.calcOrthogonalProjection(\n        this.A,\n        this.T,\n        this.strokeProjectionMagnitude\n      );\n      const strokePointingOut = this.scaleUnitVector(\n        getUnitVector(this.createSideVector(this.A, this.T)),\n        -this.strokeProjectionMagnitude\n      );\n      const projectedA = this.A.add(strokePointingOut);\n      projections.push(\n        projectedA.add(orthogonalProjection),\n        projectedA.subtract(orthogonalProjection)\n      );\n    }\n\n    return projections.map((p) => this.applySkew(p));\n  }\n\n  protected projectPoints() {\n    switch (this.options.strokeLineCap) {\n      case 'round':\n        return this.projectRound();\n      case 'square':\n        return this.projectSquare();\n      default:\n        return this.projectButt();\n    }\n  }\n\n  public project(): TProjection[] {\n    return this.projectPoints().map((point) => ({\n      originPoint: this.A,\n      projectedPoint: point,\n    }));\n  }\n}\n", "import { Point, type XY } from '../../../Point';\nimport { findIndexRight } from '../../internals';\nimport { StrokeLineCapProjections } from './StrokeLineCapProjections';\nimport { StrokeLineJoinProjections } from './StrokeLineJoinProjections';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\nexport * from './types';\n\n/**\n *\n * Used to calculate object's bounding box\n *\n * @see https://github.com/fabricjs/fabric.js/pull/8344\n *\n */\nexport const projectStrokeOnPoints = (\n  points: XY[],\n  options: TProjectStrokeOnPointsOptions,\n  openPath = false\n): TProjection[] => {\n  const projections: TProjection[] = [];\n\n  if (points.length === 0) {\n    return projections;\n  }\n\n  // first we remove duplicate neighboring points\n  const reduced = points.reduce(\n    (reduced, point) => {\n      if (!reduced[reduced.length - 1].eq(point)) {\n        reduced.push(new Point(point));\n      }\n      return reduced;\n    },\n    [new Point(points[0])]\n  );\n\n  if (reduced.length === 1) {\n    openPath = true;\n  } else if (!openPath) {\n    // remove points from end in case they equal the first point\n    // in order to correctly project the first point\n    const start = reduced[0];\n    const index = findIndexRight(reduced, (point) => !point.eq(start));\n    reduced.splice(index + 1);\n  }\n\n  reduced.forEach((A, index, points) => {\n    let B: XY, C: XY;\n    if (index === 0) {\n      C = points[1];\n      B = openPath ? A : points[points.length - 1];\n    } else if (index === points.length - 1) {\n      B = points[index - 1];\n      C = openPath ? A : points[0];\n    } else {\n      B = points[index - 1];\n      C = points[index + 1];\n    }\n\n    if (openPath && points.length === 1) {\n      projections.push(\n        ...new StrokeLineCapProjections(A, A, options).project()\n      );\n    } else if (openPath && (index === 0 || index === points.length - 1)) {\n      projections.push(\n        ...new StrokeLineCapProjections(\n          A,\n          index === 0 ? C : B,\n          options\n        ).project()\n      );\n    } else {\n      projections.push(\n        ...new StrokeLineJoinProjections(A, B, C, options).project()\n      );\n    }\n  });\n\n  return projections;\n};\n", "/**\n * Capitalizes a string\n * @param {String} string String to capitalize\n * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\n * and other letters stay untouched, if false first letter is capitalized\n * and other letters are converted to lowercase.\n * @return {String} Capitalized version of a string\n */\nexport const capitalize = (string: string, firstLetterOnly = false): string =>\n  `${string.charAt(0).toUpperCase()}${\n    firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase()\n  }`;\n\n/**\n * Escapes XML in a string\n * @param {String} string String to escape\n * @return {String} Escaped version of a string\n */\nexport const escapeXml = (string: string): string =>\n  string\n    .replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&apos;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n\n/**\n * Divide a string in the user perceived single units\n * @param {String} textstring String to escape\n * @return {Array} array containing the graphemes\n */\nexport const graphemeSplit = (textstring: string): string[] => {\n  const graphemes = [];\n  for (let i = 0, chr; i < textstring.length; i++) {\n    if ((chr = getWholeChar(textstring, i)) === false) {\n      continue;\n    }\n    graphemes.push(chr as string);\n  }\n  return graphemes;\n};\n\n// taken from mdn in the charAt doc page.\nconst getWholeChar = (str: string, i: number): string | boolean => {\n  const code = str.charCodeAt(i);\n  if (isNaN(code)) {\n    return ''; // Position not found\n  }\n  if (code < 0xd800 || code > 0xdfff) {\n    return str.charAt(i);\n  }\n\n  // High surrogate (could change last hex to 0xDB7F to treat high private\n  // surrogates as single characters)\n  if (0xd800 <= code && code <= 0xdbff) {\n    if (str.length <= i + 1) {\n      throw 'High surrogate without following low surrogate';\n    }\n    const next = str.charCodeAt(i + 1);\n    if (0xdc00 > next || next > 0xdfff) {\n      throw 'High surrogate without following low surrogate';\n    }\n    return str.charAt(i) + str.charAt(i + 1);\n  }\n  // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n  if (i === 0) {\n    throw 'Low surrogate without preceding high surrogate';\n  }\n  const prev = str.charCodeAt(i - 1);\n\n  // (could change last hex to 0xDB7F to treat high private\n  // surrogates as single characters)\n  if (0xd800 > prev || prev > 0xdbff) {\n    throw 'Low surrogate without preceding high surrogate';\n  }\n  // We can pass over low surrogates now as the second component\n  // in a pair which we have already processed\n  return false;\n};\n", "import { reNewline } from '../../constants';\nimport type {\n  TextStyle,\n  TextStyleDeclaration,\n} from '../../shapes/Text/StyledText';\nimport { cloneDeep } from '../internals/cloneDeep';\nimport { graphemeSplit } from '../lang_string';\n\nexport type TextStyleArray = {\n  start: number;\n  end: number;\n  style: TextStyleDeclaration;\n}[];\n\n/**\n * @param {Object} prevStyle first style to compare\n * @param {Object} thisStyle second style to compare\n * @param {boolean} forTextSpans whether to check overline, underline, and line-through properties\n * @return {boolean} true if the style changed\n */\nexport const hasStyleChanged = (\n  prevStyle: TextStyleDeclaration,\n  thisStyle: TextStyleDeclaration,\n  forTextSpans = false\n) =>\n  prevStyle.fill !== thisStyle.fill ||\n  prevStyle.stroke !== thisStyle.stroke ||\n  prevStyle.strokeWidth !== thisStyle.strokeWidth ||\n  prevStyle.fontSize !== thisStyle.fontSize ||\n  prevStyle.fontFamily !== thisStyle.fontFamily ||\n  prevStyle.fontWeight !== thisStyle.fontWeight ||\n  prevStyle.fontStyle !== thisStyle.fontStyle ||\n  prevStyle.textBackgroundColor !== thisStyle.textBackgroundColor ||\n  prevStyle.deltaY !== thisStyle.deltaY ||\n  (forTextSpans &&\n    (prevStyle.overline !== thisStyle.overline ||\n      prevStyle.underline !== thisStyle.underline ||\n      prevStyle.linethrough !== thisStyle.linethrough));\n\n/**\n * Returns the array form of a text object's inline styles property with styles grouped in ranges\n * rather than per character. This format is less verbose, and is better suited for storage\n * so it is used in serialization (not during runtime).\n * @param {object} styles per character styles for a text object\n * @param {String} text the text string that the styles are applied to\n * @return {{start: number, end: number, style: object}[]}\n */\nexport const stylesToArray = (\n  styles: TextStyle,\n  text: string\n): TextStyleArray => {\n  const textLines = text.split('\\n'),\n    stylesArray = [];\n  let charIndex = -1,\n    prevStyle = {};\n  // clone style structure to prevent mutation\n  styles = cloneDeep(styles);\n\n  //loop through each textLine\n  for (let i = 0; i < textLines.length; i++) {\n    const chars = graphemeSplit(textLines[i]);\n    if (!styles[i]) {\n      //no styles exist for this line, so add the line's length to the charIndex total and reset prevStyle\n      charIndex += chars.length;\n      prevStyle = {};\n      continue;\n    }\n    //loop through each character of the current line\n    for (let c = 0; c < chars.length; c++) {\n      charIndex++;\n      const thisStyle = styles[i][c];\n      //check if style exists for this character\n      if (thisStyle && Object.keys(thisStyle).length > 0) {\n        if (hasStyleChanged(prevStyle, thisStyle, true)) {\n          stylesArray.push({\n            start: charIndex,\n            end: charIndex + 1,\n            style: thisStyle,\n          });\n        } else {\n          //if style is the same as previous character, increase end index\n          stylesArray[stylesArray.length - 1].end++;\n        }\n      }\n      prevStyle = thisStyle || {};\n    }\n  }\n  return stylesArray;\n};\n\n/**\n * Returns the object form of the styles property with styles that are assigned per\n * character rather than grouped by range. This format is more verbose, and is\n * only used during runtime (not for serialization/storage)\n * @param {Array} styles the serialized form of a text object's styles\n * @param {String} text the text string that the styles are applied to\n * @return {Object}\n */\nexport const stylesFromArray = (\n  styles: TextStyleArray | TextStyle,\n  text: string\n): TextStyle => {\n  if (!Array.isArray(styles)) {\n    // clone to prevent mutation\n    return cloneDeep(styles);\n  }\n  const textLines = text.split(reNewline),\n    stylesObject: TextStyle = {};\n  let charIndex = -1,\n    styleIndex = 0;\n  //loop through each textLine\n  for (let i = 0; i < textLines.length; i++) {\n    const chars = graphemeSplit(textLines[i]);\n\n    //loop through each character of the current line\n    for (let c = 0; c < chars.length; c++) {\n      charIndex++;\n      //check if there's a style collection that includes the current character\n      if (\n        styles[styleIndex] &&\n        styles[styleIndex].start <= charIndex &&\n        charIndex < styles[styleIndex].end\n      ) {\n        //create object for line index if it doesn't exist\n        stylesObject[i] = stylesObject[i] || {};\n        //assign a style at this character's index\n        stylesObject[i][c] = { ...styles[styleIndex].style };\n        //if character is at the end of the current style collection, move to the next\n        if (charIndex === styles[styleIndex].end - 1) {\n          styleIndex++;\n        }\n      }\n    }\n  }\n  return stylesObject;\n};\n", "/**\n * Attributes parsed from all SVG elements\n * @type array\n */\nexport const SHARED_ATTRIBUTES = [\n  'display',\n  'transform',\n  'fill',\n  'fill-opacity',\n  'fill-rule',\n  'opacity',\n  'stroke',\n  'stroke-dasharray',\n  'stroke-linecap',\n  'stroke-dashoffset',\n  'stroke-linejoin',\n  'stroke-miterlimit',\n  'stroke-opacity',\n  'stroke-width',\n  'id',\n  'paint-order',\n  'vector-effect',\n  'instantiated_by_use',\n  'clip-path',\n];\n", "export function selectorMatches(element: HTMLElement, selector: string) {\n  const nodeName = element.nodeName;\n  const classNames = element.getAttribute('class');\n  const id = element.getAttribute('id');\n  const azAz = '(?![a-zA-Z\\\\-]+)';\n  let matcher;\n  // i check if a selector matches slicing away part from it.\n  // if i get empty string i should match\n  matcher = new RegExp('^' + nodeName, 'i');\n  selector = selector.replace(matcher, '');\n  if (id && selector.length) {\n    matcher = new RegExp('#' + id + azAz, 'i');\n    selector = selector.replace(matcher, '');\n  }\n  if (classNames && selector.length) {\n    const splitClassNames = classNames.split(' ');\n    for (let i = splitClassNames.length; i--; ) {\n      matcher = new RegExp('\\\\.' + splitClassNames[i] + azAz, 'i');\n      selector = selector.replace(matcher, '');\n    }\n  }\n  return selector.length === 0;\n}\n", "import { selectorMatches } from './selectorMatches';\nimport { doesSomeParentMatch } from './doesSomeParentMatch';\n\n/**\n * @private\n */\n\nexport function elementMatchesRule(element: HTMLElement, selectors: string[]) {\n  let parentMatching = true;\n  // start from rightmost selector.\n  const firstMatching = selectorMatches(element, selectors.pop()!);\n  if (firstMatching && selectors.length) {\n    parentMatching = doesSomeParentMatch(element, selectors);\n  }\n  return firstMatching && parentMatching && selectors.length === 0;\n}\n", "import { selectorMatches } from './selectorMatches';\n\nexport function doesSomeParentMatch(element: HTMLElement, selectors: string[]) {\n  let selector: string,\n    parentMatching = true;\n  while (\n    element.parentElement &&\n    element.parentElement.nodeType === 1 &&\n    selectors.length\n  ) {\n    if (parentMatching) {\n      selector = selectors.pop()!;\n    }\n    element = element.parentElement;\n    parentMatching = selectorMatches(element, selector!);\n  }\n  return selectors.length === 0;\n}\n", "import { attributesMap } from './constants';\n\nexport const normalizeAttr = (\n  attr: keyof typeof attributesMap | string\n): string => attributesMap[attr as keyof typeof attributesMap] ?? attr;\n", "import { reNum } from '../../parser/constants';\n\nconst regex = new RegExp(`(${reNum})`, 'gi');\n\nexport const cleanupSvgAttribute = (attributeValue: string) =>\n  attributeValue\n    .replace(regex, ' $1 ')\n    // replace annoying commas and arbitrary whitespace with single spaces\n    .replace(/,/gi, ' ')\n    .replace(/\\s+/gi, ' ');\n", "import { iMatrix } from '../constants';\nimport { reNum } from './constants';\nimport type { TMat2D } from '../typedefs';\nimport { cleanupSvgAttribute } from '../util/internals/cleanupSvgAttribute';\nimport {\n  createRotateMatrix,\n  createScaleMatrix,\n  createSkewXMatrix,\n  createSkewYMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrixArray,\n} from '../util/misc/matrix';\n\n// == begin transform regexp\nconst p = `(${reNum})`;\nconst skewX = String.raw`(skewX)\\(${p}\\)`;\nconst skewY = String.raw`(skewY)\\(${p}\\)`;\nconst rotate = String.raw`(rotate)\\(${p}(?: ${p} ${p})?\\)`;\nconst scale = String.raw`(scale)\\(${p}(?: ${p})?\\)`;\nconst translate = String.raw`(translate)\\(${p}(?: ${p})?\\)`;\nconst matrix = String.raw`(matrix)\\(${p} ${p} ${p} ${p} ${p} ${p}\\)`;\nconst transform = `(?:${matrix}|${translate}|${rotate}|${scale}|${skewX}|${skewY})`;\nconst transforms = `(?:${transform}*)`;\nconst transformList = String.raw`^\\s*(?:${transforms}?)\\s*$`;\n// http://www.w3.org/TR/SVG/coords.html#TransformAttribute\nconst reTransformList = new RegExp(transformList);\nconst reTransform = new RegExp(transform);\nconst reTransformAll = new RegExp(transform, 'g');\n// == end transform regexp\n\n/**\n * Parses \"transform\" attribute, returning an array of values\n * @static\n * @function\n * @memberOf fabric\n * @param {String} attributeValue String containing attribute value\n * @return {TTransformMatrix} Array of 6 elements representing transformation matrix\n */\nexport function parseTransformAttribute(attributeValue: string): TMat2D {\n  // first we clean the string\n  attributeValue = cleanupSvgAttribute(attributeValue)\n    // remove spaces around front parentheses\n    .replace(/\\s*([()])\\s*/gi, '$1');\n\n  // start with identity matrix\n  const matrices: TMat2D[] = [];\n\n  // return if no argument was given or\n  // an argument does not match transform attribute regexp\n  if (\n    !attributeValue ||\n    (attributeValue && !reTransformList.test(attributeValue))\n  ) {\n    return [...iMatrix];\n  }\n\n  for (const match of attributeValue.matchAll(reTransformAll)) {\n    const transformMatch = reTransform.exec(match[0]);\n    if (!transformMatch) {\n      continue;\n    }\n    let matrix: TMat2D = iMatrix;\n    const matchedParams = transformMatch.filter((m) => !!m);\n    const [, operation, ...rawArgs] = matchedParams;\n    const [arg0, arg1, arg2, arg3, arg4, arg5] = rawArgs.map((arg) =>\n      parseFloat(arg)\n    );\n\n    switch (operation) {\n      case 'translate':\n        matrix = createTranslateMatrix(arg0, arg1);\n        break;\n      case 'rotate':\n        matrix = createRotateMatrix({ angle: arg0 }, { x: arg1, y: arg2 });\n        break;\n      case 'scale':\n        matrix = createScaleMatrix(arg0, arg1);\n        break;\n      case 'skewX':\n        matrix = createSkewXMatrix(arg0);\n        break;\n      case 'skewY':\n        matrix = createSkewYMatrix(arg0);\n        break;\n      case 'matrix':\n        matrix = [arg0, arg1, arg2, arg3, arg4, arg5];\n        break;\n    }\n\n    // snapshot current matrix into matrices array\n    matrices.push(matrix);\n  }\n\n  return multiplyTransformMatrixArray(matrices);\n}\n", "import { multiplyTransformMatrices } from '../util/misc/matrix';\nimport { parseUnit } from '../util/misc/svgParsing';\nimport { parseTransformAttribute } from './parseTransformAttribute';\nimport { CENTER, LEFT, RIGHT, NONE } from '../constants';\n\nexport function normalizeValue(\n  attr: string,\n  value: any,\n  parentAttributes: Record<string, any>,\n  fontSize: number\n): string | null | boolean | number[] | number {\n  const isArray = Array.isArray(value);\n  let parsed: number | number[];\n  let ouputValue: string | null | boolean | number[] | number = value;\n  if ((attr === 'fill' || attr === 'stroke') && value === NONE) {\n    ouputValue = '';\n  } else if (attr === 'strokeUniform') {\n    return value === 'non-scaling-stroke';\n  } else if (attr === 'strokeDashArray') {\n    if (value === NONE) {\n      ouputValue = null;\n    } else {\n      ouputValue = value.replace(/,/g, ' ').split(/\\s+/).map(parseFloat);\n    }\n  } else if (attr === 'transformMatrix') {\n    if (parentAttributes && parentAttributes.transformMatrix) {\n      ouputValue = multiplyTransformMatrices(\n        parentAttributes.transformMatrix,\n        parseTransformAttribute(value)\n      );\n    } else {\n      ouputValue = parseTransformAttribute(value);\n    }\n  } else if (attr === 'visible') {\n    ouputValue = value !== NONE && value !== 'hidden';\n    // display=none on parent element always takes precedence over child element\n    if (parentAttributes && parentAttributes.visible === false) {\n      ouputValue = false;\n    }\n  } else if (attr === 'opacity') {\n    ouputValue = parseFloat(value);\n    if (parentAttributes && typeof parentAttributes.opacity !== 'undefined') {\n      ouputValue *= parentAttributes.opacity as number;\n    }\n  } else if (attr === 'textAnchor' /* text-anchor */) {\n    ouputValue = value === 'start' ? LEFT : value === 'end' ? RIGHT : CENTER;\n  } else if (attr === 'charSpacing') {\n    // parseUnit returns px and we convert it to em\n    parsed = (parseUnit(value, fontSize) / fontSize) * 1000;\n  } else if (attr === 'paintFirst') {\n    const fillIndex = value.indexOf('fill');\n    const strokeIndex = value.indexOf('stroke');\n    ouputValue = 'fill';\n    if (fillIndex > -1 && strokeIndex > -1 && strokeIndex < fillIndex) {\n      ouputValue = 'stroke';\n    } else if (fillIndex === -1 && strokeIndex > -1) {\n      ouputValue = 'stroke';\n    }\n  } else if (attr === 'href' || attr === 'xlink:href' || attr === 'font') {\n    return value;\n  } else if (attr === 'imageSmoothing') {\n    return value === 'optimizeQuality';\n  } else {\n    parsed = isArray\n      ? (value as string[]).map(parseUnit)\n      : parseUnit(value, fontSize);\n  }\n\n  return !isArray && isNaN(parsed! as number) ? ouputValue : parsed!;\n}\n", "import { parseUnit } from '../util/misc/svgParsing';\nimport { reFontDeclaration } from './constants';\n\n/**\n * Parses a short font declaration, building adding its properties to a style object\n * @static\n * @function\n * @memberOf fabric\n * @param {String} value font declaration\n * @param {Object} oStyle definition\n */\nexport function parseFontDeclaration(\n  value: string,\n  oStyle: Record<string, any>\n): void {\n  const match = value.match(reFontDeclaration);\n\n  if (!match) {\n    return;\n  }\n  const fontStyle = match[1],\n    // font variant is not used\n    // fontVariant = match[2],\n    fontWeight = match[3],\n    fontSize = match[4],\n    lineHeight = match[5],\n    fontFamily = match[6];\n\n  if (fontStyle) {\n    oStyle.fontStyle = fontStyle;\n  }\n  if (fontWeight) {\n    oStyle.fontWeight = isNaN(parseFloat(fontWeight))\n      ? fontWeight\n      : parseFloat(fontWeight);\n  }\n  if (fontSize) {\n    oStyle.fontSize = parseUnit(fontSize);\n  }\n  if (fontFamily) {\n    oStyle.fontFamily = fontFamily;\n  }\n  if (lineHeight) {\n    oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;\n  }\n}\n", "import { parseStyleObject } from './parseStyleObject';\nimport { parseStyleString } from './parseStyleString';\n\n/**\n * Parses \"style\" attribute, retuning an object with values\n * @static\n * @memberOf fabric\n * @param {SVGElement} element Element to parse\n * @return {Object} Objects with values parsed from style attribute of an element\n */\nexport function parseStyleAttribute(element: HTMLElement): Record<string, any> {\n  const oStyle: Record<string, any> = {},\n    style = element.getAttribute('style');\n\n  if (!style) {\n    return oStyle;\n  }\n\n  if (typeof style === 'string') {\n    parseStyleString(style, oStyle);\n  } else {\n    parseStyleObject(style, oStyle);\n  }\n\n  return oStyle;\n}\n", "/**\n * Takes a style string and parses it in one that has only defined values\n * and lowercases properties\n * @param style\n * @param oStyle\n */\nexport function parseStyleString(\n  style: string,\n  oStyle: Record<string, any>\n): void {\n  style\n    .replace(/;\\s*$/, '')\n    .split(';')\n    .forEach((chunk) => {\n      const [attr, value] = chunk.split(':');\n      oStyle[attr.trim().toLowerCase()] = value.trim();\n    });\n}\n", "/**\n * Takes a style object and parses it in one that has only defined values\n * and lowercases properties\n * @param style\n * @param oStyle\n */\nexport function parseStyleObject(\n  style: Record<string, any>,\n  oStyle: Record<string, any>\n): void {\n  Object.entries(style).forEach(([prop, value]) => {\n    if (value === undefined) {\n      return;\n    }\n    oStyle[prop.toLowerCase()] = value;\n  });\n}\n", "import { Color } from '../color/Color';\nimport { toFixed } from '../util/misc/toFixed';\nimport { FabricObject } from '../shapes/Object/FabricObject';\n\nconst colorAttributesMap = {\n  stroke: 'strokeOpacity',\n  fill: 'fillOpacity',\n};\n\n/**\n * @private\n * @param {Object} attributes Array of attributes to parse\n */\n\nexport function setStrokeFillOpacity(\n  attributes: Record<string, any>\n): Record<string, any> {\n  const defaults = FabricObject.getDefaults();\n  Object.entries(colorAttributesMap).forEach(([attr, colorAttr]) => {\n    if (\n      typeof attributes[colorAttr] === 'undefined' ||\n      attributes[attr] === ''\n    ) {\n      return;\n    }\n    if (typeof attributes[attr] === 'undefined') {\n      if (!defaults[attr]) {\n        return;\n      }\n      attributes[attr] = defaults[attr];\n    }\n    if (attributes[attr].indexOf('url(') === 0) {\n      return;\n    }\n    const color = new Color(attributes[attr]);\n    attributes[attr] = color\n      .setAlpha(toFixed(color.getAlpha() * attributes[colorAttr], 2))\n      .toRgba();\n  });\n  return attributes;\n}\n", "import { DEFAULT_SVG_FONT_SIZE } from '../constants';\nimport { parseUnit } from '../util/misc/svgParsing';\nimport { cPath, fSize, svgValidParentsRegEx } from './constants';\nimport { getGlobalStylesForElement } from './getGlobalStylesForElement';\nimport { normalizeAttr } from './normalizeAttr';\nimport { normalizeValue } from './normalizeValue';\nimport { parseFontDeclaration } from './parseFontDeclaration';\nimport { parseStyleAttribute } from './parseStyleAttribute';\nimport { setStrokeFillOpacity } from './setStrokeFillOpacity';\nimport type { CSSRules } from './typedefs';\n\n/**\n * Returns an object of attributes' name/value, given element and an array of attribute names;\n * Parses parent \"g\" nodes recursively upwards.\n * @param {SVGElement | HTMLElement} element Element to parse\n * @param {Array} attributes Array of attributes to parse\n * @return {Object} object containing parsed attributes' names/values\n */\nexport function parseAttributes(\n  element: HTMLElement | null,\n  attributes: string[],\n  cssRules?: CSSRules\n): Record<string, any> {\n  if (!element) {\n    return {};\n  }\n\n  let parentAttributes: Record<string, string> = {},\n    fontSize: number,\n    parentFontSize = DEFAULT_SVG_FONT_SIZE;\n\n  // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards\n  if (\n    element.parentNode &&\n    svgValidParentsRegEx.test(element.parentNode.nodeName)\n  ) {\n    parentAttributes = parseAttributes(\n      element.parentElement,\n      attributes,\n      cssRules\n    );\n    if (parentAttributes.fontSize) {\n      fontSize = parentFontSize = parseUnit(parentAttributes.fontSize);\n    }\n  }\n\n  const ownAttributes: Record<string, string> = {\n    ...attributes.reduce<Record<string, string>>((memo, attr) => {\n      const value = element.getAttribute(attr);\n      if (value) {\n        memo[attr] = value;\n      }\n      return memo;\n    }, {}),\n    // add values parsed from style, which take precedence over attributes\n    // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)\n    ...getGlobalStylesForElement(element, cssRules),\n    ...parseStyleAttribute(element),\n  };\n\n  if (ownAttributes[cPath]) {\n    element.setAttribute(cPath, ownAttributes[cPath]);\n  }\n  if (ownAttributes[fSize]) {\n    // looks like the minimum should be 9px when dealing with ems. this is what looks like in browsers.\n    fontSize = parseUnit(ownAttributes[fSize], parentFontSize);\n    ownAttributes[fSize] = `${fontSize}`;\n  }\n\n  // this should have its own complex type\n  const normalizedStyle: Record<\n    string,\n    string | boolean | number | number[] | null\n  > = {};\n  for (const attr in ownAttributes) {\n    const normalizedAttr = normalizeAttr(attr);\n    const normalizedValue = normalizeValue(\n      normalizedAttr,\n      ownAttributes[attr],\n      parentAttributes,\n      fontSize!\n    );\n    normalizedStyle[normalizedAttr] = normalizedValue;\n  }\n  if (normalizedStyle && normalizedStyle.font) {\n    parseFontDeclaration(normalizedStyle.font as string, normalizedStyle);\n  }\n  const mergedAttrs = { ...parentAttributes, ...normalizedStyle };\n  return svgValidParentsRegEx.test(element.nodeName)\n    ? mergedAttrs\n    : setStrokeFillOpacity(mergedAttrs);\n}\n", "import { elementMatchesRule } from './elementMatchesRule';\nimport type { CSSRules } from './typedefs';\n\n/**\n * @private\n */\n\nexport function getGlobalStylesForElement(\n  element: HTMLElement,\n  cssRules: CSSRules = {}\n) {\n  let styles: Record<string, string> = {};\n  for (const rule in cssRules) {\n    if (elementMatchesRule(element, rule.split(' '))) {\n      styles = {\n        ...styles,\n        ...cssRules[rule],\n      };\n    }\n  }\n  return styles;\n}\n", "import { kRect } from '../constants';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const rectDefaultValues: Partial<TClassProperties<Rect>> = {\n  rx: 0,\n  ry: 0,\n};\n\ninterface UniqueRectProps {\n  rx: number;\n  ry: number;\n}\n\nexport interface SerializedRectProps\n  extends SerializedObjectProps,\n    UniqueRectProps {}\n\nexport interface RectProps extends FabricObjectProps, UniqueRectProps {}\n\nconst RECT_PROPS = ['rx', 'ry'] as const;\n\nexport class Rect<\n    Props extends TOptions<RectProps> = Partial<RectProps>,\n    SProps extends SerializedRectProps = SerializedRectProps,\n    EventSpec extends ObjectEvents = ObjectEvents\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements RectProps\n{\n  /**\n   * Horizontal border radius\n   * @type Number\n   * @default\n   */\n  declare rx: number;\n\n  /**\n   * Vertical border radius\n   * @type Number\n   * @default\n   */\n  declare ry: number;\n\n  static type = 'Rect';\n\n  static cacheProperties = [...cacheProperties, ...RECT_PROPS];\n\n  static ownDefaults = rectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Rect.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Rect.ownDefaults);\n    this.setOptions(options);\n    this._initRxRy();\n  }\n  /**\n   * Initializes rx/ry attributes\n   * @private\n   */\n  _initRxRy() {\n    const { rx, ry } = this;\n    if (rx && !ry) {\n      this.ry = rx;\n    } else if (ry && !rx) {\n      this.rx = ry;\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const { width: w, height: h } = this;\n    const x = -w / 2;\n    const y = -h / 2;\n    const rx = this.rx ? Math.min(this.rx, w / 2) : 0;\n    const ry = this.ry ? Math.min(this.ry, h / 2) : 0;\n    const isRounded = rx !== 0 || ry !== 0;\n\n    ctx.beginPath();\n\n    ctx.moveTo(x + rx, y);\n\n    ctx.lineTo(x + w - rx, y);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + w - kRect * rx,\n        y,\n        x + w,\n        y + kRect * ry,\n        x + w,\n        y + ry\n      );\n\n    ctx.lineTo(x + w, y + h - ry);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + w,\n        y + h - kRect * ry,\n        x + w - kRect * rx,\n        y + h,\n        x + w - rx,\n        y + h\n      );\n\n    ctx.lineTo(x + rx, y + h);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + kRect * rx,\n        y + h,\n        x,\n        y + h - kRect * ry,\n        x,\n        y + h - ry\n      );\n\n    ctx.lineTo(x, y + ry);\n    isRounded &&\n      ctx.bezierCurveTo(x, y + kRect * ry, x + kRect * rx, y, x + rx, y);\n\n    ctx.closePath();\n\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...RECT_PROPS, ...propertiesToInclude]);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const { width, height, rx, ry } = this;\n    return [\n      '<rect ',\n      'COMMON_PARTS',\n      `x=\"${-width / 2}\" y=\"${\n        -height / 2\n      }\" rx=\"${rx}\" ry=\"${ry}\" width=\"${width}\" height=\"${height}\" />\\n`,\n    ];\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `Rect.fromElement`)\n   * @static\n   * @memberOf Rect\n   * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement\n   */\n  static ATTRIBUTE_NAMES = [\n    ...SHARED_ATTRIBUTES,\n    'x',\n    'y',\n    'rx',\n    'ry',\n    'width',\n    'height',\n  ];\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * Returns {@link Rect} instance from an SVG element\n   * @static\n   * @memberOf Rect\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules\n  ) {\n    const {\n      left = 0,\n      top = 0,\n      width = 0,\n      height = 0,\n      visible = true,\n      ...restOfparsedAttributes\n    } = parseAttributes(element, this.ATTRIBUTE_NAMES, cssRules);\n\n    return new this({\n      ...options,\n      ...restOfparsedAttributes,\n      left,\n      top,\n      width,\n      height,\n      visible: Boolean(visible && width && height),\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Rect);\nclassRegistry.setSVGClass(Rect);\n", "export const LAYOUT_TYPE_INITIALIZATION = 'initialization';\nexport const LAYOUT_TYPE_ADDED = 'added';\nexport const LAYOUT_TYPE_REMOVED = 'removed';\nexport const LAYOUT_TYPE_IMPERATIVE = 'imperative';\nexport const LAYOUT_TYPE_OBJECT_MODIFIED = 'object_modified';\nexport const LAYOUT_TYPE_OBJECT_MODIFYING = 'object_modifying';\n", "import { Point, ZERO } from '../../Point';\nimport type { Group } from '../../shapes/Group';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { multiplyTransformMatrixArray } from '../../util/misc/matrix';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport {\n  calcPlaneChangeMatrix,\n  sendVectorToPlane,\n} from '../../util/misc/planeChange';\n\n/**\n * @returns 2 points, the tl and br corners of the non rotated bounding box of an object\n * in the {@link group} plane, taking into account objects that {@link group} is their parent\n * but also belong to the active selection.\n */\nexport const getObjectBounds = (\n  destinationGroup: Group,\n  object: FabricObject\n): Point[] => {\n  const {\n    strokeUniform,\n    strokeWidth,\n    width,\n    height,\n    group: currentGroup,\n  } = object;\n  const t =\n    currentGroup && currentGroup !== destinationGroup\n      ? calcPlaneChangeMatrix(\n          currentGroup.calcTransformMatrix(),\n          destinationGroup.calcTransformMatrix()\n        )\n      : null;\n  const objectCenter = t\n    ? object.getRelativeCenterPoint().transform(t)\n    : object.getRelativeCenterPoint();\n  const accountForStroke = !object['isStrokeAccountedForInDimensions']();\n  const strokeUniformVector =\n    strokeUniform && accountForStroke\n      ? sendVectorToPlane(\n          new Point(strokeWidth, strokeWidth),\n          undefined,\n          destinationGroup.calcTransformMatrix()\n        )\n      : ZERO;\n  const scalingStrokeWidth =\n    !strokeUniform && accountForStroke ? strokeWidth : 0;\n  const sizeVector = sizeAfterTransform(\n    width + scalingStrokeWidth,\n    height + scalingStrokeWidth,\n    multiplyTransformMatrixArray([t, object.calcOwnMatrix()], true)\n  )\n    .add(strokeUniformVector)\n    .scalarDivide(2);\n  return [objectCenter.subtract(sizeVector), objectCenter.add(sizeVector)];\n};\n", "import { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport {\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_IMPERATIVE,\n} from '../constants';\nimport type {\n  InitializationLayoutContext,\n  LayoutStrategyResult,\n  StrictLayoutContext,\n} from '../types';\nimport { getObjectBounds } from './utils';\n\n/**\n * Exposes a main public method {@link calcLayoutResult} that is used by the `LayoutManager` to perform layout.\n * Returning `undefined` signals the `LayoutManager` to skip the layout.\n *\n * In charge of calculating the bounding box of the passed objects.\n */\nexport abstract class LayoutStrategy {\n  /**\n   * override by subclass for persistence (TS does not support `static abstract`)\n   */\n  static type = 'strategy';\n\n  /**\n   * Used by the `LayoutManager` to perform layout\n   * @TODO/fix: if this method is calcResult, should calc unconditionally.\n   * the condition to not calc should be evaluated by the layoutManager.\n   * @returns layout result **OR** `undefined` to skip layout\n   */\n  public calcLayoutResult(\n    context: StrictLayoutContext,\n    objects: FabricObject[]\n  ): LayoutStrategyResult | undefined {\n    if (this.shouldPerformLayout(context)) {\n      return this.calcBoundingBox(objects, context);\n    }\n  }\n\n  shouldPerformLayout(context: StrictLayoutContext) {\n    return (\n      context.type === LAYOUT_TYPE_INITIALIZATION ||\n      context.type === LAYOUT_TYPE_IMPERATIVE ||\n      (!!context.prevStrategy && context.strategy !== context.prevStrategy)\n    );\n  }\n\n  shouldLayoutClipPath({ type, target: { clipPath } }: StrictLayoutContext) {\n    return (\n      type !== LAYOUT_TYPE_INITIALIZATION &&\n      clipPath &&\n      !clipPath.absolutePositioned\n    );\n  }\n\n  getInitialSize(\n    context: StrictLayoutContext & InitializationLayoutContext,\n    result: Pick<LayoutStrategyResult, 'center' | 'size'>\n  ) {\n    return result.size;\n  }\n\n  /**\n   * Override this method to customize layout.\n   */\n  calcBoundingBox(\n    objects: FabricObject[],\n    context: StrictLayoutContext\n  ): LayoutStrategyResult | undefined {\n    if (context.type === LAYOUT_TYPE_IMPERATIVE && context.overrides) {\n      return context.overrides;\n    }\n    if (objects.length === 0) {\n      return;\n    }\n    const { target } = context;\n    const { left, top, width, height } = makeBoundingBoxFromPoints(\n      objects\n        .map((object) => getObjectBounds(target, object))\n        .reduce<Point[]>((coords, curr) => coords.concat(curr), [])\n    );\n    const bboxSize = new Point(width, height);\n    const bboxLeftTop = new Point(left, top);\n    const bboxCenter = bboxLeftTop.add(bboxSize.scalarDivide(2));\n\n    if (context.type === LAYOUT_TYPE_INITIALIZATION) {\n      const actualSize = this.getInitialSize(context, {\n        size: bboxSize,\n        center: bboxCenter,\n      });\n      return {\n        // in `initialization` we do not account for target's transformation matrix\n        center: bboxCenter,\n        // TODO: investigate if this is still necessary\n        relativeCorrection: new Point(0, 0),\n        size: actualSize,\n      };\n    } else {\n      //  we send `relativeCenter` up to group's containing plane\n      const center = bboxCenter.transform(target.calcOwnMatrix());\n      return {\n        center,\n        size: bboxSize,\n      };\n    }\n  }\n}\n", "import type { StrictLayoutContext } from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will adjust the bounding box to fit target's objects.\n */\nexport class FitContentLayout extends LayoutStrategy {\n  static readonly type = 'fit-content';\n\n  /**\n   * @override layout on all triggers\n   * Override at will\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  shouldPerformLayout(context: StrictLayoutContext) {\n    return true;\n  }\n}\n\nclassRegistry.setClass(FitContentLayout);\n", "import { Point } from '../Point';\nimport { CENTER, iMatrix } from '../constants';\nimport type { Group } from '../shapes/Group';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { invertTransform } from '../util/misc/matrix';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { FitContentLayout } from './LayoutStrategies/FitContentLayout';\nimport type { LayoutStrategy } from './LayoutStrategies/LayoutStrategy';\nimport {\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_REMOVED,\n  LAYOUT_TYPE_IMPERATIVE,\n  LAYOUT_TYPE_OBJECT_MODIFIED,\n  LAYOUT_TYPE_OBJECT_MODIFYING,\n} from './constants';\nimport type {\n  LayoutContext,\n  LayoutResult,\n  RegistrationContext,\n  StrictLayoutContext,\n} from './types';\nimport { classRegistry } from '../ClassRegistry';\nimport type { TModificationEvents } from '../EventTypeDefs';\n\nconst LAYOUT_MANAGER = 'layoutManager';\n\nexport type SerializedLayoutManager = {\n  type: string;\n  strategy: string;\n};\n\nexport class LayoutManager {\n  private declare _prevLayoutStrategy?: LayoutStrategy;\n  protected declare _subscriptions: Map<FabricObject, VoidFunction[]>;\n\n  strategy: LayoutStrategy;\n\n  constructor(strategy: LayoutStrategy = new FitContentLayout()) {\n    this.strategy = strategy;\n    this._subscriptions = new Map();\n  }\n\n  public performLayout(context: LayoutContext) {\n    const strictContext: StrictLayoutContext = {\n      bubbles: true,\n      strategy: this.strategy,\n      ...context,\n      prevStrategy: this._prevLayoutStrategy,\n      stopPropagation() {\n        this.bubbles = false;\n      },\n    };\n\n    this.onBeforeLayout(strictContext);\n\n    const layoutResult = this.getLayoutResult(strictContext);\n    if (layoutResult) {\n      this.commitLayout(strictContext, layoutResult);\n    }\n\n    this.onAfterLayout(strictContext, layoutResult);\n    this._prevLayoutStrategy = strictContext.strategy;\n  }\n\n  /**\n   * Attach handlers for events that we know will invalidate the layout when\n   * performed on child objects ( general transforms ).\n   * Returns the disposers for later unsubscribing and cleanup\n   * @param {FabricObject} object\n   * @param {RegistrationContext & Partial<StrictLayoutContext>} context\n   * @returns {VoidFunction[]} disposers remove the handlers\n   */\n  protected attachHandlers(\n    object: FabricObject,\n    context: RegistrationContext & Partial<StrictLayoutContext>\n  ): VoidFunction[] {\n    const { target } = context;\n    return (\n      [\n        'modified',\n        'moving',\n        'resizing',\n        'rotating',\n        'scaling',\n        'skewing',\n        'changed',\n        'modifyPoly',\n      ] as (TModificationEvents & 'modified')[]\n    ).map((key) =>\n      object.on(key, (e) =>\n        this.performLayout(\n          key === 'modified'\n            ? {\n                type: LAYOUT_TYPE_OBJECT_MODIFIED,\n                trigger: key,\n                e,\n                target,\n              }\n            : {\n                type: LAYOUT_TYPE_OBJECT_MODIFYING,\n                trigger: key,\n                e,\n                target,\n              }\n        )\n      )\n    );\n  }\n\n  /**\n   * Subscribe an object to transform events that will trigger a layout change on the parent\n   * This is important only for interactive groups.\n   * @param object\n   * @param context\n   */\n  protected subscribe(\n    object: FabricObject,\n    context: RegistrationContext & Partial<StrictLayoutContext>\n  ) {\n    this.unsubscribe(object, context);\n    const disposers = this.attachHandlers(object, context);\n    this._subscriptions.set(object, disposers);\n  }\n\n  /**\n   * unsubscribe object layout triggers\n   */\n  protected unsubscribe(\n    object: FabricObject,\n    context?: RegistrationContext & Partial<StrictLayoutContext>\n  ) {\n    (this._subscriptions.get(object) || []).forEach((d) => d());\n    this._subscriptions.delete(object);\n  }\n\n  unsubscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>\n  ) {\n    context.targets.forEach((object) => this.unsubscribe(object, context));\n  }\n\n  subscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>\n  ) {\n    context.targets.forEach((object) => this.subscribe(object, context));\n  }\n\n  protected onBeforeLayout(context: StrictLayoutContext) {\n    const { target, type } = context;\n    const { canvas } = target;\n    // handle layout triggers subscription\n    // @TODO: gate the registration when the group is interactive\n    if (type === LAYOUT_TYPE_INITIALIZATION || type === LAYOUT_TYPE_ADDED) {\n      this.subscribeTargets(context);\n    } else if (type === LAYOUT_TYPE_REMOVED) {\n      this.unsubscribeTargets(context);\n    }\n    // fire layout event (event will fire only for layouts after initialization layout)\n    target.fire('layout:before', {\n      context,\n    });\n    canvas &&\n      canvas.fire('object:layout:before', {\n        target,\n        context,\n      });\n\n    if (type === LAYOUT_TYPE_IMPERATIVE && context.deep) {\n      const { strategy: _, ...tricklingContext } = context;\n      // traverse the tree\n      target.forEachObject(\n        (object) =>\n          (object as Group).layoutManager &&\n          (object as Group).layoutManager.performLayout({\n            ...tricklingContext,\n            bubbles: false,\n            target: object as Group,\n          })\n      );\n    }\n  }\n\n  protected getLayoutResult(\n    context: StrictLayoutContext\n  ): Required<LayoutResult> | undefined {\n    const { target } = context;\n\n    const result = context.strategy.calcLayoutResult(\n      context,\n      target.getObjects()\n    );\n\n    if (!result) {\n      return;\n    }\n\n    const prevCenter =\n      context.type === LAYOUT_TYPE_INITIALIZATION\n        ? new Point()\n        : target.getRelativeCenterPoint();\n\n    const {\n      center: nextCenter,\n      correction = new Point(),\n      relativeCorrection = new Point(),\n    } = result;\n    const offset = prevCenter\n      .subtract(nextCenter)\n      .add(correction)\n      .transform(\n        // in `initialization` we do not account for target's transformation matrix\n        context.type === LAYOUT_TYPE_INITIALIZATION\n          ? iMatrix\n          : invertTransform(target.calcOwnMatrix()),\n        true\n      )\n      .add(relativeCorrection);\n\n    return {\n      result,\n      prevCenter,\n      nextCenter,\n      offset,\n    };\n  }\n\n  protected commitLayout(\n    context: StrictLayoutContext,\n    layoutResult: Required<LayoutResult>\n  ) {\n    const { target } = context;\n    const {\n      result: { size },\n      nextCenter,\n    } = layoutResult;\n    // set dimensions\n    target.set({ width: size.x, height: size.y });\n    // layout descendants\n    this.layoutObjects(context, layoutResult);\n    //  set position\n    // in `initialization` we do not account for target's transformation matrix\n    if (context.type === LAYOUT_TYPE_INITIALIZATION) {\n      // TODO: what about strokeWidth?\n      target.set({\n        left:\n          context.x ?? nextCenter.x + size.x * resolveOrigin(target.originX),\n        top: context.y ?? nextCenter.y + size.y * resolveOrigin(target.originY),\n      });\n    } else {\n      target.setPositionByOrigin(nextCenter, CENTER, CENTER);\n      // invalidate\n      target.setCoords();\n      target.set('dirty', true);\n    }\n  }\n\n  protected layoutObjects(\n    context: StrictLayoutContext,\n    layoutResult: Required<LayoutResult>\n  ) {\n    const { target } = context;\n    //  adjust objects to account for new center\n    target.forEachObject((object) => {\n      object.group === target &&\n        this.layoutObject(context, layoutResult, object);\n    });\n    // adjust clip path to account for new center\n    context.strategy.shouldLayoutClipPath(context) &&\n      this.layoutObject(context, layoutResult, target.clipPath as FabricObject);\n  }\n\n  /**\n   * @param {FabricObject} object\n   * @param {Point} offset\n   */\n  protected layoutObject(\n    context: StrictLayoutContext,\n    { offset }: Required<LayoutResult>,\n    object: FabricObject\n  ) {\n    // TODO: this is here for cache invalidation.\n    // verify if this is necessary since we have explicit\n    // cache invalidation at the end of commitLayout\n    object.set({\n      left: object.left + offset.x,\n      top: object.top + offset.y,\n    });\n  }\n\n  protected onAfterLayout(\n    context: StrictLayoutContext,\n    layoutResult?: LayoutResult\n  ) {\n    const {\n      target,\n      strategy,\n      bubbles,\n      prevStrategy: _,\n      ...bubblingContext\n    } = context;\n    const { canvas } = target;\n\n    //  fire layout event (event will fire only for layouts after initialization layout)\n    target.fire('layout:after', {\n      context,\n      result: layoutResult,\n    });\n    canvas &&\n      canvas.fire('object:layout:after', {\n        context,\n        result: layoutResult,\n        target,\n      });\n\n    //  bubble\n    const parent = target.parent;\n    if (bubbles && parent?.layoutManager) {\n      //  add target to context#path\n      (bubblingContext.path || (bubblingContext.path = [])).push(target);\n      //  all parents should invalidate their layout\n      parent.layoutManager.performLayout({\n        ...bubblingContext,\n        target: parent,\n      });\n    }\n    target.set('dirty', true);\n  }\n\n  dispose() {\n    this._subscriptions.forEach((disposers) => disposers.forEach((d) => d()));\n    this._subscriptions.clear();\n  }\n\n  toObject() {\n    return {\n      type: LAYOUT_MANAGER,\n      strategy: (this.strategy.constructor as typeof LayoutStrategy).type,\n    };\n  }\n\n  toJSON() {\n    return this.toObject();\n  }\n}\n\nclassRegistry.setClass(LayoutManager, LAYOUT_MANAGER);\n", "import type { CollectionEvents, ObjectEvents } from '../EventTypeDefs';\nimport { createCollectionMixin } from '../Collection';\nimport type {\n  TClassProperties,\n  TSVGReviver,\n  TOptions,\n  Abortable,\n} from '../typedefs';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n} from '../util/misc/matrix';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n} from '../util/misc/objectEnlive';\nimport { applyTransformToObject } from '../util/misc/objectTransforms';\nimport { FabricObject } from './Object/FabricObject';\nimport { Rect } from './Rect';\nimport { classRegistry } from '../ClassRegistry';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport { log } from '../util/internals/console';\nimport type {\n  ImperativeLayoutOptions,\n  LayoutBeforeEvent,\n  LayoutAfterEvent,\n} from '../LayoutManager/types';\nimport { LayoutManager } from '../LayoutManager/LayoutManager';\nimport {\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_IMPERATIVE,\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_REMOVED,\n} from '../LayoutManager/constants';\nimport type { SerializedLayoutManager } from '../LayoutManager/LayoutManager';\nimport type { FitContentLayout } from '../LayoutManager';\n\n/**\n * This class handles the specific case of creating a group using {@link Group#fromObject} and is not meant to be used in any other case.\n * We could have used a boolean in the constructor, as we did previously, but we think the boolean\n * would stay in the group's constructor interface and create confusion, therefore it was removed.\n * This layout manager doesn't do anything and therefore keeps the exact layout the group had when {@link Group#toObject} was called.\n */\nclass NoopLayoutManager extends LayoutManager {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  performLayout() {}\n}\n\nexport interface GroupEvents extends ObjectEvents, CollectionEvents {\n  'layout:before': LayoutBeforeEvent;\n  'layout:after': LayoutAfterEvent;\n}\n\nexport interface GroupOwnProps {\n  subTargetCheck: boolean;\n  interactive: boolean;\n}\n\nexport interface SerializedGroupProps\n  extends SerializedObjectProps,\n    GroupOwnProps {\n  objects: SerializedObjectProps[];\n  layoutManager: SerializedLayoutManager;\n}\n\nexport interface GroupProps extends FabricObjectProps, GroupOwnProps {\n  layoutManager: LayoutManager;\n}\n\nexport const groupDefaultValues: Partial<TClassProperties<Group>> = {\n  strokeWidth: 0,\n  subTargetCheck: false,\n  interactive: false,\n};\n\n/**\n * @fires object:added\n * @fires object:removed\n * @fires layout:before\n * @fires layout:after\n */\nexport class Group\n  extends createCollectionMixin(\n    FabricObject<GroupProps, SerializedGroupProps, GroupEvents>\n  )\n  implements GroupProps\n{\n  /**\n   * Used to optimize performance\n   * set to `false` if you don't need contained objects to be targets of events\n   * @default\n   * @type boolean\n   */\n  declare subTargetCheck: boolean;\n\n  /**\n   * Used to allow targeting of object inside groups.\n   * set to true if you want to select an object inside a group.\\\n   * **REQUIRES** `subTargetCheck` set to true\n   * This will be not removed but slowly replaced with a method setInteractive\n   * that will take care of enabling subTargetCheck and necessary object events.\n   * There is too much attached to group interactivity to just be evaluated by a\n   * boolean in the code\n   * @default\n   * @deprecated\n   * @type boolean\n   */\n  declare interactive: boolean;\n\n  declare layoutManager: LayoutManager;\n\n  /**\n   * Used internally to optimize performance\n   * Once an object is selected, instance is rendered without the selected object.\n   * This way instance is cached only once for the entire interaction with the selected object.\n   * @private\n   */\n  protected _activeObjects: FabricObject[] = [];\n\n  static type = 'Group';\n\n  static ownDefaults: Record<string, any> = groupDefaultValues;\n  private __objectSelectionTracker: (ev: ObjectEvents['selected']) => void;\n  private __objectSelectionDisposer: (ev: ObjectEvents['deselected']) => void;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Group.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {FabricObject[]} [objects] instance objects\n   * @param {Object} [options] Options object\n   */\n  constructor(objects: FabricObject[] = [], options: Partial<GroupProps> = {}) {\n    super();\n    Object.assign(this, Group.ownDefaults);\n    this.setOptions(options);\n    this._objects = [...objects]; // Avoid unwanted mutations of Collection to affect the caller\n\n    this.__objectSelectionTracker = this.__objectSelectionMonitor.bind(\n      this,\n      true\n    );\n    this.__objectSelectionDisposer = this.__objectSelectionMonitor.bind(\n      this,\n      false\n    );\n\n    this.forEachObject((object) => {\n      this.enterGroup(object, false);\n    });\n\n    // perform initial layout\n    this.layoutManager = options.layoutManager || new LayoutManager();\n    this.layoutManager.performLayout({\n      type: LAYOUT_TYPE_INITIALIZATION,\n      target: this,\n      targets: [...objects],\n      // @TODO remove this concept from the layout manager.\n      // Layout manager will calculate the correct position,\n      // group options can override it later.\n      x: options.left,\n      y: options.top,\n    });\n  }\n\n  /**\n   * Checks if object can enter group and logs relevant warnings\n   * @private\n   * @param {FabricObject} object\n   * @returns\n   */\n  canEnterGroup(object: FabricObject) {\n    if (object === this || this.isDescendantOf(object)) {\n      //  prevent circular object tree\n      log(\n        'error',\n        'Group: circular object trees are not supported, this call has no effect'\n      );\n      return false;\n    } else if (this._objects.indexOf(object) !== -1) {\n      // is already in the objects array\n      log(\n        'error',\n        'Group: duplicate objects are not supported inside group, this call has no effect'\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Override this method to enhance performance (for groups with a lot of objects).\n   * If Overriding, be sure not pass illegal objects to group - it will break your app.\n   * @private\n   */\n  protected _filterObjectsBeforeEnteringGroup(objects: FabricObject[]) {\n    return objects.filter((object, index, array) => {\n      // can enter AND is the first occurrence of the object in the passed args (to prevent adding duplicates)\n      return this.canEnterGroup(object) && array.indexOf(object) === index;\n    });\n  }\n\n  /**\n   * Add objects\n   * @param {...FabricObject[]} objects\n   */\n  add(...objects: FabricObject[]) {\n    const allowedObjects = this._filterObjectsBeforeEnteringGroup(objects);\n    const size = super.add(...allowedObjects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_ADDED, allowedObjects);\n    return size;\n  }\n\n  /**\n   * Inserts an object into collection at specified index\n   * @param {FabricObject[]} objects Object to insert\n   * @param {Number} index Index to insert object at\n   */\n  insertAt(index: number, ...objects: FabricObject[]) {\n    const allowedObjects = this._filterObjectsBeforeEnteringGroup(objects);\n    const size = super.insertAt(index, ...allowedObjects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_ADDED, allowedObjects);\n    return size;\n  }\n\n  /**\n   * Remove objects\n   * @param {...FabricObject[]} objects\n   * @returns {FabricObject[]} removed objects\n   */\n  remove(...objects: FabricObject[]) {\n    const removed = super.remove(...objects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_REMOVED, removed);\n    return removed;\n  }\n\n  _onObjectAdded(object: FabricObject) {\n    this.enterGroup(object, true);\n    this.fire('object:added', { target: object });\n    object.fire('added', { target: this });\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  _onObjectRemoved(object: FabricObject, removeParentTransform?: boolean) {\n    this.exitGroup(object, removeParentTransform);\n    this.fire('object:removed', { target: object });\n    object.fire('removed', { target: this });\n  }\n\n  /**\n   * @private\n   * @param {'added'|'removed'} type\n   * @param {FabricObject[]} targets\n   */\n  _onAfterObjectsChange(type: 'added' | 'removed', targets: FabricObject[]) {\n    this.layoutManager.performLayout({\n      type,\n      targets,\n      target: this,\n    });\n  }\n\n  _onStackOrderChanged() {\n    this._set('dirty', true);\n  }\n\n  /**\n   * @private\n   * @param {string} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    const prev = this[key as keyof this];\n    super._set(key, value);\n    if (key === 'canvas' && prev !== value) {\n      (this._objects || []).forEach((object) => {\n        object._set(key, value);\n      });\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _shouldSetNestedCoords() {\n    return this.subTargetCheck;\n  }\n\n  /**\n   * Remove all objects\n   * @returns {FabricObject[]} removed objects\n   */\n  removeAll() {\n    this._activeObjects = [];\n    return this.remove(...this._objects);\n  }\n\n  /**\n   * keeps track of the selected objects\n   * @private\n   */\n  __objectSelectionMonitor<T extends boolean>(\n    selected: T,\n    { target: object }: ObjectEvents[T extends true ? 'selected' : 'deselected']\n  ) {\n    const activeObjects = this._activeObjects;\n    if (selected) {\n      activeObjects.push(object);\n      this._set('dirty', true);\n    } else if (activeObjects.length > 0) {\n      const index = activeObjects.indexOf(object);\n      if (index > -1) {\n        activeObjects.splice(index, 1);\n        this._set('dirty', true);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {boolean} watch\n   * @param {FabricObject} object\n   */\n  _watchObject(watch: boolean, object: FabricObject) {\n    //  make sure we listen only once\n    watch && this._watchObject(false, object);\n    if (watch) {\n      object.on('selected', this.__objectSelectionTracker);\n      object.on('deselected', this.__objectSelectionDisposer);\n    } else {\n      object.off('selected', this.__objectSelectionTracker);\n      object.off('deselected', this.__objectSelectionDisposer);\n    }\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    object.group && object.group.remove(object);\n    object._set('parent', this);\n    this._enterGroup(object, removeParentTransform);\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  _enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    if (removeParentTransform) {\n      // can this be converted to utils (sendObjectToPlane)?\n      applyTransformToObject(\n        object,\n        multiplyTransformMatrices(\n          invertTransform(this.calcTransformMatrix()),\n          object.calcTransformMatrix()\n        )\n      );\n    }\n    this._shouldSetNestedCoords() && object.setCoords();\n    object._set('group', this);\n    object._set('canvas', this.canvas);\n    this._watchObject(true, object);\n    const activeObject =\n      this.canvas &&\n      this.canvas.getActiveObject &&\n      this.canvas.getActiveObject();\n    // if we are adding the activeObject in a group\n    if (\n      activeObject &&\n      (activeObject === object || object.isDescendantOf(activeObject))\n    ) {\n      this._activeObjects.push(object);\n    }\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    this._exitGroup(object, removeParentTransform);\n    object._set('parent', undefined);\n    object._set('canvas', undefined);\n  }\n\n  /**\n   * Executes the inner fabric logic of exiting a group.\n   * - Stop watching the object\n   * - Remove the object from the optimization map this._activeObjects\n   * - unset the group property of the object\n   * @protected\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  _exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    object._set('group', undefined);\n    if (!removeParentTransform) {\n      applyTransformToObject(\n        object,\n        multiplyTransformMatrices(\n          this.calcTransformMatrix(),\n          object.calcTransformMatrix()\n        )\n      );\n      object.setCoords();\n    }\n    this._watchObject(false, object);\n    const index =\n      this._activeObjects.length > 0 ? this._activeObjects.indexOf(object) : -1;\n    if (index > -1) {\n      this._activeObjects.splice(index, 1);\n    }\n  }\n\n  /**\n   * Decide if the object should cache or not. Create its own cache level\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step. None of the fabric classes requires it.\n   * Generally you do not cache objects in groups because the group is already cached.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    const ownCache = FabricObject.prototype.shouldCache.call(this);\n    if (ownCache) {\n      for (let i = 0; i < this._objects.length; i++) {\n        if (this._objects[i].willDrawShadow()) {\n          this.ownCaching = false;\n          return false;\n        }\n      }\n    }\n    return ownCache;\n  }\n\n  /**\n   * Check if this object or a child object will cast a shadow\n   * @return {Boolean}\n   */\n  willDrawShadow() {\n    if (super.willDrawShadow()) {\n      return true;\n    }\n    for (let i = 0; i < this._objects.length; i++) {\n      if (this._objects[i].willDrawShadow()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if instance or its group are caching, recursively up\n   * @return {Boolean}\n   */\n  isOnACache(): boolean {\n    return this.ownCaching || (!!this.parent && this.parent.isOnACache());\n  }\n\n  /**\n   * Execute the drawing operation for an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawObject(ctx: CanvasRenderingContext2D) {\n    this._renderBackground(ctx);\n    for (let i = 0; i < this._objects.length; i++) {\n      // TODO: handle rendering edge case somehow\n      if (\n        this.canvas?.preserveObjectStacking &&\n        this._objects[i].group !== this\n      ) {\n        ctx.save();\n        ctx.transform(...invertTransform(this.calcTransformMatrix()));\n        this._objects[i].render(ctx);\n        ctx.restore();\n      } else if (this._objects[i].group === this) {\n        this._objects[i].render(ctx);\n      }\n    }\n    this._drawClipPath(ctx, this.clipPath);\n  }\n\n  /**\n   * @override\n   * @return {Boolean}\n   */\n  setCoords() {\n    super.setCoords();\n    this._shouldSetNestedCoords() &&\n      this.forEachObject((object) => object.setCoords());\n  }\n\n  triggerLayout(options: ImperativeLayoutOptions = {}) {\n    this.layoutManager.performLayout({\n      target: this,\n      type: LAYOUT_TYPE_IMPERATIVE,\n      ...options,\n    });\n  }\n\n  /**\n   * Renders instance on a given context\n   * @param {CanvasRenderingContext2D} ctx context to render instance on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    this._transformDone = true;\n    super.render(ctx);\n    this._transformDone = false;\n  }\n\n  /**\n   *\n   * @private\n   * @param {'toObject'|'toDatalessObject'} [method]\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @returns {FabricObject[]} serialized objects\n   */\n  __serializeObjects(\n    method: 'toObject' | 'toDatalessObject',\n    propertiesToInclude?: string[]\n  ) {\n    const _includeDefaultValues = this.includeDefaultValues;\n    return this._objects\n      .filter(function (obj) {\n        return !obj.excludeFromExport;\n      })\n      .map(function (obj) {\n        const originalDefaults = obj.includeDefaultValues;\n        obj.includeDefaultValues = _includeDefaultValues;\n        const data = obj[method || 'toObject'](propertiesToInclude);\n        obj.includeDefaultValues = originalDefaults;\n        // delete data.version;\n        return data;\n      });\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<\n      GroupProps & TClassProperties<this>,\n      keyof SerializedGroupProps\n    >,\n    K extends keyof T = never\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SerializedGroupProps {\n    const layoutManager = this.layoutManager.toObject();\n\n    return {\n      ...super.toObject([\n        'subTargetCheck',\n        'interactive',\n        ...propertiesToInclude,\n      ]),\n      ...(layoutManager.strategy !== 'fit-content' || this.includeDefaultValues\n        ? { layoutManager }\n        : {}),\n      objects: this.__serializeObjects(\n        'toObject',\n        propertiesToInclude as string[]\n      ),\n    };\n  }\n\n  toString() {\n    return `#<Group: (${this.complexity()})>`;\n  }\n\n  dispose() {\n    this.layoutManager.unsubscribeTargets({\n      targets: this.getObjects(),\n      target: this,\n    });\n    this._activeObjects = [];\n    this.forEachObject((object) => {\n      this._watchObject(false, object);\n      object.dispose();\n    });\n    super.dispose();\n  }\n\n  /**\n   * @private\n   */\n  _createSVGBgRect(reviver?: TSVGReviver) {\n    if (!this.backgroundColor) {\n      return '';\n    }\n    const fillStroke = Rect.prototype._toSVG.call(this);\n    const commons = fillStroke.indexOf('COMMON_PARTS');\n    fillStroke[commons] = 'for=\"group\" ';\n    const markup = fillStroke.join('');\n    return reviver ? reviver(markup) : markup;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  _toSVG(reviver?: TSVGReviver) {\n    const svgString = ['<g ', 'COMMON_PARTS', ' >\\n'];\n    const bg = this._createSVGBgRect(reviver);\n    bg && svgString.push('\\t\\t', bg);\n    for (let i = 0; i < this._objects.length; i++) {\n      svgString.push('\\t\\t', this._objects[i].toSVG(reviver));\n    }\n    svgString.push('</g>\\n');\n    return svgString;\n  }\n\n  /**\n   * Returns styles-string for svg-export, specific version for group\n   * @return {String}\n   */\n  getSvgStyles(): string {\n    const opacity =\n        typeof this.opacity !== 'undefined' && this.opacity !== 1\n          ? `opacity: ${this.opacity};`\n          : '',\n      visibility = this.visible ? '' : ' visibility: hidden;';\n    return [opacity, this.getSvgFilter(), visibility].join('');\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toClipPathSVG(reviver?: TSVGReviver): string {\n    const svgString = [];\n    const bg = this._createSVGBgRect(reviver);\n    bg && svgString.push('\\t', bg);\n    for (let i = 0; i < this._objects.length; i++) {\n      svgString.push('\\t', this._objects[i].toClipPathSVG(reviver));\n    }\n    return this._createBaseClipPathSVGMarkup(svgString, {\n      reviver,\n    });\n  }\n\n  /**\n   * @todo support loading from svg\n   * @private\n   * @static\n   * @memberOf Group\n   * @param {Object} object Object to create a group from\n   * @returns {Promise<Group>}\n   */\n  static fromObject<T extends TOptions<SerializedGroupProps>>(\n    { type, objects = [], layoutManager, ...options }: T,\n    abortable?: Abortable\n  ) {\n    return Promise.all([\n      enlivenObjects<FabricObject>(objects, abortable),\n      enlivenObjectEnlivables(options, abortable),\n    ]).then(([objects, hydratedOptions]) => {\n      const group = new this(objects, {\n        ...options,\n        ...hydratedOptions,\n        layoutManager: new NoopLayoutManager(),\n      });\n      if (layoutManager) {\n        const layoutClass = classRegistry.getClass<typeof LayoutManager>(\n          layoutManager.type\n        );\n        const strategyClass = classRegistry.getClass<typeof FitContentLayout>(\n          layoutManager.strategy\n        );\n        group.layoutManager = new layoutClass(new strategyClass());\n      } else {\n        group.layoutManager = new LayoutManager();\n      }\n      group.layoutManager.subscribeTargets({\n        type: LAYOUT_TYPE_INITIALIZATION,\n        target: group,\n        targets: group.getObjects(),\n      });\n      group.setCoords();\n      return group;\n    });\n  }\n}\n\nclassRegistry.setClass(Group);\n", "import type { GroupProps } from '../../shapes/Group';\nimport { Group } from '../../shapes/Group';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\n\n/**\n * TODO experiment with different layout manager and svg results ( fixed fit content )\n * Groups SVG elements (usually those retrieved from SVG document)\n * @static\n * @param {FabricObject[]} elements FabricObject(s) parsed from svg, to group\n * @return {FabricObject | Group}\n */\nexport const groupSVGElements = (\n  elements: FabricObject[],\n  options?: Partial<GroupProps>\n) => {\n  if (elements && elements.length === 1) {\n    return elements[0];\n  }\n  return new Group(elements, options);\n};\n", "import type { TSize } from '../../typedefs';\n\n/**\n * Finds the scale for the object source to fit inside the object destination,\n * keeping aspect ratio intact.\n * respect the total allowed area for the cache.\n * @param {TSize} source natural unscaled size of the object\n * @param {TSize} destination natural unscaled size of the object\n * @return {Number} scale factor to apply to source to fit into destination\n */\nexport const findScaleToFit = (source: TSize, destination: TSize) =>\n  Math.min(\n    destination.width / source.width,\n    destination.height / source.height\n  );\n\n/**\n * Finds the scale for the object source to cover entirely the object destination,\n * keeping aspect ratio intact.\n * respect the total allowed area for the cache.\n * @param {TSize} source natural unscaled size of the object\n * @param {TSize} destination natural unscaled size of the object\n * @return {Number} scale factor to apply to source to cover destination\n */\nexport const findScaleToCover = (source: TSize, destination: TSize) =>\n  Math.max(\n    destination.width / source.width,\n    destination.height / source.height\n  );\n", "import { reNum } from '../../parser/constants';\n\n/**\n * p for param\n * using \"bad naming\" here because it makes the regex much easier to read\n */\nconst p = `(${reNum})`;\n\nconst reMoveToCommand = `(M) (?:${p} ${p} ?)+`;\n\nconst reLineCommand = `(L) (?:${p} ${p} ?)+`;\n\nconst reHorizontalLineCommand = `(H) (?:${p} ?)+`;\n\nconst reVerticalLineCommand = `(V) (?:${p} ?)+`;\n\nconst reClosePathCommand = String.raw`(Z)\\s*`;\n\nconst reCubicCurveCommand = `(C) (?:${p} ${p} ${p} ${p} ${p} ${p} ?)+`;\n\nconst reCubicCurveShortcutCommand = `(S) (?:${p} ${p} ${p} ${p} ?)+`;\n\nconst reQuadraticCurveCommand = `(Q) (?:${p} ${p} ${p} ${p} ?)+`;\n\nconst reQuadraticCurveShortcutCommand = `(T) (?:${p} ${p} ?)+`;\n\nconst reArcCommand = `(A) (?:${p} ${p} ${p} ([01]) ?([01]) ${p} ${p} ?)+`;\n\nexport const rePathCommand =\n  `(?:(?:${reMoveToCommand})` +\n  `|(?:${reLineCommand})` +\n  `|(?:${reHorizontalLineCommand})` +\n  `|(?:${reVerticalLineCommand})` +\n  `|(?:${reClosePathCommand})` +\n  `|(?:${reCubicCurveCommand})` +\n  `|(?:${reCubicCurveShortcutCommand})` +\n  `|(?:${reQuadraticCurveCommand})` +\n  `|(?:${reQuadraticCurveShortcutCommand})` +\n  `|(?:${reArcCommand}))`;\n", "import { cache } from '../../cache';\nimport { config } from '../../config';\nimport { halfPI, PiBy180 } from '../../constants';\nimport type { TMat2D, TRadian, TRectBounds } from '../../typedefs';\nimport { cos } from '../misc/cos';\nimport { multiplyTransformMatrices, transformPoint } from '../misc/matrix';\nimport { sin } from '../misc/sin';\nimport { toFixed } from '../misc/toFixed';\nimport type {\n  TCurveInfo,\n  TComplexPathData,\n  TParsedAbsoluteCubicCurveCommand,\n  TParsedCubicCurveCommand,\n  TPathSegmentInfo,\n  TPointAngle,\n  TSimpleParsedCommand,\n  TSimplePathData,\n  TPathSegmentCommandInfo,\n  TComplexParsedCommand,\n  TPathSegmentInfoCommon,\n  TEndPathInfo,\n  TParsedArcCommand,\n} from './typedefs';\nimport type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport { rePathCommand } from './regex';\nimport { cleanupSvgAttribute } from '../internals/cleanupSvgAttribute';\n\n/**\n * Commands that may be repeated\n */\nconst repeatedCommands: Record<string, string | undefined> = {\n  m: 'l',\n  M: 'L',\n};\n\n/**\n * Convert an arc of a rotated ellipse to a Bezier Curve\n * @param {TRadian} theta1 start of the arc\n * @param {TRadian} theta2 end of the arc\n * @param cosTh cosine of the angle of rotation\n * @param sinTh sine of the angle of rotation\n * @param rx x-axis radius (before rotation)\n * @param ry y-axis radius (before rotation)\n * @param cx1 center x of the ellipse\n * @param cy1 center y of the ellipse\n * @param mT\n * @param fromX starting point of arc x\n * @param fromY starting point of arc y\n */\nconst segmentToBezier = (\n  theta1: TRadian,\n  theta2: TRadian,\n  cosTh: number,\n  sinTh: number,\n  rx: number,\n  ry: number,\n  cx1: number,\n  cy1: number,\n  mT: number,\n  fromX: number,\n  fromY: number\n): TParsedCubicCurveCommand => {\n  const costh1 = cos(theta1),\n    sinth1 = sin(theta1),\n    costh2 = cos(theta2),\n    sinth2 = sin(theta2),\n    toX = cosTh * rx * costh2 - sinTh * ry * sinth2 + cx1,\n    toY = sinTh * rx * costh2 + cosTh * ry * sinth2 + cy1,\n    cp1X = fromX + mT * (-cosTh * rx * sinth1 - sinTh * ry * costh1),\n    cp1Y = fromY + mT * (-sinTh * rx * sinth1 + cosTh * ry * costh1),\n    cp2X = toX + mT * (cosTh * rx * sinth2 + sinTh * ry * costh2),\n    cp2Y = toY + mT * (sinTh * rx * sinth2 - cosTh * ry * costh2);\n\n  return ['C', cp1X, cp1Y, cp2X, cp2Y, toX, toY];\n};\n\n/**\n * Adapted from {@link http://dxr.mozilla.org/mozilla-central/source/dom/svg/SVGPathDataParser.cpp}\n * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\n * http://mozilla.org/MPL/2.0/\n * @param toX\n * @param toY\n * @param rx\n * @param ry\n * @param {number} large 0 or 1 flag\n * @param {number} sweep 0 or 1 flag\n * @param rotateX\n */\nconst arcToSegments = (\n  toX: number,\n  toY: number,\n  rx: number,\n  ry: number,\n  large: number,\n  sweep: number,\n  rotateX: TRadian\n): TParsedAbsoluteCubicCurveCommand[] => {\n  if (rx === 0 || ry === 0) {\n    return [];\n  }\n  let fromX = 0,\n    fromY = 0,\n    root = 0;\n  const PI = Math.PI,\n    theta = rotateX * PiBy180,\n    sinTheta = sin(theta),\n    cosTh = cos(theta),\n    px = 0.5 * (-cosTh * toX - sinTheta * toY),\n    py = 0.5 * (-cosTh * toY + sinTheta * toX),\n    rx2 = rx ** 2,\n    ry2 = ry ** 2,\n    py2 = py ** 2,\n    px2 = px ** 2,\n    pl = rx2 * ry2 - rx2 * py2 - ry2 * px2;\n  let _rx = Math.abs(rx);\n  let _ry = Math.abs(ry);\n\n  if (pl < 0) {\n    const s = Math.sqrt(1 - pl / (rx2 * ry2));\n    _rx *= s;\n    _ry *= s;\n  } else {\n    root =\n      (large === sweep ? -1.0 : 1.0) * Math.sqrt(pl / (rx2 * py2 + ry2 * px2));\n  }\n\n  const cx = (root * _rx * py) / _ry,\n    cy = (-root * _ry * px) / _rx,\n    cx1 = cosTh * cx - sinTheta * cy + toX * 0.5,\n    cy1 = sinTheta * cx + cosTh * cy + toY * 0.5;\n  let mTheta = calcVectorAngle(1, 0, (px - cx) / _rx, (py - cy) / _ry);\n  let dtheta = calcVectorAngle(\n    (px - cx) / _rx,\n    (py - cy) / _ry,\n    (-px - cx) / _rx,\n    (-py - cy) / _ry\n  );\n\n  if (sweep === 0 && dtheta > 0) {\n    dtheta -= 2 * PI;\n  } else if (sweep === 1 && dtheta < 0) {\n    dtheta += 2 * PI;\n  }\n\n  // Convert into cubic bezier segments <= 90deg\n  const segments = Math.ceil(Math.abs((dtheta / PI) * 2)),\n    result = new Array(segments),\n    mDelta = dtheta / segments,\n    mT =\n      ((8 / 3) * Math.sin(mDelta / 4) * Math.sin(mDelta / 4)) /\n      Math.sin(mDelta / 2);\n  let th3 = mTheta + mDelta;\n\n  for (let i = 0; i < segments; i++) {\n    result[i] = segmentToBezier(\n      mTheta,\n      th3,\n      cosTh,\n      sinTheta,\n      _rx,\n      _ry,\n      cx1,\n      cy1,\n      mT,\n      fromX,\n      fromY\n    );\n    fromX = result[i][5];\n    fromY = result[i][6];\n    mTheta = th3;\n    th3 += mDelta;\n  }\n  return result;\n};\n\n/**\n * @private\n * Calculate the angle between two vectors\n * @param ux u endpoint x\n * @param uy u endpoint y\n * @param vx v endpoint x\n * @param vy v endpoint y\n */\nconst calcVectorAngle = (\n  ux: number,\n  uy: number,\n  vx: number,\n  vy: number\n): TRadian => {\n  const ta = Math.atan2(uy, ux),\n    tb = Math.atan2(vy, vx);\n  if (tb >= ta) {\n    return tb - ta;\n  } else {\n    return 2 * Math.PI - (ta - tb);\n  }\n};\n\n// functions for the Cubic beizer\n// taken from: https://github.com/konvajs/konva/blob/7.0.5/src/shapes/Path.ts#L350\nconst CB1 = (t: number) => t ** 3;\nconst CB2 = (t: number) => 3 * t ** 2 * (1 - t);\nconst CB3 = (t: number) => 3 * t * (1 - t) ** 2;\nconst CB4 = (t: number) => (1 - t) ** 3;\n\n/**\n * Calculate bounding box of a cubic Bezier curve\n * Taken from http://jsbin.com/ivomiq/56/edit (no credits available)\n * TODO: can we normalize this with the starting points set at 0 and then translated the bbox?\n * @param {number} begx starting point\n * @param {number} begy\n * @param {number} cp1x first control point\n * @param {number} cp1y\n * @param {number} cp2x second control point\n * @param {number} cp2y\n * @param {number} endx end of bezier\n * @param {number} endy\n * @return {TRectBounds} the rectangular bounds\n */\nexport function getBoundsOfCurve(\n  begx: number,\n  begy: number,\n  cp1x: number,\n  cp1y: number,\n  cp2x: number,\n  cp2y: number,\n  endx: number,\n  endy: number\n): TRectBounds {\n  let argsString: string;\n  if (config.cachesBoundsOfCurve) {\n    // eslint-disable-next-line\n    argsString = [...arguments].join();\n    if (cache.boundsOfCurveCache[argsString]) {\n      return cache.boundsOfCurveCache[argsString];\n    }\n  }\n\n  const sqrt = Math.sqrt,\n    abs = Math.abs,\n    tvalues = [],\n    bounds: [[x: number, y: number], [x: number, y: number]] = [\n      [0, 0],\n      [0, 0],\n    ];\n\n  let b = 6 * begx - 12 * cp1x + 6 * cp2x;\n  let a = -3 * begx + 9 * cp1x - 9 * cp2x + 3 * endx;\n  let c = 3 * cp1x - 3 * begx;\n\n  for (let i = 0; i < 2; ++i) {\n    if (i > 0) {\n      b = 6 * begy - 12 * cp1y + 6 * cp2y;\n      a = -3 * begy + 9 * cp1y - 9 * cp2y + 3 * endy;\n      c = 3 * cp1y - 3 * begy;\n    }\n\n    if (abs(a) < 1e-12) {\n      if (abs(b) < 1e-12) {\n        continue;\n      }\n      const t = -c / b;\n      if (0 < t && t < 1) {\n        tvalues.push(t);\n      }\n      continue;\n    }\n    const b2ac = b * b - 4 * c * a;\n    if (b2ac < 0) {\n      continue;\n    }\n    const sqrtb2ac = sqrt(b2ac);\n    const t1 = (-b + sqrtb2ac) / (2 * a);\n    if (0 < t1 && t1 < 1) {\n      tvalues.push(t1);\n    }\n    const t2 = (-b - sqrtb2ac) / (2 * a);\n    if (0 < t2 && t2 < 1) {\n      tvalues.push(t2);\n    }\n  }\n\n  let j = tvalues.length;\n  const jlen = j;\n  const iterator = getPointOnCubicBezierIterator(\n    begx,\n    begy,\n    cp1x,\n    cp1y,\n    cp2x,\n    cp2y,\n    endx,\n    endy\n  );\n  while (j--) {\n    const { x, y } = iterator(tvalues[j]);\n    bounds[0][j] = x;\n    bounds[1][j] = y;\n  }\n\n  bounds[0][jlen] = begx;\n  bounds[1][jlen] = begy;\n  bounds[0][jlen + 1] = endx;\n  bounds[1][jlen + 1] = endy;\n  const result: TRectBounds = [\n    new Point(Math.min(...bounds[0]), Math.min(...bounds[1])),\n    new Point(Math.max(...bounds[0]), Math.max(...bounds[1])),\n  ];\n  if (config.cachesBoundsOfCurve) {\n    cache.boundsOfCurveCache[argsString!] = result;\n  }\n  return result;\n}\n\n/**\n * Converts arc to a bunch of cubic Bezier curves\n * @param {number} fx starting point x\n * @param {number} fy starting point y\n * @param {TParsedArcCommand} coords Arc command\n */\nexport const fromArcToBeziers = (\n  fx: number,\n  fy: number,\n  [_, rx, ry, rot, large, sweep, tx, ty]: TParsedArcCommand\n): TParsedAbsoluteCubicCurveCommand[] => {\n  const segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n\n  for (let i = 0, len = segsNorm.length; i < len; i++) {\n    segsNorm[i][1] += fx;\n    segsNorm[i][2] += fy;\n    segsNorm[i][3] += fx;\n    segsNorm[i][4] += fy;\n    segsNorm[i][5] += fx;\n    segsNorm[i][6] += fy;\n  }\n  return segsNorm;\n};\n\n/**\n * This function takes a parsed SVG path and makes it simpler for fabricJS logic.\n * Simplification consist of:\n * - All commands converted to absolute (lowercase to uppercase)\n * - S converted to C\n * - T converted to Q\n * - A converted to C\n * @param {TComplexPathData} path the array of commands of a parsed SVG path for `Path`\n * @return {TSimplePathData} the simplified array of commands of a parsed SVG path for `Path`\n * TODO: figure out how to remove the type assertions in a nice way\n */\nexport const makePathSimpler = (path: TComplexPathData): TSimplePathData => {\n  // x and y represent the last point of the path, AKA the previous command point.\n  // we add them to each relative command to make it an absolute comment.\n  // we also swap the v V h H with L, because are easier to transform.\n  let x = 0,\n    y = 0;\n  // x1 and y1 represent the last point of the subpath. the subpath is started with\n  // m or M command. When a z or Z command is drawn, x and y need to be resetted to\n  // the last x1 and y1.\n  let x1 = 0,\n    y1 = 0;\n  // previous will host the letter of the previous command, to handle S and T.\n  // controlX and controlY will host the previous reflected control point\n  const destinationPath: TSimplePathData = [];\n  let previous,\n    // placeholders\n    controlX = 0,\n    controlY = 0;\n  for (const parsedCommand of path) {\n    const current: TComplexParsedCommand = [...parsedCommand];\n    let converted: TSimpleParsedCommand | undefined;\n    switch (\n      current[0] // first letter\n    ) {\n      case 'l': // lineto, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'L':\n        x = current[1];\n        y = current[2];\n        converted = ['L', x, y];\n        break;\n      case 'h': // horizontal lineto, relative\n        current[1] += x;\n      // falls through\n      case 'H':\n        x = current[1];\n        converted = ['L', x, y];\n        break;\n      case 'v': // vertical lineto, relative\n        current[1] += y;\n      // falls through\n      case 'V':\n        y = current[1];\n        converted = ['L', x, y];\n        break;\n      case 'm': // moveTo, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'M':\n        x = current[1];\n        y = current[2];\n        x1 = current[1];\n        y1 = current[2];\n        converted = ['M', x, y];\n        break;\n      case 'c': // bezierCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n        current[5] += x;\n        current[6] += y;\n      // falls through\n      case 'C':\n        controlX = current[3];\n        controlY = current[4];\n        x = current[5];\n        y = current[6];\n        converted = ['C', current[1], current[2], controlX, controlY, x, y];\n        break;\n      case 's': // shorthand cubic bezierCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n      // falls through\n      case 'S':\n        // would be sScC but since we are swapping sSc for C, we check just that.\n        if (previous === 'C') {\n          // calculate reflection of previous control points\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n        } else {\n          // If there is no previous command or if the previous command was not a C, c, S, or s,\n          // the control point is coincident with the current point\n          controlX = x;\n          controlY = y;\n        }\n        x = current[3];\n        y = current[4];\n        converted = ['C', controlX, controlY, current[1], current[2], x, y];\n        // converted[3] and converted[4] are NOW the second control point.\n        // we keep it for the next reflection.\n        controlX = converted[3];\n        controlY = converted[4];\n        break;\n      case 'q': // quadraticCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n      // falls through\n      case 'Q':\n        controlX = current[1];\n        controlY = current[2];\n        x = current[3];\n        y = current[4];\n        converted = ['Q', controlX, controlY, x, y];\n        break;\n      case 't': // shorthand quadraticCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'T':\n        if (previous === 'Q') {\n          // calculate reflection of previous control point\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n        } else {\n          // If there is no previous command or if the previous command was not a Q, q, T or t,\n          // assume the control point is coincident with the current point\n          controlX = x;\n          controlY = y;\n        }\n        x = current[1];\n        y = current[2];\n        converted = ['Q', controlX, controlY, x, y];\n        break;\n      case 'a':\n        current[6] += x;\n        current[7] += y;\n      // falls through\n      case 'A':\n        fromArcToBeziers(x, y, current).forEach((b) => destinationPath.push(b));\n        x = current[6];\n        y = current[7];\n        break;\n      case 'z':\n      case 'Z':\n        x = x1;\n        y = y1;\n        converted = ['Z'];\n        break;\n      default:\n    }\n    if (converted) {\n      destinationPath.push(converted);\n      previous = converted[0];\n    } else {\n      previous = '';\n    }\n  }\n  return destinationPath;\n};\n\n// todo verify if we can just use the point class here\n/**\n * Calc length from point x1,y1 to x2,y2\n * @param {number} x1 starting point x\n * @param {number} y1 starting point y\n * @param {number} x2 starting point x\n * @param {number} y2 starting point y\n * @return {number} length of segment\n */\nconst calcLineLength = (\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n): number => Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n\n/**\n * Get an iterator that takes a percentage and returns a point\n * @param {number} begx\n * @param {number} begy\n * @param {number} cp1x\n * @param {number} cp1y\n * @param {number} cp2x\n * @param {number} cp2y\n * @param {number} endx\n * @param {number} endy\n */\nconst getPointOnCubicBezierIterator =\n  (\n    begx: number,\n    begy: number,\n    cp1x: number,\n    cp1y: number,\n    cp2x: number,\n    cp2y: number,\n    endx: number,\n    endy: number\n  ) =>\n  (pct: number) => {\n    const c1 = CB1(pct),\n      c2 = CB2(pct),\n      c3 = CB3(pct),\n      c4 = CB4(pct);\n    return new Point(\n      endx * c1 + cp2x * c2 + cp1x * c3 + begx * c4,\n      endy * c1 + cp2y * c2 + cp1y * c3 + begy * c4\n    );\n  };\n\nconst QB1 = (t: number) => t ** 2;\nconst QB2 = (t: number) => 2 * t * (1 - t);\nconst QB3 = (t: number) => (1 - t) ** 2;\n\nconst getTangentCubicIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n    p4x: number,\n    p4y: number\n  ) =>\n  (pct: number) => {\n    const qb1 = QB1(pct),\n      qb2 = QB2(pct),\n      qb3 = QB3(pct),\n      tangentX =\n        3 * (qb3 * (p2x - p1x) + qb2 * (p3x - p2x) + qb1 * (p4x - p3x)),\n      tangentY =\n        3 * (qb3 * (p2y - p1y) + qb2 * (p3y - p2y) + qb1 * (p4y - p3y));\n    return Math.atan2(tangentY, tangentX);\n  };\n\nconst getPointOnQuadraticBezierIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number\n  ) =>\n  (pct: number) => {\n    const c1 = QB1(pct),\n      c2 = QB2(pct),\n      c3 = QB3(pct);\n    return new Point(\n      p3x * c1 + p2x * c2 + p1x * c3,\n      p3y * c1 + p2y * c2 + p1y * c3\n    );\n  };\n\nconst getTangentQuadraticIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number\n  ) =>\n  (pct: number) => {\n    const invT = 1 - pct,\n      tangentX = 2 * (invT * (p2x - p1x) + pct * (p3x - p2x)),\n      tangentY = 2 * (invT * (p2y - p1y) + pct * (p3y - p2y));\n    return Math.atan2(tangentY, tangentX);\n  };\n\n// this will run over a path segment (a cubic or quadratic segment) and approximate it\n// with 100 segments. This will good enough to calculate the length of the curve\nconst pathIterator = (\n  iterator: (pct: number) => Point,\n  x1: number,\n  y1: number\n) => {\n  let tempP = new Point(x1, y1),\n    tmpLen = 0;\n  for (let perc = 1; perc <= 100; perc += 1) {\n    const p = iterator(perc / 100);\n    tmpLen += calcLineLength(tempP.x, tempP.y, p.x, p.y);\n    tempP = p;\n  }\n  return tmpLen;\n};\n\n/**\n * Given a pathInfo, and a distance in pixels, find the percentage from 0 to 1\n * that correspond to that pixels run over the path.\n * The percentage will be then used to find the correct point on the canvas for the path.\n * @param {Array} segInfo fabricJS collection of information on a parsed path\n * @param {number} distance from starting point, in pixels.\n * @return {TPointAngle} info object with x and y ( the point on canvas ) and angle, the tangent on that point;\n */\nconst findPercentageForDistance = (\n  segInfo: TCurveInfo<'Q' | 'C'>,\n  distance: number\n): TPointAngle => {\n  let perc = 0,\n    tmpLen = 0,\n    tempP: XY = { x: segInfo.x, y: segInfo.y },\n    p: XY = { ...tempP },\n    nextLen: number,\n    nextStep = 0.01,\n    lastPerc = 0;\n  // nextStep > 0.0001 covers 0.00015625 that 1/64th of 1/100\n  // the path\n  const iterator = segInfo.iterator,\n    angleFinder = segInfo.angleFinder;\n  while (tmpLen < distance && nextStep > 0.0001) {\n    p = iterator(perc);\n    lastPerc = perc;\n    nextLen = calcLineLength(tempP.x, tempP.y, p.x, p.y);\n    // compare tmpLen each cycle with distance, decide next perc to test.\n    if (nextLen + tmpLen > distance) {\n      // we discard this step and we make smaller steps.\n      perc -= nextStep;\n      nextStep /= 2;\n    } else {\n      tempP = p;\n      perc += nextStep;\n      tmpLen += nextLen;\n    }\n  }\n  return { ...p, angle: angleFinder(lastPerc) };\n};\n\n/**\n * Run over a parsed and simplified path and extract some information (length of each command and starting point)\n * @param {TSimplePathData} path parsed path commands\n * @return {TPathSegmentInfo[]} path commands information\n */\nexport const getPathSegmentsInfo = (\n  path: TSimplePathData\n): TPathSegmentInfo[] => {\n  let totalLength = 0,\n    //x2 and y2 are the coords of segment start\n    //x1 and y1 are the coords of the current point\n    x1 = 0,\n    y1 = 0,\n    x2 = 0,\n    y2 = 0,\n    iterator,\n    tempInfo: TPathSegmentInfo;\n  const info: TPathSegmentInfo[] = [];\n  for (const current of path) {\n    const basicInfo: TPathSegmentInfoCommon<keyof TPathSegmentCommandInfo> = {\n      x: x1,\n      y: y1,\n      command: current[0],\n      length: 0,\n    };\n    switch (\n      current[0] //first letter\n    ) {\n      case 'M':\n        tempInfo = <TPathSegmentInfoCommon<'M'>>basicInfo;\n        tempInfo.x = x2 = x1 = current[1];\n        tempInfo.y = y2 = y1 = current[2];\n        break;\n      case 'L':\n        tempInfo = <TPathSegmentInfoCommon<'L'>>basicInfo;\n        tempInfo.length = calcLineLength(x1, y1, current[1], current[2]);\n        x1 = current[1];\n        y1 = current[2];\n        break;\n      case 'C':\n        iterator = getPointOnCubicBezierIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n          current[5],\n          current[6]\n        );\n        tempInfo = <TCurveInfo<'C'>>basicInfo;\n        tempInfo.iterator = iterator;\n        tempInfo.angleFinder = getTangentCubicIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n          current[5],\n          current[6]\n        );\n        tempInfo.length = pathIterator(iterator, x1, y1);\n\n        x1 = current[5];\n        y1 = current[6];\n        break;\n      case 'Q':\n        iterator = getPointOnQuadraticBezierIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4]\n        );\n        tempInfo = <TCurveInfo<'Q'>>basicInfo;\n        tempInfo.iterator = iterator;\n        tempInfo.angleFinder = getTangentQuadraticIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4]\n        );\n        tempInfo.length = pathIterator(iterator, x1, y1);\n        x1 = current[3];\n        y1 = current[4];\n        break;\n      case 'Z':\n        // we add those in order to ease calculations later\n        tempInfo = <TEndPathInfo>basicInfo;\n        tempInfo.destX = x2;\n        tempInfo.destY = y2;\n        tempInfo.length = calcLineLength(x1, y1, x2, y2);\n        x1 = x2;\n        y1 = y2;\n        break;\n    }\n    totalLength += tempInfo.length;\n    info.push(tempInfo);\n  }\n  info.push({ length: totalLength, x: x1, y: y1 });\n  return info;\n};\n\n/**\n * Get the point on the path that is distance along the path\n * @param path\n * @param distance\n * @param infos\n */\nexport const getPointOnPath = (\n  path: TSimplePathData,\n  distance: number,\n  infos: TPathSegmentInfo[] = getPathSegmentsInfo(path)\n): TPointAngle | undefined => {\n  let i = 0;\n  while (distance - infos[i].length > 0 && i < infos.length - 2) {\n    distance -= infos[i].length;\n    i++;\n  }\n  const segInfo = infos[i],\n    segPercent = distance / segInfo.length,\n    segment = path[i];\n\n  switch (segInfo.command) {\n    case 'M':\n      return { x: segInfo.x, y: segInfo.y, angle: 0 };\n    case 'Z':\n      return {\n        ...new Point(segInfo.x, segInfo.y).lerp(\n          new Point(segInfo.destX, segInfo.destY),\n          segPercent\n        ),\n        angle: Math.atan2(segInfo.destY - segInfo.y, segInfo.destX - segInfo.x),\n      };\n    case 'L':\n      return {\n        ...new Point(segInfo.x, segInfo.y).lerp(\n          new Point(segment[1]!, segment[2]!),\n          segPercent\n        ),\n        angle: Math.atan2(segment[2]! - segInfo.y, segment[1]! - segInfo.x),\n      };\n    case 'C':\n      return findPercentageForDistance(segInfo, distance);\n    case 'Q':\n      return findPercentageForDistance(segInfo, distance);\n    default:\n    // throw Error('Invalid command');\n  }\n};\n\nconst rePathCmdAll = new RegExp(rePathCommand, 'gi');\nconst rePathCmd = new RegExp(rePathCommand, 'i');\n\n/**\n *\n * @param {string} pathString\n * @return {TComplexPathData} An array of SVG path commands\n * @example <caption>Usage</caption>\n * parsePath('M 3 4 Q 3 5 2 1 4 0 Q 9 12 2 1 4 0') === [\n *   ['M', 3, 4],\n *   ['Q', 3, 5, 2, 1, 4, 0],\n *   ['Q', 9, 12, 2, 1, 4, 0],\n * ];\n *\n */\nexport const parsePath = (pathString: string): TComplexPathData => {\n  // clean the string\n  // add spaces around the numbers\n  pathString = cleanupSvgAttribute(pathString);\n\n  const res: TComplexPathData = [];\n  for (let [matchStr] of pathString.matchAll(rePathCmdAll)) {\n    const chain: TComplexPathData = [];\n    let paramArr: RegExpExecArray | null;\n    do {\n      paramArr = rePathCmd.exec(matchStr);\n      if (!paramArr) {\n        break;\n      }\n      // ignore undefined match groups\n      const filteredGroups = paramArr.filter((g) => g);\n      // remove the first element from the match array since it's just the whole command\n      filteredGroups.shift();\n      // if we can't parse the number, just interpret it as a string\n      // (since it's probably the path command)\n      const command = filteredGroups.map((g) => {\n        const numParse = Number.parseFloat(g);\n        if (Number.isNaN(numParse)) {\n          return g;\n        } else {\n          return numParse;\n        }\n      });\n      chain.push(command as any);\n      // stop now if it's a z command\n      if (filteredGroups.length <= 1) {\n        break;\n      }\n      // remove the last part of the chained command\n      filteredGroups.shift();\n      // ` ?` is to support commands with optional spaces between flags\n      matchStr = matchStr.replace(\n        new RegExp(`${filteredGroups.join(' ?')} ?$`),\n        ''\n      );\n    } while (paramArr);\n    // add the chain, convert multiple m's to l's in the process\n    chain.reverse().forEach((c, idx) => {\n      const transformed = repeatedCommands[c[0]];\n      if (idx > 0 && (transformed == 'l' || transformed == 'L')) {\n        c[0] = transformed;\n      }\n      res.push(c);\n    });\n  }\n  return res;\n};\n\n/**\n *\n * Converts points to a smooth SVG path\n * @param {XY[]} points Array of points\n * @param {number} [correction] Apply a correction to the path (usually we use `width / 1000`). If value is undefined 0 is used as the correction value.\n * @return {(string|number)[][]} An array of SVG path commands\n */\nexport const getSmoothPathFromPoints = (\n  points: Point[],\n  correction = 0\n): TSimplePathData => {\n  let p1 = new Point(points[0]),\n    p2 = new Point(points[1]),\n    multSignX = 1,\n    multSignY = 0;\n  const path: TSimplePathData = [],\n    len = points.length,\n    manyPoints = len > 2;\n\n  if (manyPoints) {\n    multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;\n    multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;\n  }\n  path.push([\n    'M',\n    p1.x - multSignX * correction,\n    p1.y - multSignY * correction,\n  ]);\n  let i;\n  for (i = 1; i < len; i++) {\n    if (!p1.eq(p2)) {\n      const midPoint = p1.midPointFrom(p2);\n      // p1 is our bezier control point\n      // midpoint is our endpoint\n      // start point is p(i-1) value.\n      path.push(['Q', p1.x, p1.y, midPoint.x, midPoint.y]);\n    }\n    p1 = points[i];\n    if (i + 1 < points.length) {\n      p2 = points[i + 1];\n    }\n  }\n  if (manyPoints) {\n    multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;\n    multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;\n  }\n  path.push([\n    'L',\n    p1.x + multSignX * correction,\n    p1.y + multSignY * correction,\n  ]);\n  return path;\n};\n\n/**\n * Transform a path by transforming each segment.\n * it has to be a simplified path or it won't work.\n * WARNING: this depends from pathOffset for correct operation\n * @param {TSimplePathData} path fabricJS parsed and simplified path commands\n * @param {TMat2D} transform matrix that represent the transformation\n * @param {Point} [pathOffset] `Path.pathOffset`\n * @returns {TSimplePathData} the transformed path\n */\nexport const transformPath = (\n  path: TSimplePathData,\n  transform: TMat2D,\n  pathOffset: Point\n): TSimplePathData => {\n  if (pathOffset) {\n    transform = multiplyTransformMatrices(transform, [\n      1,\n      0,\n      0,\n      1,\n      -pathOffset.x,\n      -pathOffset.y,\n    ]);\n  }\n  return path.map((pathSegment) => {\n    const newSegment: TSimpleParsedCommand = [...pathSegment];\n    for (let i = 1; i < pathSegment.length - 1; i += 2) {\n      // TODO: is there a way to get around casting to any?\n      const { x, y } = transformPoint(\n        {\n          x: pathSegment[i] as number,\n          y: pathSegment[i + 1] as number,\n        },\n        transform\n      );\n      newSegment[i] = x;\n      newSegment[i + 1] = y;\n    }\n    return newSegment;\n  });\n};\n\n/**\n * Returns an array of path commands to create a regular polygon\n * @param {number} numVertexes\n * @param {number} radius\n * @returns {TSimplePathData} An array of SVG path commands\n */\nexport const getRegularPolygonPath = (\n  numVertexes: number,\n  radius: number\n): TSimplePathData => {\n  const interiorAngle = (Math.PI * 2) / numVertexes;\n  // rotationAdjustment rotates the path by 1/2 the interior angle so that the polygon always has a flat side on the bottom\n  // This isn't strictly necessary, but it's how we tend to think of and expect polygons to be drawn\n  let rotationAdjustment = -halfPI;\n  if (numVertexes % 2 === 0) {\n    rotationAdjustment += interiorAngle / 2;\n  }\n  const d = new Array(numVertexes + 1);\n  for (let i = 0; i < numVertexes; i++) {\n    const rad = i * interiorAngle + rotationAdjustment;\n    const { x, y } = new Point(cos(rad), sin(rad)).scalarMultiply(radius);\n    d[i] = [i === 0 ? 'M' : 'L', x, y];\n  }\n  d[numVertexes] = ['Z'];\n  return d;\n};\n\n/**\n * Join path commands to go back to svg format\n * @param {TSimplePathData} pathData fabricJS parsed path commands\n * @param {number} fractionDigits number of fraction digits to \"leave\"\n * @return {String} joined path 'M 0 0 L 20 30'\n */\nexport const joinPath = (pathData: TSimplePathData, fractionDigits?: number) =>\n  pathData\n    .map((segment) => {\n      return segment\n        .map((arg, i) => {\n          if (i === 0) return arg;\n          return fractionDigits === undefined\n            ? arg\n            : toFixed(arg, fractionDigits);\n        })\n        .join(' ');\n    })\n    .join(' ');\n", "import { getFabricWindow } from '../../env';\nimport { noop } from '../../constants';\nimport type { Abortable } from '../../typedefs';\nimport { SignalAbortedError } from './console';\n\ntype requestOptions = Abortable & {\n  onComplete?: (xhr: XMLHttpRequest) => void;\n};\n\n/**\n * Cross-browser abstraction for sending XMLHttpRequest\n * @deprecated this has to go away, we can use a modern browser method to do the same.\n * @param {String} url URL to send XMLHttpRequest to\n * @param {Object} [options] Options object\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @param {Function} options.onComplete Callback to invoke when request is completed\n * @return {XMLHttpRequest} request\n */\n\nexport function request(url: string, options: requestOptions = {}) {\n  const onComplete = options.onComplete || noop,\n    xhr = new (getFabricWindow().XMLHttpRequest)(),\n    signal = options.signal,\n    abort = function () {\n      xhr.abort();\n    },\n    removeListener = function () {\n      signal && signal.removeEventListener('abort', abort);\n      xhr.onerror = xhr.ontimeout = noop;\n    };\n\n  if (signal && signal.aborted) {\n    throw new SignalAbortedError('request');\n  } else if (signal) {\n    signal.addEventListener('abort', abort, { once: true });\n  }\n\n  /** @ignore */\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4) {\n      removeListener();\n      onComplete(xhr);\n      xhr.onreadystatechange = noop;\n    }\n  };\n\n  xhr.onerror = xhr.ontimeout = removeListener;\n\n  xhr.open('get', url, true);\n\n  xhr.send();\n  return xhr;\n}\n", "import { CENTER } from '../constants';\nimport type { FabricImage } from '../shapes/Image';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TMat2D } from '../typedefs';\nimport { qrDecompose } from './misc/matrix';\n\ntype FabricObjectWithTransformMatrix = FabricObject & {\n  transformMatrix?: TMat2D;\n};\n\n/**\n * This function is an helper for svg import. it decompose the transformMatrix\n * and assign properties to object.\n * untransformed coordinates\n * @private\n */\nconst _assignTransformMatrixProps = (\n  object: FabricObjectWithTransformMatrix\n) => {\n  if (object.transformMatrix) {\n    const { scaleX, scaleY, angle, skewX } = qrDecompose(\n      object.transformMatrix\n    );\n    object.flipX = false;\n    object.flipY = false;\n    object.set('scaleX', scaleX);\n    object.set('scaleY', scaleY);\n    object.angle = angle;\n    object.skewX = skewX;\n    object.skewY = 0;\n  }\n};\n\n/**\n * This function is an helper for svg import. it removes the transform matrix\n * and set to object properties that fabricjs can handle\n * @private\n * @param {Object} preserveAspectRatioOptions\n */\nexport const removeTransformMatrixForSvgParsing = (\n  object: FabricObjectWithTransformMatrix,\n  preserveAspectRatioOptions?: any\n) => {\n  let center = object._findCenterFromElement();\n  if (object.transformMatrix) {\n    _assignTransformMatrixProps(object);\n    center = center.transform(object.transformMatrix);\n  }\n  delete object.transformMatrix;\n  if (preserveAspectRatioOptions) {\n    object.scaleX *= preserveAspectRatioOptions.scaleX;\n    object.scaleY *= preserveAspectRatioOptions.scaleY;\n    (object as FabricImage).cropX = preserveAspectRatioOptions.cropX;\n    (object as FabricImage).cropY = preserveAspectRatioOptions.cropY;\n    center.x += preserveAspectRatioOptions.offsetLeft;\n    center.y += preserveAspectRatioOptions.offsetTop;\n    object.width = preserveAspectRatioOptions.width;\n    object.height = preserveAspectRatioOptions.height;\n  }\n  object.setPositionByOrigin(center, CENTER, CENTER);\n};\n", "import type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { sendObjectToPlane } from './planeChange';\nimport { Group } from '../../shapes/Group';\n/**\n * Merges 2 clip paths into one visually equal clip path\n *\n * **IMPORTANT**:\\\n * Does **NOT** clone the arguments, clone them proir if necessary.\n *\n * Creates a wrapper (group) that contains one clip path and is clipped by the other so content is kept where both overlap.\n * Use this method if both the clip paths may have nested clip paths of their own, so assigning one to the other's clip path property is not possible.\n *\n * In order to handle the `inverted` property we follow logic described in the following cases:\\\n * **(1)** both clip paths are inverted - the clip paths pass the inverted prop to the wrapper and loose it themselves.\\\n * **(2)** one is inverted and the other isn't - the wrapper shouldn't become inverted and the inverted clip path must clip the non inverted one to produce an identical visual effect.\\\n * **(3)** both clip paths are not inverted - wrapper and clip paths remain unchanged.\n *\n * @memberOf fabric.util\n * @param {fabric.Object} c1\n * @param {fabric.Object} c2\n * @returns {fabric.Object} merged clip path\n */\nexport const mergeClipPaths = (c1: FabricObject, c2: FabricObject) => {\n  let a = c1,\n    b = c2;\n  if (a.inverted && !b.inverted) {\n    //  case (2)\n    a = c2;\n    b = c1;\n  }\n  //  `b` becomes `a`'s clip path so we transform `b` to `a` coordinate plane\n  sendObjectToPlane(b, b.group?.calcTransformMatrix(), a.calcTransformMatrix());\n  //  assign the `inverted` prop to the wrapping group\n  const inverted = a.inverted && b.inverted;\n  if (inverted) {\n    //  case (1)\n    a.inverted = b.inverted = false;\n  }\n  return new Group([a], { clipPath: b, inverted });\n};\n", "import type { Point } from '../../Point';\nimport type { TRadian } from '../../typedefs';\n/**\n * Rotates `point` around `origin` with `radians`\n * @deprecated use the Point.rotate\n * @param {Point} origin The origin of the rotation\n * @param {Point} origin The origin of the rotation\n * @param {TRadian} radians The radians of the angle for the rotation\n * @return {Point} The new rotated point\n */\nexport const rotatePoint = (\n  point: Point,\n  origin: Point,\n  radians: TRadian\n): Point => point.rotate(radians, origin);\n", "import { getEnv, getFabricDocument } from '../../env';\nimport type { TSize } from '../../typedefs';\nimport { createCanvasElement, setStyle } from '../../util';\nimport type { CSSDimensions } from './util';\nimport {\n  allowTouchScrolling,\n  makeElementUnselectable,\n  setCSSDimensions,\n} from './util';\nimport type { CanvasItem } from './StaticCanvasDOMManager';\nimport { StaticCanvasDOMManager } from './StaticCanvasDOMManager';\nimport { setCanvasDimensions } from './util';\n\nexport class CanvasDOMManager extends StaticCanvasDOMManager {\n  upper: CanvasItem;\n  container: HTMLDivElement;\n\n  constructor(\n    arg0?: string | HTMLCanvasElement,\n    {\n      allowTouchScrolling = false,\n      containerClass = '',\n    }: {\n      allowTouchScrolling?: boolean;\n      /**\n       * @deprecated here only for backward compatibility\n       */\n      containerClass?: string;\n    } = {}\n  ) {\n    super(arg0);\n    const { el: lowerCanvasEl } = this.lower;\n    const upperCanvasEl = this.createUpperCanvas();\n    this.upper = { el: upperCanvasEl, ctx: upperCanvasEl.getContext('2d')! };\n    this.applyCanvasStyle(lowerCanvasEl, {\n      allowTouchScrolling,\n    });\n    this.applyCanvasStyle(upperCanvasEl, {\n      allowTouchScrolling,\n    });\n    const container = this.createContainerElement();\n    container.classList.add(containerClass);\n    if (lowerCanvasEl.parentNode) {\n      lowerCanvasEl.parentNode.replaceChild(container, lowerCanvasEl);\n    }\n    container.append(lowerCanvasEl, upperCanvasEl);\n    this.container = container;\n  }\n\n  protected createUpperCanvas() {\n    const { el: lowerCanvasEl } = this.lower;\n    const el = createCanvasElement();\n    // we assign the same classname of the lowerCanvas\n    el.className = lowerCanvasEl.className;\n    // but then we remove the lower-canvas specific className\n    el.classList.remove('lower-canvas');\n    // we add the specific upper-canvas class\n    el.classList.add('upper-canvas');\n    el.setAttribute('data-fabric', 'top');\n    el.style.cssText = lowerCanvasEl.style.cssText;\n    el.setAttribute('draggable', 'true');\n    return el;\n  }\n\n  protected createContainerElement() {\n    const container = getFabricDocument().createElement('div');\n    container.setAttribute('data-fabric', 'wrapper');\n    setStyle(container, {\n      position: 'relative',\n    });\n    makeElementUnselectable(container);\n    return container;\n  }\n\n  /**\n   * @private\n   * @param {HTMLCanvasElement} element canvas element to apply styles on\n   */\n  protected applyCanvasStyle(\n    element: HTMLCanvasElement,\n    { allowTouchScrolling: allow }: { allowTouchScrolling: boolean }\n  ) {\n    setStyle(element, {\n      position: 'absolute',\n      left: '0',\n      top: '0',\n    });\n    allowTouchScrolling(element, allow);\n    makeElementUnselectable(element);\n  }\n\n  setDimensions(size: TSize, retinaScaling: number) {\n    super.setDimensions(size, retinaScaling);\n    const { el, ctx } = this.upper;\n    setCanvasDimensions(el, ctx, size, retinaScaling);\n  }\n\n  setCSSDimensions(size: Partial<CSSDimensions>): void {\n    super.setCSSDimensions(size);\n    setCSSDimensions(this.upper.el, size);\n    setCSSDimensions(this.container, size);\n  }\n\n  cleanupDOM(size: TSize) {\n    const container = this.container,\n      { el: lowerCanvasEl } = this.lower,\n      { el: upperCanvasEl } = this.upper;\n    super.cleanupDOM(size);\n    container.removeChild(upperCanvasEl);\n    container.removeChild(lowerCanvasEl);\n    if (container.parentNode) {\n      container.parentNode.replaceChild(lowerCanvasEl, container);\n    }\n  }\n\n  dispose() {\n    super.dispose();\n    getEnv().dispose(this.upper.el);\n    // @ts-expect-error disposing\n    delete this.upper;\n    // @ts-expect-error disposing\n    delete this.container;\n  }\n}\n", "import { dragHandler } from '../controls/drag';\nimport { getActionFromCorner } from '../controls/util';\nimport { Point } from '../Point';\nimport { FabricObject } from '../shapes/Object/FabricObject';\nimport type {\n  CanvasEvents,\n  ModifierKey,\n  TOptionalModifierKey,\n  TPointerEvent,\n  Transform,\n} from '../EventTypeDefs';\nimport {\n  addTransformToObject,\n  saveObjectTransform,\n} from '../util/misc/objectTransforms';\nimport type { TCanvasSizeOptions } from './StaticCanvas';\nimport { StaticCanvas } from './StaticCanvas';\nimport { isCollection } from '../Collection';\nimport { isTransparent } from '../util/misc/isTransparent';\nimport type {\n  TMat2D,\n  TOriginX,\n  TOriginY,\n  TSize,\n  TSVGReviver,\n} from '../typedefs';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { getPointer, isTouchEvent } from '../util/dom_event';\nimport type { IText } from '../shapes/IText/IText';\nimport type { BaseBrush } from '../brushes/BaseBrush';\nimport { pick } from '../util/misc/pick';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { cos, createCanvasElement, sin } from '../util';\nimport { CanvasDOMManager } from './DOMManagers/CanvasDOMManager';\nimport { BOTTOM, CENTER, LEFT, RIGHT, TOP } from '../constants';\nimport type { CanvasOptions } from './CanvasOptions';\nimport { canvasDefaults } from './CanvasOptions';\nimport { Intersection } from '../Intersection';\nimport { isActiveSelection } from '../util/typeAssertions';\n\n/**\n * Canvas class\n * @class Canvas\n * @extends StaticCanvas\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}\n *\n * @fires object:modified at the end of a transform\n * @fires object:rotating while an object is being rotated from the control\n * @fires object:scaling while an object is being scaled by controls\n * @fires object:moving while an object is being dragged\n * @fires object:skewing while an object is being skewed from the controls\n *\n * @fires before:transform before a transform is is started\n * @fires before:selection:cleared\n * @fires selection:cleared\n * @fires selection:updated\n * @fires selection:created\n *\n * @fires path:created after a drawing operation ends and the path is added\n * @fires mouse:down\n * @fires mouse:move\n * @fires mouse:up\n * @fires mouse:down:before  on mouse down, before the inner fabric logic runs\n * @fires mouse:move:before on mouse move, before the inner fabric logic runs\n * @fires mouse:up:before on mouse up, before the inner fabric logic runs\n * @fires mouse:over\n * @fires mouse:out\n * @fires mouse:dblclick whenever a native dbl click event fires on the canvas.\n *\n * @fires dragover\n * @fires dragenter\n * @fires dragleave\n * @fires drag:enter object drag enter\n * @fires drag:leave object drag leave\n * @fires drop:before before drop event. Prepare for the drop event (same native event).\n * @fires drop\n * @fires drop:after after drop event. Run logic on canvas after event has been accepted/declined (same native event).\n * @example\n * let a: fabric.Object, b: fabric.Object;\n * let flag = false;\n * canvas.add(a, b);\n * a.on('drop:before', opt => {\n *  //  we want a to accept the drop even though it's below b in the stack\n *  flag = this.canDrop(opt.e);\n * });\n * b.canDrop = function(e) {\n *  !flag && this.draggableTextDelegate.canDrop(e);\n * }\n * b.on('dragover', opt => b.set('fill', opt.dropTarget === b ? 'pink' : 'black'));\n * a.on('drop', opt => {\n *  opt.e.defaultPrevented  //  drop occurred\n *  opt.didDrop             //  drop occurred on canvas\n *  opt.target              //  drop target\n *  opt.target !== a && a.set('text', 'I lost');\n * });\n * canvas.on('drop:after', opt => {\n *  //  inform user who won\n *  if(!opt.e.defaultPrevented) {\n *    // no winners\n *  }\n *  else if(!opt.didDrop) {\n *    //  my objects didn't win, some other lucky object\n *  }\n *  else {\n *    //  we have a winner it's opt.target!!\n *  }\n * })\n *\n * @fires after:render at the end of the render process, receives the context in the callback\n * @fires before:render at start the render process, receives the context in the callback\n *\n * @fires contextmenu:before\n * @fires contextmenu\n * @example\n * let handler;\n * targets.forEach(target => {\n *   target.on('contextmenu:before', opt => {\n *     //  decide which target should handle the event before canvas hijacks it\n *     if (someCaseHappens && opt.targets.includes(target)) {\n *       handler = target;\n *     }\n *   });\n *   target.on('contextmenu', opt => {\n *     //  do something fantastic\n *   });\n * });\n * canvas.on('contextmenu', opt => {\n *   if (!handler) {\n *     //  no one takes responsibility, it's always left to me\n *     //  let's show them how it's done!\n *   }\n * });\n *\n */\nexport class SelectableCanvas<EventSpec extends CanvasEvents = CanvasEvents>\n  extends StaticCanvas<EventSpec>\n  implements Omit<CanvasOptions, 'enablePointerEvents'>\n{\n  declare _objects: FabricObject[];\n\n  // transform config\n  declare uniformScaling: boolean;\n  declare uniScaleKey: TOptionalModifierKey;\n  declare centeredScaling: boolean;\n  declare centeredRotation: boolean;\n  declare centeredKey: TOptionalModifierKey;\n  declare altActionKey: TOptionalModifierKey;\n\n  // selection config\n  declare selection: boolean;\n  declare selectionKey: TOptionalModifierKey | ModifierKey[];\n  declare altSelectionKey: TOptionalModifierKey;\n  declare selectionColor: string;\n  declare selectionDashArray: number[];\n  declare selectionBorderColor: string;\n  declare selectionLineWidth: number;\n  declare selectionFullyContained: boolean;\n\n  // cursors\n  declare hoverCursor: CSSStyleDeclaration['cursor'];\n  declare moveCursor: CSSStyleDeclaration['cursor'];\n  declare defaultCursor: CSSStyleDeclaration['cursor'];\n  declare freeDrawingCursor: CSSStyleDeclaration['cursor'];\n  declare notAllowedCursor: CSSStyleDeclaration['cursor'];\n\n  declare containerClass: string;\n\n  // target find config\n  declare perPixelTargetFind: boolean;\n  declare targetFindTolerance: number;\n  declare skipTargetFind: boolean;\n\n  /**\n   * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\n   * After mousedown, mousemove creates a shape,\n   * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}\n   * @type Boolean\n   * @default\n   */\n  declare isDrawingMode: boolean;\n\n  declare preserveObjectStacking: boolean;\n\n  // event config\n  declare stopContextMenu: boolean;\n  declare fireRightClick: boolean;\n  declare fireMiddleClick: boolean;\n\n  /**\n   * Keep track of the subTargets for Mouse Events, ordered bottom up from innermost nested subTarget\n   * @type FabricObject[]\n   */\n  targets: FabricObject[] = [];\n\n  /**\n   * Keep track of the hovered target\n   * @type FabricObject | null\n   * @private\n   */\n  declare _hoveredTarget?: FabricObject;\n\n  /**\n   * hold the list of nested targets hovered\n   * @type FabricObject[]\n   * @private\n   */\n  _hoveredTargets: FabricObject[] = [];\n\n  /**\n   * hold the list of objects to render\n   * @type FabricObject[]\n   * @private\n   */\n  _objectsToRender?: FabricObject[];\n\n  /**\n   * hold a reference to a data structure that contains information\n   * on the current on going transform\n   * @type\n   * @private\n   */\n  _currentTransform: Transform | null = null;\n\n  /**\n   * hold a reference to a data structure used to track the selection\n   * box on canvas drag\n   * on the current on going transform\n   * x, y, deltaX and deltaY are in scene plane\n   * @type\n   * @private\n   */\n  protected _groupSelector: {\n    x: number;\n    y: number;\n    deltaX: number;\n    deltaY: number;\n  } | null = null;\n\n  /**\n   * internal flag used to understand if the context top requires a cleanup\n   * in case this is true, the contextTop will be cleared at the next render\n   * @type boolean\n   * @private\n   */\n  contextTopDirty = false;\n\n  /**\n   * During a mouse event we may need the pointer multiple times in multiple functions.\n   * _absolutePointer holds a reference to the pointer in fabricCanvas/design coordinates that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * We do this because there are some HTML DOM inspection functions to get the actual pointer coordinates\n   * @type {Point}\n   */\n  protected declare _absolutePointer?: Point;\n\n  /**\n   * During a mouse event we may need the pointer multiple times in multiple functions.\n   * _pointer holds a reference to the pointer in html coordinates that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * We do this because there are some HTML DOM inspection functions to get the actual pointer coordinates\n   * @type {Point}\n   */\n  protected declare _pointer?: Point;\n\n  /**\n   * During a mouse event we may need the target multiple times in multiple functions.\n   * _target holds a reference to the target that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * @type {FabricObject}\n   */\n  protected declare _target?: FabricObject;\n\n  static ownDefaults = canvasDefaults;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...SelectableCanvas.ownDefaults };\n  }\n\n  declare elements: CanvasDOMManager;\n  get upperCanvasEl() {\n    return this.elements.upper?.el;\n  }\n  get contextTop() {\n    return this.elements.upper?.ctx;\n  }\n  get wrapperEl() {\n    return this.elements.container;\n  }\n  private declare pixelFindCanvasEl: HTMLCanvasElement;\n  private declare pixelFindContext: CanvasRenderingContext2D;\n\n  protected declare _isCurrentlyDrawing: boolean;\n  declare freeDrawingBrush?: BaseBrush;\n  declare _activeObject?: FabricObject;\n\n  protected initElements(el?: string | HTMLCanvasElement) {\n    this.elements = new CanvasDOMManager(el, {\n      allowTouchScrolling: this.allowTouchScrolling,\n      containerClass: this.containerClass,\n    });\n    this._createCacheCanvas();\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} obj Object that was added\n   */\n  _onObjectAdded(obj: FabricObject) {\n    this._objectsToRender = undefined;\n    super._onObjectAdded(obj);\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} obj Object that was removed\n   */\n  _onObjectRemoved(obj: FabricObject) {\n    this._objectsToRender = undefined;\n    // removing active object should fire \"selection:cleared\" events\n    if (obj === this._activeObject) {\n      this.fire('before:selection:cleared', { deselected: [obj] });\n      this._discardActiveObject();\n      this.fire('selection:cleared', { deselected: [obj] });\n      obj.fire('deselected', {\n        target: obj,\n      });\n    }\n    if (obj === this._hoveredTarget) {\n      this._hoveredTarget = undefined;\n      this._hoveredTargets = [];\n    }\n    super._onObjectRemoved(obj);\n  }\n\n  _onStackOrderChanged() {\n    this._objectsToRender = undefined;\n    super._onStackOrderChanged();\n  }\n\n  /**\n   * Divides objects in two groups, one to render immediately\n   * and one to render as activeGroup.\n   * @return {Array} objects to render immediately and pushes the other in the activeGroup.\n   */\n  _chooseObjectsToRender(): FabricObject[] {\n    const activeObject = this._activeObject;\n    return !this.preserveObjectStacking && activeObject\n      ? this._objects\n          .filter((object) => !object.group && object !== activeObject)\n          .concat(activeObject)\n      : this._objects;\n  }\n\n  /**\n   * Renders both the top canvas and the secondary container canvas.\n   */\n  renderAll() {\n    this.cancelRequestedRender();\n    if (this.destroyed) {\n      return;\n    }\n    if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {\n      this.clearContext(this.contextTop);\n      this.contextTopDirty = false;\n    }\n    if (this.hasLostContext) {\n      this.renderTopLayer(this.contextTop);\n      this.hasLostContext = false;\n    }\n    !this._objectsToRender &&\n      (this._objectsToRender = this._chooseObjectsToRender());\n    this.renderCanvas(this.getContext(), this._objectsToRender);\n  }\n\n  /**\n   * text selection is rendered by the active text instance during the rendering cycle\n   */\n  renderTopLayer(ctx: CanvasRenderingContext2D): void {\n    ctx.save();\n    if (this.isDrawingMode && this._isCurrentlyDrawing) {\n      this.freeDrawingBrush && this.freeDrawingBrush._render();\n      this.contextTopDirty = true;\n    }\n    // we render the top context - last object\n    if (this.selection && this._groupSelector) {\n      this._drawSelection(ctx);\n      this.contextTopDirty = true;\n    }\n    ctx.restore();\n  }\n\n  /**\n   * Method to render only the top canvas.\n   * Also used to render the group selection box.\n   * Does not render text selection.\n   */\n  renderTop() {\n    const ctx = this.contextTop;\n    this.clearContext(ctx);\n    this.renderTopLayer(ctx);\n    // todo: how do i know if the after:render is for the top or normal contex?\n    this.fire('after:render', { ctx });\n  }\n\n  /**\n   * Set the canvas tolerance value for pixel taret find.\n   * Use only integer numbers.\n   * @private\n   */\n  setTargetFindTolerance(value: number) {\n    value = Math.round(value);\n    this.targetFindTolerance = value;\n    const retina = this.getRetinaScaling();\n    const size = Math.ceil((value * 2 + 1) * retina);\n    this.pixelFindCanvasEl.width = this.pixelFindCanvasEl.height = size;\n    this.pixelFindContext.scale(retina, retina);\n  }\n\n  /**\n   * Returns true if object is transparent at a certain location\n   * Clarification: this is `is target transparent at location X or are controls there`\n   * @TODO this seems dumb that we treat controls with transparency. we can find controls\n   * programmatically without painting them, the cache canvas optimization is always valid\n   * @param {FabricObject} target Object to check\n   * @param {Number} x Left coordinate in viewport space\n   * @param {Number} y Top coordinate in viewport space\n   * @return {Boolean}\n   */\n  isTargetTransparent(target: FabricObject, x: number, y: number): boolean {\n    const tolerance = this.targetFindTolerance;\n    const ctx = this.pixelFindContext;\n    this.clearContext(ctx);\n    ctx.save();\n    ctx.translate(-x + tolerance, -y + tolerance);\n    ctx.transform(...this.viewportTransform);\n    const selectionBgc = target.selectionBackgroundColor;\n    target.selectionBackgroundColor = '';\n    target.render(ctx);\n    target.selectionBackgroundColor = selectionBgc;\n    ctx.restore();\n    // our canvas is square, and made around tolerance.\n    // so tolerance in this case also represent the center of the canvas.\n    const enhancedTolerance = Math.round(tolerance * this.getRetinaScaling());\n    return isTransparent(\n      ctx,\n      enhancedTolerance,\n      enhancedTolerance,\n      enhancedTolerance\n    );\n  }\n\n  /**\n   * takes an event and determines if selection key has been pressed\n   * @private\n   * @param {TPointerEvent} e Event object\n   */\n  _isSelectionKeyPressed(e: TPointerEvent): boolean {\n    const sKey = this.selectionKey;\n    if (!sKey) {\n      return false;\n    }\n    if (Array.isArray(sKey)) {\n      return !!sKey.find((key) => !!key && e[key] === true);\n    } else {\n      return e[sKey];\n    }\n  }\n\n  /**\n   * @private\n   * @param {TPointerEvent} e Event object\n   * @param {FabricObject} target\n   */\n  _shouldClearSelection(\n    e: TPointerEvent,\n    target?: FabricObject\n  ): target is undefined {\n    const activeObjects = this.getActiveObjects(),\n      activeObject = this._activeObject;\n\n    return !!(\n      !target ||\n      (target &&\n        activeObject &&\n        activeObjects.length > 1 &&\n        activeObjects.indexOf(target) === -1 &&\n        activeObject !== target &&\n        !this._isSelectionKeyPressed(e)) ||\n      (target && !target.evented) ||\n      (target && !target.selectable && activeObject && activeObject !== target)\n    );\n  }\n\n  /**\n   * This method will take in consideration a modifier key pressed and the control we are\n   * about to drag, and try to guess the anchor point ( origin ) of the transormation.\n   * This should be really in the realm of controls, and we should remove specific code for legacy\n   * embedded actions.\n   * @TODO this probably deserve discussion/rediscovery and change/refactor\n   * @private\n   * @deprecated\n   * @param {FabricObject} target\n   * @param {string} action\n   * @param {boolean} altKey\n   * @returns {boolean} true if the transformation should be centered\n   */\n  private _shouldCenterTransform(\n    target: FabricObject,\n    action: string,\n    modifierKeyPressed: boolean\n  ) {\n    if (!target) {\n      return;\n    }\n\n    let centerTransform;\n\n    if (\n      action === 'scale' ||\n      action === 'scaleX' ||\n      action === 'scaleY' ||\n      action === 'resizing'\n    ) {\n      centerTransform = this.centeredScaling || target.centeredScaling;\n    } else if (action === 'rotate') {\n      centerTransform = this.centeredRotation || target.centeredRotation;\n    }\n\n    return centerTransform ? !modifierKeyPressed : modifierKeyPressed;\n  }\n\n  /**\n   * Given the control clicked, determine the origin of the transform.\n   * This is bad because controls can totally have custom names\n   * should disappear before release 4.0\n   * @private\n   * @deprecated\n   */\n  _getOriginFromCorner(\n    target: FabricObject,\n    controlName: string\n  ): { x: TOriginX; y: TOriginY } {\n    const origin = {\n      x: target.originX,\n      y: target.originY,\n    };\n\n    if (!controlName) {\n      return origin;\n    }\n\n    // is a left control ?\n    if (['ml', 'tl', 'bl'].includes(controlName)) {\n      origin.x = RIGHT;\n      // is a right control ?\n    } else if (['mr', 'tr', 'br'].includes(controlName)) {\n      origin.x = LEFT;\n    }\n    // is a top control ?\n    if (['tl', 'mt', 'tr'].includes(controlName)) {\n      origin.y = BOTTOM;\n      // is a bottom control ?\n    } else if (['bl', 'mb', 'br'].includes(controlName)) {\n      origin.y = TOP;\n    }\n    return origin;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object\n   * @param {FabricObject} target\n   * @param {boolean} [alreadySelected] pass true to setup the active control\n   */\n  _setupCurrentTransform(\n    e: TPointerEvent,\n    target: FabricObject,\n    alreadySelected: boolean\n  ): void {\n    const pointer = target.group\n      ? // transform pointer to target's containing coordinate plane\n        sendPointToPlane(\n          this.getScenePoint(e),\n          undefined,\n          target.group.calcTransformMatrix()\n        )\n      : this.getScenePoint(e);\n    const { key: corner = '', control } = target.getActiveControl() || {},\n      actionHandler =\n        alreadySelected && control\n          ? control.getActionHandler(e, target, control)?.bind(control)\n          : dragHandler,\n      action = getActionFromCorner(alreadySelected, corner, e, target),\n      altKey = e[this.centeredKey as ModifierKey],\n      origin = this._shouldCenterTransform(target, action, altKey)\n        ? ({ x: CENTER, y: CENTER } as const)\n        : this._getOriginFromCorner(target, corner),\n      /**\n       * relative to target's containing coordinate plane\n       * both agree on every point\n       **/\n      transform: Transform = {\n        target: target,\n        action,\n        actionHandler,\n        actionPerformed: false,\n        corner,\n        scaleX: target.scaleX,\n        scaleY: target.scaleY,\n        skewX: target.skewX,\n        skewY: target.skewY,\n        offsetX: pointer.x - target.left,\n        offsetY: pointer.y - target.top,\n        originX: origin.x,\n        originY: origin.y,\n        ex: pointer.x,\n        ey: pointer.y,\n        lastX: pointer.x,\n        lastY: pointer.y,\n        theta: degreesToRadians(target.angle),\n        width: target.width,\n        height: target.height,\n        shiftKey: e.shiftKey,\n        altKey,\n        original: {\n          ...saveObjectTransform(target),\n          originX: origin.x,\n          originY: origin.y,\n        },\n      };\n\n    this._currentTransform = transform;\n\n    this.fire('before:transform', {\n      e,\n      transform,\n    });\n  }\n\n  /**\n   * Set the cursor type of the canvas element\n   * @param {String} value Cursor type of the canvas element.\n   * @see http://www.w3.org/TR/css3-ui/#cursor\n   */\n  setCursor(value: CSSStyleDeclaration['cursor']): void {\n    this.upperCanvasEl.style.cursor = value;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx to draw the selection on\n   */\n  _drawSelection(ctx: CanvasRenderingContext2D): void {\n    const { x, y, deltaX, deltaY } = this._groupSelector!,\n      start = new Point(x, y).transform(this.viewportTransform),\n      extent = new Point(x + deltaX, y + deltaY).transform(\n        this.viewportTransform\n      ),\n      strokeOffset = this.selectionLineWidth / 2;\n    let minX = Math.min(start.x, extent.x),\n      minY = Math.min(start.y, extent.y),\n      maxX = Math.max(start.x, extent.x),\n      maxY = Math.max(start.y, extent.y);\n\n    if (this.selectionColor) {\n      ctx.fillStyle = this.selectionColor;\n      ctx.fillRect(minX, minY, maxX - minX, maxY - minY);\n    }\n\n    if (!this.selectionLineWidth || !this.selectionBorderColor) {\n      return;\n    }\n    ctx.lineWidth = this.selectionLineWidth;\n    ctx.strokeStyle = this.selectionBorderColor;\n\n    minX += strokeOffset;\n    minY += strokeOffset;\n    maxX -= strokeOffset;\n    maxY -= strokeOffset;\n    // selection border\n    // @TODO: is _setLineDash still necessary on modern canvas?\n    FabricObject.prototype._setLineDash.call(\n      this,\n      ctx,\n      this.selectionDashArray\n    );\n    ctx.strokeRect(minX, minY, maxX - minX, maxY - minY);\n  }\n\n  /**\n   * Method that determines what object we are clicking on\n   * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target\n   * or the outside part of the corner.\n   * @param {Event} e mouse event\n   * @return {FabricObject | null} the target found\n   */\n  findTarget(e: TPointerEvent): FabricObject | undefined {\n    if (this.skipTargetFind) {\n      return undefined;\n    }\n\n    const pointer = this.getViewportPoint(e),\n      activeObject = this._activeObject,\n      aObjects = this.getActiveObjects();\n\n    this.targets = [];\n\n    if (activeObject && aObjects.length >= 1) {\n      if (activeObject.findControl(pointer, isTouchEvent(e))) {\n        // if we hit the corner of the active object, let's return that.\n        return activeObject;\n      } else if (\n        aObjects.length > 1 &&\n        // check pointer is over active selection and possibly perform `subTargetCheck`\n        this.searchPossibleTargets([activeObject], pointer)\n      ) {\n        // active selection does not select sub targets like normal groups\n        return activeObject;\n      } else if (\n        activeObject === this.searchPossibleTargets([activeObject], pointer)\n      ) {\n        // active object is not an active selection\n        if (!this.preserveObjectStacking) {\n          return activeObject;\n        } else {\n          const subTargets = this.targets;\n          this.targets = [];\n          const target = this.searchPossibleTargets(this._objects, pointer);\n          if (\n            e[this.altSelectionKey as ModifierKey] &&\n            target &&\n            target !== activeObject\n          ) {\n            // alt selection: select active object even though it is not the top most target\n            // restore targets\n            this.targets = subTargets;\n            return activeObject;\n          }\n          return target;\n        }\n      }\n    }\n\n    return this.searchPossibleTargets(this._objects, pointer);\n  }\n\n  /**\n   * Checks if the point is inside the object selection area including padding\n   * @param {FabricObject} obj Object to test against\n   * @param {Object} [pointer] point in scene coordinates\n   * @return {Boolean} true if point is contained within an area of given object\n   * @private\n   */\n  private _pointIsInObjectSelectionArea(obj: FabricObject, point: Point) {\n    // getCoords will already take care of group de-nesting\n    let coords = obj.getCoords();\n    const viewportZoom = this.getZoom();\n    const padding = obj.padding / viewportZoom;\n    if (padding) {\n      const [tl, tr, br, bl] = coords;\n      // what is the angle of the object?\n      // we could use getTotalAngle, but is way easier to look at it\n      // from how coords are oriented, since if something went wrong\n      // at least we are consistent.\n      const angleRadians = Math.atan2(tr.y - tl.y, tr.x - tl.x),\n        cosP = cos(angleRadians) * padding,\n        sinP = sin(angleRadians) * padding,\n        cosPSinP = cosP + sinP,\n        cosPMinusSinP = cosP - sinP;\n\n      coords = [\n        new Point(tl.x - cosPMinusSinP, tl.y - cosPSinP),\n        new Point(tr.x + cosPSinP, tr.y - cosPMinusSinP),\n        new Point(br.x + cosPMinusSinP, br.y + cosPSinP),\n        new Point(bl.x - cosPSinP, bl.y + cosPMinusSinP),\n      ];\n      // in case of padding we calculate the new coords on the fly.\n      // otherwise we have to maintain 2 sets of coordinates for everything.\n      // we can reiterate on storing them.\n      // if this is slow, for now the semplification is large and doesn't impact\n      // rendering.\n      // the idea behind this is that outside target check we don't need ot know\n      // where those coords are\n    }\n    return Intersection.isPointInPolygon(point, coords);\n  }\n\n  /**\n   * Checks point is inside the object selection condition. Either area with padding\n   * or over pixels if perPixelTargetFind is enabled\n   * @param {FabricObject} obj Object to test against\n   * @param {Object} [pointer] point from viewport.\n   * @return {Boolean} true if point is contained within an area of given object\n   * @private\n   */\n  _checkTarget(obj: FabricObject, pointer: Point): boolean {\n    if (\n      obj &&\n      obj.visible &&\n      obj.evented &&\n      this._pointIsInObjectSelectionArea(\n        obj,\n        sendPointToPlane(pointer, undefined, this.viewportTransform)\n      )\n    ) {\n      if (\n        (this.perPixelTargetFind || obj.perPixelTargetFind) &&\n        !(obj as unknown as IText).isEditing\n      ) {\n        if (!this.isTargetTransparent(obj, pointer.x, pointer.y)) {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Internal Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\n   * @param {Array} [objects] objects array to look into\n   * @param {Object} [pointer] x,y object of point coordinates we want to check.\n   * @return {FabricObject} **top most object from given `objects`** that contains pointer\n   * @private\n   */\n  _searchPossibleTargets(\n    objects: FabricObject[],\n    pointer: Point\n  ): FabricObject | undefined {\n    // Cache all targets where their bounding box contains point.\n    let i = objects.length;\n    // Do not check for currently grouped objects, since we check the parent group itself.\n    // until we call this function specifically to search inside the activeGroup\n    while (i--) {\n      const target = objects[i];\n      if (this._checkTarget(target, pointer)) {\n        if (isCollection(target) && target.subTargetCheck) {\n          const subTarget = this._searchPossibleTargets(\n            target._objects as FabricObject[],\n            pointer\n          );\n          subTarget && this.targets.push(subTarget);\n        }\n        return target;\n      }\n    }\n  }\n\n  /**\n   * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\n   * @see {@link _searchPossibleTargets}\n   * @param {FabricObject[]} [objects] objects array to look into\n   * @param {Point} [pointer] coordinates from viewport to check.\n   * @return {FabricObject} **top most object on screen** that contains pointer\n   */\n  searchPossibleTargets(\n    objects: FabricObject[],\n    pointer: Point\n  ): FabricObject | undefined {\n    const target = this._searchPossibleTargets(objects, pointer);\n\n    // if we found something in this.targets, and the group is interactive, return the innermost subTarget\n    // that is still interactive\n    // TODO: reverify why interactive. the target should be returned always, but selected only\n    // if interactive.\n    if (\n      target &&\n      isCollection(target) &&\n      target.interactive &&\n      this.targets[0]\n    ) {\n      /** targets[0] is the innermost nested target, but it could be inside non interactive groups and so not a selection target */\n      const targets = this.targets;\n      for (let i = targets.length - 1; i > 0; i--) {\n        const t = targets[i];\n        if (!(isCollection(t) && t.interactive)) {\n          // one of the subtargets was not interactive. that is the last subtarget we can return.\n          // we can't dig more deep;\n          return t;\n        }\n      }\n      return targets[0];\n    }\n\n    return target;\n  }\n\n  /**\n   * @returns point existing in the same plane as the {@link HTMLCanvasElement},\n   * `(0, 0)` being the top left corner of the {@link HTMLCanvasElement}.\n   * This means that changes to the {@link viewportTransform} do not change the values of the point\n   * and it remains unchanged from the viewer's perspective.\n   *\n   * @example\n   * const scenePoint = sendPointToPlane(\n   *  this.getViewportPoint(e),\n   *  undefined,\n   *  canvas.viewportTransform\n   * );\n   *\n   */\n  getViewportPoint(e: TPointerEvent) {\n    if (this._pointer) {\n      return this._pointer;\n    }\n    return this.getPointer(e, true);\n  }\n\n  /**\n   * @returns point existing in the scene (the same plane as the plane {@link FabricObject#getCenterPoint} exists in).\n   * This means that changes to the {@link viewportTransform} do not change the values of the point,\n   * however, from the viewer's perspective, the point is changed.\n   *\n   * @example\n   * const viewportPoint = sendPointToPlane(\n   *  this.getScenePoint(e),\n   *  canvas.viewportTransform\n   * );\n   *\n   */\n  getScenePoint(e: TPointerEvent) {\n    if (this._absolutePointer) {\n      return this._absolutePointer;\n    }\n    return this.getPointer(e);\n  }\n\n  /**\n   * Returns pointer relative to canvas.\n   *\n   * @deprecated This method is deprecated since v6 to protect you from misuse.\n   * Use {@link getViewportPoint} or {@link getScenePoint} instead.\n   *\n   * @param {Event} e\n   * @param {Boolean} [fromViewport] whether to return the point from the viewport or in the scene\n   * @return {Point}\n   */\n  getPointer(e: TPointerEvent, fromViewport = false): Point {\n    const upperCanvasEl = this.upperCanvasEl,\n      bounds = upperCanvasEl.getBoundingClientRect();\n    let pointer = getPointer(e),\n      boundsWidth = bounds.width || 0,\n      boundsHeight = bounds.height || 0;\n\n    if (!boundsWidth || !boundsHeight) {\n      if (TOP in bounds && BOTTOM in bounds) {\n        boundsHeight = Math.abs(bounds.top - bounds.bottom);\n      }\n      if (RIGHT in bounds && LEFT in bounds) {\n        boundsWidth = Math.abs(bounds.right - bounds.left);\n      }\n    }\n\n    this.calcOffset();\n    pointer.x = pointer.x - this._offset.left;\n    pointer.y = pointer.y - this._offset.top;\n    if (!fromViewport) {\n      pointer = sendPointToPlane(pointer, undefined, this.viewportTransform);\n    }\n\n    const retinaScaling = this.getRetinaScaling();\n    if (retinaScaling !== 1) {\n      pointer.x /= retinaScaling;\n      pointer.y /= retinaScaling;\n    }\n\n    // If bounds are not available (i.e. not visible), do not apply scale.\n    const cssScale =\n      boundsWidth === 0 || boundsHeight === 0\n        ? new Point(1, 1)\n        : new Point(\n            upperCanvasEl.width / boundsWidth,\n            upperCanvasEl.height / boundsHeight\n          );\n\n    return pointer.multiply(cssScale);\n  }\n\n  /**\n   * Internal use only\n   * @protected\n   */\n  protected _setDimensionsImpl(\n    dimensions: TSize,\n    options?: TCanvasSizeOptions\n  ) {\n    // @ts-expect-error this method exists in the subclass - should be moved or declared as abstract\n    this._resetTransformEventData();\n    super._setDimensionsImpl(dimensions, options);\n    if (this._isCurrentlyDrawing) {\n      this.freeDrawingBrush &&\n        this.freeDrawingBrush._setBrushStyles(this.contextTop);\n    }\n  }\n\n  protected _createCacheCanvas() {\n    this.pixelFindCanvasEl = createCanvasElement();\n    this.pixelFindContext = this.pixelFindCanvasEl.getContext('2d', {\n      willReadFrequently: true,\n    })!;\n    this.setTargetFindTolerance(this.targetFindTolerance);\n  }\n\n  /**\n   * Returns context of top canvas where interactions are drawn\n   * @returns {CanvasRenderingContext2D}\n   */\n  getTopContext(): CanvasRenderingContext2D {\n    return this.elements.upper.ctx;\n  }\n\n  /**\n   * Returns context of canvas where object selection is drawn\n   * @alias\n   * @return {CanvasRenderingContext2D}\n   */\n  getSelectionContext(): CanvasRenderingContext2D {\n    return this.elements.upper.ctx;\n  }\n\n  /**\n   * Returns &lt;canvas> element on which object selection is drawn\n   * @return {HTMLCanvasElement}\n   */\n  getSelectionElement(): HTMLCanvasElement {\n    return this.elements.upper.el;\n  }\n\n  /**\n   * Returns currently active object\n   * @return {FabricObject | null} active object\n   */\n  getActiveObject(): FabricObject | undefined {\n    return this._activeObject;\n  }\n\n  /**\n   * Returns an array with the current selected objects\n   * @return {FabricObject[]} active objects array\n   */\n  getActiveObjects(): FabricObject[] {\n    const active = this._activeObject;\n    return isActiveSelection(active)\n      ? active.getObjects()\n      : active\n      ? [active]\n      : [];\n  }\n\n  /**\n   * @private\n   * Compares the old activeObject with the current one and fires correct events\n   * @param {FabricObject[]} oldObjects old activeObject\n   * @param {TPointerEvent} e mouse event triggering the selection events\n   */\n  _fireSelectionEvents(oldObjects: FabricObject[], e?: TPointerEvent) {\n    let somethingChanged = false,\n      invalidate = false;\n    const objects = this.getActiveObjects(),\n      added: FabricObject[] = [],\n      removed: FabricObject[] = [];\n\n    oldObjects.forEach((target) => {\n      if (!objects.includes(target)) {\n        somethingChanged = true;\n        target.fire('deselected', {\n          e,\n          target,\n        });\n        removed.push(target);\n      }\n    });\n\n    objects.forEach((target) => {\n      if (!oldObjects.includes(target)) {\n        somethingChanged = true;\n        target.fire('selected', {\n          e,\n          target,\n        });\n        added.push(target);\n      }\n    });\n\n    if (oldObjects.length > 0 && objects.length > 0) {\n      invalidate = true;\n      somethingChanged &&\n        this.fire('selection:updated', {\n          e,\n          selected: added,\n          deselected: removed,\n        });\n    } else if (objects.length > 0) {\n      invalidate = true;\n      this.fire('selection:created', {\n        e,\n        selected: added,\n      });\n    } else if (oldObjects.length > 0) {\n      invalidate = true;\n      this.fire('selection:cleared', {\n        e,\n        deselected: removed,\n      });\n    }\n    invalidate && (this._objectsToRender = undefined);\n  }\n\n  /**\n   * Sets given object as the only active object on canvas\n   * @param {FabricObject} object Object to set as an active one\n   * @param {TPointerEvent} [e] Event (passed along when firing \"object:selected\")\n   * @return {Boolean} true if the object has been selected\n   */\n  setActiveObject(object: FabricObject, e?: TPointerEvent) {\n    // we can't inline this, since _setActiveObject will change what getActiveObjects returns\n    const currentActives = this.getActiveObjects();\n    const selected = this._setActiveObject(object, e);\n    this._fireSelectionEvents(currentActives, e);\n    return selected;\n  }\n\n  /**\n   * This is supposed to be equivalent to setActiveObject but without firing\n   * any event. There is commitment to have this stay this way.\n   * This is the functional part of setActiveObject.\n   * @param {Object} object to set as active\n   * @param {Event} [e] Event (passed along when firing \"object:selected\")\n   * @return {Boolean} true if the object has been selected\n   */\n  _setActiveObject(object: FabricObject, e?: TPointerEvent) {\n    const prevActiveObject = this._activeObject;\n    if (prevActiveObject === object) {\n      return false;\n    }\n    // after calling this._discardActiveObject, this,_activeObject could be undefined\n    if (!this._discardActiveObject(e, object) && this._activeObject) {\n      // refused to deselect\n      return false;\n    }\n    if (object.onSelect({ e })) {\n      return false;\n    }\n\n    this._activeObject = object;\n\n    if (isActiveSelection(object) && prevActiveObject !== object) {\n      object.set('canvas', this);\n      object.setCoords();\n    }\n\n    return true;\n  }\n\n  /**\n   * This is supposed to be equivalent to discardActiveObject but without firing\n   * any selection events ( can still fire object transformation events ). There is commitment to have this stay this way.\n   * This is the functional part of discardActiveObject.\n   * @param {Event} [e] Event (passed along when firing \"object:deselected\")\n   * @param {Object} object the next object to set as active, reason why we are discarding this\n   * @return {Boolean} true if the active object has been discarded\n   */\n  _discardActiveObject(\n    e?: TPointerEvent,\n    object?: FabricObject\n  ): this is { _activeObject: undefined } {\n    const obj = this._activeObject;\n    if (obj) {\n      // onDeselect return TRUE to cancel selection;\n      if (obj.onDeselect({ e, object })) {\n        return false;\n      }\n      if (this._currentTransform && this._currentTransform.target === obj) {\n        this.endCurrentTransform(e);\n      }\n      this._activeObject = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Discards currently active object and fire events. If the function is called by fabric\n   * as a consequence of a mouse event, the event is passed as a parameter and\n   * sent to the fire function for the custom events. When used as a method the\n   * e param does not have any application.\n   * @param {event} e\n   * @return {Boolean} true if the active object has been discarded\n   */\n  discardActiveObject(e?: TPointerEvent): this is { _activeObject: undefined } {\n    const currentActives = this.getActiveObjects(),\n      activeObject = this.getActiveObject();\n    if (currentActives.length) {\n      this.fire('before:selection:cleared', {\n        e,\n        deselected: [activeObject!],\n      });\n    }\n    const discarded = this._discardActiveObject(e);\n    this._fireSelectionEvents(currentActives, e);\n    return discarded;\n  }\n\n  /**\n   * End the current transform.\n   * You don't usually need to call this method unless you are interrupting a user initiated transform\n   * because of some other event ( a press of key combination, or something that block the user UX )\n   * @param {Event} [e] send the mouse event that generate the finalize down, so it can be used in the event\n   */\n  endCurrentTransform(e?: TPointerEvent) {\n    const transform = this._currentTransform;\n    this._finalizeCurrentTransform(e);\n    if (transform && transform.target) {\n      // this could probably go inside _finalizeCurrentTransform\n      transform.target.isMoving = false;\n    }\n    this._currentTransform = null;\n  }\n\n  /**\n   * @private\n   * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event\n   */\n  _finalizeCurrentTransform(e?: TPointerEvent) {\n    const transform = this._currentTransform!,\n      target = transform.target,\n      options = {\n        e,\n        target,\n        transform,\n        action: transform.action,\n      };\n\n    if (target._scaling) {\n      target._scaling = false;\n    }\n\n    target.setCoords();\n\n    if (transform.actionPerformed) {\n      this.fire('object:modified', options);\n      target.fire('modified', options);\n    }\n  }\n\n  /**\n   * Sets viewport transformation of this canvas instance\n   * @param {Array} vpt a Canvas 2D API transform matrix\n   */\n  setViewportTransform(vpt: TMat2D) {\n    super.setViewportTransform(vpt);\n    const activeObject = this._activeObject;\n    if (activeObject) {\n      activeObject.setCoords();\n    }\n  }\n\n  /**\n   * @override clears active selection ref and interactive canvas elements and contexts\n   */\n  destroy() {\n    // dispose of active selection\n    const activeObject = this._activeObject;\n    if (isActiveSelection(activeObject)) {\n      activeObject.removeAll();\n      activeObject.dispose();\n    }\n\n    delete this._activeObject;\n\n    super.destroy();\n\n    // free resources\n\n    // pixel find canvas\n    // @ts-expect-error disposing\n    this.pixelFindContext = null;\n    // @ts-expect-error disposing\n    this.pixelFindCanvasEl = undefined;\n  }\n\n  /**\n   * Clears all contexts (background, main, top) of an instance\n   */\n  clear() {\n    // discard active object and fire events\n    this.discardActiveObject();\n    // make sure we clear the active object in case it refused to be discarded\n    this._activeObject = undefined;\n    this.clearContext(this.contextTop);\n    super.clear();\n  }\n\n  /**\n   * Draws objects' controls (borders/controls)\n   * @param {CanvasRenderingContext2D} ctx Context to render controls on\n   */\n  drawControls(ctx: CanvasRenderingContext2D) {\n    const activeObject = this._activeObject;\n\n    if (activeObject) {\n      activeObject._renderControls(ctx);\n    }\n  }\n\n  /**\n   * @private\n   */\n  protected _toObject(\n    instance: FabricObject,\n    methodName: 'toObject' | 'toDatalessObject',\n    propertiesToInclude: string[]\n  ): Record<string, any> {\n    // If the object is part of the current selection group, it should\n    // be transformed appropriately\n    // i.e. it should be serialised as it would appear if the selection group\n    // were to be destroyed.\n    const originalProperties = this._realizeGroupTransformOnObject(instance),\n      object = super._toObject(instance, methodName, propertiesToInclude);\n    //Undo the damage we did by changing all of its properties\n    instance.set(originalProperties);\n    return object;\n  }\n\n  /**\n   * Realizes an object's group transformation on it\n   * @private\n   * @param {FabricObject} [instance] the object to transform (gets mutated)\n   * @returns the original values of instance which were changed\n   */\n  private _realizeGroupTransformOnObject(\n    instance: FabricObject\n  ): Partial<typeof instance> {\n    const { group } = instance;\n    if (group && isActiveSelection(group) && this._activeObject === group) {\n      const layoutProps = [\n        'angle',\n        'flipX',\n        'flipY',\n        LEFT,\n        'scaleX',\n        'scaleY',\n        'skewX',\n        'skewY',\n        TOP,\n      ] as (keyof typeof instance)[];\n      const originalValues = pick<typeof instance>(instance, layoutProps);\n      addTransformToObject(instance, group.calcOwnMatrix());\n      return originalValues;\n    } else {\n      return {};\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setSVGObject(\n    markup: string[],\n    instance: FabricObject,\n    reviver: TSVGReviver\n  ) {\n    // If the object is in a selection group, simulate what would happen to that\n    // object when the group is deselected\n    const originalProperties = this._realizeGroupTransformOnObject(instance);\n    super._setSVGObject(markup, instance, reviver);\n    instance.set(originalProperties);\n  }\n}\n", "import type { ModifierKey, TOptionalModifierKey } from '../EventTypeDefs';\nimport type { TOptions } from '../typedefs';\nimport type { StaticCanvasOptions } from './StaticCanvasOptions';\n\nexport interface CanvasTransformOptions {\n  /**\n   * When true, objects can be transformed by one side (unproportionately)\n   * when dragged on the corners that normally would not do that.\n   * @type Boolean\n   * @default\n   * @since fabric 4.0 // changed name and default value\n   */\n  uniformScaling: boolean;\n\n  /**\n   * Indicates which key switches uniform scaling.\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled.\n   * totally wrong named. this sounds like `uniform scaling`\n   * if Canvas.uniformScaling is true, pressing this will set it to false\n   * and viceversa.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  uniScaleKey: TOptionalModifierKey;\n\n  /**\n   * When true, objects use center point as the origin of scale transformation.\n   * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n   * @since 1.3.4\n   * @type Boolean\n   * @default\n   */\n  centeredScaling: boolean;\n\n  /**\n   * When true, objects use center point as the origin of rotate transformation.\n   * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n   * @since 1.3.4\n   * @type Boolean\n   * @default\n   */\n  centeredRotation: boolean;\n\n  /**\n   * Indicates which key enable centered Transform\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled feature disabled.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  centeredKey: TOptionalModifierKey;\n\n  /**\n   * Indicates which key enable alternate action on corner\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled feature disabled.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  altActionKey: TOptionalModifierKey;\n}\n\nexport interface CanvasSelectionOptions {\n  /**\n   * Indicates whether group selection should be enabled\n   * @type Boolean\n   * @default\n   */\n  selection: boolean;\n\n  /**\n   * Indicates which key or keys enable multiple click selection\n   * Pass value as a string or array of strings\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or empty or containing any other string that is not a modifier key\n   * feature is disabled.\n   * @since 1.6.2\n   * @type ModifierKey|ModifierKey[]\n   * @default\n   */\n  selectionKey: TOptionalModifierKey | ModifierKey[];\n\n  /**\n   * Indicates which key enable alternative selection\n   * in case of target overlapping with active object\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * For a series of reason that come from the general expectations on how\n   * things should work, this feature works only for preserveObjectStacking true.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled.\n   * @since 1.6.5\n   * @type null|ModifierKey\n   * @default\n   */\n  altSelectionKey: TOptionalModifierKey;\n\n  /**\n   * Color of selection\n   * @type String\n   * @default\n   */\n  selectionColor: string;\n\n  /**\n   * Default dash array pattern\n   * If not empty the selection border is dashed\n   * @type Array\n   */\n  selectionDashArray: number[];\n\n  /**\n   * Color of the border of selection (usually slightly darker than color of selection itself)\n   * @type String\n   * @default\n   */\n  selectionBorderColor: string;\n\n  /**\n   * Width of a line used in object/group selection\n   * @type Number\n   * @default\n   */\n  selectionLineWidth: number;\n\n  /**\n   * Select only shapes that are fully contained in the dragged selection rectangle.\n   * @type Boolean\n   * @default\n   */\n  selectionFullyContained: boolean;\n}\n\nexport interface CanvasCursorOptions {\n  /**\n   * Default cursor value used when hovering over an object on canvas\n   * @type CSSStyleDeclaration['cursor']\n   * @default move\n   */\n  hoverCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Default cursor value used when moving an object on canvas\n   * @type CSSStyleDeclaration['cursor']\n   * @default move\n   */\n  moveCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Default cursor value used for the entire canvas\n   * @type String\n   * @default default\n   */\n  defaultCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Cursor value used during free drawing\n   * @type String\n   * @default crosshair\n   */\n  freeDrawingCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Cursor value used for disabled elements ( corners with disabled action )\n   * @type String\n   * @since 2.0.0\n   * @default not-allowed\n   */\n  notAllowedCursor: CSSStyleDeclaration['cursor'];\n}\n\nexport interface TargetFindOptions {\n  /**\n   * When true, object detection happens on per-pixel basis rather than on per-bounding-box\n   * @type Boolean\n   * @default\n   */\n  perPixelTargetFind: boolean;\n\n  /**\n   * Number of pixels around target pixel to tolerate (consider active) during object detection\n   * @type Number\n   * @default\n   */\n  targetFindTolerance: number;\n\n  /**\n   * When true, target detection is skipped. Target detection will return always undefined.\n   * click selection won't work anymore, events will fire with no targets.\n   * if something is selected before setting it to true, it will be deselected at the first click.\n   * area selection will still work. check the `selection` property too.\n   * if you deactivate both, you should look into staticCanvas.\n   * @type Boolean\n   * @default\n   */\n  skipTargetFind: boolean;\n}\n\nexport interface CanvasEventsOptions {\n  /**\n   * Indicates if the right click on canvas can output the context menu or not\n   * @type Boolean\n   * @since 1.6.5\n   * @default\n   */\n  stopContextMenu: boolean;\n\n  /**\n   * Indicates if the canvas can fire right click events\n   * @type Boolean\n   * @since 1.6.5\n   * @default\n   */\n  fireRightClick: boolean;\n\n  /**\n   * Indicates if the canvas can fire middle click events\n   * @type Boolean\n   * @since 1.7.8\n   * @default\n   */\n  fireMiddleClick: boolean;\n\n  /**\n   * When the option is enabled, PointerEvent is used instead of TPointerEvent.\n   * @type Boolean\n   * @default\n   */\n  enablePointerEvents: boolean;\n}\n\nexport interface CanvasOptions\n  extends StaticCanvasOptions,\n    CanvasTransformOptions,\n    CanvasSelectionOptions,\n    CanvasCursorOptions,\n    TargetFindOptions,\n    CanvasEventsOptions {\n  /**\n   * Default element class that's given to wrapper (div) element of canvas\n   * @type String\n   * @default\n   * @deprecated customize {@link CanvasDOMManager} instead or access {@link elements} directly\n   */\n  containerClass: string;\n\n  /**\n   * Indicates whether objects should remain in current stack position when selected.\n   * When false objects are brought to top and rendered as part of the selection group\n   * @type Boolean\n   * @default\n   */\n  preserveObjectStacking: boolean;\n}\n\nexport type TCanvasOptions = TOptions<CanvasOptions>;\n\nexport const canvasDefaults: TOptions<CanvasOptions> = {\n  uniformScaling: true,\n  uniScaleKey: 'shiftKey',\n  centeredScaling: false,\n  centeredRotation: false,\n  centeredKey: 'altKey',\n  altActionKey: 'shiftKey',\n\n  selection: true,\n  selectionKey: 'shiftKey',\n  selectionColor: 'rgba(100, 100, 255, 0.3)',\n  selectionDashArray: [],\n  selectionBorderColor: 'rgba(255, 255, 255, 0.3)',\n  selectionLineWidth: 1,\n  selectionFullyContained: false,\n\n  hoverCursor: 'move',\n  moveCursor: 'move',\n  defaultCursor: 'default',\n  freeDrawingCursor: 'crosshair',\n  notAllowedCursor: 'not-allowed',\n\n  perPixelTargetFind: false,\n  targetFindTolerance: 0,\n  skipTargetFind: false,\n\n  stopContextMenu: false,\n  fireRightClick: false,\n  fireMiddleClick: false,\n  enablePointerEvents: false,\n\n  containerClass: 'canvas-container',\n\n  preserveObjectStacking: false,\n};\n", "import type { TPointerEvent } from '../EventTypeDefs';\nimport type { ITextBehavior } from '../shapes/IText/ITextBehavior';\nimport { removeFromArray } from '../util/internals';\nimport type { Canvas } from './Canvas';\n\n/**\n * In charge of synchronizing all interactive text instances of a canvas\n */\nexport class TextEditingManager {\n  private targets: ITextBehavior[] = [];\n  private declare target?: ITextBehavior;\n  private __disposer: VoidFunction;\n\n  constructor(canvas: Canvas) {\n    const cb = () => {\n      const { hiddenTextarea } =\n        (canvas.getActiveObject() as ITextBehavior) || {};\n      hiddenTextarea && hiddenTextarea.focus();\n    };\n    const el = canvas.upperCanvasEl;\n    el.addEventListener('click', cb);\n    this.__disposer = () => el.removeEventListener('click', cb);\n  }\n\n  exitTextEditing() {\n    this.target = undefined;\n    this.targets.forEach((target) => {\n      if (target.isEditing) {\n        target.exitEditing();\n      }\n    });\n  }\n\n  add(target: ITextBehavior) {\n    this.targets.push(target);\n  }\n\n  remove(target: ITextBehavior) {\n    this.unregister(target);\n    removeFromArray(this.targets, target);\n  }\n\n  register(target: ITextBehavior) {\n    this.target = target;\n  }\n\n  unregister(target: ITextBehavior) {\n    if (target === this.target) {\n      this.target = undefined;\n    }\n  }\n\n  onMouseMove(e: TPointerEvent) {\n    this.target?.isEditing && this.target.updateSelectionOnMouseMove(e);\n  }\n\n  clear() {\n    this.targets = [];\n    this.target = undefined;\n  }\n\n  dispose() {\n    this.clear();\n    this.__disposer();\n    // @ts-expect-error disposing\n    delete this.__disposer;\n  }\n}\n", "import { classRegistry } from '../ClassRegistry';\nimport { NONE } from '../constants';\nimport type {\n  CanvasEvents,\n  DragEventData,\n  ObjectEvents,\n  TPointerEvent,\n  TPointerEventNames,\n  Transform,\n} from '../EventTypeDefs';\nimport { Point } from '../Point';\nimport type { ActiveSelection } from '../shapes/ActiveSelection';\nimport type { Group } from '../shapes/Group';\nimport type { IText } from '../shapes/IText/IText';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { isTouchEvent, stopEvent } from '../util/dom_event';\nimport { getDocumentFromElement, getWindowFromElement } from '../util/dom_misc';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { isActiveSelection } from '../util/typeAssertions';\nimport type { CanvasOptions, TCanvasOptions } from './CanvasOptions';\nimport { SelectableCanvas } from './SelectableCanvas';\nimport { TextEditingManager } from './TextEditingManager';\n\nconst addEventOptions = { passive: false } as EventListenerOptions;\n\nconst getEventPoints = (canvas: Canvas, e: TPointerEvent) => {\n  const viewportPoint = canvas.getViewportPoint(e);\n  const scenePoint = canvas.getScenePoint(e);\n  return {\n    viewportPoint,\n    scenePoint,\n    pointer: viewportPoint,\n    absolutePointer: scenePoint,\n  };\n};\n\n// just to be clear, the utils are now deprecated and those are here exactly as minifier helpers\n// because el.addEventListener can't me be minified while a const yes and we use it 47 times in this file.\n// few bytes but why give it away.\nconst addListener = (\n  el: HTMLElement | Document,\n  ...args: Parameters<HTMLElement['addEventListener']>\n) => el.addEventListener(...args);\nconst removeListener = (\n  el: HTMLElement | Document,\n  ...args: Parameters<HTMLElement['removeEventListener']>\n) => el.removeEventListener(...args);\n\nconst syntheticEventConfig = {\n  mouse: {\n    in: 'over',\n    out: 'out',\n    targetIn: 'mouseover',\n    targetOut: 'mouseout',\n    canvasIn: 'mouse:over',\n    canvasOut: 'mouse:out',\n  },\n  drag: {\n    in: 'enter',\n    out: 'leave',\n    targetIn: 'dragenter',\n    targetOut: 'dragleave',\n    canvasIn: 'drag:enter',\n    canvasOut: 'drag:leave',\n  },\n} as const;\n\ntype TSyntheticEventContext = {\n  mouse: { e: TPointerEvent };\n  drag: DragEventData;\n};\n\nexport class Canvas extends SelectableCanvas implements CanvasOptions {\n  /**\n   * Contains the id of the touch event that owns the fabric transform\n   * @type Number\n   * @private\n   */\n  declare mainTouchId?: number;\n\n  declare enablePointerEvents: boolean;\n\n  /**\n   * Holds a reference to a setTimeout timer for event synchronization\n   * @type number\n   * @private\n   */\n  private declare _willAddMouseDown: number;\n\n  /**\n   * Holds a reference to an object on the canvas that is receiving the drag over event.\n   * @type FabricObject\n   * @private\n   */\n  private declare _draggedoverTarget?: FabricObject;\n\n  /**\n   * Holds a reference to an object on the canvas from where the drag operation started\n   * @type FabricObject\n   * @private\n   */\n  private declare _dragSource?: FabricObject;\n\n  /**\n   * Holds a reference to an object on the canvas that is the current drop target\n   * May differ from {@link _draggedoverTarget}\n   * @todo inspect whether {@link _draggedoverTarget} and {@link _dropTarget} should be merged somehow\n   * @type FabricObject\n   * @private\n   */\n  private declare _dropTarget: FabricObject<ObjectEvents> | undefined;\n\n  private _isClick: boolean;\n\n  textEditingManager = new TextEditingManager(this);\n\n  constructor(el?: string | HTMLCanvasElement, options: TCanvasOptions = {}) {\n    super(el, options);\n    // bind event handlers\n    (\n      [\n        '_onMouseDown',\n        '_onTouchStart',\n        '_onMouseMove',\n        '_onMouseUp',\n        '_onTouchEnd',\n        '_onResize',\n        // '_onGesture',\n        // '_onDrag',\n        // '_onShake',\n        // '_onLongPress',\n        // '_onOrientationChange',\n        '_onMouseWheel',\n        '_onMouseOut',\n        '_onMouseEnter',\n        '_onContextMenu',\n        '_onDoubleClick',\n        '_onDragStart',\n        '_onDragEnd',\n        '_onDragProgress',\n        '_onDragOver',\n        '_onDragEnter',\n        '_onDragLeave',\n        '_onDrop',\n      ] as (keyof this)[]\n    ).forEach((eventHandler) => {\n      this[eventHandler] = (this[eventHandler] as Function).bind(this);\n    });\n    // register event handlers\n    this.addOrRemove(addListener, 'add');\n  }\n\n  /**\n   * return an event prefix pointer or mouse.\n   * @private\n   */\n  private _getEventPrefix() {\n    return this.enablePointerEvents ? 'pointer' : 'mouse';\n  }\n\n  addOrRemove(functor: any, eventjsFunctor: 'add' | 'remove') {\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    functor(getWindowFromElement(canvasElement), 'resize', this._onResize);\n    functor(canvasElement, eventTypePrefix + 'down', this._onMouseDown);\n    functor(\n      canvasElement,\n      `${eventTypePrefix}move`,\n      this._onMouseMove,\n      addEventOptions\n    );\n    functor(canvasElement, `${eventTypePrefix}out`, this._onMouseOut);\n    functor(canvasElement, `${eventTypePrefix}enter`, this._onMouseEnter);\n    functor(canvasElement, 'wheel', this._onMouseWheel);\n    functor(canvasElement, 'contextmenu', this._onContextMenu);\n    functor(canvasElement, 'dblclick', this._onDoubleClick);\n    functor(canvasElement, 'dragstart', this._onDragStart);\n    functor(canvasElement, 'dragend', this._onDragEnd);\n    functor(canvasElement, 'dragover', this._onDragOver);\n    functor(canvasElement, 'dragenter', this._onDragEnter);\n    functor(canvasElement, 'dragleave', this._onDragLeave);\n    functor(canvasElement, 'drop', this._onDrop);\n    if (!this.enablePointerEvents) {\n      functor(canvasElement, 'touchstart', this._onTouchStart, addEventOptions);\n    }\n    // if (typeof eventjs !== 'undefined' && eventjsFunctor in eventjs) {\n    //   eventjs[eventjsFunctor](canvasElement, 'gesture', this._onGesture);\n    //   eventjs[eventjsFunctor](canvasElement, 'drag', this._onDrag);\n    //   eventjs[eventjsFunctor](\n    //     canvasElement,\n    //     'orientation',\n    //     this._onOrientationChange\n    //   );\n    //   eventjs[eventjsFunctor](canvasElement, 'shake', this._onShake);\n    //   eventjs[eventjsFunctor](canvasElement, 'longpress', this._onLongPress);\n    // }\n  }\n\n  /**\n   * Removes all event listeners\n   */\n  removeListeners() {\n    this.addOrRemove(removeListener, 'remove');\n    // if you dispose on a mouseDown, before mouse up, you need to clean document to...\n    const eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(this.upperCanvasEl);\n    removeListener(\n      doc,\n      `${eventTypePrefix}up`,\n      this._onMouseUp as EventListener\n    );\n    removeListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions\n    );\n    removeListener(\n      doc,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions\n    );\n    removeListener(\n      doc,\n      'touchmove',\n      this._onMouseMove as EventListener,\n      addEventOptions\n    );\n  }\n\n  /**\n   * @private\n   * @param {Event} [e] Event object fired on wheel event\n   */\n  private _onMouseWheel(e: MouseEvent) {\n    this.__onMouseWheel(e);\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onMouseOut(e: TPointerEvent) {\n    const target = this._hoveredTarget;\n    const shared = {\n      e,\n      ...getEventPoints(this, e),\n    };\n    this.fire('mouse:out', { ...shared, target });\n    this._hoveredTarget = undefined;\n    target && target.fire('mouseout', { ...shared });\n    this._hoveredTargets.forEach((nestedTarget) => {\n      this.fire('mouse:out', { ...shared, target: nestedTarget });\n      nestedTarget && nestedTarget.fire('mouseout', { ...shared });\n    });\n    this._hoveredTargets = [];\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseenter\n   */\n  private _onMouseEnter(e: TPointerEvent) {\n    // This find target and consequent 'mouse:over' is used to\n    // clear old instances on hovered target.\n    // calling findTarget has the side effect of killing target.__corner.\n    // as a short term fix we are not firing this if we are currently transforming.\n    // as a long term fix we need to separate the action of finding a target with the\n    // side effects we added to it.\n    if (!this._currentTransform && !this.findTarget(e)) {\n      this.fire('mouse:over', {\n        e,\n        ...getEventPoints(this, e),\n      });\n      this._hoveredTarget = undefined;\n      this._hoveredTargets = [];\n    }\n  }\n\n  /**\n   * supports native like text dragging\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragStart(e: DragEvent) {\n    this._isClick = false;\n    const activeObject = this.getActiveObject();\n    if (activeObject && activeObject.onDragStart(e)) {\n      this._dragSource = activeObject;\n      const options = { e, target: activeObject };\n      this.fire('dragstart', options);\n      activeObject.fire('dragstart', options);\n      addListener(\n        this.upperCanvasEl,\n        'drag',\n        this._onDragProgress as EventListener\n      );\n      return;\n    }\n    stopEvent(e);\n  }\n\n  /**\n   * First we clear top context where the effects are being rendered.\n   * Then we render the effects.\n   * Doing so will render the correct effect for all cases including an overlap between `source` and `target`.\n   * @private\n   */\n  private _renderDragEffects(\n    e: DragEvent,\n    source?: FabricObject,\n    target?: FabricObject\n  ) {\n    let dirty = false;\n    // clear top context\n    const dropTarget = this._dropTarget;\n    if (dropTarget && dropTarget !== source && dropTarget !== target) {\n      dropTarget.clearContextTop();\n      dirty = true;\n    }\n    source?.clearContextTop();\n    target !== source && target?.clearContextTop();\n    // render effects\n    const ctx = this.contextTop;\n    ctx.save();\n    ctx.transform(...this.viewportTransform);\n    if (source) {\n      ctx.save();\n      source.transform(ctx);\n      source.renderDragSourceEffect(e);\n      ctx.restore();\n      dirty = true;\n    }\n    if (target) {\n      ctx.save();\n      target.transform(ctx);\n      target.renderDropTargetEffect(e);\n      ctx.restore();\n      dirty = true;\n    }\n    ctx.restore();\n    dirty && (this.contextTopDirty = true);\n  }\n\n  /**\n   * supports native like text dragging\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#finishing_a_drag\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragEnd(e: DragEvent) {\n    const didDrop = !!e.dataTransfer && e.dataTransfer.dropEffect !== NONE,\n      dropTarget = didDrop ? this._activeObject : undefined,\n      options = {\n        e,\n        target: this._dragSource as FabricObject,\n        subTargets: this.targets,\n        dragSource: this._dragSource as FabricObject,\n        didDrop,\n        dropTarget: dropTarget as FabricObject,\n      };\n    removeListener(\n      this.upperCanvasEl,\n      'drag',\n      this._onDragProgress as EventListener\n    );\n    this.fire('dragend', options);\n    this._dragSource && this._dragSource.fire('dragend', options);\n    delete this._dragSource;\n    // we need to call mouse up synthetically because the browser won't\n    this._onMouseUp(e);\n  }\n\n  /**\n   * fire `drag` event on canvas and drag source\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragProgress(e: DragEvent) {\n    const options = {\n      e,\n      target: this._dragSource as FabricObject | undefined,\n      dragSource: this._dragSource as FabricObject | undefined,\n      dropTarget: this._draggedoverTarget as FabricObject,\n    };\n    this.fire('drag', options);\n    this._dragSource && this._dragSource.fire('drag', options);\n  }\n\n  /**\n   * As opposed to {@link findTarget} we want the top most object to be returned w/o the active object cutting in line.\n   * Override at will\n   */\n  protected findDragTargets(e: DragEvent) {\n    this.targets = [];\n    const target = this._searchPossibleTargets(\n      this._objects,\n      this.getViewportPoint(e)\n    );\n    return {\n      target,\n      targets: [...this.targets],\n    };\n  }\n\n  /**\n   * prevent default to allow drop event to be fired\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#specifying_drop_targets\n   * @private\n   * @param {DragEvent} [e] Event object fired on Event.js shake\n   */\n  private _onDragOver(e: DragEvent) {\n    const eventType = 'dragover';\n    const { target, targets } = this.findDragTargets(e);\n    const dragSource = this._dragSource as FabricObject;\n    const options = {\n      e,\n      target,\n      subTargets: targets,\n      dragSource,\n      canDrop: false,\n      dropTarget: undefined,\n    };\n    let dropTarget;\n    //  fire on canvas\n    this.fire(eventType, options);\n    //  make sure we fire dragenter events before dragover\n    //  if dragleave is needed, object will not fire dragover so we don't need to trouble ourselves with it\n    this._fireEnterLeaveEvents(target, options);\n    if (target) {\n      if (target.canDrop(e)) {\n        dropTarget = target;\n      }\n      target.fire(eventType, options);\n    }\n    //  propagate the event to subtargets\n    for (let i = 0; i < targets.length; i++) {\n      const subTarget = targets[i];\n      // accept event only if previous targets didn't (the accepting target calls `preventDefault` to inform that the event is taken)\n      // TODO: verify if those should loop in inverse order then?\n      // what is the order of subtargets?\n      if (subTarget.canDrop(e)) {\n        dropTarget = subTarget;\n      }\n      subTarget.fire(eventType, options);\n    }\n    //  render drag effects now that relations between source and target is clear\n    this._renderDragEffects(e, dragSource, dropTarget);\n    this._dropTarget = dropTarget;\n  }\n\n  /**\n   * fire `dragleave` on `dragover` targets\n   * @private\n   * @param {Event} [e] Event object fired on Event.js shake\n   */\n  private _onDragEnter(e: DragEvent) {\n    const { target, targets } = this.findDragTargets(e);\n    const options = {\n      e,\n      target,\n      subTargets: targets,\n      dragSource: this._dragSource,\n    };\n    this.fire('dragenter', options);\n    //  fire dragenter on targets\n    this._fireEnterLeaveEvents(target, options);\n  }\n\n  /**\n   * fire `dragleave` on `dragover` targets\n   * @private\n   * @param {Event} [e] Event object fired on Event.js shake\n   */\n  private _onDragLeave(e: DragEvent) {\n    const options = {\n      e,\n      target: this._draggedoverTarget,\n      subTargets: this.targets,\n      dragSource: this._dragSource,\n    };\n    this.fire('dragleave', options);\n\n    //  fire dragleave on targets\n    this._fireEnterLeaveEvents(undefined, options);\n    this._renderDragEffects(e, this._dragSource);\n    this._dropTarget = undefined;\n    //  clear targets\n    this.targets = [];\n    this._hoveredTargets = [];\n  }\n\n  /**\n   * `drop:before` is a an event that allows you to schedule logic\n   * before the `drop` event. Prefer `drop` event always, but if you need\n   * to run some drop-disabling logic on an event, since there is no way\n   * to handle event handlers ordering, use `drop:before`\n   * @private\n   * @param {Event} e\n   */\n  private _onDrop(e: DragEvent) {\n    const { target, targets } = this.findDragTargets(e);\n    const options = this._basicEventHandler('drop:before', {\n      e,\n      target,\n      subTargets: targets,\n      dragSource: this._dragSource,\n      ...getEventPoints(this, e),\n    });\n    //  will be set by the drop target\n    options.didDrop = false;\n    //  will be set by the drop target, used in case options.target refuses the drop\n    options.dropTarget = undefined;\n    //  fire `drop`\n    this._basicEventHandler('drop', options);\n    //  inform canvas of the drop\n    //  we do this because canvas was unaware of what happened at the time the `drop` event was fired on it\n    //  use for side effects\n    this.fire('drop:after', options);\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onContextMenu(e: TPointerEvent): false {\n    const target = this.findTarget(e),\n      subTargets = this.targets || [];\n    const options = this._basicEventHandler('contextmenu:before', {\n      e,\n      target,\n      subTargets,\n    });\n    // TODO: this line is silly because the dev can subscribe to the event and prevent it themselves\n    this.stopContextMenu && stopEvent(e);\n    this._basicEventHandler('contextmenu', options);\n    return false;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onDoubleClick(e: TPointerEvent) {\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'dblclick');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Return a the id of an event.\n   * returns either the pointerId or the identifier or 0 for the mouse event\n   * @private\n   * @param {Event} evt Event object\n   */\n  getPointerId(evt: TouchEvent | PointerEvent): number {\n    const changedTouches = (evt as TouchEvent).changedTouches;\n\n    if (changedTouches) {\n      return changedTouches[0] && changedTouches[0].identifier;\n    }\n\n    if (this.enablePointerEvents) {\n      return (evt as PointerEvent).pointerId;\n    }\n\n    return -1;\n  }\n\n  /**\n   * Determines if an event has the id of the event that is considered main\n   * @private\n   * @param {evt} event Event object\n   */\n  _isMainEvent(evt: TPointerEvent): boolean {\n    if ((evt as PointerEvent).isPrimary === true) {\n      return true;\n    }\n    if ((evt as PointerEvent).isPrimary === false) {\n      return false;\n    }\n    if (evt.type === 'touchend' && (evt as TouchEvent).touches.length === 0) {\n      return true;\n    }\n    if ((evt as TouchEvent).changedTouches) {\n      return (\n        (evt as TouchEvent).changedTouches[0].identifier === this.mainTouchId\n      );\n    }\n    return true;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onTouchStart(e: TouchEvent) {\n    e.preventDefault();\n    if (this.mainTouchId === undefined) {\n      this.mainTouchId = this.getPointerId(e);\n    }\n    this.__onMouseDown(e);\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(canvasElement);\n    addListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions\n    );\n    addListener(\n      doc,\n      'touchmove',\n      this._onMouseMove as EventListener,\n      addEventOptions\n    );\n    // Unbind mousedown to prevent double triggers from touch devices\n    removeListener(\n      canvasElement,\n      `${eventTypePrefix}down`,\n      this._onMouseDown as EventListener\n    );\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onMouseDown(e: TPointerEvent) {\n    this.__onMouseDown(e);\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    removeListener(\n      canvasElement,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions\n    );\n    const doc = getDocumentFromElement(canvasElement);\n    addListener(doc, `${eventTypePrefix}up`, this._onMouseUp as EventListener);\n    addListener(\n      doc,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions\n    );\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onTouchEnd(e: TouchEvent) {\n    if (e.touches.length > 0) {\n      // if there are still touches stop here\n      return;\n    }\n    this.__onMouseUp(e);\n    this._resetTransformEventData();\n    delete this.mainTouchId;\n    const eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(this.upperCanvasEl);\n    removeListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions\n    );\n    removeListener(\n      doc,\n      'touchmove',\n      this._onMouseMove as EventListener,\n      addEventOptions\n    );\n    if (this._willAddMouseDown) {\n      clearTimeout(this._willAddMouseDown);\n    }\n    this._willAddMouseDown = setTimeout(() => {\n      // Wait 400ms before rebinding mousedown to prevent double triggers\n      // from touch devices\n      addListener(\n        this.upperCanvasEl,\n        `${eventTypePrefix}down`,\n        this._onMouseDown as EventListener\n      );\n      this._willAddMouseDown = 0;\n    }, 400) as unknown as number;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  _onMouseUp(e: TPointerEvent) {\n    this.__onMouseUp(e);\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    if (this._isMainEvent(e)) {\n      const doc = getDocumentFromElement(this.upperCanvasEl);\n      removeListener(\n        doc,\n        `${eventTypePrefix}up`,\n        this._onMouseUp as EventListener\n      );\n      removeListener(\n        doc,\n        `${eventTypePrefix}move`,\n        this._onMouseMove as EventListener,\n        addEventOptions\n      );\n      addListener(\n        canvasElement,\n        `${eventTypePrefix}move`,\n        this._onMouseMove as EventListener,\n        addEventOptions\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  _onMouseMove(e: TPointerEvent) {\n    const activeObject = this.getActiveObject();\n    !this.allowTouchScrolling &&\n      (!activeObject ||\n        // a drag event sequence is started by the active object flagging itself on mousedown / mousedown:before\n        // we must not prevent the event's default behavior in order for the window to start dragging\n        !activeObject.shouldStartDragging(e)) &&\n      e.preventDefault &&\n      e.preventDefault();\n    this.__onMouseMove(e);\n  }\n\n  /**\n   * @private\n   */\n  _onResize() {\n    this.calcOffset();\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Decides whether the canvas should be redrawn in mouseup and mousedown events.\n   * @private\n   * @param {Object} target\n   */\n  _shouldRender(target: FabricObject | undefined) {\n    const activeObject = this.getActiveObject();\n    // if just one of them is available or if they are both but are different objects\n    // this covers: switch of target, from target to no target, selection of target\n    // multiSelection with key and mouse\n    return (\n      !!activeObject !== !!target ||\n      (activeObject && target && activeObject !== target)\n    );\n  }\n\n  /**\n   * Method that defines the actions when mouse is released on canvas.\n   * The method resets the currentTransform parameters, store the image corner\n   * position in the image object and render the canvas on top.\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  __onMouseUp(e: TPointerEvent) {\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'up:before');\n\n    const transform = this._currentTransform;\n    const isClick = this._isClick;\n    const target = this._target;\n\n    // if right/middle click just fire events and return\n    // target undefined will make the _handleEvent search the target\n    const { button } = e as MouseEvent;\n    if (button) {\n      ((this.fireMiddleClick && button === 1) ||\n        (this.fireRightClick && button === 2)) &&\n        this._handleEvent(e, 'up');\n      this._resetTransformEventData();\n      return;\n    }\n\n    if (this.isDrawingMode && this._isCurrentlyDrawing) {\n      this._onMouseUpInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n    let shouldRender = false;\n    if (transform) {\n      this._finalizeCurrentTransform(e);\n      shouldRender = transform.actionPerformed;\n    }\n    if (!isClick) {\n      const targetWasActive = target === this._activeObject;\n      this.handleSelection(e);\n      if (!shouldRender) {\n        shouldRender =\n          this._shouldRender(target) ||\n          (!targetWasActive && target === this._activeObject);\n      }\n    }\n    let pointer, corner;\n    if (target) {\n      const found = target.findControl(\n        this.getViewportPoint(e),\n        isTouchEvent(e)\n      );\n      const { key, control } = found || {};\n      corner = key;\n      if (\n        target.selectable &&\n        target !== this._activeObject &&\n        target.activeOn === 'up'\n      ) {\n        this.setActiveObject(target, e);\n        shouldRender = true;\n      } else if (control) {\n        const mouseUpHandler = control.getMouseUpHandler(e, target, control);\n        if (mouseUpHandler) {\n          pointer = this.getScenePoint(e);\n          mouseUpHandler.call(control, e, transform!, pointer.x, pointer.y);\n        }\n      }\n      target.isMoving = false;\n    }\n    // if we are ending up a transform on a different control or a new object\n    // fire the original mouse up from the corner that started the transform\n    if (\n      transform &&\n      (transform.target !== target || transform.corner !== corner)\n    ) {\n      const originalControl =\n          transform.target && transform.target.controls[transform.corner],\n        originalMouseUpHandler =\n          originalControl &&\n          originalControl.getMouseUpHandler(\n            e,\n            transform.target,\n            originalControl\n          );\n      pointer = pointer || this.getScenePoint(e);\n      originalMouseUpHandler &&\n        originalMouseUpHandler.call(\n          originalControl,\n          e,\n          transform,\n          pointer.x,\n          pointer.y\n        );\n    }\n    this._setCursorFromEvent(e, target);\n    this._handleEvent(e, 'up');\n    this._groupSelector = null;\n    this._currentTransform = null;\n    // reset the target information about which corner is selected\n    target && (target.__corner = undefined);\n    if (shouldRender) {\n      this.requestRenderAll();\n    } else if (!isClick && !(this._activeObject as IText)?.isEditing) {\n      this.renderTop();\n    }\n  }\n\n  _basicEventHandler<T extends keyof (CanvasEvents | ObjectEvents)>(\n    eventType: T,\n    options: (CanvasEvents & ObjectEvents)[T]\n  ) {\n    const { target, subTargets = [] } = options as {\n      target?: FabricObject;\n      subTargets: FabricObject[];\n    };\n    this.fire(eventType, options);\n    target && target.fire(eventType, options);\n    for (let i = 0; i < subTargets.length; i++) {\n      subTargets[i] !== target && subTargets[i].fire(eventType, options);\n    }\n    return options;\n  }\n\n  /**\n   * @private\n   * Handle event firing for target and subtargets\n   * @param {TPointerEvent} e event from mouse\n   * @param {TPointerEventNames} eventType\n   */\n  _handleEvent<T extends TPointerEventNames>(e: TPointerEvent, eventType: T) {\n    const target = this._target,\n      targets = this.targets || [],\n      options: CanvasEvents[`mouse:${T}`] = {\n        e,\n        target,\n        subTargets: targets,\n        ...getEventPoints(this, e),\n        transform: this._currentTransform,\n        ...(eventType === 'up:before' || eventType === 'up'\n          ? {\n              isClick: this._isClick,\n              currentTarget: this.findTarget(e),\n              // set by the preceding `findTarget` call\n              currentSubTargets: this.targets,\n            }\n          : {}),\n      } as CanvasEvents[`mouse:${T}`];\n    this.fire(`mouse:${eventType}`, options);\n    // this may be a little be more complicated of what we want to handle\n    target && target.fire(`mouse${eventType}`, options);\n    for (let i = 0; i < targets.length; i++) {\n      targets[i] !== target && targets[i].fire(`mouse${eventType}`, options);\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onMouseDownInDrawingMode(e: TPointerEvent) {\n    this._isCurrentlyDrawing = true;\n    if (this.getActiveObject()) {\n      this.discardActiveObject(e);\n      this.requestRenderAll();\n    }\n    // TODO: this is a scene point so it should be renamed\n    const pointer = this.getScenePoint(e);\n    this.freeDrawingBrush &&\n      this.freeDrawingBrush.onMouseDown(pointer, { e, pointer });\n    this._handleEvent(e, 'down');\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  _onMouseMoveInDrawingMode(e: TPointerEvent) {\n    if (this._isCurrentlyDrawing) {\n      const pointer = this.getScenePoint(e);\n      this.freeDrawingBrush &&\n        this.freeDrawingBrush.onMouseMove(pointer, {\n          e,\n          // this is an absolute pointer, the naming is wrong\n          pointer,\n        });\n    }\n    this.setCursor(this.freeDrawingCursor);\n    this._handleEvent(e, 'move');\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  _onMouseUpInDrawingMode(e: TPointerEvent) {\n    const pointer = this.getScenePoint(e);\n    if (this.freeDrawingBrush) {\n      this._isCurrentlyDrawing = !!this.freeDrawingBrush.onMouseUp({\n        e: e,\n        // this is an absolute pointer, the naming is wrong\n        pointer,\n      });\n    } else {\n      this._isCurrentlyDrawing = false;\n    }\n    this._handleEvent(e, 'up');\n  }\n\n  /**\n   * Method that defines the actions when mouse is clicked on canvas.\n   * The method inits the currentTransform parameters and renders all the\n   * canvas so the current image can be placed on the top canvas and the rest\n   * in on the container one.\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  __onMouseDown(e: TPointerEvent) {\n    this._isClick = true;\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'down:before');\n\n    let target: FabricObject | undefined = this._target;\n\n    // if right/middle click just fire events\n    const { button } = e as MouseEvent;\n    if (button) {\n      ((this.fireMiddleClick && button === 1) ||\n        (this.fireRightClick && button === 2)) &&\n        this._handleEvent(e, 'down');\n      this._resetTransformEventData();\n      return;\n    }\n\n    if (this.isDrawingMode) {\n      this._onMouseDownInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n\n    // ignore if some object is being transformed at this moment\n    if (this._currentTransform) {\n      return;\n    }\n\n    let shouldRender = this._shouldRender(target);\n    let grouped = false;\n    if (this.handleMultiSelection(e, target)) {\n      // active object might have changed while grouping\n      target = this._activeObject;\n      grouped = true;\n      shouldRender = true;\n    } else if (this._shouldClearSelection(e, target)) {\n      this.discardActiveObject(e);\n    }\n    // we start a group selector rectangle if\n    // selection is enabled\n    // and there is no target, or the following 3 conditions are satisfied:\n    // target is not selectable ( otherwise we selected it )\n    // target is not editing\n    // target is not already selected ( otherwise we drag )\n    if (\n      this.selection &&\n      (!target ||\n        (!target.selectable &&\n          !(target as IText).isEditing &&\n          target !== this._activeObject))\n    ) {\n      const p = this.getScenePoint(e);\n      this._groupSelector = {\n        x: p.x,\n        y: p.y,\n        deltaY: 0,\n        deltaX: 0,\n      };\n    }\n\n    if (target) {\n      const alreadySelected = target === this._activeObject;\n      if (target.selectable && target.activeOn === 'down') {\n        this.setActiveObject(target, e);\n      }\n      const handle = target.findControl(\n        this.getViewportPoint(e),\n        isTouchEvent(e)\n      );\n      if (target === this._activeObject && (handle || !grouped)) {\n        this._setupCurrentTransform(e, target, alreadySelected);\n        const control = handle ? handle.control : undefined,\n          pointer = this.getScenePoint(e),\n          mouseDownHandler =\n            control && control.getMouseDownHandler(e, target, control);\n        mouseDownHandler &&\n          mouseDownHandler.call(\n            control,\n            e,\n            this._currentTransform!,\n            pointer.x,\n            pointer.y\n          );\n      }\n    }\n    //  we clear `_objectsToRender` in case of a change in order to repopulate it at rendering\n    //  run before firing the `down` event to give the dev a chance to populate it themselves\n    shouldRender && (this._objectsToRender = undefined);\n    this._handleEvent(e, 'down');\n    // we must renderAll so that we update the visuals\n    shouldRender && this.requestRenderAll();\n  }\n\n  /**\n   * reset cache form common information needed during event processing\n   * @private\n   */\n  _resetTransformEventData() {\n    this._target = undefined;\n    this._pointer = undefined;\n    this._absolutePointer = undefined;\n  }\n\n  /**\n   * Cache common information needed during event processing\n   * @private\n   * @param {Event} e Event object fired on event\n   */\n  _cacheTransformEventData(e: TPointerEvent) {\n    // reset in order to avoid stale caching\n    this._resetTransformEventData();\n    this._pointer = this.getViewportPoint(e);\n    this._absolutePointer = sendPointToPlane(\n      this._pointer,\n      undefined,\n      this.viewportTransform\n    );\n    this._target = this._currentTransform\n      ? this._currentTransform.target\n      : this.findTarget(e);\n  }\n\n  /**\n   * Method that defines the actions when mouse is hovering the canvas.\n   * The currentTransform parameter will define whether the user is rotating/scaling/translating\n   * an image or neither of them (only hovering). A group selection is also possible and would cancel\n   * all any other type of action.\n   * In case of an image transformation only the top canvas will be rendered.\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  __onMouseMove(e: TPointerEvent) {\n    this._isClick = false;\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'move:before');\n\n    if (this.isDrawingMode) {\n      this._onMouseMoveInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n\n    const groupSelector = this._groupSelector;\n\n    // We initially clicked in an empty area, so we draw a box for multiple selection\n    if (groupSelector) {\n      const pointer = this.getScenePoint(e);\n\n      groupSelector.deltaX = pointer.x - groupSelector.x;\n      groupSelector.deltaY = pointer.y - groupSelector.y;\n\n      this.renderTop();\n    } else if (!this._currentTransform) {\n      const target = this.findTarget(e);\n      this._setCursorFromEvent(e, target);\n      this._fireOverOutEvents(e, target);\n    } else {\n      this._transformObject(e);\n    }\n    this.textEditingManager.onMouseMove(e);\n    this._handleEvent(e, 'move');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Manage the mouseout, mouseover events for the fabric object on the canvas\n   * @param {Fabric.Object} target the target where the target from the mousemove event\n   * @param {Event} e Event object fired on mousemove\n   * @private\n   */\n  _fireOverOutEvents(e: TPointerEvent, target?: FabricObject) {\n    const _hoveredTarget = this._hoveredTarget,\n      _hoveredTargets = this._hoveredTargets,\n      targets = this.targets,\n      length = Math.max(_hoveredTargets.length, targets.length);\n\n    this.fireSyntheticInOutEvents('mouse', {\n      e,\n      target,\n      oldTarget: _hoveredTarget,\n      fireCanvas: true,\n    });\n    for (let i = 0; i < length; i++) {\n      this.fireSyntheticInOutEvents('mouse', {\n        e,\n        target: targets[i],\n        oldTarget: _hoveredTargets[i],\n      });\n    }\n    this._hoveredTarget = target;\n    this._hoveredTargets = this.targets.concat();\n  }\n\n  /**\n   * Manage the dragEnter, dragLeave events for the fabric objects on the canvas\n   * @param {Fabric.Object} target the target where the target from the onDrag event\n   * @param {Object} data Event object fired on dragover\n   * @private\n   */\n  _fireEnterLeaveEvents(target: FabricObject | undefined, data: DragEventData) {\n    const draggedoverTarget = this._draggedoverTarget,\n      _hoveredTargets = this._hoveredTargets,\n      targets = this.targets,\n      length = Math.max(_hoveredTargets.length, targets.length);\n\n    this.fireSyntheticInOutEvents('drag', {\n      ...data,\n      target,\n      oldTarget: draggedoverTarget,\n      fireCanvas: true,\n    });\n    for (let i = 0; i < length; i++) {\n      this.fireSyntheticInOutEvents('drag', {\n        ...data,\n        target: targets[i],\n        oldTarget: _hoveredTargets[i],\n      });\n    }\n    this._draggedoverTarget = target;\n  }\n\n  /**\n   * Manage the synthetic in/out events for the fabric objects on the canvas\n   * @param {Fabric.Object} target the target where the target from the supported events\n   * @param {Object} data Event object fired\n   * @param {Object} config configuration for the function to work\n   * @param {String} config.targetName property on the canvas where the old target is stored\n   * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out\n   * @param {String} config.evtOut name of the event to fire for out\n   * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in\n   * @param {String} config.evtIn name of the event to fire for in\n   * @private\n   */\n  fireSyntheticInOutEvents<T extends keyof TSyntheticEventContext>(\n    type: T,\n    {\n      target,\n      oldTarget,\n      fireCanvas,\n      e,\n      ...data\n    }: TSyntheticEventContext[T] & {\n      target?: FabricObject;\n      oldTarget?: FabricObject;\n      fireCanvas?: boolean;\n    }\n  ) {\n    const { targetIn, targetOut, canvasIn, canvasOut } =\n      syntheticEventConfig[type];\n    const targetChanged = oldTarget !== target;\n\n    if (oldTarget && targetChanged) {\n      const outOpt: CanvasEvents[typeof canvasOut] = {\n        ...data,\n        e,\n        target: oldTarget,\n        nextTarget: target,\n        ...getEventPoints(this, e),\n      };\n      fireCanvas && this.fire(canvasOut, outOpt);\n      oldTarget.fire(targetOut, outOpt);\n    }\n    if (target && targetChanged) {\n      const inOpt: CanvasEvents[typeof canvasIn] = {\n        ...data,\n        e,\n        target,\n        previousTarget: oldTarget,\n        ...getEventPoints(this, e),\n      };\n      fireCanvas && this.fire(canvasIn, inOpt);\n      target.fire(targetIn, inOpt);\n    }\n  }\n\n  /**\n   * Method that defines actions when an Event Mouse Wheel\n   * @param {Event} e Event object fired on mouseup\n   */\n  __onMouseWheel(e: TPointerEvent) {\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'wheel');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event fired on mousemove\n   */\n  _transformObject(e: TPointerEvent) {\n    const scenePoint = this.getScenePoint(e),\n      transform = this._currentTransform!,\n      target = transform.target,\n      //  transform pointer to target's containing coordinate plane\n      //  both pointer and object should agree on every point\n      localPointer = target.group\n        ? sendPointToPlane(\n            scenePoint,\n            undefined,\n            target.group.calcTransformMatrix()\n          )\n        : scenePoint;\n    transform.shiftKey = e.shiftKey;\n    transform.altKey = !!this.centeredKey && e[this.centeredKey];\n\n    this._performTransformAction(e, transform, localPointer);\n    transform.actionPerformed && this.requestRenderAll();\n  }\n\n  /**\n   * @private\n   */\n  _performTransformAction(\n    e: TPointerEvent,\n    transform: Transform,\n    pointer: Point\n  ) {\n    const x = pointer.x,\n      y = pointer.y,\n      action = transform.action,\n      actionHandler = transform.actionHandler;\n    let actionPerformed = false;\n    // this object could be created from the function in the control handlers\n\n    if (actionHandler) {\n      actionPerformed = actionHandler(e, transform, x, y);\n    }\n    if (action === 'drag' && actionPerformed) {\n      transform.target.isMoving = true;\n      this.setCursor(transform.target.moveCursor || this.moveCursor);\n    }\n    transform.actionPerformed = transform.actionPerformed || actionPerformed;\n  }\n\n  /**\n   * Sets the cursor depending on where the canvas is being hovered.\n   * Note: very buggy in Opera\n   * @param {Event} e Event object\n   * @param {Object} target Object that the mouse is hovering, if so.\n   */\n  _setCursorFromEvent(e: TPointerEvent, target?: FabricObject) {\n    if (!target) {\n      this.setCursor(this.defaultCursor);\n      return;\n    }\n    let hoverCursor = target.hoverCursor || this.hoverCursor;\n    const activeSelection = isActiveSelection(this._activeObject)\n        ? this._activeObject\n        : null,\n      // only show proper corner when group selection is not active\n      corner =\n        (!activeSelection || target.group !== activeSelection) &&\n        // here we call findTargetCorner always with undefined for the touch parameter.\n        // we assume that if you are using a cursor you do not need to interact with\n        // the bigger touch area.\n        target.findControl(this.getViewportPoint(e));\n\n    if (!corner) {\n      if ((target as Group).subTargetCheck) {\n        // hoverCursor should come from top-most subTarget,\n        // so we walk the array backwards\n        this.targets\n          .concat()\n          .reverse()\n          .map((_target) => {\n            hoverCursor = _target.hoverCursor || hoverCursor;\n          });\n      }\n      this.setCursor(hoverCursor);\n    } else {\n      const control = corner.control;\n      this.setCursor(control.cursorStyleHandler(e, control, target));\n    }\n  }\n\n  /**\n   * ## Handles multiple selection\n   * - toggles `target` selection (selects/deselects `target` if it isn't/is selected respectively)\n   * - sets the active object in case it is not set or in case there is a single active object left under active selection.\n   * ---\n   * - If the active object is the active selection we add/remove `target` from it\n   * - If not, add the active object and `target` to the active selection and make it the active object.\n   * @private\n   * @param {TPointerEvent} e Event object\n   * @param {FabricObject} target target of event to select/deselect\n   * @returns true if grouping occurred\n   */\n  protected handleMultiSelection(e: TPointerEvent, target?: FabricObject) {\n    const activeObject = this._activeObject;\n    const isAS = isActiveSelection(activeObject);\n    if (\n      // check if an active object exists on canvas and if the user is pressing the `selectionKey` while canvas supports multi selection.\n      !!activeObject &&\n      this._isSelectionKeyPressed(e) &&\n      this.selection &&\n      // on top of that the user also has to hit a target that is selectable.\n      !!target &&\n      target.selectable &&\n      // group target and active object only if they are different objects\n      // else we try to find a subtarget of `ActiveSelection`\n      (activeObject !== target || isAS) &&\n      //  make sure `activeObject` and `target` aren't ancestors of each other in case `activeObject` is not `ActiveSelection`\n      // if it is then we want to remove `target` from it\n      (isAS ||\n        (!target.isDescendantOf(activeObject) &&\n          !activeObject.isDescendantOf(target))) &&\n      //  target accepts selection\n      !target.onSelect({ e }) &&\n      // make sure we are not on top of a control\n      !activeObject.getActiveControl()\n    ) {\n      if (isAS) {\n        const prevActiveObjects = activeObject.getObjects();\n        if (target === activeObject) {\n          const pointer = this.getViewportPoint(e);\n          target =\n            // first search active objects for a target to remove\n            this.searchPossibleTargets(prevActiveObjects, pointer) ||\n            //  if not found, search under active selection for a target to add\n            // `prevActiveObjects` will be searched but we already know they will not be found\n            this.searchPossibleTargets(this._objects, pointer);\n          // if nothing is found bail out\n          if (!target || !target.selectable) {\n            return false;\n          }\n        }\n        if (target.group === activeObject) {\n          // `target` is part of active selection => remove it\n          activeObject.remove(target);\n          this._hoveredTarget = target;\n          this._hoveredTargets = [...this.targets];\n          // if after removing an object we are left with one only...\n          if (activeObject.size() === 1) {\n            // activate last remaining object\n            // deselecting the active selection will remove the remaining object from it\n            this._setActiveObject(activeObject.item(0), e);\n          }\n        } else {\n          // `target` isn't part of active selection => add it\n          activeObject.multiSelectAdd(target);\n          this._hoveredTarget = activeObject;\n          this._hoveredTargets = [...this.targets];\n        }\n        this._fireSelectionEvents(prevActiveObjects, e);\n      } else {\n        (activeObject as IText).exitEditing &&\n          (activeObject as IText).exitEditing();\n        // add the active object and the target to the active selection and set it as the active object\n        const klass =\n          classRegistry.getClass<typeof ActiveSelection>('ActiveSelection');\n        const newActiveSelection = new klass([], {\n          /**\n           * it is crucial to pass the canvas ref before calling {@link ActiveSelection#multiSelectAdd}\n           * since it uses {@link FabricObject#isInFrontOf} which relies on the canvas ref\n           */\n          canvas: this,\n        });\n        newActiveSelection.multiSelectAdd(activeObject, target);\n        this._hoveredTarget = newActiveSelection;\n        // ISSUE 4115: should we consider subTargets here?\n        // this._hoveredTargets = [];\n        // this._hoveredTargets = this.targets.concat();\n        this._setActiveObject(newActiveSelection, e);\n        this._fireSelectionEvents([activeObject], e);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * ## Handles selection\n   * - selects objects that are contained in (and possibly intersecting) the selection bounding box\n   * - sets the active object\n   * ---\n   * runs on mouse up after a mouse move\n   */\n  protected handleSelection(e: TPointerEvent) {\n    if (!this.selection || !this._groupSelector) {\n      return false;\n    }\n    const { x, y, deltaX, deltaY } = this._groupSelector,\n      point1 = new Point(x, y),\n      point2 = point1.add(new Point(deltaX, deltaY)),\n      tl = point1.min(point2),\n      br = point1.max(point2),\n      size = br.subtract(tl);\n\n    const collectedObjects = this.collectObjects(\n      {\n        left: tl.x,\n        top: tl.y,\n        width: size.x,\n        height: size.y,\n      },\n      { includeIntersecting: !this.selectionFullyContained }\n    ) as FabricObject[];\n\n    const objects =\n      // though this method runs only after mouse move the pointer could do a mouse up on the same position as mouse down\n      // should it be handled as is?\n      point1.eq(point2)\n        ? collectedObjects[0]\n          ? [collectedObjects[0]]\n          : []\n        : collectedObjects.length > 1\n        ? collectedObjects.filter((object) => !object.onSelect({ e })).reverse()\n        : // `setActiveObject` will call `onSelect(collectedObjects[0])` in this case\n          collectedObjects;\n\n    // set active object\n    if (objects.length === 1) {\n      // set as active object\n      this.setActiveObject(objects[0], e);\n    } else if (objects.length > 1) {\n      // add to active selection and make it the active object\n      const klass =\n        classRegistry.getClass<typeof ActiveSelection>('ActiveSelection');\n      this.setActiveObject(new klass(objects, { canvas: this }), e);\n    }\n\n    // cleanup\n    this._groupSelector = null;\n    return true;\n  }\n\n  /**\n   * @override clear {@link textEditingManager}\n   */\n  clear() {\n    this.textEditingManager.clear();\n    super.clear();\n  }\n\n  /**\n   * @override clear {@link textEditingManager}\n   */\n  destroy() {\n    this.removeListeners();\n    this.textEditingManager.dispose();\n    super.destroy();\n  }\n}\n", "export const linearDefaultCoords = {\n  x1: 0,\n  y1: 0,\n  x2: 0,\n  y2: 0,\n};\n\nexport const radialDefaultCoords = {\n  ...linearDefaultCoords,\n  r1: 0,\n  r2: 0,\n};\n", "import { ifNaN } from '../util/internals';\nimport { capValue } from '../util/misc/capValue';\n\nconst RE_PERCENT = /^(\\d+\\.\\d+)%|(\\d+)%$/;\n\nexport function isPercent(value: string | null) {\n  return value && RE_PERCENT.test(value);\n}\n\n/**\n *\n * @param value\n * @param valueIfNaN\n * @returns ∈ [0, 1]\n */\nexport function parsePercent(\n  value: string | number | null | undefined,\n  valueIfNaN?: number\n) {\n  const parsed =\n    typeof value === 'number'\n      ? value\n      : typeof value === 'string'\n      ? parseFloat(value) / (isPercent(value) ? 100 : 1)\n      : NaN;\n  return capValue(0, ifNaN(parsed, valueIfNaN), 1);\n}\n", "import { Color } from '../../color/Color';\nimport { parsePercent } from '../../parser/percent';\nimport { ifNaN } from '../../util/internals';\nimport type { ColorStop } from '../typedefs';\n\nconst RE_KEY_VALUE_PAIRS = /\\s*;\\s*/;\nconst RE_KEY_VALUE = /\\s*:\\s*/;\n\nfunction parseColorStop(el: SVGStopElement, multiplier: number) {\n  let colorValue, opacity;\n  const style = el.getAttribute('style');\n  if (style) {\n    const keyValuePairs = style.split(RE_KEY_VALUE_PAIRS);\n\n    if (keyValuePairs[keyValuePairs.length - 1] === '') {\n      keyValuePairs.pop();\n    }\n\n    for (let i = keyValuePairs.length; i--; ) {\n      const [key, value] = keyValuePairs[i]\n        .split(RE_KEY_VALUE)\n        .map((s) => s.trim());\n      if (key === 'stop-color') {\n        colorValue = value;\n      } else if (key === 'stop-opacity') {\n        opacity = value;\n      }\n    }\n  }\n\n  const color = new Color(\n    colorValue || el.getAttribute('stop-color') || 'rgb(0,0,0)'\n  );\n\n  return {\n    offset: parsePercent(el.getAttribute('offset'), 0),\n    color: color.toRgb(),\n    opacity:\n      ifNaN(parseFloat(opacity || el.getAttribute('stop-opacity') || ''), 1) *\n      color.getAlpha() *\n      multiplier,\n  };\n}\n\nexport function parseColorStops(\n  el: SVGGradientElement,\n  opacityAttr: string | null\n) {\n  const colorStops: ColorStop[] = [],\n    colorStopEls = el.getElementsByTagName('stop'),\n    multiplier = parsePercent(opacityAttr, 1);\n  for (let i = colorStopEls.length; i--; ) {\n    colorStops.push(parseColorStop(colorStopEls[i], multiplier));\n  }\n  return colorStops;\n}\n", "import type { GradientType, GradientUnits } from '../typedefs';\n\nexport function parseType(el: SVGGradientElement): GradientType {\n  return el.nodeName === 'linearGradient' || el.nodeName === 'LINEARGRADIENT'\n    ? 'linear'\n    : 'radial';\n}\n\nexport function parseGradientUnits(el: SVGGradientElement): GradientUnits {\n  return el.getAttribute('gradientUnits') === 'userSpaceOnUse'\n    ? 'pixels'\n    : 'percentage';\n}\n", "import { isPercent } from '../../parser/percent';\nimport type { TSize } from '../../typedefs';\nimport type { GradientCoords, GradientType, GradientUnits } from '../typedefs';\nimport { parseGradientUnits, parseType } from './misc';\n\nfunction convertPercentUnitsToValues<\n  T extends GradientType,\n  K extends keyof GradientCoords<T>\n>(\n  valuesToConvert: Record<K, string | number>,\n  { width, height, gradientUnits }: TSize & { gradientUnits: GradientUnits }\n) {\n  let finalValue;\n  return (Object.keys(valuesToConvert) as K[]).reduce((acc, prop) => {\n    const propValue = valuesToConvert[prop];\n    if (propValue === 'Infinity') {\n      finalValue = 1;\n    } else if (propValue === '-Infinity') {\n      finalValue = 0;\n    } else {\n      finalValue =\n        typeof propValue === 'string' ? parseFloat(propValue) : propValue;\n      if (typeof propValue === 'string' && isPercent(propValue)) {\n        finalValue *= 0.01;\n        if (gradientUnits === 'pixels') {\n          // then we need to fix those percentages here in svg parsing\n          if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\n            finalValue *= width;\n          }\n          if (prop === 'y1' || prop === 'y2') {\n            finalValue *= height;\n          }\n        }\n      }\n    }\n    acc[prop] = finalValue;\n    return acc;\n  }, {} as Record<K, number>);\n}\n\nfunction getValue(el: SVGGradientElement, key: string) {\n  return el.getAttribute(key);\n}\n\nexport function parseLinearCoords(el: SVGGradientElement) {\n  return {\n    x1: getValue(el, 'x1') || 0,\n    y1: getValue(el, 'y1') || 0,\n    x2: getValue(el, 'x2') || '100%',\n    y2: getValue(el, 'y2') || 0,\n  };\n}\n\nexport function parseRadialCoords(el: SVGGradientElement) {\n  return {\n    x1: getValue(el, 'fx') || getValue(el, 'cx') || '50%',\n    y1: getValue(el, 'fy') || getValue(el, 'cy') || '50%',\n    r1: 0,\n    x2: getValue(el, 'cx') || '50%',\n    y2: getValue(el, 'cy') || '50%',\n    r2: getValue(el, 'r') || '50%',\n  };\n}\n\nexport function parseCoords(el: SVGGradientElement, size: TSize) {\n  return convertPercentUnitsToValues(\n    parseType(el) === 'linear' ? parseLinearCoords(el) : parseRadialCoords(el),\n    {\n      ...size,\n      gradientUnits: parseGradientUnits(el),\n    }\n  );\n}\n", "import { Color } from '../color/Color';\nimport { iMatrix } from '../constants';\nimport { parseTransformAttribute } from '../parser/parseTransformAttribute';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TMat2D } from '../typedefs';\nimport { uid } from '../util/internals/uid';\nimport { pick } from '../util/misc/pick';\nimport { matrixToSVG } from '../util/misc/svgParsing';\nimport { linearDefaultCoords, radialDefaultCoords } from './constants';\nimport { parseColorStops } from './parser/parseColorStops';\nimport { parseCoords } from './parser/parseCoords';\nimport { parseType, parseGradientUnits } from './parser/misc';\nimport type {\n  ColorStop,\n  GradientCoords,\n  GradientOptions,\n  GradientType,\n  GradientUnits,\n  SVGOptions,\n} from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { isPath } from '../util/typeAssertions';\n\n/**\n * Gradient class\n * @class Gradient\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#gradients}\n */\nexport class Gradient<\n  S,\n  T extends GradientType = S extends GradientType ? S : 'linear'\n> {\n  /**\n   * Horizontal offset for aligning gradients coming from SVG when outside pathgroups\n   * @type Number\n   * @default 0\n   */\n  declare offsetX: number;\n\n  /**\n   * Vertical offset for aligning gradients coming from SVG when outside pathgroups\n   * @type Number\n   * @default 0\n   */\n  declare offsetY: number;\n\n  /**\n   * A transform matrix to apply to the gradient before painting.\n   * Imported from svg gradients, is not applied with the current transform in the center.\n   * Before this transform is applied, the origin point is at the top left corner of the object\n   * plus the addition of offsetY and offsetX.\n   * @type Number[]\n   * @default null\n   */\n  declare gradientTransform?: TMat2D;\n\n  /**\n   * coordinates units for coords.\n   * If `pixels`, the number of coords are in the same unit of width / height.\n   * If set as `percentage` the coords are still a number, but 1 means 100% of width\n   * for the X and 100% of the height for the y. It can be bigger than 1 and negative.\n   * allowed values pixels or percentage.\n   * @type GradientUnits\n   * @default 'pixels'\n   */\n  declare gradientUnits: GradientUnits;\n\n  /**\n   * Gradient type linear or radial\n   * @type GradientType\n   * @default 'linear'\n   */\n  declare type: T;\n\n  /**\n   * Defines how the gradient is located in space and spread\n   * @type GradientCoords\n   */\n  declare coords: GradientCoords<T>;\n\n  /**\n   * Defines how many colors a gradient has and how they are located on the axis\n   * defined by coords\n   * @type GradientCoords\n   */\n  declare colorStops: ColorStop[];\n\n  /**\n   * If true, this object will not be exported during the serialization of a canvas\n   * @type boolean\n   */\n  declare excludeFromExport?: boolean;\n\n  /**\n   * ID used for SVG export functionalities\n   * @type number | string\n   */\n  declare readonly id: string | number;\n\n  static type = 'Gradient';\n\n  constructor({\n    type = 'linear' as T,\n    gradientUnits = 'pixels',\n    coords = {},\n    colorStops = [],\n    offsetX = 0,\n    offsetY = 0,\n    gradientTransform,\n    id,\n  }: GradientOptions<T>) {\n    this.id = id ? `${id}_${uid()}` : uid();\n    this.type = type;\n    this.gradientUnits = gradientUnits;\n    this.gradientTransform = gradientTransform;\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n    this.coords = {\n      ...(this.type === 'radial' ? radialDefaultCoords : linearDefaultCoords),\n      ...coords,\n    } as GradientCoords<T>;\n    this.colorStops = colorStops.slice();\n  }\n\n  // isType<S extends GradientType>(type: S): this is Gradient<S> {\n  //   return (this.type as GradientType) === type;\n  // }\n\n  /**\n   * Adds another colorStop\n   * @param {Record<string, string>} colorStop Object with offset and color\n   * @return {Gradient} thisArg\n   */\n  addColorStop(colorStops: Record<string, string>) {\n    for (const position in colorStops) {\n      const color = new Color(colorStops[position]);\n      this.colorStops.push({\n        offset: parseFloat(position),\n        color: color.toRgb(),\n        opacity: color.getAlpha(),\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Returns object representation of a gradient\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {object}\n   */\n  toObject(propertiesToInclude?: (keyof this | string)[]) {\n    return {\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      type: this.type,\n      coords: this.coords,\n      colorStops: this.colorStops,\n      offsetX: this.offsetX,\n      offsetY: this.offsetY,\n      gradientUnits: this.gradientUnits,\n      gradientTransform: this.gradientTransform\n        ? [...this.gradientTransform]\n        : undefined,\n    };\n  }\n\n  /* _TO_SVG_START_ */\n  /**\n   * Returns SVG representation of an gradient\n   * @param {FabricObject} object Object to create a gradient for\n   * @return {String} SVG representation of an gradient (linear/radial)\n   */\n  toSVG(\n    object: FabricObject,\n    { additionalTransform: preTransform }: { additionalTransform?: string } = {}\n  ) {\n    const markup = [],\n      transform = (\n        this.gradientTransform\n          ? this.gradientTransform.concat()\n          : iMatrix.concat()\n      ) as TMat2D,\n      gradientUnits =\n        this.gradientUnits === 'pixels'\n          ? 'userSpaceOnUse'\n          : 'objectBoundingBox';\n    // colorStops must be sorted ascending, and guarded against deep mutations\n    const colorStops = this.colorStops\n      .map((colorStop) => ({ ...colorStop }))\n      .sort((a, b) => {\n        return a.offset - b.offset;\n      });\n\n    let offsetX = -this.offsetX,\n      offsetY = -this.offsetY;\n    if (gradientUnits === 'objectBoundingBox') {\n      offsetX /= object.width;\n      offsetY /= object.height;\n    } else {\n      offsetX += object.width / 2;\n      offsetY += object.height / 2;\n    }\n    // todo what about polygon/polyline?\n    if (isPath(object) && this.gradientUnits !== 'percentage') {\n      offsetX -= object.pathOffset.x;\n      offsetY -= object.pathOffset.y;\n    }\n    transform[4] -= offsetX;\n    transform[5] -= offsetY;\n\n    const commonAttributes = [\n      `id=\"SVGID_${this.id}\"`,\n      `gradientUnits=\"${gradientUnits}\"`,\n      `gradientTransform=\"${\n        preTransform ? preTransform + ' ' : ''\n      }${matrixToSVG(transform)}\"`,\n      '',\n    ].join(' ');\n\n    if (this.type === 'linear') {\n      const { x1, y1, x2, y2 } = this.coords;\n      markup.push(\n        '<linearGradient ',\n        commonAttributes,\n        ' x1=\"',\n        x1,\n        '\" y1=\"',\n        y1,\n        '\" x2=\"',\n        x2,\n        '\" y2=\"',\n        y2,\n        '\">\\n'\n      );\n    } else if (this.type === 'radial') {\n      const { x1, y1, x2, y2, r1, r2 } = this\n        .coords as GradientCoords<'radial'>;\n      const needsSwap = r1 > r2;\n      // svg radial gradient has just 1 radius. the biggest.\n      markup.push(\n        '<radialGradient ',\n        commonAttributes,\n        ' cx=\"',\n        needsSwap ? x1 : x2,\n        '\" cy=\"',\n        needsSwap ? y1 : y2,\n        '\" r=\"',\n        needsSwap ? r1 : r2,\n        '\" fx=\"',\n        needsSwap ? x2 : x1,\n        '\" fy=\"',\n        needsSwap ? y2 : y1,\n        '\">\\n'\n      );\n      if (needsSwap) {\n        // svg goes from internal to external radius. if radius are inverted, swap color stops.\n        colorStops.reverse(); //  mutates array\n        colorStops.forEach((colorStop) => {\n          colorStop.offset = 1 - colorStop.offset;\n        });\n      }\n      const minRadius = Math.min(r1, r2);\n      if (minRadius > 0) {\n        // i have to shift all colorStops and add new one in 0.\n        const maxRadius = Math.max(r1, r2),\n          percentageShift = minRadius / maxRadius;\n        colorStops.forEach((colorStop) => {\n          colorStop.offset += percentageShift * (1 - colorStop.offset);\n        });\n      }\n    }\n\n    colorStops.forEach(({ color, offset, opacity }) => {\n      markup.push(\n        '<stop ',\n        'offset=\"',\n        offset * 100 + '%',\n        '\" style=\"stop-color:',\n        color,\n        typeof opacity !== 'undefined' ? ';stop-opacity: ' + opacity : ';',\n        '\"/>\\n'\n      );\n    });\n\n    markup.push(\n      this.type === 'linear' ? '</linearGradient>' : '</radialGradient>',\n      '\\n'\n    );\n\n    return markup.join('');\n  }\n  /* _TO_SVG_END_ */\n\n  /**\n   * Returns an instance of CanvasGradient\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @return {CanvasGradient}\n   */\n  toLive(ctx: CanvasRenderingContext2D): CanvasGradient {\n    const coords = this.coords as GradientCoords<'radial'>;\n    const gradient =\n      this.type === 'linear'\n        ? ctx.createLinearGradient(coords.x1, coords.y1, coords.x2, coords.y2)\n        : ctx.createRadialGradient(\n            coords.x1,\n            coords.y1,\n            coords.r1,\n            coords.x2,\n            coords.y2,\n            coords.r2\n          );\n\n    this.colorStops.forEach(({ color, opacity, offset }) => {\n      gradient.addColorStop(\n        offset,\n        typeof opacity !== 'undefined'\n          ? new Color(color).setAlpha(opacity).toRgba()\n          : color\n      );\n    });\n\n    return gradient;\n  }\n\n  static async fromObject(\n    options: GradientOptions<'linear'>\n  ): Promise<Gradient<'radial'>>;\n  static async fromObject(\n    options: GradientOptions<'radial'>\n  ): Promise<Gradient<'radial'>>;\n  static async fromObject(\n    options: GradientOptions<'linear'> | GradientOptions<'radial'>\n  ) {\n    return new this(options);\n  }\n\n  /* _FROM_SVG_START_ */\n  /**\n   * Returns {@link Gradient} instance from an SVG element\n   * @static\n   * @memberOf Gradient\n   * @param {SVGGradientElement} el SVG gradient element\n   * @param {FabricObject} instance\n   * @param {String} opacity A fill-opacity or stroke-opacity attribute to multiply to each stop's opacity.\n   * @param {SVGOptions} svgOptions an object containing the size of the SVG in order to parse correctly gradients\n   * that uses gradientUnits as 'userSpaceOnUse' and percentages.\n   * @return {Gradient} Gradient instance\n   * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement\n   * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement\n   *\n   *  @example\n   *\n   *  <linearGradient id=\"linearGrad1\">\n   *    <stop offset=\"0%\" stop-color=\"white\"/>\n   *    <stop offset=\"100%\" stop-color=\"black\"/>\n   *  </linearGradient>\n   *\n   *  OR\n   *\n   *  <linearGradient id=\"linearGrad2\">\n   *    <stop offset=\"0\" style=\"stop-color:rgb(255,255,255)\"/>\n   *    <stop offset=\"1\" style=\"stop-color:rgb(0,0,0)\"/>\n   *  </linearGradient>\n   *\n   *  OR\n   *\n   *  <radialGradient id=\"radialGrad1\">\n   *    <stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"1\" />\n   *    <stop offset=\"50%\" stop-color=\"black\" stop-opacity=\"0.5\" />\n   *    <stop offset=\"100%\" stop-color=\"white\" stop-opacity=\"1\" />\n   *  </radialGradient>\n   *\n   *  OR\n   *\n   *  <radialGradient id=\"radialGrad2\">\n   *    <stop offset=\"0\" stop-color=\"rgb(255,255,255)\" />\n   *    <stop offset=\"0.5\" stop-color=\"rgb(0,0,0)\" />\n   *    <stop offset=\"1\" stop-color=\"rgb(255,255,255)\" />\n   *  </radialGradient>\n   *\n   */\n  static fromElement(\n    el: SVGGradientElement,\n    instance: FabricObject,\n    svgOptions: SVGOptions\n  ): Gradient<GradientType> {\n    const gradientUnits = parseGradientUnits(el);\n    const center = instance._findCenterFromElement();\n    return new this({\n      id: el.getAttribute('id') || undefined,\n      type: parseType(el),\n      coords: parseCoords(el, {\n        width: svgOptions.viewBoxWidth || svgOptions.width,\n        height: svgOptions.viewBoxHeight || svgOptions.height,\n      }),\n      colorStops: parseColorStops(el, svgOptions.opacity),\n      gradientUnits,\n      gradientTransform: parseTransformAttribute(\n        el.getAttribute('gradientTransform') || ''\n      ),\n      ...(gradientUnits === 'pixels'\n        ? {\n            offsetX: instance.width / 2 - center.x,\n            offsetY: instance.height / 2 - center.y,\n          }\n        : {\n            offsetX: 0,\n            offsetY: 0,\n          }),\n    });\n  }\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Gradient, 'gradient');\nclassRegistry.setClass(Gradient, 'linear');\nclassRegistry.setClass(Gradient, 'radial');\n", "import { config } from '../config';\nimport type { Abortable, TCrossOrigin, TMat2D, TSize } from '../typedefs';\nimport { ifNaN } from '../util/internals';\nimport { uid } from '../util/internals/uid';\nimport { loadImage } from '../util/misc/objectEnlive';\nimport { pick } from '../util/misc/pick';\nimport { toFixed } from '../util/misc/toFixed';\nimport { classRegistry } from '../ClassRegistry';\nimport type {\n  PatternRepeat,\n  PatternOptions,\n  SerializedPatternOptions,\n} from './types';\nimport { log } from '../util/internals/console';\n\n/**\n * @see {@link http://fabricjs.com/patterns demo}\n * @see {@link http://fabricjs.com/dynamic-patterns demo}\n */\nexport class Pattern {\n  static type = 'Pattern';\n\n  /**\n   * Legacy identifier of the class. Prefer using this.constructor.type 'Pattern'\n   * or utils like isPattern, or instance of to indentify a pattern in your code.\n   * Will be removed in future versiones\n   * @TODO add sustainable warning message\n   * @type string\n   * @deprecated\n   */\n  get type() {\n    return 'pattern';\n  }\n\n  set type(value) {\n    log('warn', 'Setting type has no effect', value);\n  }\n\n  /**\n   * @type PatternRepeat\n   * @defaults\n   */\n  repeat: PatternRepeat = 'repeat';\n\n  /**\n   * Pattern horizontal offset from object's left/top corner\n   * @type Number\n   * @default\n   */\n  offsetX = 0;\n\n  /**\n   * Pattern vertical offset from object's left/top corner\n   * @type Number\n   * @default\n   */\n  offsetY = 0;\n\n  /**\n   * @type TCrossOrigin\n   * @default\n   */\n  crossOrigin: TCrossOrigin = '';\n\n  /**\n   * transform matrix to change the pattern, imported from svgs.\n   * @todo verify if using the identity matrix as default makes the rest of the code more easy\n   * @type Array\n   * @default\n   */\n  patternTransform: TMat2D | null = null;\n\n  /**\n   * The actual pixel source of the pattern\n   */\n  declare source: CanvasImageSource;\n\n  /**\n   * If true, this object will not be exported during the serialization of a canvas\n   * @type boolean\n   */\n  declare excludeFromExport?: boolean;\n\n  /**\n   * ID used for SVG export functionalities\n   * @type number\n   */\n  declare readonly id: number;\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   * @param {option.source} [source] the pattern source, eventually empty or a drawable\n   */\n  constructor(options: PatternOptions) {\n    this.id = uid();\n    Object.assign(this, options);\n  }\n\n  /**\n   * @returns true if {@link source} is an <img> element\n   */\n  isImageSource(): this is { source: HTMLImageElement } {\n    return (\n      !!this.source && typeof (this.source as HTMLImageElement).src === 'string'\n    );\n  }\n\n  /**\n   * @returns true if {@link source} is a <canvas> element\n   */\n  isCanvasSource(): this is { source: HTMLCanvasElement } {\n    return !!this.source && !!(this.source as HTMLCanvasElement).toDataURL;\n  }\n\n  sourceToString(): string {\n    return this.isImageSource()\n      ? this.source.src\n      : this.isCanvasSource()\n      ? this.source.toDataURL()\n      : '';\n  }\n\n  /**\n   * Returns an instance of CanvasPattern\n   * @param {CanvasRenderingContext2D} ctx Context to create pattern\n   * @return {CanvasPattern}\n   */\n  toLive(ctx: CanvasRenderingContext2D): CanvasPattern | null {\n    if (\n      // if the image failed to load, return, and allow rest to continue loading\n      !this.source ||\n      // if an image\n      (this.isImageSource() &&\n        (!this.source.complete ||\n          this.source.naturalWidth === 0 ||\n          this.source.naturalHeight === 0))\n    ) {\n      return null;\n    }\n\n    return ctx.createPattern(this.source, this.repeat)!;\n  }\n\n  /**\n   * Returns object representation of a pattern\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {object} Object representation of a pattern instance\n   */\n  toObject(propertiesToInclude: string[] = []): Record<string, any> {\n    const { repeat, crossOrigin } = this;\n    return {\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      type: 'pattern',\n      source: this.sourceToString(),\n      repeat,\n      crossOrigin,\n      offsetX: toFixed(this.offsetX, config.NUM_FRACTION_DIGITS),\n      offsetY: toFixed(this.offsetY, config.NUM_FRACTION_DIGITS),\n      patternTransform: this.patternTransform\n        ? [...this.patternTransform]\n        : null,\n    };\n  }\n\n  /* _TO_SVG_START_ */\n  /**\n   * Returns SVG representation of a pattern\n   */\n  toSVG({ width, height }: TSize): string {\n    const { source: patternSource, repeat, id } = this,\n      patternOffsetX = ifNaN(this.offsetX / width, 0),\n      patternOffsetY = ifNaN(this.offsetY / height, 0),\n      patternWidth =\n        repeat === 'repeat-y' || repeat === 'no-repeat'\n          ? 1 + Math.abs(patternOffsetX || 0)\n          : ifNaN(\n              ((patternSource as HTMLImageElement).width as number) / width,\n              0\n            ),\n      patternHeight =\n        repeat === 'repeat-x' || repeat === 'no-repeat'\n          ? 1 + Math.abs(patternOffsetY || 0)\n          : ifNaN(\n              ((patternSource as HTMLImageElement).height as number) / height,\n              0\n            );\n\n    return [\n      `<pattern id=\"SVGID_${id}\" x=\"${patternOffsetX}\" y=\"${patternOffsetY}\" width=\"${patternWidth}\" height=\"${patternHeight}\">`,\n      `<image x=\"0\" y=\"0\" width=\"${\n        (patternSource as HTMLImageElement).width\n      }\" height=\"${\n        (patternSource as HTMLImageElement).height\n      }\" xlink:href=\"${this.sourceToString()}\"></image>`,\n      `</pattern>`,\n      '',\n    ].join('\\n');\n  }\n  /* _TO_SVG_END_ */\n\n  static async fromObject(\n    { type, source, ...serialized }: SerializedPatternOptions,\n    options: Abortable\n  ): Promise<Pattern> {\n    const img = await loadImage(source, {\n      ...options,\n      crossOrigin: serialized.crossOrigin,\n    });\n    return new this({ ...serialized, source: img });\n  }\n}\n\nclassRegistry.setClass(Pattern);\n// kept for compatibility reason\nclassRegistry.setClass(Pattern, 'pattern');\n", "import { Color } from '../color/Color';\nimport type { Point } from '../Point';\nimport type { Shadow } from '../Shadow';\nimport type { Canvas } from '../canvas/Canvas';\nimport type { TBrushEventData } from './typedefs';\n\n/**\n * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}\n */\nexport abstract class BaseBrush {\n  /**\n   * Color of a brush\n   * @type String\n   * @default\n   */\n  color = 'rgb(0, 0, 0)';\n\n  /**\n   * Width of a brush, has to be a Number, no string literals\n   * @type Number\n   * @default\n   */\n  width = 1;\n\n  /**\n   * Shadow object representing shadow of this shape.\n   * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\n   * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\n   * @type Shadow\n   * @default\n   */\n  shadow: Shadow | null = null;\n\n  /**\n   * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\n   * @type String\n   * @default\n   */\n  strokeLineCap: CanvasLineCap = 'round';\n\n  /**\n   * Corner style of a brush (one of \"bevel\", \"round\", \"miter\")\n   * @type String\n   * @default\n   */\n  strokeLineJoin: CanvasLineJoin = 'round';\n\n  /**\n   * Maximum miter length (used for strokeLineJoin = \"miter\") of a brush's\n   * @type Number\n   * @default\n   */\n  strokeMiterLimit = 10;\n\n  /**\n   * Stroke Dash Array.\n   * @type Array\n   * @default\n   */\n  strokeDashArray: number[] | null = null;\n\n  /**\n   * When `true`, the free drawing is limited to the whiteboard size. Default to false.\n   * @type Boolean\n   * @default false\n   */\n\n  limitedToCanvasSize = false;\n\n  /**\n   * @todo add type\n   */\n  declare canvas: Canvas;\n\n  constructor(canvas: Canvas) {\n    this.canvas = canvas;\n  }\n\n  abstract _render(): void;\n  abstract onMouseDown(pointer: Point, ev: TBrushEventData): void;\n  abstract onMouseMove(pointer: Point, ev: TBrushEventData): void;\n  /**\n   * @returns true if brush should continue blocking interaction\n   */\n  abstract onMouseUp(ev: TBrushEventData): boolean | void;\n\n  /**\n   * Sets brush styles\n   * @private\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  _setBrushStyles(ctx: CanvasRenderingContext2D) {\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = this.width;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.miterLimit = this.strokeMiterLimit;\n    ctx.lineJoin = this.strokeLineJoin;\n    ctx.setLineDash(this.strokeDashArray || []);\n  }\n\n  /**\n   * Sets the transformation on given context\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   * @private\n   */\n  protected _saveAndTransform(ctx: CanvasRenderingContext2D) {\n    const v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n  }\n\n  protected needsFullRender() {\n    const color = new Color(this.color);\n    return color.getAlpha() < 1 || !!this.shadow;\n  }\n\n  /**\n   * Sets brush shadow styles\n   * @private\n   */\n  protected _setShadow() {\n    if (!this.shadow || !this.canvas) {\n      return;\n    }\n\n    const canvas = this.canvas,\n      shadow = this.shadow,\n      ctx = canvas.contextTop,\n      zoom = canvas.getZoom() * canvas.getRetinaScaling();\n\n    ctx.shadowColor = shadow.color;\n    ctx.shadowBlur = shadow.blur * zoom;\n    ctx.shadowOffsetX = shadow.offsetX * zoom;\n    ctx.shadowOffsetY = shadow.offsetY * zoom;\n  }\n\n  /**\n   * Removes brush shadow styles\n   * @private\n   */\n  protected _resetShadow() {\n    const ctx = this.canvas.contextTop;\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n\n  /**\n   * Check is pointer is outside canvas boundaries\n   * @param {Object} pointer\n   * @private\n   */\n  protected _isOutSideCanvas(pointer: Point) {\n    return (\n      pointer.x < 0 ||\n      pointer.x > this.canvas.getWidth() ||\n      pointer.y < 0 ||\n      pointer.y > this.canvas.getHeight()\n    );\n  }\n}\n", "import { config } from '../config';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { XY } from '../Point';\nimport { Point } from '../Point';\nimport { makeBoundingBoxFromPoints } from '../util/misc/boundingBoxFromPoints';\nimport { toFixed } from '../util/misc/toFixed';\nimport {\n  getBoundsOfCurve,\n  joinPath,\n  makePathSimpler,\n  parsePath,\n} from '../util/path';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type {\n  TComplexPathData,\n  TPathSegmentInfo,\n  TSimplePathData,\n} from '../util/path/typedefs';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type {\n  TBBox,\n  TClassProperties,\n  TSVGReviver,\n  TOptions,\n} from '../typedefs';\nimport { CENTER, LEFT, TOP } from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\ninterface UniquePathProps {\n  sourcePath?: string;\n  path?: TSimplePathData;\n}\n\nexport interface SerializedPathProps\n  extends SerializedObjectProps,\n    UniquePathProps {}\n\nexport interface PathProps extends FabricObjectProps, UniquePathProps {}\n\nexport interface IPathBBox extends TBBox {\n  left: number;\n  top: number;\n  pathOffset: Point;\n}\n\nexport class Path<\n  Props extends TOptions<PathProps> = Partial<PathProps>,\n  SProps extends SerializedPathProps = SerializedPathProps,\n  EventSpec extends ObjectEvents = ObjectEvents\n> extends FabricObject<Props, SProps, EventSpec> {\n  /**\n   * Array of path points\n   * @type Array\n   * @default\n   */\n  declare path: TSimplePathData;\n\n  declare pathOffset: Point;\n\n  declare sourcePath?: string;\n\n  declare segmentsInfo?: TPathSegmentInfo[];\n\n  static type = 'Path';\n\n  static cacheProperties = [...cacheProperties, 'path', 'fillRule'];\n\n  /**\n   * Constructor\n   * @param {TComplexPathData} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n   * @param {Partial<PathProps>} [options] Options object\n   * @return {Path} thisArg\n   */\n  constructor(\n    path: TComplexPathData | string,\n    // todo: evaluate this spread here\n    { path: _, left, top, ...options }: Partial<Props> = {}\n  ) {\n    super();\n    Object.assign(this, Path.ownDefaults);\n    this.setOptions(options);\n    this._setPath(path || [], true);\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  /**\n   * @private\n   * @param {TComplexPathData | string} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n   * @param {boolean} [adjustPosition] pass true to reposition the object according to the bounding box\n   * @returns {Point} top left position of the bounding box, useful for complementary positioning\n   */\n  _setPath(path: TComplexPathData | string, adjustPosition?: boolean) {\n    this.path = makePathSimpler(Array.isArray(path) ? path : parsePath(path));\n    this.setBoundingBox(adjustPosition);\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates, by look at the polyline/polygon points.\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    const bbox = this._calcBoundsFromPath();\n    return new Point(bbox.left + bbox.width / 2, bbox.top + bbox.height / 2);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render path on\n   */\n  _renderPathCommands(ctx: CanvasRenderingContext2D) {\n    const l = -this.pathOffset.x,\n      t = -this.pathOffset.y;\n\n    ctx.beginPath();\n\n    for (const command of this.path) {\n      switch (\n        command[0] // first letter\n      ) {\n        case 'L': // lineto, absolute\n          ctx.lineTo(command[1] + l, command[2] + t);\n          break;\n\n        case 'M': // moveTo, absolute\n          ctx.moveTo(command[1] + l, command[2] + t);\n          break;\n\n        case 'C': // bezierCurveTo, absolute\n          ctx.bezierCurveTo(\n            command[1] + l,\n            command[2] + t,\n            command[3] + l,\n            command[4] + t,\n            command[5] + l,\n            command[6] + t\n          );\n          break;\n\n        case 'Q': // quadraticCurveTo, absolute\n          ctx.quadraticCurveTo(\n            command[1] + l,\n            command[2] + t,\n            command[3] + l,\n            command[4] + t\n          );\n          break;\n\n        case 'Z':\n          ctx.closePath();\n          break;\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render path on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    this._renderPathCommands(ctx);\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {string} string representation of an instance\n   */\n  toString() {\n    return `#<Path (${this.complexity()}): { \"top\": ${this.top}, \"left\": ${\n      this.left\n    } }>`;\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      path: this.path.map((pathCmd) => pathCmd.slice()),\n    };\n  }\n\n  /**\n   * Returns dataless object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toDatalessObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    const o = this.toObject<T, K>(propertiesToInclude);\n    if (this.sourcePath) {\n      delete o.path;\n      o.sourcePath = this.sourcePath;\n    }\n    return o;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const path = joinPath(this.path, config.NUM_FRACTION_DIGITS);\n    return [\n      '<path ',\n      'COMMON_PARTS',\n      `d=\"${path}\" stroke-linecap=\"round\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @return the path command's translate transform attribute\n   */\n  _getOffsetTransform() {\n    const digits = config.NUM_FRACTION_DIGITS;\n    return ` translate(${toFixed(-this.pathOffset.x, digits)}, ${toFixed(\n      -this.pathOffset.y,\n      digits\n    )})`;\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {string} svg representation of an instance\n   */\n  toClipPathSVG(reviver: TSVGReviver): string {\n    const additionalTransform = this._getOffsetTransform();\n    return (\n      '\\t' +\n      this._createBaseClipPathSVGMarkup(this._toSVG(), {\n        reviver: reviver,\n        additionalTransform: additionalTransform,\n      })\n    );\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {string} svg representation of an instance\n   */\n  toSVG(reviver: TSVGReviver): string {\n    const additionalTransform = this._getOffsetTransform();\n    return this._createBaseSVGMarkup(this._toSVG(), {\n      reviver: reviver,\n      additionalTransform: additionalTransform,\n    });\n  }\n\n  /**\n   * Returns number representation of an instance complexity\n   * @return {number} complexity of this instance\n   */\n  complexity() {\n    return this.path.length;\n  }\n\n  setDimensions() {\n    this.setBoundingBox();\n  }\n\n  setBoundingBox(adjustPosition?: boolean) {\n    const { width, height, pathOffset } = this._calcDimensions();\n    this.set({ width, height, pathOffset });\n    // using pathOffset because it match the use case.\n    // if pathOffset change here we need to use left + width/2 , top + height/2\n    adjustPosition && this.setPositionByOrigin(pathOffset, CENTER, CENTER);\n  }\n\n  _calcBoundsFromPath(): TBBox {\n    const bounds: XY[] = [];\n    let subpathStartX = 0,\n      subpathStartY = 0,\n      x = 0, // current x\n      y = 0; // current y\n\n    for (const command of this.path) {\n      // current instruction\n      switch (\n        command[0] // first letter\n      ) {\n        case 'L': // lineto, absolute\n          x = command[1];\n          y = command[2];\n          bounds.push(new Point(subpathStartX, subpathStartY), new Point(x, y));\n          break;\n\n        case 'M': // moveTo, absolute\n          x = command[1];\n          y = command[2];\n          subpathStartX = x;\n          subpathStartY = y;\n          break;\n\n        case 'C': // bezierCurveTo, absolute\n          bounds.push(\n            ...getBoundsOfCurve(\n              x,\n              y,\n              command[1],\n              command[2],\n              command[3],\n              command[4],\n              command[5],\n              command[6]\n            )\n          );\n          x = command[5];\n          y = command[6];\n          break;\n\n        case 'Q': // quadraticCurveTo, absolute\n          bounds.push(\n            ...getBoundsOfCurve(\n              x,\n              y,\n              command[1],\n              command[2],\n              command[1],\n              command[2],\n              command[3],\n              command[4]\n            )\n          );\n          x = command[3];\n          y = command[4];\n          break;\n\n        case 'Z':\n          x = subpathStartX;\n          y = subpathStartY;\n          break;\n      }\n    }\n    return makeBoundingBoxFromPoints(bounds);\n  }\n\n  /**\n   * @private\n   */\n  _calcDimensions(): IPathBBox {\n    const bbox = this._calcBoundsFromPath();\n\n    return {\n      ...bbox,\n      pathOffset: new Point(\n        bbox.left + bbox.width / 2,\n        bbox.top + bbox.height / 2\n      ),\n    };\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `Path.fromElement`)\n   * @static\n   * @memberOf Path\n   * @see http://www.w3.org/TR/SVG/paths.html#PathElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES, 'd'];\n\n  /**\n   * Creates an instance of Path from an object\n   * @static\n   * @memberOf Path\n   * @param {Object} object\n   * @returns {Promise<Path>}\n   */\n  static fromObject<T extends TOptions<SerializedPathProps>>(object: T) {\n    return this._fromObject<Path>(object, {\n      extraParam: 'path',\n    });\n  }\n\n  /**\n   * Creates an instance of Path from an SVG <path> element\n   * @static\n   * @memberOf Path\n   * @param {HTMLElement} element to parse\n   * @param {Partial<PathProps>} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Partial<PathProps>,\n    cssRules?: CSSRules\n  ) {\n    const { d, ...parsedAttributes } = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules\n    );\n    return new this(d, {\n      ...parsedAttributes,\n      ...options,\n      // we pass undefined to instruct the constructor to position the object using the bbox\n      left: undefined,\n      top: undefined,\n    });\n  }\n}\n\nclassRegistry.setClass(Path);\nclassRegistry.setSVGClass(Path);\n\n/* _FROM_SVG_START_ */\n", "import type { ModifierKey, TEvent } from '../EventTypeDefs';\nimport type { Point } from '../Point';\nimport { Shadow } from '../Shadow';\nimport { Path } from '../shapes/Path';\nimport { getSmoothPathFromPoints, joinPath } from '../util/path';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { TSimplePathData } from '../util/path/typedefs';\n\n/**\n * @private\n * @param {TSimplePathData} pathData SVG path commands\n * @returns {boolean}\n */\nfunction isEmptySVGPath(pathData: TSimplePathData): boolean {\n  return joinPath(pathData) === 'M 0 0 Q 0 0 0 0 L 0 0';\n}\n\nexport class PencilBrush extends BaseBrush {\n  /**\n   * Discard points that are less than `decimate` pixel distant from each other\n   * @type Number\n   * @default 0.4\n   */\n  decimate = 0.4;\n\n  /**\n   * Draws a straight line between last recorded point to current pointer\n   * Used for `shift` functionality\n   *\n   * @type boolean\n   * @default false\n   */\n  drawStraightLine = false;\n\n  /**\n   * The event modifier key that makes the brush draw a straight line.\n   * If `null` or 'none' or any other string that is not a modifier key the feature is disabled.\n   * @type {ModifierKey | undefined | null}\n   */\n  straightLineKey: ModifierKey | undefined | null = 'shiftKey';\n\n  private declare _points: Point[];\n  private declare _hasStraightLine: boolean;\n  private declare oldEnd?: Point;\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this._points = [];\n    this._hasStraightLine = false;\n  }\n\n  needsFullRender() {\n    return super.needsFullRender() || this._hasStraightLine;\n  }\n\n  static drawSegment(ctx: CanvasRenderingContext2D, p1: Point, p2: Point) {\n    const midPoint = p1.midPointFrom(p2);\n    ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n    return midPoint;\n  }\n\n  /**\n   * Invoked on mouse down\n   * @param {Point} pointer\n   */\n  onMouseDown(pointer: Point, { e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return;\n    }\n    this.drawStraightLine = !!this.straightLineKey && e[this.straightLineKey];\n    this._prepareForDrawing(pointer);\n    // capture coordinates immediately\n    // this allows to draw dots (when movement never occurs)\n    this._addPoint(pointer);\n    this._render();\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point, { e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return;\n    }\n    this.drawStraightLine = !!this.straightLineKey && e[this.straightLineKey];\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    if (this._addPoint(pointer) && this._points.length > 1) {\n      if (this.needsFullRender()) {\n        // redraw curve\n        // clear top canvas\n        this.canvas.clearContext(this.canvas.contextTop);\n        this._render();\n      } else {\n        const points = this._points,\n          length = points.length,\n          ctx = this.canvas.contextTop;\n        // draw the curve update\n        this._saveAndTransform(ctx);\n        if (this.oldEnd) {\n          ctx.beginPath();\n          ctx.moveTo(this.oldEnd.x, this.oldEnd.y);\n        }\n        this.oldEnd = PencilBrush.drawSegment(\n          ctx,\n          points[length - 2],\n          points[length - 1]\n        );\n        ctx.stroke();\n        ctx.restore();\n      }\n    }\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp({ e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return true;\n    }\n    this.drawStraightLine = false;\n    this.oldEnd = undefined;\n    this._finalizeAndAddPath();\n    return false;\n  }\n\n  /**\n   * @private\n   * @param {Point} pointer Actual mouse position related to the canvas.\n   */\n  _prepareForDrawing(pointer: Point) {\n    this._reset();\n    this._addPoint(pointer);\n    this.canvas.contextTop.moveTo(pointer.x, pointer.y);\n  }\n\n  /**\n   * @private\n   * @param {Point} point Point to be added to points array\n   */\n  _addPoint(point: Point) {\n    if (\n      this._points.length > 1 &&\n      point.eq(this._points[this._points.length - 1])\n    ) {\n      return false;\n    }\n    if (this.drawStraightLine && this._points.length > 1) {\n      this._hasStraightLine = true;\n      this._points.pop();\n    }\n    this._points.push(point);\n    return true;\n  }\n\n  /**\n   * Clear points array and set contextTop canvas style.\n   * @private\n   */\n  _reset() {\n    this._points = [];\n    this._setBrushStyles(this.canvas.contextTop);\n    this._setShadow();\n    this._hasStraightLine = false;\n  }\n\n  /**\n   * Draw a smooth path on the topCanvas using quadraticCurveTo\n   * @private\n   * @param {CanvasRenderingContext2D} [ctx]\n   */\n  _render(ctx: CanvasRenderingContext2D = this.canvas.contextTop) {\n    let p1 = this._points[0],\n      p2 = this._points[1];\n    this._saveAndTransform(ctx);\n    ctx.beginPath();\n    //if we only have 2 points in the path and they are the same\n    //it means that the user only clicked the canvas without moving the mouse\n    //then we should be drawing a dot. A path isn't drawn between two identical dots\n    //that's why we set them apart a bit\n    if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\n      const width = this.width / 1000;\n      p1.x -= width;\n      p2.x += width;\n    }\n    ctx.moveTo(p1.x, p1.y);\n\n    for (let i = 1; i < this._points.length; i++) {\n      // we pick the point between pi + 1 & pi + 2 as the\n      // end point and p1 as our control point.\n      PencilBrush.drawSegment(ctx, p1, p2);\n      p1 = this._points[i];\n      p2 = this._points[i + 1];\n    }\n    // Draw last line as a straight line while\n    // we wait for the next point to be able to calculate\n    // the bezier control point\n    ctx.lineTo(p1.x, p1.y);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  /**\n   * Converts points to SVG path\n   * @param {Point[]} points Array of points\n   * @return {TSimplePathData} SVG path commands\n   */\n  convertPointsToSVGPath(points: Point[]): TSimplePathData {\n    const correction = this.width / 1000;\n    return getSmoothPathFromPoints(points, correction);\n  }\n\n  /**\n   * Creates a Path object to add on canvas\n   * @param {TSimplePathData} pathData Path data\n   * @return {Path} Path to add on canvas\n   */\n  createPath(pathData: TSimplePathData): Path {\n    const path = new Path(pathData, {\n      fill: null,\n      stroke: this.color,\n      strokeWidth: this.width,\n      strokeLineCap: this.strokeLineCap,\n      strokeMiterLimit: this.strokeMiterLimit,\n      strokeLineJoin: this.strokeLineJoin,\n      strokeDashArray: this.strokeDashArray,\n    });\n    if (this.shadow) {\n      this.shadow.affectStroke = true;\n      path.shadow = new Shadow(this.shadow);\n    }\n\n    return path;\n  }\n\n  /**\n   * Decimate points array with the decimate value\n   */\n  decimatePoints(points: Point[], distance: number) {\n    if (points.length <= 2) {\n      return points;\n    }\n    let lastPoint = points[0],\n      cDistance;\n    const zoom = this.canvas.getZoom(),\n      adjustedDistance = Math.pow(distance / zoom, 2),\n      l = points.length - 1,\n      newPoints = [lastPoint];\n    for (let i = 1; i < l - 1; i++) {\n      cDistance =\n        Math.pow(lastPoint.x - points[i].x, 2) +\n        Math.pow(lastPoint.y - points[i].y, 2);\n      if (cDistance >= adjustedDistance) {\n        lastPoint = points[i];\n        newPoints.push(lastPoint);\n      }\n    }\n    // Add the last point from the original line to the end of the array.\n    // This ensures decimate doesn't delete the last point on the line, and ensures the line is > 1 point.\n    newPoints.push(points[l]);\n    return newPoints;\n  }\n\n  /**\n   * On mouseup after drawing the path on contextTop canvas\n   * we use the points captured to create an new Path object\n   * and add it to the canvas.\n   */\n  _finalizeAndAddPath() {\n    const ctx = this.canvas.contextTop;\n    ctx.closePath();\n    if (this.decimate) {\n      this._points = this.decimatePoints(this._points, this.decimate);\n    }\n    const pathData = this.convertPointsToSVGPath(this._points);\n    if (isEmptySVGPath(pathData)) {\n      // do not create 0 width/height paths, as they are\n      // rendered inconsistently across browsers\n      // Firefox 4, for example, renders a dot,\n      // whereas Chrome 10 renders nothing\n      this.canvas.requestRenderAll();\n      return;\n    }\n\n    const path = this.createPath(pathData);\n    this.canvas.clearContext(this.canvas.contextTop);\n    this.canvas.fire('before:path:created', { path: path });\n    this.canvas.add(path);\n    this.canvas.requestRenderAll();\n    path.setCoords();\n    this._resetShadow();\n\n    // fire event 'path' created\n    this.canvas.fire('path:created', { path: path });\n  }\n}\n", "import type { ObjectEvents } from '../EventTypeDefs';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport { cos } from '../util/misc/cos';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { sin } from '../util/misc/sin';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { CSSRules } from '../parser/typedefs';\n\ninterface UniqueCircleProps {\n  /**\n   * Radius of this circle\n   * @type Number\n   * @default 0\n   */\n  radius: number;\n\n  /**\n   * Angle for the start of the circle, in degrees.\n   * @type TDegree 0 - 359\n   * @default 0\n   */\n  startAngle: number;\n\n  /**\n   * Angle for the end of the circle, in degrees\n   * @type TDegree 1 - 360\n   * @default 360\n   */\n  endAngle: number;\n\n  /**\n   * Orientation for the direction of the circle.\n   * Setting to true will switch the arc of the circle to traverse from startAngle to endAngle in a counter-clockwise direction.\n   * Note: this will only change how the circle is drawn, and does not affect rotational transformation.\n   * @default false\n   */\n  counterClockwise: boolean;\n}\n\nexport interface SerializedCircleProps\n  extends SerializedObjectProps,\n    UniqueCircleProps {}\n\nexport interface CircleProps extends FabricObjectProps, UniqueCircleProps {}\n\nconst CIRCLE_PROPS = [\n  'radius',\n  'startAngle',\n  'endAngle',\n  'counterClockwise',\n] as const;\n\nexport const circleDefaultValues: Partial<TClassProperties<Circle>> = {\n  radius: 0,\n  startAngle: 0,\n  endAngle: 360,\n  counterClockwise: false,\n};\n\nexport class Circle<\n    Props extends TOptions<CircleProps> = Partial<CircleProps>,\n    SProps extends SerializedCircleProps = SerializedCircleProps,\n    EventSpec extends ObjectEvents = ObjectEvents\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements UniqueCircleProps\n{\n  declare radius: number;\n  declare startAngle: number;\n  declare endAngle: number;\n  declare counterClockwise: boolean;\n\n  static type = 'Circle';\n\n  static cacheProperties = [...cacheProperties, ...CIRCLE_PROPS];\n\n  static ownDefaults = circleDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Circle.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Circle.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n\n    if (key === 'radius') {\n      this.setRadius(value);\n    }\n\n    return this;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.arc(\n      0,\n      0,\n      this.radius,\n      degreesToRadians(this.startAngle),\n      degreesToRadians(this.endAngle),\n      this.counterClockwise\n    );\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns horizontal radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRadiusX(): number {\n    return this.get('radius') * this.get('scaleX');\n  }\n\n  /**\n   * Returns vertical radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRadiusY(): number {\n    return this.get('radius') * this.get('scaleY');\n  }\n\n  /**\n   * Sets radius of an object (and updates width accordingly)\n   */\n  setRadius(value: number) {\n    this.radius = value;\n    this.set({ width: value * 2, height: value * 2 });\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...CIRCLE_PROPS, ...propertiesToInclude]);\n  }\n\n  /* _TO_SVG_START_ */\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(): string[] {\n    const angle = (this.endAngle - this.startAngle) % 360;\n\n    if (angle === 0) {\n      return [\n        '<circle ',\n        'COMMON_PARTS',\n        'cx=\"0\" cy=\"0\" ',\n        'r=\"',\n        `${this.radius}`,\n        '\" />\\n',\n      ];\n    } else {\n      const { radius } = this;\n      const start = degreesToRadians(this.startAngle),\n        end = degreesToRadians(this.endAngle),\n        startX = cos(start) * radius,\n        startY = sin(start) * radius,\n        endX = cos(end) * radius,\n        endY = sin(end) * radius,\n        largeFlag = angle > 180 ? 1 : 0,\n        sweepFlag = this.counterClockwise ? 0 : 1;\n      return [\n        `<path d=\"M ${startX} ${startY} A ${radius} ${radius} 0 ${largeFlag} ${sweepFlag} ${endX} ${endY}\" `,\n        'COMMON_PARTS',\n        ' />\\n',\n      ];\n    }\n  }\n  /* _TO_SVG_END_ */\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Circle.fromElement})\n   * @static\n   * @memberOf Circle\n   * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement\n   */\n  static ATTRIBUTE_NAMES = ['cx', 'cy', 'r', ...SHARED_ATTRIBUTES];\n\n  /**\n   * Returns {@link Circle} instance from an SVG element\n   * @static\n   * @memberOf Circle\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Partial Circle object to default missing properties on the element.\n   * @throws {Error} If value of `r` attribute is missing or invalid\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules\n  ): Promise<Circle> {\n    const {\n      left = 0,\n      top = 0,\n      radius = 0,\n      ...otherParsedAttributes\n    } = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules\n    ) as Partial<CircleProps>;\n\n    // this probably requires to be fixed for default origins not being top/left.\n\n    return new this({\n      ...otherParsedAttributes,\n      radius,\n      left: left - radius,\n      top: top - radius,\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * @todo how do we declare this??\n   */\n  static fromObject<T extends TOptions<SerializedCircleProps>>(object: T) {\n    return super._fromObject<Circle>(object);\n  }\n}\n\nclassRegistry.setClass(Circle);\nclassRegistry.setSVGClass(Circle);\n", "import { Color } from '../color/Color';\nimport type { Point } from '../Point';\nimport { Shadow } from '../Shadow';\nimport { Circle } from '../shapes/Circle';\nimport { Group } from '../shapes/Group';\nimport { getRandomInt } from '../util/internals';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { CircleBrushPoint } from './typedefs';\nimport { CENTER } from '../constants';\n\nexport class CircleBrush extends BaseBrush {\n  /**\n   * Width of a brush\n   * @type Number\n   * @default\n   */\n  width = 10;\n\n  declare points: CircleBrushPoint[];\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this.points = [];\n  }\n\n  /**\n   * Invoked inside on mouse down and mouse move\n   * @param {Point} pointer\n   */\n  drawDot(pointer: Point) {\n    const point = this.addPoint(pointer),\n      ctx = this.canvas.contextTop;\n    this._saveAndTransform(ctx);\n    this.dot(ctx, point);\n    ctx.restore();\n  }\n\n  dot(ctx: CanvasRenderingContext2D, point: CircleBrushPoint) {\n    ctx.fillStyle = point.fill;\n    ctx.beginPath();\n    ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  /**\n   * Invoked on mouse down\n   */\n  onMouseDown(pointer: Point) {\n    this.points = [];\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n    this.drawDot(pointer);\n  }\n\n  /**\n   * Render the full state of the brush\n   * @private\n   */\n  _render() {\n    const ctx = this.canvas.contextTop,\n      points = this.points;\n    this._saveAndTransform(ctx);\n    for (let i = 0; i < points.length; i++) {\n      this.dot(ctx, points[i]);\n    }\n    ctx.restore();\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point) {\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    if (this.needsFullRender()) {\n      this.canvas.clearContext(this.canvas.contextTop);\n      this.addPoint(pointer);\n      this._render();\n    } else {\n      this.drawDot(pointer);\n    }\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp() {\n    const originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    const circles: Circle[] = [];\n\n    for (let i = 0; i < this.points.length; i++) {\n      const point = this.points[i],\n        circle = new Circle({\n          radius: point.radius,\n          left: point.x,\n          top: point.y,\n          originX: CENTER,\n          originY: CENTER,\n          fill: point.fill,\n        });\n\n      this.shadow && (circle.shadow = new Shadow(this.shadow));\n\n      circles.push(circle);\n    }\n    const group = new Group(circles, { canvas: this.canvas });\n\n    this.canvas.fire('before:path:created', { path: group });\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  }\n\n  /**\n   * @param {Object} pointer\n   * @return {Point} Just added pointer point\n   */\n  addPoint({ x, y }: Point) {\n    const pointerPoint: CircleBrushPoint = {\n      x,\n      y,\n      radius: getRandomInt(Math.max(0, this.width - 20), this.width + 20) / 2,\n      fill: new Color(this.color).setAlpha(getRandomInt(0, 100) / 100).toRgba(),\n    };\n\n    this.points.push(pointerPoint);\n\n    return pointerPoint;\n  }\n}\n", "import type { Point } from '../Point';\nimport { Group } from '../shapes/Group';\nimport { Shadow } from '../Shadow';\nimport { Rect } from '../shapes/Rect';\nimport { getRandomInt } from '../util/internals';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { SprayBrushPoint } from './typedefs';\nimport { CENTER } from '../constants';\n\n/**\n *\n * @param rects\n * @returns\n */\nfunction getUniqueRects(rects: Rect[]) {\n  const uniqueRects: Record<string, boolean> = {};\n  const uniqueRectsArray: Rect[] = [];\n\n  for (let i = 0, key: string; i < rects.length; i++) {\n    key = `${rects[i].left}${rects[i].top}`;\n    if (!uniqueRects[key]) {\n      uniqueRects[key] = true;\n      uniqueRectsArray.push(rects[i]);\n    }\n  }\n\n  return uniqueRectsArray;\n}\n\nexport class SprayBrush extends BaseBrush {\n  /**\n   * Width of a spray\n   * @type Number\n   * @default\n   */\n  width = 10;\n\n  /**\n   * Density of a spray (number of dots per chunk)\n   * @type Number\n   * @default\n   */\n  density = 20;\n\n  /**\n   * Width of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidth = 1;\n\n  /**\n   * Width variance of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidthVariance = 1;\n\n  /**\n   * Whether opacity of a dot should be random\n   * @type Boolean\n   * @default\n   */\n  randomOpacity = false;\n\n  /**\n   * Whether overlapping dots (rectangles) should be removed (for performance reasons)\n   * @type Boolean\n   * @default\n   */\n  optimizeOverlapping = true;\n\n  private declare sprayChunks: SprayBrushPoint[][];\n\n  private declare sprayChunk: SprayBrushPoint[];\n\n  /**\n   * Constructor\n   * @param {Canvas} canvas\n   * @return {SprayBrush} Instance of a spray brush\n   */\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this.sprayChunks = [];\n    this.sprayChunk = [];\n  }\n\n  /**\n   * Invoked on mouse down\n   * @param {Point} pointer\n   */\n  onMouseDown(pointer: Point) {\n    this.sprayChunks = [];\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n\n    this.addSprayChunk(pointer);\n    this.renderChunck(this.sprayChunk);\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point) {\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    this.addSprayChunk(pointer);\n    this.renderChunck(this.sprayChunk);\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp() {\n    const originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    const rects: Rect[] = [];\n\n    for (let i = 0; i < this.sprayChunks.length; i++) {\n      const sprayChunk = this.sprayChunks[i];\n      for (let j = 0; j < sprayChunk.length; j++) {\n        const chunck = sprayChunk[j];\n        const rect = new Rect({\n          width: chunck.width,\n          height: chunck.width,\n          left: chunck.x + 1,\n          top: chunck.y + 1,\n          originX: CENTER,\n          originY: CENTER,\n          fill: this.color,\n        });\n        rects.push(rect);\n      }\n    }\n\n    const group = new Group(\n      this.optimizeOverlapping ? getUniqueRects(rects) : rects,\n      {\n        objectCaching: true,\n        subTargetCheck: false,\n        interactive: false,\n      }\n    );\n    this.shadow && group.set('shadow', new Shadow(this.shadow));\n    this.canvas.fire('before:path:created', { path: group });\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  }\n\n  renderChunck(sprayChunck: SprayBrushPoint[]) {\n    const ctx = this.canvas.contextTop;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (let i = 0; i < sprayChunck.length; i++) {\n      const point = sprayChunck[i];\n      ctx.globalAlpha = point.opacity;\n      ctx.fillRect(point.x, point.y, point.width, point.width);\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * Render all spray chunks\n   */\n  _render() {\n    const ctx = this.canvas.contextTop;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (let i = 0; i < this.sprayChunks.length; i++) {\n      this.renderChunck(this.sprayChunks[i]);\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @param {Point} pointer\n   */\n  addSprayChunk(pointer: Point) {\n    this.sprayChunk = [];\n    const radius = this.width / 2;\n\n    for (let i = 0; i < this.density; i++) {\n      this.sprayChunk.push({\n        x: getRandomInt(pointer.x - radius, pointer.x + radius),\n        y: getRandomInt(pointer.y - radius, pointer.y + radius),\n        width: this.dotWidthVariance\n          ? getRandomInt(\n              // bottom clamp width to 1\n              Math.max(1, this.dotWidth - this.dotWidthVariance),\n              this.dotWidth + this.dotWidthVariance\n            )\n          : this.dotWidth,\n        opacity: this.randomOpacity ? getRandomInt(0, 100) / 100 : 1,\n      });\n    }\n\n    this.sprayChunks.push(this.sprayChunk);\n  }\n}\n", "import { Pattern } from '../Pattern';\nimport { createCanvasElement } from '../util/misc/dom';\nimport type { Canvas } from '../canvas/Canvas';\nimport { PencilBrush } from './PencilBrush';\nimport type { TSimplePathData } from '../util/path/typedefs';\n\nexport class PatternBrush extends PencilBrush {\n  declare source?: CanvasImageSource;\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n  }\n\n  getPatternSrc() {\n    const dotWidth = 20,\n      dotDistance = 5,\n      patternCanvas = createCanvasElement(),\n      patternCtx = patternCanvas.getContext('2d');\n\n    patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\n    if (patternCtx) {\n      patternCtx.fillStyle = this.color;\n      patternCtx.beginPath();\n      patternCtx.arc(\n        dotWidth / 2,\n        dotWidth / 2,\n        dotWidth / 2,\n        0,\n        Math.PI * 2,\n        false\n      );\n      patternCtx.closePath();\n      patternCtx.fill();\n    }\n    return patternCanvas;\n  }\n\n  /**\n   * Creates \"pattern\" instance property\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  getPattern(ctx: CanvasRenderingContext2D) {\n    return ctx.createPattern(this.source || this.getPatternSrc(), 'repeat');\n  }\n\n  /**\n   * Sets brush styles\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  _setBrushStyles(ctx: CanvasRenderingContext2D) {\n    super._setBrushStyles(ctx);\n    const pattern = this.getPattern(ctx);\n    pattern && (ctx.strokeStyle = pattern);\n  }\n\n  /**\n   * Creates path\n   */\n  createPath(pathData: TSimplePathData) {\n    const path = super.createPath(pathData),\n      topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);\n\n    path.stroke = new Pattern({\n      source: this.source || this.getPatternSrc(),\n      offsetX: -topLeft.x,\n      offsetY: -topLeft.y,\n    });\n    return path;\n  }\n}\n", "import { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport { Point } from '../Point';\nimport { isFiller } from '../util/typeAssertions';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport { makeBoundingBoxFromPoints } from '../util';\nimport { CENTER, LEFT, TOP } from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\n// @TODO this code is terrible and Line should be a special case of polyline.\n\nconst coordProps = ['x1', 'x2', 'y1', 'y2'] as const;\n\ninterface UniqueLineProps {\n  x1: number;\n  x2: number;\n  y1: number;\n  y2: number;\n}\n\nexport interface SerializedLineProps\n  extends SerializedObjectProps,\n    UniqueLineProps {}\n\nexport class Line<\n    Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n    SProps extends SerializedLineProps = SerializedLineProps,\n    EventSpec extends ObjectEvents = ObjectEvents\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements UniqueLineProps\n{\n  /**\n   * x value or first line edge\n   * @type number\n   * @default\n   */\n  declare x1: number;\n\n  /**\n   * y value or first line edge\n   * @type number\n   * @default\n   */\n  declare y1: number;\n\n  /**\n   * x value or second line edge\n   * @type number\n   * @default\n   */\n  declare x2: number;\n\n  /**\n   * y value or second line edge\n   * @type number\n   * @default\n   */\n  declare y2: number;\n\n  static type = 'Line';\n\n  static cacheProperties = [...cacheProperties, ...coordProps];\n  /**\n   * Constructor\n   * @param {Array} [points] Array of points\n   * @param {Object} [options] Options object\n   * @return {Line} thisArg\n   */\n  constructor([x1, y1, x2, y2] = [0, 0, 0, 0], options: Partial<Props> = {}) {\n    super();\n    Object.assign(this, Line.ownDefaults);\n    this.setOptions(options);\n    this.x1 = x1;\n    this.x2 = x2;\n    this.y1 = y1;\n    this.y2 = y2;\n    this._setWidthHeight();\n    const { left, top } = options;\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  /**\n   * @private\n   * @param {Object} [options] Options\n   */\n  _setWidthHeight() {\n    const { x1, y1, x2, y2 } = this;\n    this.width = Math.abs(x2 - x1);\n    this.height = Math.abs(y2 - y1);\n    const { left, top, width, height } = makeBoundingBoxFromPoints([\n      { x: x1, y: y1 },\n      { x: x2, y: y2 },\n    ]);\n    const position = new Point(left + width / 2, top + height / 2);\n    this.setPositionByOrigin(position, CENTER, CENTER);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n    if (coordProps.includes(key as keyof UniqueLineProps)) {\n      // this doesn't make sense very much, since setting x1 when top or left\n      // are already set, is just going to show a strange result since the\n      // line will move way more than the developer expect.\n      // in fabric5 it worked only when the line didn't have extra transformations,\n      // in fabric6 too. With extra transform they behave bad in different ways.\n      // This needs probably a good rework or a tutorial if you have to create a dynamic line\n      this._setWidthHeight();\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n\n    const p = this.calcLinePoints();\n    ctx.moveTo(p.x1, p.y1);\n    ctx.lineTo(p.x2, p.y2);\n\n    ctx.lineWidth = this.strokeWidth;\n\n    // TODO: test this\n    // make sure setting \"fill\" changes color of a line\n    // (by copying fillStyle to strokeStyle, since line is stroked, not filled)\n    const origStrokeStyle = ctx.strokeStyle;\n    if (isFiller(this.stroke)) {\n      ctx.strokeStyle = this.stroke.toLive(ctx)!;\n    } else {\n      ctx.strokeStyle = this.stroke ?? ctx.fillStyle;\n    }\n    this.stroke && this._renderStroke(ctx);\n    ctx.strokeStyle = origStrokeStyle;\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    return new Point((this.x1 + this.x2) / 2, (this.y1 + this.y2) / 2);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @method toObject\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      ...this.calcLinePoints(),\n    };\n  }\n\n  /*\n   * Calculate object dimensions from its properties\n   * @private\n   */\n  _getNonTransformedDimensions(): Point {\n    const dim = super._getNonTransformedDimensions();\n    if (this.strokeLineCap === 'butt') {\n      if (this.width === 0) {\n        dim.y -= this.strokeWidth;\n      }\n      if (this.height === 0) {\n        dim.x -= this.strokeWidth;\n      }\n    }\n    return dim;\n  }\n\n  /**\n   * Recalculates line points given width and height\n   * Those points are simply placed around the center,\n   * This is not useful outside internal render functions and svg output\n   * Is not meant to be for the developer.\n   * @private\n   */\n  calcLinePoints(): UniqueLineProps {\n    const { x1: _x1, x2: _x2, y1: _y1, y2: _y2, width, height } = this;\n    const xMult = _x1 <= _x2 ? -1 : 1,\n      yMult = _y1 <= _y2 ? -1 : 1,\n      x1 = (xMult * width) / 2,\n      y1 = (yMult * height) / 2,\n      x2 = (xMult * -width) / 2,\n      y2 = (yMult * -height) / 2;\n\n    return {\n      x1,\n      x2,\n      y1,\n      y2,\n    };\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const { x1, x2, y1, y2 } = this.calcLinePoints();\n    return [\n      '<line ',\n      'COMMON_PARTS',\n      `x1=\"${x1}\" y1=\"${y1}\" x2=\"${x2}\" y2=\"${y2}\" />\\n`,\n    ];\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Line.fromElement})\n   * @static\n   * @memberOf Line\n   * @see http://www.w3.org/TR/SVG/shapes.html#LineElement\n   */\n  static ATTRIBUTE_NAMES = SHARED_ATTRIBUTES.concat(coordProps);\n\n  /**\n   * Returns Line instance from an SVG element\n   * @static\n   * @memberOf Line\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {Function} [callback] callback function invoked after parsing\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules\n  ) {\n    const {\n      x1 = 0,\n      y1 = 0,\n      x2 = 0,\n      y2 = 0,\n      ...parsedAttributes\n    } = parseAttributes(element, this.ATTRIBUTE_NAMES, cssRules);\n    return new this([x1, y1, x2, y2], parsedAttributes);\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns Line instance from an object representation\n   * @static\n   * @memberOf Line\n   * @param {Object} object Object to create an instance from\n   * @returns {Promise<Line>}\n   */\n  static fromObject<T extends TOptions<SerializedLineProps>>({\n    x1,\n    y1,\n    x2,\n    y2,\n    ...object\n  }: T) {\n    return this._fromObject<Line>(\n      {\n        ...object,\n        points: [x1, y1, x2, y2],\n      },\n      {\n        extraParam: 'points',\n      }\n    );\n  }\n}\n\nclassRegistry.setClass(Line);\nclassRegistry.setSVGClass(Line);\n", "import { classRegistry } from '../ClassRegistry';\nimport { FabricObject } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { TClassProperties, TOptions } from '../typedefs';\nimport type { ObjectEvents } from '../EventTypeDefs';\n\nexport const triangleDefaultValues: Partial<TClassProperties<Triangle>> = {\n  width: 100,\n  height: 100,\n};\n\nexport class Triangle<\n    Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements FabricObjectProps\n{\n  static type = 'Triangle';\n\n  static ownDefaults = triangleDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...Triangle.ownDefaults };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Triangle.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const widthBy2 = this.width / 2,\n      heightBy2 = this.height / 2;\n\n    ctx.beginPath();\n    ctx.moveTo(-widthBy2, heightBy2);\n    ctx.lineTo(0, -heightBy2);\n    ctx.lineTo(widthBy2, heightBy2);\n    ctx.closePath();\n\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const widthBy2 = this.width / 2,\n      heightBy2 = this.height / 2,\n      points = `${-widthBy2} ${heightBy2},0 ${-heightBy2},${widthBy2} ${heightBy2}`;\n    return ['<polygon ', 'COMMON_PARTS', 'points=\"', points, '\" />'];\n  }\n}\n\nclassRegistry.setClass(Triangle);\nclassRegistry.setSVGClass(Triangle);\n", "import { twoMathPi } from '../constants';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const ellipseDefaultValues: Partial<TClassProperties<Ellipse>> = {\n  rx: 0,\n  ry: 0,\n};\n\ninterface UniqueEllipseProps {\n  rx: number;\n  ry: number;\n}\n\nexport interface SerializedEllipseProps\n  extends SerializedObjectProps,\n    UniqueEllipseProps {}\n\nexport interface EllipseProps extends FabricObjectProps, UniqueEllipseProps {}\n\nconst ELLIPSE_PROPS = ['rx', 'ry'] as const;\n\nexport class Ellipse<\n    Props extends TOptions<EllipseProps> = Partial<EllipseProps>,\n    SProps extends SerializedEllipseProps = SerializedEllipseProps,\n    EventSpec extends ObjectEvents = ObjectEvents\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements EllipseProps\n{\n  /**\n   * Horizontal radius\n   * @type Number\n   * @default\n   */\n  declare rx: number;\n\n  /**\n   * Vertical radius\n   * @type Number\n   * @default\n   */\n  declare ry: number;\n\n  static type = 'Ellipse';\n\n  static cacheProperties = [...cacheProperties, ...ELLIPSE_PROPS];\n\n  static ownDefaults = ellipseDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Ellipse.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Ellipse.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   * @return {Ellipse} thisArg\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n    switch (key) {\n      case 'rx':\n        this.rx = value;\n        this.set('width', value * 2);\n        break;\n\n      case 'ry':\n        this.ry = value;\n        this.set('height', value * 2);\n        break;\n    }\n    return this;\n  }\n\n  /**\n   * Returns horizontal radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRx() {\n    return this.get('rx') * this.get('scaleX');\n  }\n\n  /**\n   * Returns Vertical radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRy() {\n    return this.get('ry') * this.get('scaleY');\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...ELLIPSE_PROPS, ...propertiesToInclude]);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(): string[] {\n    return [\n      '<ellipse ',\n      'COMMON_PARTS',\n      `cx=\"0\" cy=\"0\" rx=\"${this.rx}\" ry=\"${this.ry}\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.save();\n    ctx.transform(1, 0, 0, this.ry / this.rx, 0, 0);\n    ctx.arc(0, 0, this.rx, 0, twoMathPi, false);\n    ctx.restore();\n    this._renderPaintInOrder(ctx);\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Ellipse.fromElement})\n   * @static\n   * @memberOf Ellipse\n   * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES, 'cx', 'cy', 'rx', 'ry'];\n\n  /**\n   * Returns {@link Ellipse} instance from an SVG element\n   * @static\n   * @memberOf Ellipse\n   * @param {HTMLElement} element Element to parse\n   * @return {Ellipse}\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules\n    );\n\n    parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.rx;\n    parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.ry;\n    return new this(parsedAttributes);\n  }\n\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Ellipse);\nclassRegistry.setSVGClass(Ellipse);\n", "import type { XY } from '../Point';\n\n/**\n * Parses \"points\" attribute, returning an array of values\n * @static\n * @memberOf fabric\n * @param {String} points points attribute string\n * @return {Array} array of points\n */\nexport function parsePointsAttribute(points: string | null): XY[] {\n  // points attribute is required and must not be empty\n  if (!points) {\n    return [];\n  }\n\n  // replace commas with whitespace and remove bookending whitespace\n  const pointsSplit: string[] = points.replace(/,/g, ' ').trim().split(/\\s+/);\n\n  const parsedPoints = [];\n\n  for (let i = 0; i < pointsSplit.length; i += 2) {\n    parsedPoints.push({\n      x: parseFloat(pointsSplit[i]),\n      y: parseFloat(pointsSplit[i + 1]),\n    });\n  }\n\n  // odd number of points is an error\n  // if (parsedPoints.length % 2 !== 0) {\n  //   return null;\n  // }\n  return parsedPoints;\n}\n", "import { config } from '../config';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport { parsePointsAttribute } from '../parser/parsePointsAttribute';\nimport type { XY } from '../Point';\nimport { Point } from '../Point';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { makeBoundingBoxFromPoints } from '../util/misc/boundingBoxFromPoints';\nimport { calcDimensionsMatrix, transformPoint } from '../util/misc/matrix';\nimport { projectStrokeOnPoints } from '../util/misc/projectStroke';\nimport type { TProjectStrokeOnPointsOptions } from '../util/misc/projectStroke/types';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { toFixed } from '../util/misc/toFixed';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport { cloneDeep } from '../util/internals/cloneDeep';\nimport { CENTER, LEFT, TOP } from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const polylineDefaultValues: Partial<TClassProperties<Polyline>> = {\n  /**\n   * @deprecated transient option soon to be removed in favor of a different design\n   */\n  exactBoundingBox: false,\n};\n\nexport interface SerializedPolylineProps extends SerializedObjectProps {\n  points: XY[];\n}\n\nexport class Polyline<\n  Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n  SProps extends SerializedPolylineProps = SerializedPolylineProps,\n  EventSpec extends ObjectEvents = ObjectEvents\n> extends FabricObject<Props, SProps, EventSpec> {\n  /**\n   * Points array\n   * @type Array\n   * @default\n   */\n  declare points: XY[];\n\n  /**\n   * WARNING: Feature in progress\n   * Calculate the exact bounding box taking in account strokeWidth on acute angles\n   * this will be turned to true by default on fabric 6.0\n   * maybe will be left in as an optimization since calculations may be slow\n   * @deprecated transient option soon to be removed in favor of a different design\n   * @type Boolean\n   * @default false\n   */\n  declare exactBoundingBox: boolean;\n\n  private declare initialized: true | undefined;\n\n  static ownDefaults = polylineDefaultValues;\n\n  static type = 'Polyline';\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Polyline.ownDefaults,\n    };\n  }\n\n  /**\n   * A list of properties that if changed trigger a recalculation of dimensions\n   * @todo check if you really need to recalculate for all cases\n   */\n  static layoutProperties: (keyof Polyline)[] = [\n    'skewX',\n    'skewY',\n    'strokeLineCap',\n    'strokeLineJoin',\n    'strokeMiterLimit',\n    'strokeWidth',\n    'strokeUniform',\n    'points',\n  ];\n\n  declare pathOffset: Point;\n\n  declare strokeOffset: Point;\n\n  static cacheProperties = [...cacheProperties, 'points'];\n\n  strokeDiff: Point;\n\n  /**\n   * Constructor\n   * @param {Array} points Array of points (where each point is an object with x and y)\n   * @param {Object} [options] Options object\n   * @return {Polyline} thisArg\n   * @example\n   * var poly = new Polyline([\n   *     { x: 10, y: 10 },\n   *     { x: 50, y: 30 },\n   *     { x: 40, y: 70 },\n   *     { x: 60, y: 50 },\n   *     { x: 100, y: 150 },\n   *     { x: 40, y: 100 }\n   *   ], {\n   *   stroke: 'red',\n   *   left: 100,\n   *   top: 100\n   * });\n   */\n  constructor(points: XY[] = [], options: Props = {} as Props) {\n    super();\n    Object.assign(this, Polyline.ownDefaults);\n    this.setOptions(options);\n    this.points = points;\n    const { left, top } = options;\n    this.initialized = true;\n    this.setBoundingBox(true);\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  protected isOpen() {\n    return true;\n  }\n\n  private _projectStrokeOnPoints(options: TProjectStrokeOnPointsOptions) {\n    return projectStrokeOnPoints(this.points, options, this.isOpen());\n  }\n\n  /**\n   * Calculate the polygon bounding box\n   * @private\n   */\n  _calcDimensions(options?: Partial<TProjectStrokeOnPointsOptions>) {\n    options = {\n      scaleX: this.scaleX,\n      scaleY: this.scaleY,\n      skewX: this.skewX,\n      skewY: this.skewY,\n      strokeLineCap: this.strokeLineCap,\n      strokeLineJoin: this.strokeLineJoin,\n      strokeMiterLimit: this.strokeMiterLimit,\n      strokeUniform: this.strokeUniform,\n      strokeWidth: this.strokeWidth,\n      ...(options || {}),\n    };\n    const points = this.exactBoundingBox\n      ? this._projectStrokeOnPoints(\n          options as TProjectStrokeOnPointsOptions\n        ).map((projection) => projection.projectedPoint)\n      : this.points;\n    if (points.length === 0) {\n      return {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0,\n        pathOffset: new Point(),\n        strokeOffset: new Point(),\n        strokeDiff: new Point(),\n      };\n    }\n    const bbox = makeBoundingBoxFromPoints(points),\n      // Remove scale effect, since it's applied after\n      matrix = calcDimensionsMatrix({ ...options, scaleX: 1, scaleY: 1 }),\n      bboxNoStroke = makeBoundingBoxFromPoints(\n        this.points.map((p) => transformPoint(p, matrix, true))\n      ),\n      scale = new Point(this.scaleX, this.scaleY);\n    let offsetX = bbox.left + bbox.width / 2,\n      offsetY = bbox.top + bbox.height / 2;\n    if (this.exactBoundingBox) {\n      offsetX = offsetX - offsetY * Math.tan(degreesToRadians(this.skewX));\n      // Order of those assignments is important.\n      // offsetY relies on offsetX being already changed by the line above\n      offsetY = offsetY - offsetX * Math.tan(degreesToRadians(this.skewY));\n    }\n\n    return {\n      ...bbox,\n      pathOffset: new Point(offsetX, offsetY),\n      strokeOffset: new Point(bboxNoStroke.left, bboxNoStroke.top)\n        .subtract(new Point(bbox.left, bbox.top))\n        .multiply(scale),\n      strokeDiff: new Point(bbox.width, bbox.height)\n        .subtract(new Point(bboxNoStroke.width, bboxNoStroke.height))\n        .multiply(scale),\n    };\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates, by look at the polyline/polygon points.\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    const bbox = makeBoundingBoxFromPoints(this.points);\n    return new Point(bbox.left + bbox.width / 2, bbox.top + bbox.height / 2);\n  }\n\n  setDimensions() {\n    this.setBoundingBox();\n  }\n\n  setBoundingBox(adjustPosition?: boolean) {\n    const { left, top, width, height, pathOffset, strokeOffset, strokeDiff } =\n      this._calcDimensions();\n    this.set({ width, height, pathOffset, strokeOffset, strokeDiff });\n    adjustPosition &&\n      this.setPositionByOrigin(\n        new Point(left + width / 2, top + height / 2),\n        CENTER,\n        CENTER\n      );\n  }\n\n  /**\n   * @deprecated intermidiate method to be removed, do not use\n   */\n  protected isStrokeAccountedForInDimensions() {\n    return this.exactBoundingBox;\n  }\n\n  /**\n   * @override stroke is taken in account in size\n   */\n  _getNonTransformedDimensions() {\n    return this.exactBoundingBox\n      ? // TODO: fix this\n        new Point(this.width, this.height)\n      : super._getNonTransformedDimensions();\n  }\n\n  /**\n   * @override stroke and skewing are taken into account when projecting stroke on points,\n   * therefore we don't want the default calculation to account for skewing as well.\n   * Though it is possible to pass `width` and `height` in `options`, doing so is very strange, use with discretion.\n   *\n   * @private\n   */\n  _getTransformedDimensions(options: any = {}) {\n    if (this.exactBoundingBox) {\n      let size: Point;\n      /* When `strokeUniform = true`, any changes to the properties require recalculating the `width` and `height` because\n        the stroke projections are affected.\n        When `strokeUniform = false`, we don't need to recalculate for scale transformations, as the effect of scale on\n        projections follows a linear function (e.g. scaleX of 2 just multiply width by 2)*/\n      if (\n        Object.keys(options).some(\n          (key) =>\n            this.strokeUniform ||\n            (this.constructor as typeof Polyline).layoutProperties.includes(\n              key as keyof TProjectStrokeOnPointsOptions\n            )\n        )\n      ) {\n        const { width, height } = this._calcDimensions(options);\n        size = new Point(options.width ?? width, options.height ?? height);\n      } else {\n        size = new Point(\n          options.width ?? this.width,\n          options.height ?? this.height\n        );\n      }\n      return size.multiply(\n        new Point(options.scaleX || this.scaleX, options.scaleY || this.scaleY)\n      );\n    } else {\n      return super._getTransformedDimensions(options);\n    }\n  }\n\n  /**\n   * Recalculates dimensions when changing skew and scale\n   * @private\n   */\n  _set(key: string, value: any) {\n    const changed = this.initialized && this[key as keyof this] !== value;\n    const output = super._set(key, value);\n    if (\n      this.exactBoundingBox &&\n      changed &&\n      (((key === 'scaleX' || key === 'scaleY') &&\n        this.strokeUniform &&\n        (this.constructor as typeof Polyline).layoutProperties.includes(\n          'strokeUniform'\n        )) ||\n        (this.constructor as typeof Polyline).layoutProperties.includes(\n          key as keyof Polyline\n        ))\n    ) {\n      this.setDimensions();\n    }\n    return output;\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      points: cloneDeep(this.points),\n    };\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const points = [],\n      diffX = this.pathOffset.x,\n      diffY = this.pathOffset.y,\n      NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS;\n\n    for (let i = 0, len = this.points.length; i < len; i++) {\n      points.push(\n        toFixed(this.points[i].x - diffX, NUM_FRACTION_DIGITS),\n        ',',\n        toFixed(this.points[i].y - diffY, NUM_FRACTION_DIGITS),\n        ' '\n      );\n    }\n    return [\n      `<${\n        (this.constructor as typeof Polyline).type.toLowerCase() as\n          | 'polyline'\n          | 'polygon'\n      } `,\n      'COMMON_PARTS',\n      `points=\"${points.join('')}\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const len = this.points.length,\n      x = this.pathOffset.x,\n      y = this.pathOffset.y;\n\n    if (!len || isNaN(this.points[len - 1].y)) {\n      // do not draw if no points or odd points\n      // NaN comes from parseFloat of a empty string in parser\n      return;\n    }\n    ctx.beginPath();\n    ctx.moveTo(this.points[0].x - x, this.points[0].y - y);\n    for (let i = 0; i < len; i++) {\n      const point = this.points[i];\n      ctx.lineTo(point.x - x, point.y - y);\n    }\n    !this.isOpen() && ctx.closePath();\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity of this instance\n   */\n  complexity(): number {\n    return this.points.length;\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Polyline.fromElement})\n   * @static\n   * @memberOf Polyline\n   * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES];\n\n  /**\n   * Returns Polyline instance from an SVG element\n   * @static\n   * @memberOf Polyline\n   * @param {HTMLElement} element Element to parser\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules\n  ) {\n    const points = parsePointsAttribute(element.getAttribute('points')),\n      // we omit left and top to instruct the constructor to position the object using the bbox\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      { left, top, ...parsedAttributes } = parseAttributes(\n        element,\n        this.ATTRIBUTE_NAMES,\n        cssRules\n      );\n    return new this(points, {\n      ...parsedAttributes,\n      ...options,\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns Polyline instance from an object representation\n   * @static\n   * @memberOf Polyline\n   * @param {Object} object Object to create an instance from\n   * @returns {Promise<Polyline>}\n   */\n  static fromObject<T extends TOptions<SerializedPolylineProps>>(object: T) {\n    return this._fromObject<Polyline>(object, {\n      extraParam: 'points',\n    });\n  }\n}\n\nclassRegistry.setClass(Polyline);\nclassRegistry.setSVGClass(Polyline);\n", "import { classRegistry } from '../ClassRegistry';\nimport { Polyline, polylineDefaultValues } from './Polyline';\n\nexport class Polygon extends Polyline {\n  static ownDefaults = polylineDefaultValues;\n\n  static type = 'Polygon';\n\n  protected isOpen() {\n    return false;\n  }\n}\n\nclassRegistry.setClass(Polygon);\nclassRegistry.setSVGClass(Polygon);\n", "import { LEFT, reNewline } from '../../constants';\nimport type { TClassProperties } from '../../typedefs';\nimport type { FabricText } from './Text';\n\nconst fontProperties = [\n  'fontSize',\n  'fontWeight',\n  'fontFamily',\n  'fontStyle',\n] as const;\n\nexport const textDecorationProperties = [\n  'underline',\n  'overline',\n  'linethrough',\n] as const;\n\nexport const textLayoutProperties: string[] = [\n  ...fontProperties,\n  'lineHeight',\n  'text',\n  'charSpacing',\n  'textAlign',\n  'styles',\n  'path',\n  'pathStartOffset',\n  'pathSide',\n  'pathAlign',\n];\n\nexport const additionalProps = [\n  ...textLayoutProperties,\n  ...textDecorationProperties,\n  'textBackgroundColor',\n  'direction',\n] as const;\n\nexport type StylePropertiesType =\n  | 'fill'\n  | 'stroke'\n  | 'strokeWidth'\n  | 'fontSize'\n  | 'fontFamily'\n  | 'fontWeight'\n  | 'fontStyle'\n  | 'textBackgroundColor'\n  | 'deltaY'\n  | 'overline'\n  | 'underline'\n  | 'linethrough';\n\nexport const styleProperties: Readonly<StylePropertiesType[]> = [\n  ...fontProperties,\n  ...textDecorationProperties,\n  'stroke',\n  'strokeWidth',\n  'fill',\n  'deltaY',\n  'textBackgroundColor',\n] as const;\n\n// @TODO: Many things here are configuration related and shouldn't be on the class nor prototype\n// regexes, list of properties that are not suppose to change by instances, magic consts.\n// this will be a separated effort\nexport const textDefaultValues: Partial<TClassProperties<FabricText>> = {\n  _reNewline: reNewline,\n  _reSpacesAndTabs: /[ \\t\\r]/g,\n  _reSpaceAndTab: /[ \\t\\r]/,\n  _reWords: /\\S+/g,\n  fontSize: 40,\n  fontWeight: 'normal',\n  fontFamily: 'Times New Roman',\n  underline: false,\n  overline: false,\n  linethrough: false,\n  textAlign: LEFT,\n  fontStyle: 'normal',\n  lineHeight: 1.16,\n  superscript: {\n    size: 0.6, // fontSize factor\n    baseline: -0.35, // baseline-shift factor (upwards)\n  },\n  subscript: {\n    size: 0.6, // fontSize factor\n    baseline: 0.11, // baseline-shift factor (downwards)\n  },\n  textBackgroundColor: '',\n  stroke: null,\n  shadow: null,\n  path: undefined,\n  pathStartOffset: 0,\n  pathSide: LEFT,\n  pathAlign: 'baseline',\n  _fontSizeFraction: 0.222,\n  offsets: {\n    underline: 0.1,\n    linethrough: -0.315,\n    overline: -0.88,\n  },\n  _fontSizeMult: 1.13,\n  charSpacing: 0,\n  deltaY: 0,\n  direction: 'ltr',\n  CACHE_FONT_SIZE: 400,\n  MIN_TEXT_WIDTH: 2,\n};\n\nexport const JUSTIFY = 'justify';\nexport const JUSTIFY_LEFT = 'justify-left';\nexport const JUSTIFY_RIGHT = 'justify-right';\nexport const JUSTIFY_CENTER = 'justify-center';\n", "import type { ObjectEvents } from '../../EventTypeDefs';\nimport type { FabricObjectProps, SerializedObjectProps } from '../Object/types';\nimport type { TOptions } from '../../typedefs';\nimport { FabricObject } from '../Object/FabricObject';\nimport { styleProperties } from './constants';\nimport type { StylePropertiesType } from './constants';\nimport type { FabricText } from './Text';\nimport { pick } from '../../util';\nimport { pickBy } from '../../util/misc/pick';\n\nexport type CompleteTextStyleDeclaration = Pick<\n  FabricText,\n  StylePropertiesType\n>;\n\nexport type TextStyleDeclaration = Partial<CompleteTextStyleDeclaration>;\n\nexport type TextStyle = {\n  [line: number | string]: { [char: number | string]: TextStyleDeclaration };\n};\n\nexport abstract class StyledText<\n  Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  EventSpec extends ObjectEvents = ObjectEvents\n> extends FabricObject<Props, SProps, EventSpec> {\n  declare abstract styles: TextStyle;\n  protected declare abstract _textLines: string[][];\n  protected declare _forceClearCache: boolean;\n  static _styleProperties: Readonly<StylePropertiesType[]> = styleProperties;\n  abstract get2DCursorLocation(\n    selectionStart: number,\n    skipWrapping?: boolean\n  ): { charIndex: number; lineIndex: number };\n\n  /**\n   * Returns true if object has no styling or no styling in a line\n   * @param {Number} lineIndex , lineIndex is on wrapped lines.\n   * @return {Boolean}\n   */\n  isEmptyStyles(lineIndex?: number): boolean {\n    if (!this.styles) {\n      return true;\n    }\n    if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n      return true;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { line: this.styles[lineIndex] };\n    for (const p1 in obj) {\n      for (const p2 in obj[p1]) {\n        // eslint-disable-next-line no-unused-vars\n        for (const p3 in obj[p1][p2]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns true if object has a style property or has it ina specified line\n   * This function is used to detect if a text will use a particular property or not.\n   * @param {String} property to check for\n   * @param {Number} lineIndex to check the style on\n   * @return {Boolean}\n   */\n  styleHas(property: keyof TextStyleDeclaration, lineIndex?: number): boolean {\n    if (!this.styles) {\n      return false;\n    }\n    if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n      return false;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { 0: this.styles[lineIndex] };\n    // eslint-disable-next-line\n    for (const p1 in obj) {\n      // eslint-disable-next-line\n      for (const p2 in obj[p1]) {\n        if (typeof obj[p1][p2][property] !== 'undefined') {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if characters in a text have a value for a property\n   * whose value matches the textbox's value for that property.  If so,\n   * the character-level property is deleted.  If the character\n   * has no other properties, then it is also deleted.  Finally,\n   * if the line containing that character has no other characters\n   * then it also is deleted.\n   *\n   * @param {string} property The property to compare between characters and text.\n   */\n  cleanStyle(property: keyof TextStyleDeclaration) {\n    if (!this.styles) {\n      return false;\n    }\n    const obj = this.styles;\n    let stylesCount = 0,\n      letterCount,\n      stylePropertyValue,\n      allStyleObjectPropertiesMatch = true,\n      graphemeCount = 0;\n    for (const p1 in obj) {\n      letterCount = 0;\n      for (const p2 in obj[p1]) {\n        const styleObject = obj[p1][p2] || {},\n          stylePropertyHasBeenSet = styleObject[property] !== undefined;\n\n        stylesCount++;\n\n        if (stylePropertyHasBeenSet) {\n          if (!stylePropertyValue) {\n            stylePropertyValue = styleObject[property];\n          } else if (styleObject[property] !== stylePropertyValue) {\n            allStyleObjectPropertiesMatch = false;\n          }\n\n          if (styleObject[property] === this[property as keyof this]) {\n            delete styleObject[property];\n          }\n        } else {\n          allStyleObjectPropertiesMatch = false;\n        }\n\n        if (Object.keys(styleObject).length !== 0) {\n          letterCount++;\n        } else {\n          delete obj[p1][p2];\n        }\n      }\n\n      if (letterCount === 0) {\n        delete obj[p1];\n      }\n    }\n    // if every grapheme has the same style set then\n    // delete those styles and set it on the parent\n    for (let i = 0; i < this._textLines.length; i++) {\n      graphemeCount += this._textLines[i].length;\n    }\n    if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {\n      // @ts-expect-error conspiracy theory of TS\n      this[property as keyof this] = stylePropertyValue;\n      this.removeStyle(property);\n    }\n  }\n\n  /**\n   * Remove a style property or properties from all individual character styles\n   * in a text object.  Deletes the character style object if it contains no other style\n   * props.  Deletes a line style object if it contains no other character styles.\n   *\n   * @param {String} props The property to remove from character styles.\n   */\n  removeStyle(property: keyof TextStyleDeclaration) {\n    if (!this.styles) {\n      return;\n    }\n    const obj = this.styles;\n    let line, lineNum, charNum;\n    for (lineNum in obj) {\n      line = obj[lineNum];\n      for (charNum in line) {\n        delete line[charNum][property];\n        if (Object.keys(line[charNum]).length === 0) {\n          delete line[charNum];\n        }\n      }\n      if (Object.keys(line).length === 0) {\n        delete obj[lineNum];\n      }\n    }\n  }\n\n  private _extendStyles(index: number, style: TextStyleDeclaration): void {\n    const { lineIndex, charIndex } = this.get2DCursorLocation(index);\n\n    if (!this._getLineStyle(lineIndex)) {\n      this._setLineStyle(lineIndex);\n    }\n\n    const newStyle = pickBy(\n      {\n        // first create a new object that is a merge of existing and new\n        ...this._getStyleDeclaration(lineIndex, charIndex),\n        ...style,\n        // use the predicate to discard undefined values\n      },\n      (value) => value !== undefined\n    );\n\n    // finally assign to the old position the new style\n    this._setStyleDeclaration(lineIndex, charIndex, newStyle);\n  }\n\n  /**\n   * Gets style of a current selection/cursor (at the start position)\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} endIndex End index to get styles at, if not specified startIndex + 1\n   * @param {Boolean} [complete] get full style or not\n   * @return {Array} styles an array with one, zero or more Style objects\n   */\n  getSelectionStyles(\n    startIndex: number,\n    endIndex?: number,\n    complete?: boolean\n  ): TextStyleDeclaration[] {\n    const styles: TextStyleDeclaration[] = [];\n    for (let i = startIndex; i < (endIndex || startIndex); i++) {\n      styles.push(this.getStyleAtPosition(i, complete));\n    }\n    return styles;\n  }\n\n  /**\n   * Gets style of a current selection/cursor position\n   * @param {Number} position  to get styles at\n   * @param {Boolean} [complete] full style if true\n   * @return {Object} style Style object at a specified index\n   * @private\n   */\n  getStyleAtPosition(position: number, complete?: boolean) {\n    const { lineIndex, charIndex } = this.get2DCursorLocation(position);\n    return complete\n      ? this.getCompleteStyleDeclaration(lineIndex, charIndex)\n      : this._getStyleDeclaration(lineIndex, charIndex);\n  }\n\n  /**\n   * Sets style of a current selection, if no selection exist, do not set anything.\n   * @param {Object} styles Styles object\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} [endIndex] End index to get styles at, if not specified startIndex + 1\n   */\n  setSelectionStyles(styles: object, startIndex: number, endIndex?: number) {\n    for (let i = startIndex; i < (endIndex || startIndex); i++) {\n      this._extendStyles(i, styles);\n    }\n    /* not included in _extendStyles to avoid clearing cache more than once */\n    this._forceClearCache = true;\n  }\n\n  /**\n   * Get a reference, not a clone, to the style object for a given character,\n   * if no style is set for a line or char, return a new empty object.\n   * This is tricky and confusing because when you get an empty object you can't\n   * determine if it is a reference or a new one.\n   * @TODO this should always return a reference or always a clone or undefined when necessary.\n   * @protected\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {TextStyleDeclaration} a style object reference to the existing one or a new empty object when undefined\n   */\n  _getStyleDeclaration(\n    lineIndex: number,\n    charIndex: number\n  ): TextStyleDeclaration {\n    const lineStyle = this.styles && this.styles[lineIndex];\n    return lineStyle ? lineStyle[charIndex] ?? {} : {};\n  }\n\n  /**\n   * return a new object that contains all the style property for a character\n   * the object returned is newly created\n   * @param {Number} lineIndex of the line where the character is\n   * @param {Number} charIndex position of the character on the line\n   * @return {Object} style object\n   */\n  getCompleteStyleDeclaration(\n    lineIndex: number,\n    charIndex: number\n  ): CompleteTextStyleDeclaration {\n    return {\n      // @ts-expect-error readonly\n      ...pick(this, (this.constructor as typeof StyledText)._styleProperties),\n      ...this._getStyleDeclaration(lineIndex, charIndex),\n    } as CompleteTextStyleDeclaration;\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n    style: object\n  ) {\n    this.styles[lineIndex][charIndex] = style;\n  }\n\n  /**\n   *\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @private\n   */\n  protected _deleteStyleDeclaration(lineIndex: number, charIndex: number) {\n    delete this.styles[lineIndex][charIndex];\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @return {Boolean} if the line exists or not\n   * @private\n   */\n  protected _getLineStyle(lineIndex: number): boolean {\n    return !!this.styles[lineIndex];\n  }\n\n  /**\n   * Set the line style to an empty object so that is initialized\n   * @param {Number} lineIndex\n   * @private\n   */\n  protected _setLineStyle(lineIndex: number) {\n    this.styles[lineIndex] = {};\n  }\n\n  protected _deleteLineStyle(lineIndex: number) {\n    delete this.styles[lineIndex];\n  }\n}\n", "import { config } from '../../config';\nimport type { TSVGReviver } from '../../typedefs';\nimport { escapeXml } from '../../util/lang_string';\nimport { colorPropToSVG, createSVGRect } from '../../util/misc/svgParsing';\nimport { hasStyleChanged } from '../../util/misc/textStyles';\nimport { toFixed } from '../../util/misc/toFixed';\nimport { FabricObjectSVGExportMixin } from '../Object/FabricObjectSVGExportMixin';\nimport { type TextStyleDeclaration } from './StyledText';\nimport { JUSTIFY } from '../Text/constants';\nimport type { FabricText } from './Text';\n\nconst multipleSpacesRegex = /  +/g;\nconst dblQuoteRegex = /\"/g;\n\nfunction createSVGInlineRect(\n  color: string,\n  left: number,\n  top: number,\n  width: number,\n  height: number\n) {\n  return `\\t\\t${createSVGRect(color, { left, top, width, height })}\\n`;\n}\n\nexport class TextSVGExportMixin extends FabricObjectSVGExportMixin {\n  _toSVG(this: TextSVGExportMixin & FabricText): string[] {\n    const offsets = this._getSVGLeftTopOffsets(),\n      textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);\n    return this._wrapSVGTextAndBg(textAndBg);\n  }\n\n  toSVG(this: TextSVGExportMixin & FabricText, reviver: TSVGReviver): string {\n    return this._createBaseSVGMarkup(this._toSVG(), {\n      reviver,\n      noStyle: true,\n      withShadow: true,\n    });\n  }\n\n  private _getSVGLeftTopOffsets(this: TextSVGExportMixin & FabricText) {\n    return {\n      textLeft: -this.width / 2,\n      textTop: -this.height / 2,\n      lineTop: this.getHeightOfLine(0),\n    };\n  }\n\n  private _wrapSVGTextAndBg(\n    this: TextSVGExportMixin & FabricText,\n    {\n      textBgRects,\n      textSpans,\n    }: {\n      textSpans: string[];\n      textBgRects: string[];\n    }\n  ) {\n    const noShadow = true,\n      textDecoration = this.getSvgTextDecoration(this);\n    return [\n      textBgRects.join(''),\n      '\\t\\t<text xml:space=\"preserve\" ',\n      this.fontFamily\n        ? `font-family=\"${this.fontFamily.replace(dblQuoteRegex, \"'\")}\" `\n        : '',\n      this.fontSize ? `font-size=\"${this.fontSize}\" ` : '',\n      this.fontStyle ? `font-style=\"${this.fontStyle}\" ` : '',\n      this.fontWeight ? `font-weight=\"${this.fontWeight}\" ` : '',\n      textDecoration ? `text-decoration=\"${textDecoration}\" ` : '',\n      this.direction === 'rtl' ? `direction=\"${this.direction}\" ` : '',\n      'style=\"',\n      this.getSvgStyles(noShadow),\n      '\"',\n      this.addPaintOrder(),\n      ' >',\n      textSpans.join(''),\n      '</text>\\n',\n    ];\n  }\n\n  /**\n   * @private\n   * @param {Number} textTopOffset Text top offset\n   * @param {Number} textLeftOffset Text left offset\n   * @return {Object}\n   */\n  private _getSVGTextAndBg(\n    this: TextSVGExportMixin & FabricText,\n    textTopOffset: number,\n    textLeftOffset: number\n  ) {\n    const textSpans: string[] = [],\n      textBgRects: string[] = [];\n    let height = textTopOffset,\n      lineOffset;\n\n    // bounding-box background\n    this.backgroundColor &&\n      textBgRects.push(\n        ...createSVGInlineRect(\n          this.backgroundColor,\n          -this.width / 2,\n          -this.height / 2,\n          this.width,\n          this.height\n        )\n      );\n\n    // text and text-background\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      lineOffset = this._getLineLeftOffset(i);\n      if (this.direction === 'rtl') {\n        lineOffset += this.width;\n      }\n      if (this.textBackgroundColor || this.styleHas('textBackgroundColor', i)) {\n        this._setSVGTextLineBg(\n          textBgRects,\n          i,\n          textLeftOffset + lineOffset,\n          height\n        );\n      }\n      this._setSVGTextLineText(\n        textSpans,\n        i,\n        textLeftOffset + lineOffset,\n        height\n      );\n      height += this.getHeightOfLine(i);\n    }\n\n    return {\n      textSpans,\n      textBgRects,\n    };\n  }\n\n  private _createTextCharSpan(\n    this: TextSVGExportMixin & FabricText,\n    char: string,\n    styleDecl: TextStyleDeclaration,\n    left: number,\n    top: number\n  ) {\n    const styleProps = this.getSvgSpanStyles(\n        styleDecl,\n        char !== char.trim() || !!char.match(multipleSpacesRegex)\n      ),\n      fillStyles = styleProps ? `style=\"${styleProps}\"` : '',\n      dy = styleDecl.deltaY,\n      dySpan = dy ? ` dy=\"${toFixed(dy, config.NUM_FRACTION_DIGITS)}\" ` : '';\n\n    return `<tspan x=\"${toFixed(\n      left,\n      config.NUM_FRACTION_DIGITS\n    )}\" y=\"${toFixed(\n      top,\n      config.NUM_FRACTION_DIGITS\n    )}\" ${dySpan}${fillStyles}>${escapeXml(char)}</tspan>`;\n  }\n\n  private _setSVGTextLineText(\n    this: TextSVGExportMixin & FabricText,\n    textSpans: string[],\n    lineIndex: number,\n    textLeftOffset: number,\n    textTopOffset: number\n  ) {\n    const lineHeight = this.getHeightOfLine(lineIndex),\n      isJustify = this.textAlign.includes(JUSTIFY),\n      line = this._textLines[lineIndex];\n    let actualStyle,\n      nextStyle,\n      charsToRender = '',\n      charBox,\n      style,\n      boxWidth = 0,\n      timeToRender;\n\n    textTopOffset +=\n      (lineHeight * (1 - this._fontSizeFraction)) / this.lineHeight;\n    for (let i = 0, len = line.length - 1; i <= len; i++) {\n      timeToRender = i === len || this.charSpacing;\n      charsToRender += line[i];\n      charBox = this.__charBounds[lineIndex][i];\n      if (boxWidth === 0) {\n        textLeftOffset += charBox.kernedWidth - charBox.width;\n        boxWidth += charBox.width;\n      } else {\n        boxWidth += charBox.kernedWidth;\n      }\n      if (isJustify && !timeToRender) {\n        if (this._reSpaceAndTab.test(line[i])) {\n          timeToRender = true;\n        }\n      }\n      if (!timeToRender) {\n        // if we have charSpacing, we render char by char\n        actualStyle =\n          actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n        nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n        timeToRender = hasStyleChanged(actualStyle, nextStyle, true);\n      }\n      if (timeToRender) {\n        style = this._getStyleDeclaration(lineIndex, i);\n        textSpans.push(\n          this._createTextCharSpan(\n            charsToRender,\n            style,\n            textLeftOffset,\n            textTopOffset\n          )\n        );\n        charsToRender = '';\n        actualStyle = nextStyle;\n        if (this.direction === 'rtl') {\n          textLeftOffset -= boxWidth;\n        } else {\n          textLeftOffset += boxWidth;\n        }\n        boxWidth = 0;\n      }\n    }\n  }\n\n  private _setSVGTextLineBg(\n    this: TextSVGExportMixin & FabricText,\n    textBgRects: (string | number)[],\n    i: number,\n    leftOffset: number,\n    textTopOffset: number\n  ) {\n    const line = this._textLines[i],\n      heightOfLine = this.getHeightOfLine(i) / this.lineHeight;\n    let boxWidth = 0,\n      boxStart = 0,\n      currentColor,\n      lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n    for (let j = 0; j < line.length; j++) {\n      const { left, width, kernedWidth } = this.__charBounds[i][j];\n      currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n      if (currentColor !== lastColor) {\n        lastColor &&\n          textBgRects.push(\n            ...createSVGInlineRect(\n              lastColor,\n              leftOffset + boxStart,\n              textTopOffset,\n              boxWidth,\n              heightOfLine\n            )\n          );\n        boxStart = left;\n        boxWidth = width;\n        lastColor = currentColor;\n      } else {\n        boxWidth += kernedWidth;\n      }\n    }\n    currentColor &&\n      textBgRects.push(\n        ...createSVGInlineRect(\n          lastColor,\n          leftOffset + boxStart,\n          textTopOffset,\n          boxWidth,\n          heightOfLine\n        )\n      );\n  }\n\n  /**\n   * @deprecated unused\n   */\n  _getSVGLineTopOffset(\n    this: TextSVGExportMixin & FabricText,\n    lineIndex: number\n  ) {\n    let lineTopOffset = 0,\n      j;\n    for (j = 0; j < lineIndex; j++) {\n      lineTopOffset += this.getHeightOfLine(j);\n    }\n    const lastHeight = this.getHeightOfLine(j);\n    return {\n      lineTop: lineTopOffset,\n      offset:\n        ((this._fontSizeMult - this._fontSizeFraction) * lastHeight) /\n        (this.lineHeight * this._fontSizeMult),\n    };\n  }\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Boolean} skipShadow a boolean to skip shadow filter output\n   * @return {String}\n   */\n  getSvgStyles(this: TextSVGExportMixin & FabricText, skipShadow?: boolean) {\n    // cant use ts-expect-error because of ts 5.3 cross check\n    // @ts-ignore TS doesn't respect this type casting\n    return `${super.getSvgStyles(skipShadow)} white-space: pre;`;\n  }\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Object} style the object from which to retrieve style properties\n   * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.\n   * @return {String}\n   */\n  getSvgSpanStyles(\n    this: TextSVGExportMixin & FabricText,\n    style: TextStyleDeclaration,\n    useWhiteSpace?: boolean\n  ) {\n    const {\n      fontFamily,\n      strokeWidth,\n      stroke,\n      fill,\n      fontSize,\n      fontStyle,\n      fontWeight,\n      deltaY,\n    } = style;\n\n    const textDecoration = this.getSvgTextDecoration(style);\n\n    return [\n      stroke ? colorPropToSVG('stroke', stroke) : '',\n      strokeWidth ? `stroke-width: ${strokeWidth}; ` : '',\n      fontFamily\n        ? `font-family: ${\n            !fontFamily.includes(\"'\") && !fontFamily.includes('\"')\n              ? `'${fontFamily}'`\n              : fontFamily\n          }; `\n        : '',\n      fontSize ? `font-size: ${fontSize}px; ` : '',\n      fontStyle ? `font-style: ${fontStyle}; ` : '',\n      fontWeight ? `font-weight: ${fontWeight}; ` : '',\n      textDecoration ? `text-decoration: ${textDecoration}; ` : textDecoration,\n      fill ? colorPropToSVG('fill', fill) : '',\n      deltaY ? `baseline-shift: ${-deltaY}; ` : '',\n      useWhiteSpace ? 'white-space: pre; ' : '',\n    ].join('');\n  }\n\n  /**\n   * Returns text-decoration property for svg-export\n   * @param {Object} style the object from which to retrieve style properties\n   * @return {String}\n   */\n  getSvgTextDecoration(\n    this: TextSVGExportMixin & FabricText,\n    style: TextStyleDeclaration\n  ) {\n    return (['overline', 'underline', 'line-through'] as const)\n      .filter(\n        (decoration) =>\n          style[\n            decoration.replace('-', '') as\n              | 'overline'\n              | 'underline'\n              | 'linethrough'\n          ]\n      )\n      .join(' ');\n  }\n}\n", "import { cache } from '../../cache';\nimport { DEFAULT_SVG_FONT_SIZE } from '../../constants';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport type {\n  CompleteTextStyleDeclaration,\n  TextStyle,\n  TextStyleDeclaration,\n} from './StyledText';\nimport { StyledText } from './StyledText';\nimport { SHARED_ATTRIBUTES } from '../../parser/attributes';\nimport { parseAttributes } from '../../parser/parseAttributes';\nimport type {\n  Abortable,\n  TCacheCanvasDimensions,\n  TClassProperties,\n  TFiller,\n  TOptions,\n} from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport { graphemeSplit } from '../../util/lang_string';\nimport { createCanvasElement } from '../../util/misc/dom';\nimport type { TextStyleArray } from '../../util/misc/textStyles';\nimport {\n  hasStyleChanged,\n  stylesFromArray,\n  stylesToArray,\n} from '../../util/misc/textStyles';\nimport { getPathSegmentsInfo, getPointOnPath } from '../../util/path';\nimport { cacheProperties } from '../Object/FabricObject';\nimport type { Path } from '../Path';\nimport { TextSVGExportMixin } from './TextSVGExportMixin';\nimport { applyMixins } from '../../util/applyMixins';\nimport type { FabricObjectProps, SerializedObjectProps } from '../Object/types';\nimport type { StylePropertiesType } from './constants';\nimport {\n  additionalProps,\n  textDefaultValues,\n  textLayoutProperties,\n  JUSTIFY,\n  JUSTIFY_CENTER,\n  JUSTIFY_LEFT,\n  JUSTIFY_RIGHT,\n} from './constants';\nimport { CENTER, LEFT, RIGHT, TOP, BOTTOM } from '../../constants';\nimport { isFiller } from '../../util/typeAssertions';\nimport type { Gradient } from '../../gradient/Gradient';\nimport type { Pattern } from '../../Pattern';\nimport type { CSSRules } from '../../parser/typedefs';\n\nlet measuringContext: CanvasRenderingContext2D | null;\n\n/**\n * Return a context for measurement of text string.\n * if created it gets stored for reuse\n */\nfunction getMeasuringContext() {\n  if (!measuringContext) {\n    const canvas = createCanvasElement();\n    canvas.width = canvas.height = 0;\n    measuringContext = canvas.getContext('2d');\n  }\n  return measuringContext;\n}\n\nexport type TPathSide = 'left' | 'right';\n\nexport type TPathAlign = 'baseline' | 'center' | 'ascender' | 'descender';\n\nexport type TextLinesInfo = {\n  lines: string[];\n  graphemeLines: string[][];\n  graphemeText: string[];\n  _unwrappedLines: string[][];\n};\n\n/**\n * Measure and return the info of a single grapheme.\n * needs the the info of previous graphemes already filled\n * Override to customize measuring\n */\nexport type GraphemeBBox = {\n  width: number;\n  height: number;\n  kernedWidth: number;\n  left: number;\n  deltaY: number;\n  renderLeft?: number;\n  renderTop?: number;\n  angle?: number;\n};\n\n// @TODO this is not complete\ninterface UniqueTextProps {\n  charSpacing: number;\n  lineHeight: number;\n  fontSize: number;\n  fontWeight: string;\n  fontFamily: string;\n  fontStyle: string;\n  pathSide: TPathSide;\n  pathAlign: TPathAlign;\n  underline: boolean;\n  overline: boolean;\n  linethrough: boolean;\n  textAlign: string;\n  direction: CanvasDirection;\n  path?: Path;\n}\n\nexport interface SerializedTextProps\n  extends SerializedObjectProps,\n    UniqueTextProps {\n  styles: TextStyleArray | TextStyle;\n}\n\nexport interface TextProps extends FabricObjectProps, UniqueTextProps {\n  styles: TextStyle;\n}\n\n/**\n * Text class\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}\n */\nexport class FabricText<\n    Props extends TOptions<TextProps> = Partial<TextProps>,\n    SProps extends SerializedTextProps = SerializedTextProps,\n    EventSpec extends ObjectEvents = ObjectEvents\n  >\n  extends StyledText<Props, SProps, EventSpec>\n  implements UniqueTextProps\n{\n  /**\n   * Properties that requires a text layout recalculation when changed\n   * @type string[]\n   * @protected\n   */\n  static textLayoutProperties: string[] = textLayoutProperties;\n\n  /**\n   * @private\n   */\n  declare _reNewline: RegExp;\n\n  /**\n   * Use this regular expression to filter for whitespaces that is not a new line.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reSpacesAndTabs: RegExp;\n\n  /**\n   * Use this regular expression to filter for whitespace that is not a new line.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reSpaceAndTab: RegExp;\n\n  /**\n   * Use this regular expression to filter consecutive groups of non spaces.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reWords: RegExp;\n\n  declare text: string;\n\n  /**\n   * Font size (in pixels)\n   * @type Number\n   * @default\n   */\n  declare fontSize: number;\n\n  /**\n   * Font weight (e.g. bold, normal, 400, 600, 800)\n   * @type {(Number|String)}\n   * @default\n   */\n  declare fontWeight: string;\n\n  /**\n   * Font family\n   * @type String\n   * @default\n   */\n  declare fontFamily: string;\n\n  /**\n   * Text decoration underline.\n   * @type Boolean\n   * @default\n   */\n  declare underline: boolean;\n\n  /**\n   * Text decoration overline.\n   * @type Boolean\n   * @default\n   */\n  declare overline: boolean;\n\n  /**\n   * Text decoration linethrough.\n   * @type Boolean\n   * @default\n   */\n  declare linethrough: boolean;\n\n  /**\n   * Text alignment. Possible values: \"left\", \"center\", \"right\", \"justify\",\n   * \"justify-left\", \"justify-center\" or \"justify-right\".\n   * @type String\n   * @default\n   */\n  declare textAlign: string;\n\n  /**\n   * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\n   * @type String\n   * @default\n   */\n  declare fontStyle: string;\n\n  /**\n   * Line height\n   * @type Number\n   * @default\n   */\n  declare lineHeight: number;\n\n  /**\n   * Superscript schema object (minimum overlap)\n   */\n  declare superscript: {\n    /**\n     * fontSize factor\n     * @default 0.6\n     */\n    size: number;\n    /**\n     * baseline-shift factor (upwards)\n     * @default -0.35\n     */\n    baseline: number;\n  };\n\n  /**\n   * Subscript schema object (minimum overlap)\n   */\n  declare subscript: {\n    /**\n     * fontSize factor\n     * @default 0.6\n     */\n    size: number;\n    /**\n     * baseline-shift factor (downwards)\n     * @default 0.11\n     */\n    baseline: number;\n  };\n\n  /**\n   * Background color of text lines\n   * @type String\n   * @default\n   */\n  declare textBackgroundColor: string;\n\n  declare styles: TextStyle;\n\n  /**\n   * Path that the text should follow.\n   * since 4.6.0 the path will be drawn automatically.\n   * if you want to make the path visible, give it a stroke and strokeWidth or fill value\n   * if you want it to be hidden, assign visible = false to the path.\n   * This feature is in BETA, and SVG import/export is not yet supported.\n   * @type Path\n   * @example\n   * const textPath = new Text('Text on a path', {\n   *     top: 150,\n   *     left: 150,\n   *     textAlign: 'center',\n   *     charSpacing: -50,\n   *     path: new Path('M 0 0 C 50 -100 150 -100 200 0', {\n   *         strokeWidth: 1,\n   *         visible: false\n   *     }),\n   *     pathSide: 'left',\n   *     pathStartOffset: 0\n   * });\n   * @default\n   */\n  declare path?: Path;\n\n  /**\n   * Offset amount for text path starting position\n   * Only used when text has a path\n   * @type Number\n   * @default\n   */\n  declare pathStartOffset: number;\n\n  /**\n   * Which side of the path the text should be drawn on.\n   * Only used when text has a path\n   * @type {TPathSide} 'left|right'\n   * @default\n   */\n  declare pathSide: TPathSide;\n\n  /**\n   * How text is aligned to the path. This property determines\n   * the perpendicular position of each character relative to the path.\n   * (one of \"baseline\", \"center\", \"ascender\", \"descender\")\n   * This feature is in BETA, and its behavior may change\n   * @type TPathAlign\n   * @default\n   */\n  declare pathAlign: TPathAlign;\n\n  /**\n   * @private\n   */\n  declare _fontSizeFraction: number;\n\n  /**\n   * @private\n   */\n  declare offsets: { underline: number; linethrough: number; overline: number };\n\n  /**\n   * Text Line proportion to font Size (in pixels)\n   * @type Number\n   * @default\n   */\n  declare _fontSizeMult: number;\n\n  /**\n   * additional space between characters\n   * expressed in thousands of em unit\n   * @type Number\n   * @default\n   */\n  declare charSpacing: number;\n\n  /**\n   * Baseline shift, styles only, keep at 0 for the main text object\n   * @type {Number}\n   * @default\n   */\n  declare deltaY: number;\n\n  /**\n   * WARNING: EXPERIMENTAL. NOT SUPPORTED YET\n   * determine the direction of the text.\n   * This has to be set manually together with textAlign and originX for proper\n   * experience.\n   * some interesting link for the future\n   * https://www.w3.org/International/questions/qa-bidi-unicode-controls\n   * @since 4.5.0\n   * @type {CanvasDirection} 'ltr|rtl'\n   * @default\n   */\n  declare direction: CanvasDirection;\n\n  /**\n   * contains characters bounding boxes\n   * This variable is considered to be protected.\n   * But for how mixins are implemented right now, we can't leave it private\n   * @protected\n   */\n  __charBounds: GraphemeBBox[][] = [];\n\n  /**\n   * use this size when measuring text. To avoid IE11 rounding errors\n   * @type {Number}\n   * @default\n   * @readonly\n   * @private\n   */\n  declare CACHE_FONT_SIZE: number;\n\n  /**\n   * contains the min text width to avoid getting 0\n   * @type {Number}\n   * @default\n   */\n  declare MIN_TEXT_WIDTH: number;\n\n  /**\n   * contains the the text of the object, divided in lines as they are displayed\n   * on screen. Wrapping will divide the text independently of line breaks\n   * @type {string[]}\n   * @default\n   */\n  declare textLines: string[];\n\n  /**\n   * same as textlines, but each line is an array of graphemes as split by splitByGrapheme\n   * @type {string[]}\n   * @default\n   */\n  declare _textLines: string[][];\n\n  declare _unwrappedTextLines: string[][];\n  declare _text: string[];\n  declare cursorWidth: number;\n  declare __lineHeights: number[];\n  declare __lineWidths: number[];\n  declare initialized?: true;\n\n  static cacheProperties = [...cacheProperties, ...additionalProps];\n\n  static ownDefaults = textDefaultValues;\n\n  static type = 'Text';\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...FabricText.ownDefaults };\n  }\n\n  constructor(text: string, options?: Props) {\n    super();\n    Object.assign(this, FabricText.ownDefaults);\n    this.setOptions(options);\n    if (!this.styles) {\n      this.styles = {};\n    }\n    this.text = text;\n    this.initialized = true;\n    if (this.path) {\n      this.setPathInfo();\n    }\n    this.initDimensions();\n    this.setCoords();\n  }\n\n  /**\n   * If text has a path, it will add the extra information needed\n   * for path and text calculations\n   */\n  setPathInfo() {\n    const path = this.path;\n    if (path) {\n      path.segmentsInfo = getPathSegmentsInfo(path.path);\n    }\n  }\n\n  /**\n   * @private\n   * Divides text into lines of text and lines of graphemes.\n   */\n  _splitText(): TextLinesInfo {\n    const newLines = this._splitTextIntoLines(this.text);\n    this.textLines = newLines.lines;\n    this._textLines = newLines.graphemeLines;\n    this._unwrappedTextLines = newLines._unwrappedLines;\n    this._text = newLines.graphemeText;\n    return newLines;\n  }\n\n  /**\n   * Initialize or update text dimensions.\n   * Updates this.width and this.height with the proper values.\n   * Does not return dimensions.\n   */\n  initDimensions() {\n    this._splitText();\n    this._clearCache();\n    this.dirty = true;\n    if (this.path) {\n      this.width = this.path.width;\n      this.height = this.path.height;\n    } else {\n      this.width =\n        this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;\n      this.height = this.calcTextHeight();\n    }\n    if (this.textAlign.includes(JUSTIFY)) {\n      // once text is measured we need to make space fatter to make justified text.\n      this.enlargeSpaces();\n    }\n  }\n\n  /**\n   * Enlarge space boxes and shift the others\n   */\n  enlargeSpaces() {\n    let diffSpace,\n      currentLineWidth,\n      numberOfSpaces,\n      accumulatedSpace,\n      line,\n      charBound,\n      spaces;\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      if (\n        this.textAlign !== JUSTIFY &&\n        (i === len - 1 || this.isEndOfWrapping(i))\n      ) {\n        continue;\n      }\n      accumulatedSpace = 0;\n      line = this._textLines[i];\n      currentLineWidth = this.getLineWidth(i);\n      if (\n        currentLineWidth < this.width &&\n        (spaces = this.textLines[i].match(this._reSpacesAndTabs))\n      ) {\n        numberOfSpaces = spaces.length;\n        diffSpace = (this.width - currentLineWidth) / numberOfSpaces;\n        for (let j = 0; j <= line.length; j++) {\n          charBound = this.__charBounds[i][j];\n          if (this._reSpaceAndTab.test(line[j])) {\n            charBound.width += diffSpace;\n            charBound.kernedWidth += diffSpace;\n            charBound.left += accumulatedSpace;\n            accumulatedSpace += diffSpace;\n          } else {\n            charBound.left += accumulatedSpace;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Detect if the text line is ended with an hard break\n   * text and itext do not have wrapping, return false\n   * @return {Boolean}\n   */\n  isEndOfWrapping(lineIndex: number): boolean {\n    return lineIndex === this._textLines.length - 1;\n  }\n\n  /**\n   * Detect if a line has a linebreak and so we need to account for it when moving\n   * and counting style.\n   * It return always 1 for text and Itext. Textbox has its own implementation\n   * @return Number\n   */\n  missingNewlineOffset(lineIndex: number, skipWrapping?: boolean): 0 | 1;\n  missingNewlineOffset(lineIndex: number): 1 {\n    return 1;\n  }\n\n  /**\n   * Returns 2d representation (lineIndex and charIndex) of cursor\n   * @param {Number} selectionStart\n   * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\n   */\n  get2DCursorLocation(selectionStart: number, skipWrapping?: boolean) {\n    const lines = skipWrapping ? this._unwrappedTextLines : this._textLines;\n    let i: number;\n    for (i = 0; i < lines.length; i++) {\n      if (selectionStart <= lines[i].length) {\n        return {\n          lineIndex: i,\n          charIndex: selectionStart,\n        };\n      }\n      selectionStart -=\n        lines[i].length + this.missingNewlineOffset(i, skipWrapping);\n    }\n    return {\n      lineIndex: i - 1,\n      charIndex:\n        lines[i - 1].length < selectionStart\n          ? lines[i - 1].length\n          : selectionStart,\n    };\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {String} String representation of text object\n   */\n  toString(): string {\n    return `#<Text (${this.complexity()}): { \"text\": \"${\n      this.text\n    }\", \"fontFamily\": \"${this.fontFamily}\" }>`;\n  }\n\n  /**\n   * Return the dimension and the zoom level needed to create a cache canvas\n   * big enough to host the object to be cached.\n   * @private\n   * @param {Object} dim.x width of object to be cached\n   * @param {Object} dim.y height of object to be cached\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _getCacheCanvasDimensions(): TCacheCanvasDimensions {\n    const dims = super._getCacheCanvasDimensions();\n    const fontSize = this.fontSize;\n    dims.width += fontSize * dims.zoomX;\n    dims.height += fontSize * dims.zoomY;\n    return dims;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const path = this.path;\n    path && !path.isNotVisible() && path._render(ctx);\n    this._setTextStyles(ctx);\n    this._renderTextLinesBackground(ctx);\n    this._renderTextDecoration(ctx, 'underline');\n    this._renderText(ctx);\n    this._renderTextDecoration(ctx, 'overline');\n    this._renderTextDecoration(ctx, 'linethrough');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderText(ctx: CanvasRenderingContext2D) {\n    if (this.paintFirst === 'stroke') {\n      this._renderTextStroke(ctx);\n      this._renderTextFill(ctx);\n    } else {\n      this._renderTextFill(ctx);\n      this._renderTextStroke(ctx);\n    }\n  }\n\n  /**\n   * Set the font parameter of the context with the object properties or with charStyle\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Object} [charStyle] object with font style properties\n   * @param {String} [charStyle.fontFamily] Font Family\n   * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )\n   * @param {String} [charStyle.fontWeight] Font weight\n   * @param {String} [charStyle.fontStyle] Font style (italic|normal)\n   */\n  _setTextStyles(\n    ctx: CanvasRenderingContext2D,\n    charStyle?: any,\n    forMeasuring?: boolean\n  ) {\n    ctx.textBaseline = 'alphabetic';\n    if (this.path) {\n      switch (this.pathAlign) {\n        case CENTER:\n          ctx.textBaseline = 'middle';\n          break;\n        case 'ascender':\n          ctx.textBaseline = TOP;\n          break;\n        case 'descender':\n          ctx.textBaseline = BOTTOM;\n          break;\n      }\n    }\n    ctx.font = this._getFontDeclaration(charStyle, forMeasuring);\n  }\n\n  /**\n   * calculate and return the text Width measuring each line.\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @return {Number} Maximum width of Text object\n   */\n  calcTextWidth(): number {\n    let maxWidth = this.getLineWidth(0);\n\n    for (let i = 1, len = this._textLines.length; i < len; i++) {\n      const currentLineWidth = this.getLineWidth(i);\n      if (currentLineWidth > maxWidth) {\n        maxWidth = currentLineWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  /**\n   * @private\n   * @param {String} method Method name (\"fillText\" or \"strokeText\")\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {String} line Text to render\n   * @param {Number} left Left position of text\n   * @param {Number} top Top position of text\n   * @param {Number} lineIndex Index of a line in a text\n   */\n  _renderTextLine(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    line: string[],\n    left: number,\n    top: number,\n    lineIndex: number\n  ) {\n    this._renderChars(method, ctx, line, left, top, lineIndex);\n  }\n\n  /**\n   * Renders the text background for lines, taking care of style\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextLinesBackground(ctx: CanvasRenderingContext2D) {\n    if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor')) {\n      return;\n    }\n    const originalFill = ctx.fillStyle,\n      leftOffset = this._getLeftOffset();\n    let lineTopOffset = this._getTopOffset();\n\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i);\n      if (\n        !this.textBackgroundColor &&\n        !this.styleHas('textBackgroundColor', i)\n      ) {\n        lineTopOffset += heightOfLine;\n        continue;\n      }\n      const jlen = this._textLines[i].length;\n      const lineLeftOffset = this._getLineLeftOffset(i);\n      let boxWidth = 0;\n      let boxStart = 0;\n      let drawStart;\n      let currentColor;\n      let lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n      for (let j = 0; j < jlen; j++) {\n        // at this point charbox are either standard or full with pathInfo if there is a path.\n        const charBox = this.__charBounds[i][j] as Required<GraphemeBBox>;\n        currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n        if (this.path) {\n          ctx.save();\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          ctx.fillStyle = currentColor;\n          currentColor &&\n            ctx.fillRect(\n              -charBox.width / 2,\n              (-heightOfLine / this.lineHeight) * (1 - this._fontSizeFraction),\n              charBox.width,\n              heightOfLine / this.lineHeight\n            );\n          ctx.restore();\n        } else if (currentColor !== lastColor) {\n          drawStart = leftOffset + lineLeftOffset + boxStart;\n          if (this.direction === 'rtl') {\n            drawStart = this.width - drawStart - boxWidth;\n          }\n          ctx.fillStyle = lastColor;\n          lastColor &&\n            ctx.fillRect(\n              drawStart,\n              lineTopOffset,\n              boxWidth,\n              heightOfLine / this.lineHeight\n            );\n          boxStart = charBox.left;\n          boxWidth = charBox.width;\n          lastColor = currentColor;\n        } else {\n          boxWidth += charBox.kernedWidth;\n        }\n      }\n      if (currentColor && !this.path) {\n        drawStart = leftOffset + lineLeftOffset + boxStart;\n        if (this.direction === 'rtl') {\n          drawStart = this.width - drawStart - boxWidth;\n        }\n        ctx.fillStyle = currentColor;\n        ctx.fillRect(\n          drawStart,\n          lineTopOffset,\n          boxWidth,\n          heightOfLine / this.lineHeight\n        );\n      }\n      lineTopOffset += heightOfLine;\n    }\n    ctx.fillStyle = originalFill;\n    // if there is text background color no\n    // other shadows should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * measure and return the width of a single character.\n   * possibly overridden to accommodate different measure logic or\n   * to hook some external lib for character measurement\n   * @private\n   * @param {String} _char, char to be measured\n   * @param {Object} charStyle style of char to be measured\n   * @param {String} [previousChar] previous char\n   * @param {Object} [prevCharStyle] style of previous char\n   */\n  _measureChar(\n    _char: string,\n    charStyle: CompleteTextStyleDeclaration,\n    previousChar: string | undefined,\n    prevCharStyle: CompleteTextStyleDeclaration | Record<string, never>\n  ) {\n    const fontCache = cache.getFontCache(charStyle),\n      fontDeclaration = this._getFontDeclaration(charStyle),\n      couple = previousChar + _char,\n      stylesAreEqual =\n        previousChar &&\n        fontDeclaration === this._getFontDeclaration(prevCharStyle),\n      fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE;\n    let width: number | undefined,\n      coupleWidth: number | undefined,\n      previousWidth: number | undefined,\n      kernedWidth: number | undefined;\n\n    if (previousChar && fontCache[previousChar] !== undefined) {\n      previousWidth = fontCache[previousChar];\n    }\n    if (fontCache[_char] !== undefined) {\n      kernedWidth = width = fontCache[_char];\n    }\n    if (stylesAreEqual && fontCache[couple] !== undefined) {\n      coupleWidth = fontCache[couple];\n      kernedWidth = coupleWidth - previousWidth!;\n    }\n    if (\n      width === undefined ||\n      previousWidth === undefined ||\n      coupleWidth === undefined\n    ) {\n      const ctx = getMeasuringContext()!;\n      // send a TRUE to specify measuring font size CACHE_FONT_SIZE\n      this._setTextStyles(ctx, charStyle, true);\n      if (width === undefined) {\n        kernedWidth = width = ctx.measureText(_char).width;\n        fontCache[_char] = width;\n      }\n      if (previousWidth === undefined && stylesAreEqual && previousChar) {\n        previousWidth = ctx.measureText(previousChar).width;\n        fontCache[previousChar] = previousWidth;\n      }\n      if (stylesAreEqual && coupleWidth === undefined) {\n        // we can measure the kerning couple and subtract the width of the previous character\n        coupleWidth = ctx.measureText(couple).width;\n        fontCache[couple] = coupleWidth;\n        // safe to use the non-null since if undefined we defined it before.\n        kernedWidth = coupleWidth - previousWidth!;\n      }\n    }\n    return {\n      width: width * fontMultiplier,\n      kernedWidth: kernedWidth! * fontMultiplier,\n    };\n  }\n\n  /**\n   * Computes height of character at given position\n   * @param {Number} line the line index number\n   * @param {Number} _char the character index number\n   * @return {Number} fontSize of the character\n   */\n  getHeightOfChar(line: number, _char: number): number {\n    return this.getValueOfPropertyAt(line, _char, 'fontSize');\n  }\n\n  /**\n   * measure a text line measuring all characters.\n   * @param {Number} lineIndex line number\n   */\n  measureLine(lineIndex: number) {\n    const lineInfo = this._measureLine(lineIndex);\n    if (this.charSpacing !== 0) {\n      lineInfo.width -= this._getWidthOfCharSpacing();\n    }\n    if (lineInfo.width < 0) {\n      lineInfo.width = 0;\n    }\n    return lineInfo;\n  }\n\n  /**\n   * measure every grapheme of a line, populating __charBounds\n   * @param {Number} lineIndex\n   * @return {Object} object.width total width of characters\n   * @return {Object} object.numOfSpaces length of chars that match this._reSpacesAndTabs\n   */\n  _measureLine(lineIndex: number) {\n    let width = 0,\n      prevGrapheme: string | undefined,\n      graphemeInfo: GraphemeBBox | undefined;\n\n    const reverse = this.pathSide === RIGHT,\n      path = this.path,\n      line = this._textLines[lineIndex],\n      llength = line.length,\n      lineBounds = new Array<GraphemeBBox>(llength);\n\n    this.__charBounds[lineIndex] = lineBounds;\n    for (let i = 0; i < llength; i++) {\n      const grapheme = line[i];\n      graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);\n      lineBounds[i] = graphemeInfo;\n      width += graphemeInfo.kernedWidth;\n      prevGrapheme = grapheme;\n    }\n    // this latest bound box represent the last character of the line\n    // to simplify cursor handling in interactive mode.\n    lineBounds[llength] = {\n      left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,\n      width: 0,\n      kernedWidth: 0,\n      height: this.fontSize,\n      deltaY: 0,\n    } as GraphemeBBox;\n    if (path && path.segmentsInfo) {\n      let positionInPath = 0;\n      const totalPathLength =\n        path.segmentsInfo[path.segmentsInfo.length - 1].length;\n      switch (this.textAlign) {\n        case LEFT:\n          positionInPath = reverse ? totalPathLength - width : 0;\n          break;\n        case CENTER:\n          positionInPath = (totalPathLength - width) / 2;\n          break;\n        case RIGHT:\n          positionInPath = reverse ? 0 : totalPathLength - width;\n          break;\n        //todo - add support for justify\n      }\n      positionInPath += this.pathStartOffset * (reverse ? -1 : 1);\n      for (\n        let i = reverse ? llength - 1 : 0;\n        reverse ? i >= 0 : i < llength;\n        reverse ? i-- : i++\n      ) {\n        graphemeInfo = lineBounds[i];\n        if (positionInPath > totalPathLength) {\n          positionInPath %= totalPathLength;\n        } else if (positionInPath < 0) {\n          positionInPath += totalPathLength;\n        }\n        // it would probably much faster to send all the grapheme position for a line\n        // and calculate path position/angle at once.\n        this._setGraphemeOnPath(positionInPath, graphemeInfo);\n        positionInPath += graphemeInfo.kernedWidth;\n      }\n    }\n    return { width: width, numOfSpaces: 0 };\n  }\n\n  /**\n   * Calculate the angle  and the left,top position of the char that follow a path.\n   * It appends it to graphemeInfo to be reused later at rendering\n   * @private\n   * @param {Number} positionInPath to be measured\n   * @param {GraphemeBBox} graphemeInfo current grapheme box information\n   * @param {Object} startingPoint position of the point\n   */\n  _setGraphemeOnPath(positionInPath: number, graphemeInfo: GraphemeBBox) {\n    const centerPosition = positionInPath + graphemeInfo.kernedWidth / 2,\n      path = this.path!;\n\n    // we are at currentPositionOnPath. we want to know what point on the path is.\n    const info = getPointOnPath(path.path, centerPosition, path.segmentsInfo)!;\n    graphemeInfo.renderLeft = info.x - path.pathOffset.x;\n    graphemeInfo.renderTop = info.y - path.pathOffset.y;\n    graphemeInfo.angle = info.angle + (this.pathSide === RIGHT ? Math.PI : 0);\n  }\n\n  /**\n   *\n   * @param {String} grapheme to be measured\n   * @param {Number} lineIndex index of the line where the char is\n   * @param {Number} charIndex position in the line\n   * @param {String} [prevGrapheme] character preceding the one to be measured\n   * @returns {GraphemeBBox} grapheme bbox\n   */\n  _getGraphemeBox(\n    grapheme: string,\n    lineIndex: number,\n    charIndex: number,\n    prevGrapheme?: string,\n    skipLeft?: boolean\n  ): GraphemeBBox {\n    const style = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n      prevStyle = prevGrapheme\n        ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1)\n        : {},\n      info = this._measureChar(grapheme, style, prevGrapheme, prevStyle);\n    let kernedWidth = info.kernedWidth,\n      width = info.width,\n      charSpacing;\n\n    if (this.charSpacing !== 0) {\n      charSpacing = this._getWidthOfCharSpacing();\n      width += charSpacing;\n      kernedWidth += charSpacing;\n    }\n\n    const box: GraphemeBBox = {\n      width,\n      left: 0,\n      height: style.fontSize,\n      kernedWidth,\n      deltaY: style.deltaY,\n    };\n    if (charIndex > 0 && !skipLeft) {\n      const previousBox = this.__charBounds[lineIndex][charIndex - 1];\n      box.left =\n        previousBox.left + previousBox.width + info.kernedWidth - info.width;\n    }\n    return box;\n  }\n\n  /**\n   * Calculate height of line at 'lineIndex'\n   * @param {Number} lineIndex index of line to calculate\n   * @return {Number}\n   */\n  getHeightOfLine(lineIndex: number): number {\n    if (this.__lineHeights[lineIndex]) {\n      return this.__lineHeights[lineIndex];\n    }\n\n    // char 0 is measured before the line cycle because it needs to char\n    // emptylines\n    let maxHeight = this.getHeightOfChar(lineIndex, 0);\n    for (let i = 1, len = this._textLines[lineIndex].length; i < len; i++) {\n      maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);\n    }\n\n    return (this.__lineHeights[lineIndex] =\n      maxHeight * this.lineHeight * this._fontSizeMult);\n  }\n\n  /**\n   * Calculate text box height\n   */\n  calcTextHeight() {\n    let lineHeight,\n      height = 0;\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      lineHeight = this.getHeightOfLine(i);\n      height += i === len - 1 ? lineHeight / this.lineHeight : lineHeight;\n    }\n    return height;\n  }\n\n  /**\n   * @private\n   * @return {Number} Left offset\n   */\n  _getLeftOffset(): number {\n    return this.direction === 'ltr' ? -this.width / 2 : this.width / 2;\n  }\n\n  /**\n   * @private\n   * @return {Number} Top offset\n   */\n  _getTopOffset(): number {\n    return -this.height / 2;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {String} method Method name (\"fillText\" or \"strokeText\")\n   */\n  _renderTextCommon(\n    ctx: CanvasRenderingContext2D,\n    method: 'fillText' | 'strokeText'\n  ) {\n    ctx.save();\n    let lineHeights = 0;\n    const left = this._getLeftOffset(),\n      top = this._getTopOffset();\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i),\n        maxHeight = heightOfLine / this.lineHeight,\n        leftOffset = this._getLineLeftOffset(i);\n      this._renderTextLine(\n        method,\n        ctx,\n        this._textLines[i],\n        left + leftOffset,\n        top + lineHeights + maxHeight,\n        i\n      );\n      lineHeights += heightOfLine;\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextFill(ctx: CanvasRenderingContext2D) {\n    if (!this.fill && !this.styleHas('fill')) {\n      return;\n    }\n\n    this._renderTextCommon(ctx, 'fillText');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextStroke(ctx: CanvasRenderingContext2D) {\n    if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {\n      return;\n    }\n\n    if (this.shadow && !this.shadow.affectStroke) {\n      this._removeShadow(ctx);\n    }\n\n    ctx.save();\n    this._setLineDash(ctx, this.strokeDashArray);\n    ctx.beginPath();\n    this._renderTextCommon(ctx, 'strokeText');\n    ctx.closePath();\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {String} method fillText or strokeText.\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Array} line Content of the line, splitted in an array by grapheme\n   * @param {Number} left\n   * @param {Number} top\n   * @param {Number} lineIndex\n   */\n  _renderChars(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    line: Array<any>,\n    left: number,\n    top: number,\n    lineIndex: number\n  ) {\n    const lineHeight = this.getHeightOfLine(lineIndex),\n      isJustify = this.textAlign.includes(JUSTIFY),\n      path = this.path,\n      shortCut =\n        !isJustify &&\n        this.charSpacing === 0 &&\n        this.isEmptyStyles(lineIndex) &&\n        !path,\n      isLtr = this.direction === 'ltr',\n      sign = this.direction === 'ltr' ? 1 : -1,\n      // this was changed in the PR #7674\n      // currentDirection = ctx.canvas.getAttribute('dir');\n      currentDirection = ctx.direction;\n\n    let actualStyle,\n      nextStyle,\n      charsToRender = '',\n      charBox,\n      boxWidth = 0,\n      timeToRender,\n      drawingLeft;\n\n    ctx.save();\n    if (currentDirection !== this.direction) {\n      ctx.canvas.setAttribute('dir', isLtr ? 'ltr' : 'rtl');\n      ctx.direction = isLtr ? 'ltr' : 'rtl';\n      ctx.textAlign = isLtr ? LEFT : RIGHT;\n    }\n    top -= (lineHeight * this._fontSizeFraction) / this.lineHeight;\n    if (shortCut) {\n      // render all the line in one pass without checking\n      // drawingLeft = isLtr ? left : left - this.getLineWidth(lineIndex);\n      this._renderChar(method, ctx, lineIndex, 0, line.join(''), left, top);\n      ctx.restore();\n      return;\n    }\n    for (let i = 0, len = line.length - 1; i <= len; i++) {\n      timeToRender = i === len || this.charSpacing || path;\n      charsToRender += line[i];\n      charBox = this.__charBounds[lineIndex][i] as Required<GraphemeBBox>;\n      if (boxWidth === 0) {\n        left += sign * (charBox.kernedWidth - charBox.width);\n        boxWidth += charBox.width;\n      } else {\n        boxWidth += charBox.kernedWidth;\n      }\n      if (isJustify && !timeToRender) {\n        if (this._reSpaceAndTab.test(line[i])) {\n          timeToRender = true;\n        }\n      }\n      if (!timeToRender) {\n        // if we have charSpacing, we render char by char\n        actualStyle =\n          actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n        nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n        timeToRender = hasStyleChanged(actualStyle, nextStyle, false);\n      }\n      if (timeToRender) {\n        if (path) {\n          ctx.save();\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          this._renderChar(\n            method,\n            ctx,\n            lineIndex,\n            i,\n            charsToRender,\n            -boxWidth / 2,\n            0\n          );\n          ctx.restore();\n        } else {\n          drawingLeft = left;\n          this._renderChar(\n            method,\n            ctx,\n            lineIndex,\n            i,\n            charsToRender,\n            drawingLeft,\n            top\n          );\n        }\n        charsToRender = '';\n        actualStyle = nextStyle;\n        left += sign * boxWidth;\n        boxWidth = 0;\n      }\n    }\n    ctx.restore();\n  }\n\n  /**\n   * This function try to patch the missing gradientTransform on canvas gradients.\n   * transforming a context to transform the gradient, is going to transform the stroke too.\n   * we want to transform the gradient but not the stroke operation, so we create\n   * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n   * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n   * is limited.\n   * @private\n   * @param {TFiller} filler a fabric gradient instance\n   * @return {CanvasPattern} a pattern to use as fill/stroke style\n   */\n  _applyPatternGradientTransformText(filler: TFiller) {\n    const pCanvas = createCanvasElement(),\n      // TODO: verify compatibility with strokeUniform\n      width = this.width + this.strokeWidth,\n      height = this.height + this.strokeWidth,\n      pCtx = pCanvas.getContext('2d')!;\n    pCanvas.width = width;\n    pCanvas.height = height;\n    pCtx.beginPath();\n    pCtx.moveTo(0, 0);\n    pCtx.lineTo(width, 0);\n    pCtx.lineTo(width, height);\n    pCtx.lineTo(0, height);\n    pCtx.closePath();\n    pCtx.translate(width / 2, height / 2);\n    pCtx.fillStyle = filler.toLive(pCtx)!;\n    this._applyPatternGradientTransform(pCtx, filler);\n    pCtx.fill();\n    return pCtx.createPattern(pCanvas, 'no-repeat')!;\n  }\n\n  handleFiller<T extends 'fill' | 'stroke'>(\n    ctx: CanvasRenderingContext2D,\n    property: `${T}Style`,\n    filler: TFiller | string\n  ): { offsetX: number; offsetY: number } {\n    let offsetX: number, offsetY: number;\n    if (isFiller(filler)) {\n      if (\n        (filler as Gradient<'linear'>).gradientUnits === 'percentage' ||\n        (filler as Gradient<'linear'>).gradientTransform ||\n        (filler as Pattern).patternTransform\n      ) {\n        // need to transform gradient in a pattern.\n        // this is a slow process. If you are hitting this codepath, and the object\n        // is not using caching, you should consider switching it on.\n        // we need a canvas as big as the current object caching canvas.\n        offsetX = -this.width / 2;\n        offsetY = -this.height / 2;\n        ctx.translate(offsetX, offsetY);\n        ctx[property] = this._applyPatternGradientTransformText(filler);\n        return { offsetX, offsetY };\n      } else {\n        // is a simple gradient or pattern\n        ctx[property] = filler.toLive(ctx)!;\n        return this._applyPatternGradientTransform(ctx, filler);\n      }\n    } else {\n      // is a color\n      ctx[property] = filler;\n    }\n    return { offsetX: 0, offsetY: 0 };\n  }\n\n  /**\n   * This function prepare the canvas for a stroke style, and stroke and strokeWidth\n   * need to be sent in as defined\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {CompleteTextStyleDeclaration} style with stroke and strokeWidth defined\n   * @returns\n   */\n  _setStrokeStyles(\n    ctx: CanvasRenderingContext2D,\n    {\n      stroke,\n      strokeWidth,\n    }: Pick<CompleteTextStyleDeclaration, 'stroke' | 'strokeWidth'>\n  ) {\n    ctx.lineWidth = strokeWidth;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.lineDashOffset = this.strokeDashOffset;\n    ctx.lineJoin = this.strokeLineJoin;\n    ctx.miterLimit = this.strokeMiterLimit;\n    return this.handleFiller(ctx, 'strokeStyle', stroke!);\n  }\n\n  /**\n   * This function prepare the canvas for a ill style, and fill\n   * need to be sent in as defined\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {CompleteTextStyleDeclaration} style with ill defined\n   * @returns\n   */\n  _setFillStyles(ctx: CanvasRenderingContext2D, { fill }: Pick<this, 'fill'>) {\n    return this.handleFiller(ctx, 'fillStyle', fill!);\n  }\n\n  /**\n   * @private\n   * @param {String} method\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {String} _char\n   * @param {Number} left Left coordinate\n   * @param {Number} top Top coordinate\n   * @param {Number} lineHeight Height of the line\n   */\n  _renderChar(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    lineIndex: number,\n    charIndex: number,\n    _char: string,\n    left: number,\n    top: number\n  ) {\n    const decl = this._getStyleDeclaration(lineIndex, charIndex),\n      fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n      shouldFill = method === 'fillText' && fullDecl.fill,\n      shouldStroke =\n        method === 'strokeText' && fullDecl.stroke && fullDecl.strokeWidth;\n\n    if (!shouldStroke && !shouldFill) {\n      return;\n    }\n    ctx.save();\n\n    ctx.font = this._getFontDeclaration(fullDecl);\n\n    if (decl.textBackgroundColor) {\n      this._removeShadow(ctx);\n    }\n    if (decl.deltaY) {\n      top += decl.deltaY;\n    }\n\n    if (shouldFill) {\n      const fillOffsets = this._setFillStyles(ctx, fullDecl);\n      ctx.fillText(\n        _char,\n        left - fillOffsets.offsetX,\n        top - fillOffsets.offsetY\n      );\n    }\n\n    if (shouldStroke) {\n      const strokeOffsets = this._setStrokeStyles(ctx, fullDecl);\n      ctx.strokeText(\n        _char,\n        left - strokeOffsets.offsetX,\n        top - strokeOffsets.offsetY\n      );\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * Turns the character into a 'superior figure' (i.e. 'superscript')\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   */\n  setSuperscript(start: number, end: number) {\n    this._setScript(start, end, this.superscript);\n  }\n\n  /**\n   * Turns the character into an 'inferior figure' (i.e. 'subscript')\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   */\n  setSubscript(start: number, end: number) {\n    this._setScript(start, end, this.subscript);\n  }\n\n  /**\n   * Applies 'schema' at given position\n   * @private\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   * @param {Number} schema\n   */\n  protected _setScript(\n    start: number,\n    end: number,\n    schema: {\n      size: number;\n      baseline: number;\n    }\n  ) {\n    const loc = this.get2DCursorLocation(start, true),\n      fontSize = this.getValueOfPropertyAt(\n        loc.lineIndex,\n        loc.charIndex,\n        'fontSize'\n      ),\n      dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'deltaY'),\n      style = {\n        fontSize: fontSize * schema.size,\n        deltaY: dy + fontSize * schema.baseline,\n      };\n    this.setSelectionStyles(style, start, end);\n  }\n\n  /**\n   * @private\n   * @param {Number} lineIndex index text line\n   * @return {Number} Line left offset\n   */\n  _getLineLeftOffset(lineIndex: number): number {\n    const lineWidth = this.getLineWidth(lineIndex),\n      lineDiff = this.width - lineWidth,\n      textAlign = this.textAlign,\n      direction = this.direction,\n      isEndOfWrapping = this.isEndOfWrapping(lineIndex);\n    let leftOffset = 0;\n    if (\n      textAlign === JUSTIFY ||\n      (textAlign === JUSTIFY_CENTER && !isEndOfWrapping) ||\n      (textAlign === JUSTIFY_RIGHT && !isEndOfWrapping) ||\n      (textAlign === JUSTIFY_LEFT && !isEndOfWrapping)\n    ) {\n      return 0;\n    }\n    if (textAlign === CENTER) {\n      leftOffset = lineDiff / 2;\n    }\n    if (textAlign === RIGHT) {\n      leftOffset = lineDiff;\n    }\n    if (textAlign === JUSTIFY_CENTER) {\n      leftOffset = lineDiff / 2;\n    }\n    if (textAlign === JUSTIFY_RIGHT) {\n      leftOffset = lineDiff;\n    }\n    if (direction === 'rtl') {\n      if (\n        textAlign === RIGHT ||\n        textAlign === JUSTIFY ||\n        textAlign === JUSTIFY_RIGHT\n      ) {\n        leftOffset = 0;\n      } else if (textAlign === LEFT || textAlign === JUSTIFY_LEFT) {\n        leftOffset = -lineDiff;\n      } else if (textAlign === CENTER || textAlign === JUSTIFY_CENTER) {\n        leftOffset = -lineDiff / 2;\n      }\n    }\n    return leftOffset;\n  }\n\n  /**\n   * @private\n   */\n  _clearCache() {\n    this._forceClearCache = false;\n    this.__lineWidths = [];\n    this.__lineHeights = [];\n    this.__charBounds = [];\n  }\n\n  /**\n   * Measure a single line given its index. Used to calculate the initial\n   * text bounding box. The values are calculated and stored in __lineWidths cache.\n   * @private\n   * @param {Number} lineIndex line number\n   * @return {Number} Line width\n   */\n  getLineWidth(lineIndex: number): number {\n    if (this.__lineWidths[lineIndex] !== undefined) {\n      return this.__lineWidths[lineIndex];\n    }\n\n    const { width } = this.measureLine(lineIndex);\n    this.__lineWidths[lineIndex] = width;\n    return width;\n  }\n\n  _getWidthOfCharSpacing() {\n    if (this.charSpacing !== 0) {\n      return (this.fontSize * this.charSpacing) / 1000;\n    }\n    return 0;\n  }\n\n  /**\n   * Retrieves the value of property at given character position\n   * @param {Number} lineIndex the line number\n   * @param {Number} charIndex the character number\n   * @param {String} property the property name\n   * @returns the value of 'property'\n   */\n  getValueOfPropertyAt<T extends StylePropertiesType>(\n    lineIndex: number,\n    charIndex: number,\n    property: T\n  ): this[T] {\n    const charStyle = this._getStyleDeclaration(lineIndex, charIndex);\n    return (charStyle[property] ?? this[property]) as this[T];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextDecoration(\n    ctx: CanvasRenderingContext2D,\n    type: 'underline' | 'linethrough' | 'overline'\n  ) {\n    if (!this[type] && !this.styleHas(type)) {\n      return;\n    }\n    let topOffset = this._getTopOffset();\n    const leftOffset = this._getLeftOffset(),\n      path = this.path,\n      charSpacing = this._getWidthOfCharSpacing(),\n      offsetY = this.offsets[type];\n\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i);\n      if (!this[type] && !this.styleHas(type, i)) {\n        topOffset += heightOfLine;\n        continue;\n      }\n      const line = this._textLines[i];\n      const maxHeight = heightOfLine / this.lineHeight;\n      const lineLeftOffset = this._getLineLeftOffset(i);\n      let boxStart = 0;\n      let boxWidth = 0;\n      let lastDecoration = this.getValueOfPropertyAt(i, 0, type);\n      let lastFill = this.getValueOfPropertyAt(i, 0, 'fill');\n      let currentDecoration;\n      let currentFill;\n      const top = topOffset + maxHeight * (1 - this._fontSizeFraction);\n      let size = this.getHeightOfChar(i, 0);\n      let dy = this.getValueOfPropertyAt(i, 0, 'deltaY');\n      for (let j = 0, jlen = line.length; j < jlen; j++) {\n        const charBox = this.__charBounds[i][j] as Required<GraphemeBBox>;\n        currentDecoration = this.getValueOfPropertyAt(i, j, type);\n        currentFill = this.getValueOfPropertyAt(i, j, 'fill');\n        const currentSize = this.getHeightOfChar(i, j);\n        const currentDy = this.getValueOfPropertyAt(i, j, 'deltaY');\n        if (path && currentDecoration && currentFill) {\n          ctx.save();\n          // bug? verify lastFill is a valid fill here.\n          ctx.fillStyle = lastFill as string;\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          ctx.fillRect(\n            -charBox.kernedWidth / 2,\n            offsetY * currentSize + currentDy,\n            charBox.kernedWidth,\n            this.fontSize / 15\n          );\n          ctx.restore();\n        } else if (\n          (currentDecoration !== lastDecoration ||\n            currentFill !== lastFill ||\n            currentSize !== size ||\n            currentDy !== dy) &&\n          boxWidth > 0\n        ) {\n          let drawStart = leftOffset + lineLeftOffset + boxStart;\n          if (this.direction === 'rtl') {\n            drawStart = this.width - drawStart - boxWidth;\n          }\n          if (lastDecoration && lastFill) {\n            // bug? verify lastFill is a valid fill here.\n            ctx.fillStyle = lastFill as string;\n            ctx.fillRect(\n              drawStart,\n              top + offsetY * size + dy,\n              boxWidth,\n              this.fontSize / 15\n            );\n          }\n          boxStart = charBox.left;\n          boxWidth = charBox.width;\n          lastDecoration = currentDecoration;\n          lastFill = currentFill;\n          size = currentSize;\n          dy = currentDy;\n        } else {\n          boxWidth += charBox.kernedWidth;\n        }\n      }\n      let drawStart = leftOffset + lineLeftOffset + boxStart;\n      if (this.direction === 'rtl') {\n        drawStart = this.width - drawStart - boxWidth;\n      }\n      ctx.fillStyle = currentFill as string;\n      currentDecoration &&\n        currentFill &&\n        ctx.fillRect(\n          drawStart,\n          top + offsetY * size + dy,\n          boxWidth - charSpacing,\n          this.fontSize / 15\n        );\n      topOffset += heightOfLine;\n    }\n    // if there is text background color no\n    // other shadows should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * return font declaration string for canvas context\n   * @param {Object} [styleObject] object\n   * @returns {String} font declaration formatted for canvas context.\n   */\n  _getFontDeclaration(\n    {\n      fontFamily = this.fontFamily,\n      fontStyle = this.fontStyle,\n      fontWeight = this.fontWeight,\n      fontSize = this.fontSize,\n    }: Partial<\n      Pick<\n        TextStyleDeclaration,\n        'fontFamily' | 'fontStyle' | 'fontWeight' | 'fontSize'\n      >\n    > = {},\n    forMeasuring?: boolean\n  ): string {\n    const parsedFontFamily =\n      fontFamily.includes(\"'\") ||\n      fontFamily.includes('\"') ||\n      fontFamily.includes(',') ||\n      FabricText.genericFonts.includes(fontFamily.toLowerCase())\n        ? fontFamily\n        : `\"${fontFamily}\"`;\n    return [\n      fontStyle,\n      fontWeight,\n      `${forMeasuring ? this.CACHE_FONT_SIZE : fontSize}px`,\n      parsedFontFamily,\n    ].join(' ');\n  }\n\n  /**\n   * Renders text instance on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    if (!this.visible) {\n      return;\n    }\n    if (\n      this.canvas &&\n      this.canvas.skipOffscreen &&\n      !this.group &&\n      !this.isOnScreen()\n    ) {\n      return;\n    }\n    if (this._forceClearCache) {\n      this.initDimensions();\n    }\n    super.render(ctx);\n  }\n\n  /**\n   * Override this method to customize grapheme splitting\n   * @todo the util `graphemeSplit` needs to be injectable in some way.\n   * is more comfortable to inject the correct util rather than having to override text\n   * in the middle of the prototype chain\n   * @param {string} value\n   * @returns {string[]} array of graphemes\n   */\n  graphemeSplit(value: string): string[] {\n    return graphemeSplit(value);\n  }\n\n  /**\n   * Returns the text as an array of lines.\n   * @param {String} text text to split\n   * @returns  Lines in the text\n   */\n  _splitTextIntoLines(text: string): TextLinesInfo {\n    const lines = text.split(this._reNewline),\n      newLines = new Array<string[]>(lines.length),\n      newLine = ['\\n'];\n    let newText: string[] = [];\n    for (let i = 0; i < lines.length; i++) {\n      newLines[i] = this.graphemeSplit(lines[i]);\n      newText = newText.concat(newLines[i], newLine);\n    }\n    newText.pop();\n    return {\n      _unwrappedLines: newLines,\n      lines: lines,\n      graphemeText: newText,\n      graphemeLines: newLines,\n    };\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject([...additionalProps, ...propertiesToInclude] as K[]),\n      styles: stylesToArray(this.styles, this.text),\n      ...(this.path ? { path: this.path.toObject() } : {}),\n    };\n  }\n\n  set(key: string | any, value?: any) {\n    const { textLayoutProperties } = this.constructor as typeof FabricText;\n    super.set(key, value);\n    let needsDims = false;\n    let isAddingPath = false;\n    if (typeof key === 'object') {\n      for (const _key in key) {\n        if (_key === 'path') {\n          this.setPathInfo();\n        }\n        needsDims = needsDims || textLayoutProperties.includes(_key);\n        isAddingPath = isAddingPath || _key === 'path';\n      }\n    } else {\n      needsDims = textLayoutProperties.includes(key);\n      isAddingPath = key === 'path';\n    }\n    if (isAddingPath) {\n      this.setPathInfo();\n    }\n    if (needsDims && this.initialized) {\n      this.initDimensions();\n      this.setCoords();\n    }\n    return this;\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity\n   */\n  complexity(): number {\n    return 1;\n  }\n\n  static genericFonts = [\n    'sans-serif',\n    'serif',\n    'cursive',\n    'fantasy',\n    'monospace',\n  ];\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link FabricText.fromElement})\n   * @static\n   * @memberOf Text\n   * @see: http://www.w3.org/TR/SVG/text.html#TextElement\n   */\n  static ATTRIBUTE_NAMES = SHARED_ATTRIBUTES.concat(\n    'x',\n    'y',\n    'dx',\n    'dy',\n    'font-family',\n    'font-style',\n    'font-weight',\n    'font-size',\n    'letter-spacing',\n    'text-decoration',\n    'text-anchor'\n  );\n\n  /**\n   * Returns FabricText instance from an SVG element (<b>not yet implemented</b>)\n   * @static\n   * @memberOf Text\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      FabricText.ATTRIBUTE_NAMES,\n      cssRules\n    );\n\n    const {\n      textAnchor = LEFT as typeof LEFT | typeof CENTER | typeof RIGHT,\n      textDecoration = '',\n      dx = 0,\n      dy = 0,\n      top = 0,\n      left = 0,\n      fontSize = DEFAULT_SVG_FONT_SIZE,\n      strokeWidth = 1,\n      ...restOfOptions\n    } = { ...options, ...parsedAttributes };\n\n    const textContent = (element.textContent || '')\n      .replace(/^\\s+|\\s+$|\\n+/g, '')\n      .replace(/\\s+/g, ' ');\n\n    // this code here is probably the usual issue for SVG center find\n    // this can later looked at again and probably removed.\n\n    const text = new this(textContent, {\n        left: left + dx,\n        top: top + dy,\n        underline: textDecoration.includes('underline'),\n        overline: textDecoration.includes('overline'),\n        linethrough: textDecoration.includes('line-through'),\n        // we initialize this as 0\n        strokeWidth: 0,\n        fontSize,\n        ...restOfOptions,\n      }),\n      textHeightScaleFactor = text.getScaledHeight() / text.height,\n      lineHeightDiff =\n        (text.height + text.strokeWidth) * text.lineHeight - text.height,\n      scaledDiff = lineHeightDiff * textHeightScaleFactor,\n      textHeight = text.getScaledHeight() + scaledDiff;\n\n    let offX = 0;\n    /*\n      Adjust positioning:\n        x/y attributes in SVG correspond to the bottom-left corner of text bounding box\n        fabric output by default at top, left.\n    */\n    if (textAnchor === CENTER) {\n      offX = text.getScaledWidth() / 2;\n    }\n    if (textAnchor === RIGHT) {\n      offX = text.getScaledWidth();\n    }\n    text.set({\n      left: text.left - offX,\n      top:\n        text.top -\n        (textHeight - text.fontSize * (0.07 + text._fontSizeFraction)) /\n          text.lineHeight,\n      strokeWidth,\n    });\n    return text;\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns FabricText instance from an object representation\n   * @param {Object} object plain js Object to create an instance from\n   * @returns {Promise<FabricText>}\n   */\n  static fromObject<\n    T extends TOptions<SerializedTextProps>,\n    S extends FabricText\n  >(object: T) {\n    return this._fromObject<S>(\n      {\n        ...object,\n        styles: stylesFromArray(object.styles || {}, object.text),\n      },\n      {\n        extraParam: 'text',\n      }\n    );\n  }\n}\n\napplyMixins(FabricText, [TextSVGExportMixin]);\nclassRegistry.setClass(FabricText);\nclassRegistry.setSVGClass(FabricText);\n", "import type { Canvas } from '../../canvas/Canvas';\nimport type {\n  DragEventData,\n  DropEventData,\n  TPointerEvent,\n} from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport type { IText } from './IText';\nimport { setStyle } from '../../util/dom_style';\nimport { cloneDeep } from '../../util/internals/cloneDeep';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { NONE } from '../../constants';\n\n/**\n * #### Dragging IText/Textbox Lifecycle\n * - {@link start} is called from `mousedown` {@link IText#_mouseDownHandler} and determines if dragging should start by testing {@link isPointerOverSelection}\n * - if true `mousedown` {@link IText#_mouseDownHandler} is blocked to keep selection\n * - if the pointer moves, canvas fires numerous mousemove {@link Canvas#_onMouseMove} that we make sure **aren't** prevented ({@link IText#shouldStartDragging}) in order for the window to start a drag session\n * - once/if the session starts canvas calls {@link onDragStart} on the active object to determine if dragging should occur\n * - canvas fires relevant drag events that are handled by the handlers defined in this scope\n * - {@link end} is called from `mouseup` {@link IText#mouseUpHandler}, blocking IText default click behavior\n * - in case the drag session didn't occur, {@link end} handles a click, since logic to do so was blocked during `mousedown`\n */\nexport class DraggableTextDelegate {\n  readonly target: IText;\n  private __mouseDownInPlace = false;\n  private __dragStartFired = false;\n  private __isDraggingOver = false;\n  private __dragStartSelection?: {\n    selectionStart: number;\n    selectionEnd: number;\n  };\n  private __dragImageDisposer?: VoidFunction;\n  private _dispose?: () => void;\n\n  constructor(target: IText) {\n    this.target = target;\n    const disposers = [\n      this.target.on('dragenter', this.dragEnterHandler.bind(this)),\n      this.target.on('dragover', this.dragOverHandler.bind(this)),\n      this.target.on('dragleave', this.dragLeaveHandler.bind(this)),\n      this.target.on('dragend', this.dragEndHandler.bind(this)),\n      this.target.on('drop', this.dropHandler.bind(this)),\n    ];\n    this._dispose = () => {\n      disposers.forEach((d) => d());\n      this._dispose = undefined;\n    };\n  }\n\n  isPointerOverSelection(e: TPointerEvent) {\n    const target = this.target;\n    const newSelection = target.getSelectionStartFromPointer(e);\n    return (\n      target.isEditing &&\n      newSelection >= target.selectionStart &&\n      newSelection <= target.selectionEnd &&\n      target.selectionStart < target.selectionEnd\n    );\n  }\n\n  /**\n   * @public override this method to disable dragging and default to mousedown logic\n   */\n  start(e: TPointerEvent) {\n    return (this.__mouseDownInPlace = this.isPointerOverSelection(e));\n  }\n\n  /**\n   * @public override this method to disable dragging without discarding selection\n   */\n  isActive() {\n    return this.__mouseDownInPlace;\n  }\n\n  /**\n   * Ends interaction and sets cursor in case of a click\n   * @returns true if was active\n   */\n  end(e: TPointerEvent) {\n    const active = this.isActive();\n    if (active && !this.__dragStartFired) {\n      // mousedown has been blocked since `active` is true => cursor has not been set.\n      // `__dragStartFired` is false => dragging didn't occur, pointer didn't move and is over selection.\n      // meaning this is actually a click, `active` is a false positive.\n      this.target.setCursorByClick(e);\n      this.target.initDelayedCursor(true);\n    }\n    this.__mouseDownInPlace = false;\n    this.__dragStartFired = false;\n    this.__isDraggingOver = false;\n    return active;\n  }\n\n  getDragStartSelection() {\n    return this.__dragStartSelection;\n  }\n\n  /**\n   * Override to customize the drag image\n   * https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage\n   */\n  setDragImage(\n    e: DragEvent,\n    {\n      selectionStart,\n      selectionEnd,\n    }: {\n      selectionStart: number;\n      selectionEnd: number;\n    }\n  ) {\n    const target = this.target;\n    const canvas = target.canvas!;\n    const flipFactor = new Point(target.flipX ? -1 : 1, target.flipY ? -1 : 1);\n    const boundaries = target._getCursorBoundaries(selectionStart);\n    const selectionPosition = new Point(\n      boundaries.left + boundaries.leftOffset,\n      boundaries.top + boundaries.topOffset\n    ).multiply(flipFactor);\n    const pos = selectionPosition.transform(target.calcTransformMatrix());\n    const pointer = canvas.getScenePoint(e);\n    const diff = pointer.subtract(pos);\n    const retinaScaling = target.getCanvasRetinaScaling();\n    const bbox = target.getBoundingRect();\n    const correction = pos.subtract(new Point(bbox.left, bbox.top));\n    const vpt = canvas.viewportTransform;\n    const offset = correction.add(diff).transform(vpt, true);\n    //  prepare instance for drag image snapshot by making all non selected text invisible\n    const bgc = target.backgroundColor;\n    const styles = cloneDeep(target.styles);\n    target.backgroundColor = '';\n    const styleOverride = {\n      stroke: 'transparent',\n      fill: 'transparent',\n      textBackgroundColor: 'transparent',\n    };\n    target.setSelectionStyles(styleOverride, 0, selectionStart);\n    target.setSelectionStyles(styleOverride, selectionEnd, target.text.length);\n    target.dirty = true;\n    const dragImage = target.toCanvasElement({\n      enableRetinaScaling: canvas.enableRetinaScaling,\n      viewportTransform: true,\n    });\n    // restore values\n    target.backgroundColor = bgc;\n    target.styles = styles;\n    target.dirty = true;\n    //  position drag image offscreen\n    setStyle(dragImage, {\n      position: 'fixed',\n      left: `${-dragImage.width}px`,\n      border: NONE,\n      width: `${dragImage.width / retinaScaling}px`,\n      height: `${dragImage.height / retinaScaling}px`,\n    });\n    this.__dragImageDisposer && this.__dragImageDisposer();\n    this.__dragImageDisposer = () => {\n      dragImage.remove();\n    };\n    getDocumentFromElement(\n      (e.target || this.target.hiddenTextarea)! as HTMLElement\n    ).body.appendChild(dragImage);\n    e.dataTransfer?.setDragImage(dragImage, offset.x, offset.y);\n  }\n\n  /**\n   * @returns {boolean} determines whether {@link target} should/shouldn't become a drag source\n   */\n  onDragStart(e: DragEvent): boolean {\n    this.__dragStartFired = true;\n    const target = this.target;\n    const active = this.isActive();\n    if (active && e.dataTransfer) {\n      const selection = (this.__dragStartSelection = {\n        selectionStart: target.selectionStart,\n        selectionEnd: target.selectionEnd,\n      });\n      const value = target._text\n        .slice(selection.selectionStart, selection.selectionEnd)\n        .join('');\n      const data = { text: target.text, value, ...selection };\n      e.dataTransfer.setData('text/plain', value);\n      e.dataTransfer.setData(\n        'application/fabric',\n        JSON.stringify({\n          value: value,\n          styles: target.getSelectionStyles(\n            selection.selectionStart,\n            selection.selectionEnd,\n            true\n          ),\n        })\n      );\n      e.dataTransfer.effectAllowed = 'copyMove';\n      this.setDragImage(e, data);\n    }\n    target.abortCursorAnimation();\n    return active;\n  }\n\n  /**\n   * use {@link targetCanDrop} to respect overriding\n   * @returns {boolean} determines whether {@link target} should/shouldn't become a drop target\n   */\n  canDrop(e: DragEvent): boolean {\n    if (\n      this.target.editable &&\n      !this.target.getActiveControl() &&\n      !e.defaultPrevented\n    ) {\n      if (this.isActive() && this.__dragStartSelection) {\n        //  drag source trying to drop over itself\n        //  allow dropping only outside of drag start selection\n        const index = this.target.getSelectionStartFromPointer(e);\n        const dragStartSelection = this.__dragStartSelection;\n        return (\n          index < dragStartSelection.selectionStart ||\n          index > dragStartSelection.selectionEnd\n        );\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * in order to respect overriding {@link IText#canDrop} we call that instead of calling {@link canDrop} directly\n   */\n  protected targetCanDrop(e: DragEvent) {\n    return this.target.canDrop(e);\n  }\n\n  dragEnterHandler({ e }: DragEventData) {\n    const canDrop = this.targetCanDrop(e);\n    if (!this.__isDraggingOver && canDrop) {\n      this.__isDraggingOver = true;\n    }\n  }\n\n  dragOverHandler(ev: DragEventData) {\n    const { e } = ev;\n    const canDrop = this.targetCanDrop(e);\n    if (!this.__isDraggingOver && canDrop) {\n      this.__isDraggingOver = true;\n    } else if (this.__isDraggingOver && !canDrop) {\n      //  drop state has changed\n      this.__isDraggingOver = false;\n    }\n    if (this.__isDraggingOver) {\n      //  can be dropped, inform browser\n      e.preventDefault();\n      //  inform event subscribers\n      ev.canDrop = true;\n      ev.dropTarget = this.target;\n    }\n  }\n\n  dragLeaveHandler() {\n    if (this.__isDraggingOver || this.isActive()) {\n      this.__isDraggingOver = false;\n    }\n  }\n\n  /**\n   * Override the `text/plain | application/fabric` types of {@link DragEvent#dataTransfer}\n   * in order to change the drop value or to customize styling respectively, by listening to the `drop:before` event\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#performing_a_drop\n   */\n  dropHandler(ev: DropEventData) {\n    const { e } = ev;\n    const didDrop = e.defaultPrevented;\n    this.__isDraggingOver = false;\n    // inform browser that the drop has been accepted\n    e.preventDefault();\n    let insert = e.dataTransfer?.getData('text/plain');\n    if (insert && !didDrop) {\n      const target = this.target;\n      const canvas = target.canvas!;\n      let insertAt = target.getSelectionStartFromPointer(e);\n      const { styles } = (\n        e.dataTransfer!.types.includes('application/fabric')\n          ? JSON.parse(e.dataTransfer!.getData('application/fabric'))\n          : {}\n      ) as { styles: TextStyleDeclaration[] };\n      const trailing = insert[Math.max(0, insert.length - 1)];\n      const selectionStartOffset = 0;\n      //  drag and drop in same instance\n      if (this.__dragStartSelection) {\n        const selectionStart = this.__dragStartSelection.selectionStart;\n        const selectionEnd = this.__dragStartSelection.selectionEnd;\n        if (insertAt > selectionStart && insertAt <= selectionEnd) {\n          insertAt = selectionStart;\n        } else if (insertAt > selectionEnd) {\n          insertAt -= selectionEnd - selectionStart;\n        }\n        target.removeChars(selectionStart, selectionEnd);\n        // prevent `dragend` from handling event\n        delete this.__dragStartSelection;\n      }\n      //  remove redundant line break\n      if (\n        target._reNewline.test(trailing) &&\n        (target._reNewline.test(target._text[insertAt]) ||\n          insertAt === target._text.length)\n      ) {\n        insert = insert.trimEnd();\n      }\n      //  inform subscribers\n      ev.didDrop = true;\n      ev.dropTarget = target;\n      //  finalize\n      target.insertChars(insert, styles, insertAt);\n      // can this part be moved in an outside event? andrea to check.\n      canvas.setActiveObject(target);\n      target.enterEditing(e);\n      target.selectionStart = Math.min(\n        insertAt + selectionStartOffset,\n        target._text.length\n      );\n      target.selectionEnd = Math.min(\n        target.selectionStart + insert.length,\n        target._text.length\n      );\n      target.hiddenTextarea!.value = target.text;\n      target._updateTextarea();\n      target.hiddenTextarea!.focus();\n      target.fire('changed', {\n        index: insertAt + selectionStartOffset,\n        action: 'drop',\n      });\n      canvas.fire('text:changed', { target });\n      canvas.contextTopDirty = true;\n      canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * fired only on the drag source after drop (if occurred)\n   * handle changes to the drag source in case of a drop on another object or a cancellation\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#finishing_a_drag\n   */\n  dragEndHandler({ e }: DragEventData) {\n    if (this.isActive() && this.__dragStartFired) {\n      //  once the drop event finishes we check if we need to change the drag source\n      //  if the drag source received the drop we bail out since the drop handler has already handled logic\n      if (this.__dragStartSelection) {\n        const target = this.target;\n        const canvas = this.target.canvas!;\n        const { selectionStart, selectionEnd } = this.__dragStartSelection;\n        const dropEffect = e.dataTransfer?.dropEffect || NONE;\n        if (dropEffect === NONE) {\n          // pointer is back over selection\n          target.selectionStart = selectionStart;\n          target.selectionEnd = selectionEnd;\n          target._updateTextarea();\n          target.hiddenTextarea!.focus();\n        } else {\n          target.clearContextTop();\n          if (dropEffect === 'move') {\n            target.removeChars(selectionStart, selectionEnd);\n            target.selectionStart = target.selectionEnd = selectionStart;\n            target.hiddenTextarea &&\n              (target.hiddenTextarea.value = target.text);\n            target._updateTextarea();\n            target.fire('changed', {\n              index: selectionStart,\n              action: 'dragend',\n            });\n            canvas.fire('text:changed', { target });\n            canvas.requestRenderAll();\n          }\n          target.exitEditing();\n        }\n      }\n    }\n\n    this.__dragImageDisposer && this.__dragImageDisposer();\n    delete this.__dragImageDisposer;\n    delete this.__dragStartSelection;\n    this.__isDraggingOver = false;\n  }\n\n  dispose() {\n    this._dispose && this._dispose();\n  }\n}\n", "import type {\n  ObjectEvents,\n  TPointerEvent,\n  TPointerEventInfo,\n} from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport type { FabricObject } from '../Object/FabricObject';\nimport { FabricText } from '../Text/Text';\nimport { animate } from '../../util/animation/animate';\nimport type { TOnAnimationChangeCallback } from '../../util/animation/types';\nimport type { ValueAnimation } from '../../util/animation/ValueAnimation';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\nimport type { SerializedTextProps, TextProps } from '../Text/Text';\nimport type { TOptions } from '../../typedefs';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { LEFT, RIGHT, reNewline } from '../../constants';\nimport type { IText } from './IText';\n\n/**\n *  extend this regex to support non english languages\n *\n *  - ` `      Matches a SPACE character (char code 32).\n *  - `\\n`     Matches a LINE FEED character (char code 10).\n *  - `\\.`     Matches a \".\" character (char code 46).\n *  - `,`      Matches a \",\" character (char code 44).\n *  - `;`      Matches a \";\" character (char code 59).\n *  - `!`      Matches a \"!\" character (char code 33).\n *  - `\\?`     Matches a \"?\" character (char code 63).\n *  - `\\-`     Matches a \"-\" character (char code 45).\n */\n// eslint-disable-next-line no-useless-escape\nconst reNonWord = /[ \\n\\.,;!\\?\\-]/;\n\nexport type ITextEvents = ObjectEvents & {\n  'selection:changed': never;\n  changed: never | { index: number; action: string };\n  tripleclick: TPointerEventInfo;\n  'editing:entered': never | { e: TPointerEvent };\n  'editing:exited': never;\n};\n\nexport abstract class ITextBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents\n> extends FabricText<Props, SProps, EventSpec> {\n  declare abstract isEditing: boolean;\n  declare abstract cursorDelay: number;\n  declare abstract selectionStart: number;\n  declare abstract selectionEnd: number;\n  declare abstract cursorDuration: number;\n  declare abstract editable: boolean;\n  declare abstract editingBorderColor: string;\n\n  declare abstract compositionStart: number;\n  declare abstract compositionEnd: number;\n\n  declare abstract hiddenTextarea: HTMLTextAreaElement | null;\n\n  /**\n   * Helps determining when the text is in composition, so that the cursor\n   * rendering is altered.\n   */\n  protected declare inCompositionMode: boolean;\n\n  protected declare _reSpace: RegExp;\n  private declare _currentTickState?: ValueAnimation;\n  private declare _currentTickCompleteState?: ValueAnimation;\n  protected _currentCursorOpacity = 1;\n  private declare _textBeforeEdit: string;\n  protected declare __selectionStartOnMouseDown: number;\n\n  protected declare selected: boolean;\n  protected declare cursorOffsetCache: { left?: number; top?: number };\n  protected declare _savedProps?: {\n    hasControls: boolean;\n    borderColor: string;\n    lockMovementX: boolean;\n    lockMovementY: boolean;\n    selectable: boolean;\n    hoverCursor: CSSStyleDeclaration['cursor'] | null;\n    defaultCursor?: CSSStyleDeclaration['cursor'];\n    moveCursor?: CSSStyleDeclaration['cursor'];\n  };\n  protected declare _selectionDirection: 'left' | 'right' | null;\n\n  abstract initHiddenTextarea(): void;\n  abstract _fireSelectionChanged(): void;\n  abstract renderCursorOrSelection(): void;\n  abstract getSelectionStartFromPointer(e: TPointerEvent): number;\n  abstract _getCursorBoundaries(\n    index: number,\n    skipCaching?: boolean\n  ): {\n    left: number;\n    top: number;\n    leftOffset: number;\n    topOffset: number;\n  };\n\n  /**\n   * Initializes all the interactive behavior of IText\n   */\n  initBehavior() {\n    this._tick = this._tick.bind(this);\n    this._onTickComplete = this._onTickComplete.bind(this);\n    this.updateSelectionOnMouseMove =\n      this.updateSelectionOnMouseMove.bind(this);\n  }\n\n  onDeselect(options?: { e?: TPointerEvent; object?: FabricObject }) {\n    this.isEditing && this.exitEditing();\n    this.selected = false;\n    return super.onDeselect(options);\n  }\n\n  /**\n   * @private\n   */\n  _animateCursor({\n    toValue,\n    duration,\n    delay,\n    onComplete,\n  }: {\n    toValue: number;\n    duration: number;\n    delay?: number;\n    onComplete?: TOnAnimationChangeCallback<number, void>;\n  }) {\n    return animate({\n      startValue: this._currentCursorOpacity,\n      endValue: toValue,\n      duration,\n      delay,\n      onComplete,\n      abort: () =>\n        !this.canvas ||\n        // we do not want to animate a selection, only cursor\n        this.selectionStart !== this.selectionEnd,\n      onChange: (value) => {\n        this._currentCursorOpacity = value;\n        this.renderCursorOrSelection();\n      },\n    });\n  }\n\n  /**\n   * changes the cursor from visible to invisible\n   */\n  private _tick(delay?: number) {\n    this._currentTickState = this._animateCursor({\n      toValue: 0,\n      duration: this.cursorDuration / 2,\n      delay: Math.max(delay || 0, 100),\n      onComplete: this._onTickComplete,\n    });\n  }\n\n  /**\n   * Changes the cursor from invisible to visible\n   */\n  private _onTickComplete() {\n    this._currentTickCompleteState?.abort();\n    this._currentTickCompleteState = this._animateCursor({\n      toValue: 1,\n      duration: this.cursorDuration,\n      onComplete: this._tick,\n    });\n  }\n\n  /**\n   * Initializes delayed cursor\n   */\n  initDelayedCursor(restart?: boolean) {\n    this.abortCursorAnimation();\n    this._tick(restart ? 0 : this.cursorDelay);\n  }\n\n  /**\n   * Aborts cursor animation, clears all timeouts and clear textarea context if necessary\n   */\n  abortCursorAnimation() {\n    let shouldClear = false;\n    [this._currentTickState, this._currentTickCompleteState].forEach(\n      (cursorAnimation) => {\n        if (cursorAnimation && !cursorAnimation.isDone()) {\n          shouldClear = true;\n          cursorAnimation.abort();\n        }\n      }\n    );\n\n    this._currentCursorOpacity = 1;\n\n    //  make sure we clear context even if instance is not editing\n    if (shouldClear) {\n      this.clearContextTop();\n    }\n  }\n\n  /**\n   * Restart tue cursor animation if either is in complete state ( between animations )\n   * or if it never started before\n   */\n  restartCursorIfNeeded() {\n    if (\n      [this._currentTickState, this._currentTickCompleteState].some(\n        (cursorAnimation) => !cursorAnimation || cursorAnimation.isDone()\n      )\n    ) {\n      this.initDelayedCursor();\n    }\n  }\n\n  /**\n   * Selects entire text\n   */\n  selectAll() {\n    this.selectionStart = 0;\n    this.selectionEnd = this._text.length;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    return this;\n  }\n\n  /**\n   * Returns selected text\n   * @return {String}\n   */\n  getSelectedText(): string {\n    return this._text.slice(this.selectionStart, this.selectionEnd).join('');\n  }\n\n  /**\n   * Find new selection index representing start of current word according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findWordBoundaryLeft(startFrom: number): number {\n    let offset = 0,\n      index = startFrom - 1;\n\n    // remove space before cursor first\n    if (this._reSpace.test(this._text[index])) {\n      while (this._reSpace.test(this._text[index])) {\n        offset++;\n        index--;\n      }\n    }\n    while (/\\S/.test(this._text[index]) && index > -1) {\n      offset++;\n      index--;\n    }\n\n    return startFrom - offset;\n  }\n\n  /**\n   * Find new selection index representing end of current word according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findWordBoundaryRight(startFrom: number): number {\n    let offset = 0,\n      index = startFrom;\n\n    // remove space after cursor first\n    if (this._reSpace.test(this._text[index])) {\n      while (this._reSpace.test(this._text[index])) {\n        offset++;\n        index++;\n      }\n    }\n    while (/\\S/.test(this._text[index]) && index < this._text.length) {\n      offset++;\n      index++;\n    }\n\n    return startFrom + offset;\n  }\n\n  /**\n   * Find new selection index representing start of current line according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findLineBoundaryLeft(startFrom: number): number {\n    let offset = 0,\n      index = startFrom - 1;\n\n    while (!/\\n/.test(this._text[index]) && index > -1) {\n      offset++;\n      index--;\n    }\n\n    return startFrom - offset;\n  }\n\n  /**\n   * Find new selection index representing end of current line according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findLineBoundaryRight(startFrom: number): number {\n    let offset = 0,\n      index = startFrom;\n\n    while (!/\\n/.test(this._text[index]) && index < this._text.length) {\n      offset++;\n      index++;\n    }\n\n    return startFrom + offset;\n  }\n\n  /**\n   * Finds index corresponding to beginning or end of a word\n   * @param {Number} selectionStart Index of a character\n   * @param {Number} direction 1 or -1\n   * @return {Number} Index of the beginning or end of a word\n   */\n  searchWordBoundary(selectionStart: number, direction: 1 | -1): number {\n    const text = this._text;\n    // if we land on a space we move the cursor backwards\n    // if we are searching boundary end we move the cursor backwards ONLY if we don't land on a line break\n    let index =\n        selectionStart > 0 &&\n        this._reSpace.test(text[selectionStart]) &&\n        (direction === -1 || !reNewline.test(text[selectionStart - 1]))\n          ? selectionStart - 1\n          : selectionStart,\n      _char = text[index];\n    while (index > 0 && index < text.length && !reNonWord.test(_char)) {\n      index += direction;\n      _char = text[index];\n    }\n    if (direction === -1 && reNonWord.test(_char)) {\n      index++;\n    }\n    return index;\n  }\n\n  /**\n   * TODO fix: selectionStart set as 0 will be ignored?\n   * Selects a word based on the index\n   * @param {Number} selectionStart Index of a character\n   */\n  selectWord(selectionStart?: number) {\n    selectionStart = selectionStart || this.selectionStart;\n    // search backwards\n    const newSelectionStart = this.searchWordBoundary(selectionStart, -1),\n      // search forward\n      newSelectionEnd = Math.max(\n        newSelectionStart,\n        this.searchWordBoundary(selectionStart, 1)\n      );\n\n    this.selectionStart = newSelectionStart;\n    this.selectionEnd = newSelectionEnd;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * TODO fix: selectionStart set as 0 will be ignored?\n   * Selects a line based on the index\n   * @param {Number} selectionStart Index of a character\n   */\n  selectLine(selectionStart?: number) {\n    selectionStart = selectionStart || this.selectionStart;\n    const newSelectionStart = this.findLineBoundaryLeft(selectionStart),\n      newSelectionEnd = this.findLineBoundaryRight(selectionStart);\n\n    this.selectionStart = newSelectionStart;\n    this.selectionEnd = newSelectionEnd;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    return this;\n  }\n\n  /**\n   * Enters editing state\n   */\n  enterEditing(e?: TPointerEvent) {\n    if (this.isEditing || !this.editable) {\n      return;\n    }\n    if (this.canvas) {\n      this.canvas.calcOffset();\n      this.canvas.textEditingManager.exitTextEditing();\n    }\n\n    this.isEditing = true;\n\n    this.initHiddenTextarea();\n    this.hiddenTextarea!.focus();\n    this.hiddenTextarea!.value = this.text;\n    this._updateTextarea();\n    this._saveEditingProps();\n    this._setEditingProps();\n    this._textBeforeEdit = this.text;\n\n    this._tick();\n    this.fire('editing:entered', e ? { e } : undefined);\n    this._fireSelectionChanged();\n    if (this.canvas) {\n      // @ts-expect-error in reality it is an IText instance\n      this.canvas.fire('text:editing:entered', { target: this, e });\n      this.canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * called by {@link Canvas#textEditingManager}\n   */\n  updateSelectionOnMouseMove(e: TPointerEvent) {\n    if (this.getActiveControl()) {\n      return;\n    }\n\n    const el = this.hiddenTextarea!;\n    // regain focus\n    getDocumentFromElement(el).activeElement !== el && el.focus();\n\n    const newSelectionStart = this.getSelectionStartFromPointer(e),\n      currentStart = this.selectionStart,\n      currentEnd = this.selectionEnd;\n    if (\n      (newSelectionStart !== this.__selectionStartOnMouseDown ||\n        currentStart === currentEnd) &&\n      (currentStart === newSelectionStart || currentEnd === newSelectionStart)\n    ) {\n      return;\n    }\n    if (newSelectionStart > this.__selectionStartOnMouseDown) {\n      this.selectionStart = this.__selectionStartOnMouseDown;\n      this.selectionEnd = newSelectionStart;\n    } else {\n      this.selectionStart = newSelectionStart;\n      this.selectionEnd = this.__selectionStartOnMouseDown;\n    }\n    if (\n      this.selectionStart !== currentStart ||\n      this.selectionEnd !== currentEnd\n    ) {\n      this._fireSelectionChanged();\n      this._updateTextarea();\n      this.renderCursorOrSelection();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setEditingProps() {\n    this.hoverCursor = 'text';\n\n    if (this.canvas) {\n      this.canvas.defaultCursor = this.canvas.moveCursor = 'text';\n    }\n\n    this.borderColor = this.editingBorderColor;\n    this.hasControls = this.selectable = false;\n    this.lockMovementX = this.lockMovementY = true;\n  }\n\n  /**\n   * convert from textarea to grapheme indexes\n   */\n  fromStringToGraphemeSelection(start: number, end: number, text: string) {\n    const smallerTextStart = text.slice(0, start),\n      graphemeStart = this.graphemeSplit(smallerTextStart).length;\n    if (start === end) {\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n    }\n    const smallerTextEnd = text.slice(start, end),\n      graphemeEnd = this.graphemeSplit(smallerTextEnd).length;\n    return {\n      selectionStart: graphemeStart,\n      selectionEnd: graphemeStart + graphemeEnd,\n    };\n  }\n\n  /**\n   * convert from fabric to textarea values\n   */\n  fromGraphemeToStringSelection(\n    start: number,\n    end: number,\n    graphemes: string[]\n  ) {\n    const smallerTextStart = graphemes.slice(0, start),\n      graphemeStart = smallerTextStart.join('').length;\n    if (start === end) {\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n    }\n    const smallerTextEnd = graphemes.slice(start, end),\n      graphemeEnd = smallerTextEnd.join('').length;\n    return {\n      selectionStart: graphemeStart,\n      selectionEnd: graphemeStart + graphemeEnd,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _updateTextarea() {\n    this.cursorOffsetCache = {};\n    if (!this.hiddenTextarea) {\n      return;\n    }\n    if (!this.inCompositionMode) {\n      const newSelection = this.fromGraphemeToStringSelection(\n        this.selectionStart,\n        this.selectionEnd,\n        this._text\n      );\n      this.hiddenTextarea.selectionStart = newSelection.selectionStart;\n      this.hiddenTextarea.selectionEnd = newSelection.selectionEnd;\n    }\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * @private\n   */\n  updateFromTextArea() {\n    if (!this.hiddenTextarea) {\n      return;\n    }\n    this.cursorOffsetCache = {};\n    const textarea = this.hiddenTextarea;\n    this.text = textarea.value;\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    const newSelection = this.fromStringToGraphemeSelection(\n      textarea.selectionStart,\n      textarea.selectionEnd,\n      textarea.value\n    );\n    this.selectionEnd = this.selectionStart = newSelection.selectionEnd;\n    if (!this.inCompositionMode) {\n      this.selectionStart = newSelection.selectionStart;\n    }\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * @private\n   */\n  updateTextareaPosition() {\n    if (this.selectionStart === this.selectionEnd) {\n      const style = this._calcTextareaPosition();\n      this.hiddenTextarea!.style.left = style.left;\n      this.hiddenTextarea!.style.top = style.top;\n    }\n  }\n\n  /**\n   * @private\n   * @return {Object} style contains style for hiddenTextarea\n   */\n  _calcTextareaPosition() {\n    if (!this.canvas) {\n      return { left: '1px', top: '1px' };\n    }\n    const desiredPosition = this.inCompositionMode\n        ? this.compositionStart\n        : this.selectionStart,\n      boundaries = this._getCursorBoundaries(desiredPosition),\n      cursorLocation = this.get2DCursorLocation(desiredPosition),\n      lineIndex = cursorLocation.lineIndex,\n      charIndex = cursorLocation.charIndex,\n      charHeight =\n        this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize') *\n        this.lineHeight,\n      leftOffset = boundaries.leftOffset,\n      retinaScaling = this.getCanvasRetinaScaling(),\n      upperCanvas = this.canvas.upperCanvasEl,\n      upperCanvasWidth = upperCanvas.width / retinaScaling,\n      upperCanvasHeight = upperCanvas.height / retinaScaling,\n      maxWidth = upperCanvasWidth - charHeight,\n      maxHeight = upperCanvasHeight - charHeight;\n\n    const p = new Point(\n      boundaries.left + leftOffset,\n      boundaries.top + boundaries.topOffset + charHeight\n    )\n      .transform(this.calcTransformMatrix())\n      .transform(this.canvas.viewportTransform)\n      .multiply(\n        new Point(\n          upperCanvas.clientWidth / upperCanvasWidth,\n          upperCanvas.clientHeight / upperCanvasHeight\n        )\n      );\n\n    if (p.x < 0) {\n      p.x = 0;\n    }\n    if (p.x > maxWidth) {\n      p.x = maxWidth;\n    }\n    if (p.y < 0) {\n      p.y = 0;\n    }\n    if (p.y > maxHeight) {\n      p.y = maxHeight;\n    }\n\n    // add canvas offset on document\n    p.x += this.canvas._offset.left;\n    p.y += this.canvas._offset.top;\n\n    return {\n      left: `${p.x}px`,\n      top: `${p.y}px`,\n      fontSize: `${charHeight}px`,\n      charHeight: charHeight,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _saveEditingProps() {\n    this._savedProps = {\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      lockMovementX: this.lockMovementX,\n      lockMovementY: this.lockMovementY,\n      hoverCursor: this.hoverCursor,\n      selectable: this.selectable,\n      defaultCursor: this.canvas && this.canvas.defaultCursor,\n      moveCursor: this.canvas && this.canvas.moveCursor,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _restoreEditingProps() {\n    if (!this._savedProps) {\n      return;\n    }\n\n    this.hoverCursor = this._savedProps.hoverCursor;\n    this.hasControls = this._savedProps.hasControls;\n    this.borderColor = this._savedProps.borderColor;\n    this.selectable = this._savedProps.selectable;\n    this.lockMovementX = this._savedProps.lockMovementX;\n    this.lockMovementY = this._savedProps.lockMovementY;\n\n    if (this.canvas) {\n      this.canvas.defaultCursor =\n        this._savedProps.defaultCursor || this.canvas.defaultCursor;\n      this.canvas.moveCursor =\n        this._savedProps.moveCursor || this.canvas.moveCursor;\n    }\n\n    delete this._savedProps;\n  }\n\n  /**\n   * runs the actual logic that exits from editing state, see {@link exitEditing}\n   */\n  protected _exitEditing() {\n    const hiddenTextarea = this.hiddenTextarea;\n    this.selected = false;\n    this.isEditing = false;\n\n    if (hiddenTextarea) {\n      hiddenTextarea.blur && hiddenTextarea.blur();\n      hiddenTextarea.parentNode &&\n        hiddenTextarea.parentNode.removeChild(hiddenTextarea);\n    }\n    this.hiddenTextarea = null;\n    this.abortCursorAnimation();\n    this.selectionStart !== this.selectionEnd && this.clearContextTop();\n  }\n\n  /**\n   * Exits from editing state and fires relevant events\n   */\n  exitEditing() {\n    const isTextChanged = this._textBeforeEdit !== this.text;\n    this._exitEditing();\n    this.selectionEnd = this.selectionStart;\n    this._restoreEditingProps();\n    if (this._forceClearCache) {\n      this.initDimensions();\n      this.setCoords();\n    }\n    this.fire('editing:exited');\n    isTextChanged && this.fire('modified');\n    if (this.canvas) {\n      this.canvas.fire('text:editing:exited', {\n        target: this as unknown as IText,\n      });\n      isTextChanged && this.canvas.fire('object:modified', { target: this });\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _removeExtraneousStyles() {\n    for (const prop in this.styles) {\n      if (!this._textLines[prop as unknown as number]) {\n        delete this.styles[prop];\n      }\n    }\n  }\n\n  /**\n   * remove and reflow a style block from start to end.\n   * @param {Number} start linear start position for removal (included in removal)\n   * @param {Number} end linear end position for removal ( excluded from removal )\n   */\n  removeStyleFromTo(start: number, end: number) {\n    const { lineIndex: lineStart, charIndex: charStart } =\n        this.get2DCursorLocation(start, true),\n      { lineIndex: lineEnd, charIndex: charEnd } = this.get2DCursorLocation(\n        end,\n        true\n      );\n    if (lineStart !== lineEnd) {\n      // step1 remove the trailing of lineStart\n      if (this.styles[lineStart]) {\n        for (\n          let i = charStart;\n          i < this._unwrappedTextLines[lineStart].length;\n          i++\n        ) {\n          delete this.styles[lineStart][i];\n        }\n      }\n      // step2 move the trailing of lineEnd to lineStart if needed\n      if (this.styles[lineEnd]) {\n        for (\n          let i = charEnd;\n          i < this._unwrappedTextLines[lineEnd].length;\n          i++\n        ) {\n          const styleObj = this.styles[lineEnd][i];\n          if (styleObj) {\n            this.styles[lineStart] || (this.styles[lineStart] = {});\n            this.styles[lineStart][charStart + i - charEnd] = styleObj;\n          }\n        }\n      }\n      // step3 detects lines will be completely removed.\n      for (let i = lineStart + 1; i <= lineEnd; i++) {\n        delete this.styles[i];\n      }\n      // step4 shift remaining lines.\n      this.shiftLineStyles(lineEnd, lineStart - lineEnd);\n    } else {\n      // remove and shift left on the same line\n      if (this.styles[lineStart]) {\n        const styleObj = this.styles[lineStart];\n        const diff = charEnd - charStart;\n        for (let i = charStart; i < charEnd; i++) {\n          delete styleObj[i];\n        }\n        for (const char in this.styles[lineStart]) {\n          const numericChar = parseInt(char, 10);\n          if (numericChar >= charEnd) {\n            styleObj[numericChar - diff] = styleObj[char];\n            delete styleObj[char];\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Shifts line styles up or down\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} offset Can any number?\n   */\n  shiftLineStyles(lineIndex: number, offset: number) {\n    const clonedStyles = Object.assign({}, this.styles);\n    for (const line in this.styles) {\n      const numericLine = parseInt(line, 10);\n      if (numericLine > lineIndex) {\n        this.styles[numericLine + offset] = clonedStyles[numericLine];\n        if (!clonedStyles[numericLine - offset]) {\n          delete this.styles[numericLine];\n        }\n      }\n    }\n  }\n\n  /**\n   * Handle insertion of more consecutive style lines for when one or more\n   * newlines gets added to the text. Since current style needs to be shifted\n   * first we shift the current style of the number lines needed, then we add\n   * new lines from the last to the first.\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} charIndex Index of a char\n   * @param {Number} qty number of lines to add\n   * @param {Array} copiedStyle Array of objects styles\n   */\n  insertNewlineStyleObject(\n    lineIndex: number,\n    charIndex: number,\n    qty: number,\n    copiedStyle?: { [index: number]: TextStyleDeclaration }\n  ) {\n    const newLineStyles: { [index: number]: TextStyleDeclaration } = {};\n    const originalLineLength = this._unwrappedTextLines[lineIndex].length;\n    const isEndOfLine = originalLineLength === charIndex;\n\n    let someStyleIsCarryingOver = false;\n    qty || (qty = 1);\n    this.shiftLineStyles(lineIndex, qty);\n    const currentCharStyle = this.styles[lineIndex]\n      ? this.styles[lineIndex][charIndex === 0 ? charIndex : charIndex - 1]\n      : undefined;\n\n    // we clone styles of all chars\n    // after cursor onto the current line\n    for (const index in this.styles[lineIndex]) {\n      const numIndex = parseInt(index, 10);\n      if (numIndex >= charIndex) {\n        someStyleIsCarryingOver = true;\n        newLineStyles[numIndex - charIndex] = this.styles[lineIndex][index];\n        // remove lines from the previous line since they're on a new line now\n        if (!(isEndOfLine && charIndex === 0)) {\n          delete this.styles[lineIndex][index];\n        }\n      }\n    }\n    let styleCarriedOver = false;\n    if (someStyleIsCarryingOver && !isEndOfLine) {\n      // if is end of line, the extra style we copied\n      // is probably not something we want\n      this.styles[lineIndex + qty] = newLineStyles;\n      styleCarriedOver = true;\n    }\n    if (styleCarriedOver || originalLineLength > charIndex) {\n      // skip the last line of since we already prepared it.\n      // or contains text without style that we don't want to style\n      // just because it changed lines\n      qty--;\n    }\n    // for the all the lines or all the other lines\n    // we clone current char style onto the next (otherwise empty) line\n    while (qty > 0) {\n      if (copiedStyle && copiedStyle[qty - 1]) {\n        this.styles[lineIndex + qty] = {\n          0: { ...copiedStyle[qty - 1] },\n        };\n      } else if (currentCharStyle) {\n        this.styles[lineIndex + qty] = {\n          0: { ...currentCharStyle },\n        };\n      } else {\n        delete this.styles[lineIndex + qty];\n      }\n      qty--;\n    }\n    this._forceClearCache = true;\n  }\n\n  /**\n   * Inserts style object for a given line/char index\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} charIndex Index of a char\n   * @param {Number} quantity number Style object to insert, if given\n   * @param {Array} copiedStyle array of style objects\n   */\n  insertCharStyleObject(\n    lineIndex: number,\n    charIndex: number,\n    quantity: number,\n    copiedStyle?: TextStyleDeclaration[]\n  ) {\n    if (!this.styles) {\n      this.styles = {};\n    }\n    const currentLineStyles = this.styles[lineIndex],\n      currentLineStylesCloned = currentLineStyles\n        ? { ...currentLineStyles }\n        : {};\n\n    quantity || (quantity = 1);\n    // shift all char styles by quantity forward\n    // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4\n    for (const index in currentLineStylesCloned) {\n      const numericIndex = parseInt(index, 10);\n      if (numericIndex >= charIndex) {\n        currentLineStyles[numericIndex + quantity] =\n          currentLineStylesCloned[numericIndex];\n        // only delete the style if there was nothing moved there\n        if (!currentLineStylesCloned[numericIndex - quantity]) {\n          delete currentLineStyles[numericIndex];\n        }\n      }\n    }\n    this._forceClearCache = true;\n    if (copiedStyle) {\n      while (quantity--) {\n        if (!Object.keys(copiedStyle[quantity]).length) {\n          continue;\n        }\n        if (!this.styles[lineIndex]) {\n          this.styles[lineIndex] = {};\n        }\n        this.styles[lineIndex][charIndex + quantity] = {\n          ...copiedStyle[quantity],\n        };\n      }\n      return;\n    }\n    if (!currentLineStyles) {\n      return;\n    }\n    const newStyle = currentLineStyles[charIndex ? charIndex - 1 : 1];\n    while (newStyle && quantity--) {\n      this.styles[lineIndex][charIndex + quantity] = { ...newStyle };\n    }\n  }\n\n  /**\n   * Inserts style object(s)\n   * @param {Array} insertedText Characters at the location where style is inserted\n   * @param {Number} start cursor index for inserting style\n   * @param {Array} [copiedStyle] array of style objects to insert.\n   */\n  insertNewStyleBlock(\n    insertedText: string[],\n    start: number,\n    copiedStyle?: TextStyleDeclaration[]\n  ) {\n    const cursorLoc = this.get2DCursorLocation(start, true),\n      addedLines = [0];\n    let linesLength = 0;\n    // get an array of how many char per lines are being added.\n    for (let i = 0; i < insertedText.length; i++) {\n      if (insertedText[i] === '\\n') {\n        linesLength++;\n        addedLines[linesLength] = 0;\n      } else {\n        addedLines[linesLength]++;\n      }\n    }\n    // for the first line copy the style from the current char position.\n    if (addedLines[0] > 0) {\n      this.insertCharStyleObject(\n        cursorLoc.lineIndex,\n        cursorLoc.charIndex,\n        addedLines[0],\n        copiedStyle\n      );\n      copiedStyle = copiedStyle && copiedStyle.slice(addedLines[0] + 1);\n    }\n    linesLength &&\n      this.insertNewlineStyleObject(\n        cursorLoc.lineIndex,\n        cursorLoc.charIndex + addedLines[0],\n        linesLength\n      );\n    let i;\n    for (i = 1; i < linesLength; i++) {\n      if (addedLines[i] > 0) {\n        this.insertCharStyleObject(\n          cursorLoc.lineIndex + i,\n          0,\n          addedLines[i],\n          copiedStyle\n        );\n      } else if (copiedStyle) {\n        // this test is required in order to close #6841\n        // when a pasted buffer begins with a newline then\n        // this.styles[cursorLoc.lineIndex + i] and copiedStyle[0]\n        // may be undefined for some reason\n        if (this.styles[cursorLoc.lineIndex + i] && copiedStyle[0]) {\n          this.styles[cursorLoc.lineIndex + i][0] = copiedStyle[0];\n        }\n      }\n      copiedStyle = copiedStyle && copiedStyle.slice(addedLines[i] + 1);\n    }\n    if (addedLines[i] > 0) {\n      this.insertCharStyleObject(\n        cursorLoc.lineIndex + i,\n        0,\n        addedLines[i],\n        copiedStyle\n      );\n    }\n  }\n\n  /**\n   * Removes characters from start/end\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  removeChars(start: number, end: number = start + 1) {\n    this.removeStyleFromTo(start, end);\n    this._text.splice(start, end - start);\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    this._removeExtraneousStyles();\n  }\n\n  /**\n   * insert characters at start position, before start position.\n   * start  equal 1 it means the text get inserted between actual grapheme 0 and 1\n   * if style array is provided, it must be as the same length of text in graphemes\n   * if end is provided and is bigger than start, old text is replaced.\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {String} text text to insert\n   * @param {Array} style array of style objects\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  insertChars(\n    text: string,\n    style: TextStyleDeclaration[] | undefined,\n    start: number,\n    end: number = start\n  ) {\n    if (end > start) {\n      this.removeStyleFromTo(start, end);\n    }\n    const graphemes = this.graphemeSplit(text);\n    this.insertNewStyleBlock(graphemes, start, style);\n    this._text = [\n      ...this._text.slice(0, start),\n      ...graphemes,\n      ...this._text.slice(end),\n    ];\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    this._removeExtraneousStyles();\n  }\n\n  /**\n   * Set the selectionStart and selectionEnd according to the new position of cursor\n   * mimic the key - mouse navigation when shift is pressed.\n   */\n  setSelectionStartEndWithShift(\n    start: number,\n    end: number,\n    newSelection: number\n  ) {\n    if (newSelection <= start) {\n      if (end === start) {\n        this._selectionDirection = LEFT;\n      } else if (this._selectionDirection === RIGHT) {\n        this._selectionDirection = LEFT;\n        this.selectionEnd = start;\n      }\n      this.selectionStart = newSelection;\n    } else if (newSelection > start && newSelection < end) {\n      if (this._selectionDirection === RIGHT) {\n        this.selectionEnd = newSelection;\n      } else {\n        this.selectionStart = newSelection;\n      }\n    } else {\n      // newSelection is > selection start and end\n      if (end === start) {\n        this._selectionDirection = RIGHT;\n      } else if (this._selectionDirection === LEFT) {\n        this._selectionDirection = RIGHT;\n        this.selectionStart = end;\n      }\n      this.selectionEnd = newSelection;\n    }\n  }\n}\n", "import { config } from '../../config';\nimport { getFabricDocument, getEnv } from '../../env';\nimport { capValue } from '../../util/misc/capValue';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextBehavior } from './ITextBehavior';\nimport type { TKeyMapIText } from './constants';\nimport type { TOptions } from '../../typedefs';\nimport type { TextProps, SerializedTextProps } from '../Text/Text';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { LEFT, RIGHT } from '../../constants';\nimport type { IText } from './IText';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\n\nexport abstract class ITextKeyBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents\n> extends ITextBehavior<Props, SProps, EventSpec> {\n  /**\n   * For functionalities on keyDown\n   * Map a special key to a function of the instance/prototype\n   * If you need different behavior for ESC or TAB or arrows, you have to change\n   * this map setting the name of a function that you build on the IText or\n   * your prototype.\n   * the map change will affect all Instances unless you need for only some text Instances\n   * in that case you have to clone this object and assign your Instance.\n   * this.keysMap = Object.assign({}, this.keysMap);\n   * The function must be in IText.prototype.myFunction And will receive event as args[0]\n   */\n  declare keysMap: TKeyMapIText;\n\n  declare keysMapRtl: TKeyMapIText;\n\n  /**\n   * For functionalities on keyUp + ctrl || cmd\n   */\n  declare ctrlKeysMapUp: TKeyMapIText;\n\n  /**\n   * For functionalities on keyDown + ctrl || cmd\n   */\n  declare ctrlKeysMapDown: TKeyMapIText;\n\n  declare hiddenTextarea: HTMLTextAreaElement | null;\n\n  /**\n   * DOM container to append the hiddenTextarea.\n   * An alternative to attaching to the document.body.\n   * Useful to reduce laggish redraw of the full document.body tree and\n   * also with modals event capturing that won't let the textarea take focus.\n   * @type HTMLElement\n   * @default\n   */\n  declare hiddenTextareaContainer?: HTMLElement | null;\n\n  private declare _clickHandlerInitialized: boolean;\n  private declare _copyDone: boolean;\n  private declare fromPaste: boolean;\n\n  /**\n   * Initializes hidden textarea (needed to bring up keyboard in iOS)\n   */\n  initHiddenTextarea() {\n    const doc =\n      (this.canvas && getDocumentFromElement(this.canvas.getElement())) ||\n      getFabricDocument();\n    const textarea = doc.createElement('textarea');\n    Object.entries({\n      autocapitalize: 'off',\n      autocorrect: 'off',\n      autocomplete: 'off',\n      spellcheck: 'false',\n      'data-fabric': 'textarea',\n      wrap: 'off',\n    }).map(([attribute, value]) => textarea.setAttribute(attribute, value));\n    const { top, left, fontSize } = this._calcTextareaPosition();\n    // line-height: 1px; was removed from the style to fix this:\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=870966\n    textarea.style.cssText = `position: absolute; top: ${top}; left: ${left}; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; padding-top: ${fontSize};`;\n\n    (this.hiddenTextareaContainer || doc.body).appendChild(textarea);\n\n    Object.entries({\n      blur: 'blur',\n      keydown: 'onKeyDown',\n      keyup: 'onKeyUp',\n      input: 'onInput',\n      copy: 'copy',\n      cut: 'copy',\n      paste: 'paste',\n      compositionstart: 'onCompositionStart',\n      compositionupdate: 'onCompositionUpdate',\n      compositionend: 'onCompositionEnd',\n    } as Record<string, keyof this>).map(([eventName, handler]) =>\n      textarea.addEventListener(\n        eventName,\n        (this[handler] as Function).bind(this)\n      )\n    );\n    this.hiddenTextarea = textarea;\n  }\n\n  /**\n   * Override this method to customize cursor behavior on textbox blur\n   */\n  blur() {\n    this.abortCursorAnimation();\n  }\n\n  /**\n   * Handles keydown event\n   * only used for arrows and combination of modifier keys.\n   * @param {KeyboardEvent} e Event object\n   */\n  onKeyDown(e: KeyboardEvent) {\n    if (!this.isEditing) {\n      return;\n    }\n    const keyMap = this.direction === 'rtl' ? this.keysMapRtl : this.keysMap;\n    if (e.keyCode in keyMap) {\n      // @ts-expect-error legacy method calling pattern\n      this[keyMap[e.keyCode]](e);\n    } else if (e.keyCode in this.ctrlKeysMapDown && (e.ctrlKey || e.metaKey)) {\n      // @ts-expect-error legacy method calling pattern\n      this[this.ctrlKeysMapDown[e.keyCode]](e);\n    } else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    if (e.keyCode >= 33 && e.keyCode <= 40) {\n      // if i press an arrow key just update selection\n      this.inCompositionMode = false;\n      this.clearContextTop();\n      this.renderCursorOrSelection();\n    } else {\n      this.canvas && this.canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * Handles keyup event\n   * We handle KeyUp because ie11 and edge have difficulties copy/pasting\n   * if a copy/cut event fired, keyup is dismissed\n   * @param {KeyboardEvent} e Event object\n   */\n  onKeyUp(e: KeyboardEvent) {\n    if (!this.isEditing || this._copyDone || this.inCompositionMode) {\n      this._copyDone = false;\n      return;\n    }\n    if (e.keyCode in this.ctrlKeysMapUp && (e.ctrlKey || e.metaKey)) {\n      // @ts-expect-error legacy method calling pattern\n      this[this.ctrlKeysMapUp[e.keyCode]](e);\n    } else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    this.canvas && this.canvas.requestRenderAll();\n  }\n\n  /**\n   * Handles onInput event\n   * @param {Event} e Event object\n   */\n  onInput(this: this & { hiddenTextarea: HTMLTextAreaElement }, e: Event) {\n    const fromPaste = this.fromPaste;\n    this.fromPaste = false;\n    e && e.stopPropagation();\n    if (!this.isEditing) {\n      return;\n    }\n    const updateAndFire = () => {\n      this.updateFromTextArea();\n      this.fire('changed');\n      if (this.canvas) {\n        this.canvas.fire('text:changed', { target: this as unknown as IText });\n        this.canvas.requestRenderAll();\n      }\n    };\n    if (this.hiddenTextarea.value === '') {\n      this.styles = {};\n      updateAndFire();\n      return;\n    }\n    // decisions about style changes.\n    const nextText = this._splitTextIntoLines(\n        this.hiddenTextarea.value\n      ).graphemeText,\n      charCount = this._text.length,\n      nextCharCount = nextText.length,\n      selectionStart = this.selectionStart,\n      selectionEnd = this.selectionEnd,\n      selection = selectionStart !== selectionEnd;\n    let copiedStyle: TextStyleDeclaration[] | undefined,\n      removedText,\n      charDiff = nextCharCount - charCount,\n      removeFrom,\n      removeTo;\n\n    const textareaSelection = this.fromStringToGraphemeSelection(\n      this.hiddenTextarea.selectionStart,\n      this.hiddenTextarea.selectionEnd,\n      this.hiddenTextarea.value\n    );\n    const backDelete = selectionStart > textareaSelection.selectionStart;\n\n    if (selection) {\n      removedText = this._text.slice(selectionStart, selectionEnd);\n      charDiff += selectionEnd - selectionStart;\n    } else if (nextCharCount < charCount) {\n      if (backDelete) {\n        removedText = this._text.slice(selectionEnd + charDiff, selectionEnd);\n      } else {\n        removedText = this._text.slice(\n          selectionStart,\n          selectionStart - charDiff\n        );\n      }\n    }\n    const insertedText = nextText.slice(\n      textareaSelection.selectionEnd - charDiff,\n      textareaSelection.selectionEnd\n    );\n    if (removedText && removedText.length) {\n      if (insertedText.length) {\n        // let's copy some style before deleting.\n        // we want to copy the style before the cursor OR the style at the cursor if selection\n        // is bigger than 0.\n        copiedStyle = this.getSelectionStyles(\n          selectionStart,\n          selectionStart + 1,\n          false\n        );\n        // now duplicate the style one for each inserted text.\n        copiedStyle = insertedText.map(\n          () =>\n            // this return an array of references, but that is fine since we are\n            // copying the style later.\n            copiedStyle![0]\n        );\n      }\n      if (selection) {\n        removeFrom = selectionStart;\n        removeTo = selectionEnd;\n      } else if (backDelete) {\n        // detect differences between forwardDelete and backDelete\n        removeFrom = selectionEnd - removedText.length;\n        removeTo = selectionEnd;\n      } else {\n        removeFrom = selectionEnd;\n        removeTo = selectionEnd + removedText.length;\n      }\n      this.removeStyleFromTo(removeFrom, removeTo);\n    }\n    if (insertedText.length) {\n      const { copyPasteData } = getEnv();\n      if (\n        fromPaste &&\n        insertedText.join('') === copyPasteData.copiedText &&\n        !config.disableStyleCopyPaste\n      ) {\n        copiedStyle = copyPasteData.copiedTextStyle;\n      }\n      this.insertNewStyleBlock(insertedText, selectionStart, copiedStyle);\n    }\n    updateAndFire();\n  }\n\n  /**\n   * Composition start\n   */\n  onCompositionStart() {\n    this.inCompositionMode = true;\n  }\n\n  /**\n   * Composition end\n   */\n  onCompositionEnd() {\n    this.inCompositionMode = false;\n  }\n\n  onCompositionUpdate({ target }: CompositionEvent) {\n    const { selectionStart, selectionEnd } = target as HTMLTextAreaElement;\n    this.compositionStart = selectionStart;\n    this.compositionEnd = selectionEnd;\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * Copies selected text\n   */\n  copy() {\n    if (this.selectionStart === this.selectionEnd) {\n      //do not cut-copy if no selection\n      return;\n    }\n    const { copyPasteData } = getEnv();\n    copyPasteData.copiedText = this.getSelectedText();\n    if (!config.disableStyleCopyPaste) {\n      copyPasteData.copiedTextStyle = this.getSelectionStyles(\n        this.selectionStart,\n        this.selectionEnd,\n        true\n      );\n    } else {\n      copyPasteData.copiedTextStyle = undefined;\n    }\n    this._copyDone = true;\n  }\n\n  /**\n   * Pastes text\n   */\n  paste() {\n    this.fromPaste = true;\n  }\n\n  /**\n   * Finds the width in pixels before the cursor on the same line\n   * @private\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {Number} widthBeforeCursor width before cursor\n   */\n  _getWidthBeforeCursor(lineIndex: number, charIndex: number): number {\n    let widthBeforeCursor = this._getLineLeftOffset(lineIndex),\n      bound;\n\n    if (charIndex > 0) {\n      bound = this.__charBounds[lineIndex][charIndex - 1];\n      widthBeforeCursor += bound.left + bound.width;\n    }\n    return widthBeforeCursor;\n  }\n\n  /**\n   * Gets start offset of a selection\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getDownCursorOffset(e: KeyboardEvent, isRight: boolean): number {\n    const selectionProp = this._getSelectionForOffset(e, isRight),\n      cursorLocation = this.get2DCursorLocation(selectionProp),\n      lineIndex = cursorLocation.lineIndex;\n    // if on last line, down cursor goes to end of line\n    if (\n      lineIndex === this._textLines.length - 1 ||\n      e.metaKey ||\n      e.keyCode === 34\n    ) {\n      // move to the end of a text\n      return this._text.length - selectionProp;\n    }\n    const charIndex = cursorLocation.charIndex,\n      widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n      indexOnOtherLine = this._getIndexOnLine(lineIndex + 1, widthBeforeCursor),\n      textAfterCursor = this._textLines[lineIndex].slice(charIndex);\n    return (\n      textAfterCursor.length +\n      indexOnOtherLine +\n      1 +\n      this.missingNewlineOffset(lineIndex)\n    );\n  }\n\n  /**\n   * private\n   * Helps finding if the offset should be counted from Start or End\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  _getSelectionForOffset(e: KeyboardEvent, isRight: boolean): number {\n    if (e.shiftKey && this.selectionStart !== this.selectionEnd && isRight) {\n      return this.selectionEnd;\n    } else {\n      return this.selectionStart;\n    }\n  }\n\n  /**\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getUpCursorOffset(e: KeyboardEvent, isRight: boolean): number {\n    const selectionProp = this._getSelectionForOffset(e, isRight),\n      cursorLocation = this.get2DCursorLocation(selectionProp),\n      lineIndex = cursorLocation.lineIndex;\n    if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {\n      // if on first line, up cursor goes to start of line\n      return -selectionProp;\n    }\n    const charIndex = cursorLocation.charIndex,\n      widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n      indexOnOtherLine = this._getIndexOnLine(lineIndex - 1, widthBeforeCursor),\n      textBeforeCursor = this._textLines[lineIndex].slice(0, charIndex),\n      missingNewlineOffset = this.missingNewlineOffset(lineIndex - 1);\n    // return a negative offset\n    return (\n      -this._textLines[lineIndex - 1].length +\n      indexOnOtherLine -\n      textBeforeCursor.length +\n      (1 - missingNewlineOffset)\n    );\n  }\n\n  /**\n   * for a given width it founds the matching character.\n   * @private\n   */\n  _getIndexOnLine(lineIndex: number, width: number) {\n    const line = this._textLines[lineIndex],\n      lineLeftOffset = this._getLineLeftOffset(lineIndex);\n    let widthOfCharsOnLine = lineLeftOffset,\n      indexOnLine = 0,\n      charWidth,\n      foundMatch;\n\n    for (let j = 0, jlen = line.length; j < jlen; j++) {\n      charWidth = this.__charBounds[lineIndex][j].width;\n      widthOfCharsOnLine += charWidth;\n      if (widthOfCharsOnLine > width) {\n        foundMatch = true;\n        const leftEdge = widthOfCharsOnLine - charWidth,\n          rightEdge = widthOfCharsOnLine,\n          offsetFromLeftEdge = Math.abs(leftEdge - width),\n          offsetFromRightEdge = Math.abs(rightEdge - width);\n\n        indexOnLine = offsetFromRightEdge < offsetFromLeftEdge ? j : j - 1;\n        break;\n      }\n    }\n\n    // reached end\n    if (!foundMatch) {\n      indexOnLine = line.length - 1;\n    }\n\n    return indexOnLine;\n  }\n\n  /**\n   * Moves cursor down\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorDown(e: KeyboardEvent) {\n    if (\n      this.selectionStart >= this._text.length &&\n      this.selectionEnd >= this._text.length\n    ) {\n      return;\n    }\n    this._moveCursorUpOrDown('Down', e);\n  }\n\n  /**\n   * Moves cursor up\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorUp(e: KeyboardEvent) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n    this._moveCursorUpOrDown('Up', e);\n  }\n\n  /**\n   * Moves cursor up or down, fires the events\n   * @param {String} direction 'Up' or 'Down'\n   * @param {KeyboardEvent} e Event object\n   */\n  _moveCursorUpOrDown(direction: 'Up' | 'Down', e: KeyboardEvent) {\n    const offset = this[`get${direction}CursorOffset`](\n      e,\n      this._selectionDirection === RIGHT\n    );\n    if (e.shiftKey) {\n      this.moveCursorWithShift(offset);\n    } else {\n      this.moveCursorWithoutShift(offset);\n    }\n    if (offset !== 0) {\n      const max = this.text.length;\n      this.selectionStart = capValue(0, this.selectionStart, max);\n      this.selectionEnd = capValue(0, this.selectionEnd, max);\n      // TODO fix: abort and init should be an alternative depending\n      // on selectionStart/End being equal or different\n      this.abortCursorAnimation();\n      this.initDelayedCursor();\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Moves cursor with shift\n   * @param {Number} offset\n   */\n  moveCursorWithShift(offset: number) {\n    const newSelection =\n      this._selectionDirection === LEFT\n        ? this.selectionStart + offset\n        : this.selectionEnd + offset;\n    this.setSelectionStartEndWithShift(\n      this.selectionStart,\n      this.selectionEnd,\n      newSelection\n    );\n    return offset !== 0;\n  }\n\n  /**\n   * Moves cursor up without shift\n   * @param {Number} offset\n   */\n  moveCursorWithoutShift(offset: number) {\n    if (offset < 0) {\n      this.selectionStart += offset;\n      this.selectionEnd = this.selectionStart;\n    } else {\n      this.selectionEnd += offset;\n      this.selectionStart = this.selectionEnd;\n    }\n    return offset !== 0;\n  }\n\n  /**\n   * Moves cursor left\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorLeft(e: KeyboardEvent) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n    this._moveCursorLeftOrRight('Left', e);\n  }\n\n  /**\n   * @private\n   * @return {Boolean} true if a change happened\n   *\n   * @todo refactor not to use method name composition\n   */\n  _move(\n    e: KeyboardEvent,\n    prop: 'selectionStart' | 'selectionEnd',\n    direction: 'Left' | 'Right'\n  ): boolean {\n    let newValue: number | undefined;\n    if (e.altKey) {\n      newValue = this[`findWordBoundary${direction}`](this[prop]);\n    } else if (e.metaKey || e.keyCode === 35 || e.keyCode === 36) {\n      newValue = this[`findLineBoundary${direction}`](this[prop]);\n    } else {\n      this[prop] += direction === 'Left' ? -1 : 1;\n      return true;\n    }\n    if (typeof newValue !== 'undefined' && this[prop] !== newValue) {\n      this[prop] = newValue;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @private\n   */\n  _moveLeft(e: KeyboardEvent, prop: 'selectionStart' | 'selectionEnd') {\n    return this._move(e, prop, 'Left');\n  }\n\n  /**\n   * @private\n   */\n  _moveRight(e: KeyboardEvent, prop: 'selectionStart' | 'selectionEnd') {\n    return this._move(e, prop, 'Right');\n  }\n\n  /**\n   * Moves cursor left without keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorLeftWithoutShift(e: KeyboardEvent) {\n    let change = true;\n    this._selectionDirection = LEFT;\n\n    // only move cursor when there is no selection,\n    // otherwise we discard it, and leave cursor on same place\n    if (\n      this.selectionEnd === this.selectionStart &&\n      this.selectionStart !== 0\n    ) {\n      change = this._moveLeft(e, 'selectionStart');\n    }\n    this.selectionEnd = this.selectionStart;\n    return change;\n  }\n\n  /**\n   * Moves cursor left while keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorLeftWithShift(e: KeyboardEvent) {\n    if (\n      this._selectionDirection === RIGHT &&\n      this.selectionStart !== this.selectionEnd\n    ) {\n      return this._moveLeft(e, 'selectionEnd');\n    } else if (this.selectionStart !== 0) {\n      this._selectionDirection = LEFT;\n      return this._moveLeft(e, 'selectionStart');\n    }\n  }\n\n  /**\n   * Moves cursor right\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorRight(e: KeyboardEvent) {\n    if (\n      this.selectionStart >= this._text.length &&\n      this.selectionEnd >= this._text.length\n    ) {\n      return;\n    }\n    this._moveCursorLeftOrRight('Right', e);\n  }\n\n  /**\n   * Moves cursor right or Left, fires event\n   * @param {String} direction 'Left', 'Right'\n   * @param {KeyboardEvent} e Event object\n   */\n  _moveCursorLeftOrRight(direction: 'Left' | 'Right', e: KeyboardEvent) {\n    const actionName = `moveCursor${direction}${\n      e.shiftKey ? 'WithShift' : 'WithoutShift'\n    }` as const;\n    this._currentCursorOpacity = 1;\n    if (this[actionName](e)) {\n      // TODO fix: abort and init should be an alternative depending\n      // on selectionStart/End being equal or different\n      this.abortCursorAnimation();\n      this.initDelayedCursor();\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Moves cursor right while keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorRightWithShift(e: KeyboardEvent) {\n    if (\n      this._selectionDirection === LEFT &&\n      this.selectionStart !== this.selectionEnd\n    ) {\n      return this._moveRight(e, 'selectionStart');\n    } else if (this.selectionEnd !== this._text.length) {\n      this._selectionDirection = RIGHT;\n      return this._moveRight(e, 'selectionEnd');\n    }\n  }\n\n  /**\n   * Moves cursor right without keeping selection\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorRightWithoutShift(e: KeyboardEvent) {\n    let changed = true;\n    this._selectionDirection = RIGHT;\n\n    if (this.selectionStart === this.selectionEnd) {\n      changed = this._moveRight(e, 'selectionStart');\n      this.selectionEnd = this.selectionStart;\n    } else {\n      this.selectionStart = this.selectionEnd;\n    }\n    return changed;\n  }\n}\n", "import type { TPointerEvent, TPointerEventInfo } from '../../EventTypeDefs';\nimport type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport { stopEvent } from '../../util/dom_event';\nimport { invertTransform } from '../../util/misc/matrix';\nimport { DraggableTextDelegate } from './DraggableTextDelegate';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextKeyBehavior } from './ITextKeyBehavior';\nimport type { TOptions } from '../../typedefs';\nimport type { TextProps, SerializedTextProps } from '../Text/Text';\n\n/**\n * `LEFT_CLICK === 0`\n */\nconst notALeftClick = (e: Event) => !!(e as MouseEvent).button;\n\nexport abstract class ITextClickBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents\n> extends ITextKeyBehavior<Props, SProps, EventSpec> {\n  private declare __lastSelected: boolean;\n  private declare __lastClickTime: number;\n  private declare __lastLastClickTime: number;\n  private declare __lastPointer: XY | Record<string, never>;\n  private declare __newClickTime: number;\n\n  protected draggableTextDelegate: DraggableTextDelegate;\n\n  initBehavior() {\n    // Initializes event handlers related to cursor or selection\n    this.on('mousedown', this._mouseDownHandler);\n    this.on('mousedown:before', this._mouseDownHandlerBefore);\n    this.on('mouseup', this.mouseUpHandler);\n    this.on('mousedblclick', this.doubleClickHandler);\n    this.on('tripleclick', this.tripleClickHandler);\n\n    // Initializes \"dbclick\" event handler\n    this.__lastClickTime = +new Date();\n    // for triple click\n    this.__lastLastClickTime = +new Date();\n    this.__lastPointer = {};\n    this.on('mousedown', this.onMouseDown);\n\n    // @ts-expect-error in reality it is an IText instance\n    this.draggableTextDelegate = new DraggableTextDelegate(this);\n\n    super.initBehavior();\n  }\n\n  /**\n   * If this method returns true a mouse move operation over a text selection\n   * will not prevent the native mouse event allowing the browser to start a drag operation.\n   * shouldStartDragging can be read 'do not prevent default for mouse move event'\n   * To prevent drag and drop between objects both shouldStartDragging and onDragStart should return false\n   * @returns\n   */\n  shouldStartDragging() {\n    return this.draggableTextDelegate.isActive();\n  }\n\n  /**\n   * @public override this method to control whether instance should/shouldn't become a drag source,\n   * @see also {@link DraggableTextDelegate#isActive}\n   * To prevent drag and drop between objects both shouldStartDragging and onDragStart should return false\n   * @returns {boolean} should handle event\n   */\n  onDragStart(e: DragEvent) {\n    return this.draggableTextDelegate.onDragStart(e);\n  }\n\n  /**\n   * @public override this method to control whether instance should/shouldn't become a drop target\n   */\n  canDrop(e: DragEvent) {\n    return this.draggableTextDelegate.canDrop(e);\n  }\n\n  /**\n   * Default event handler to simulate triple click\n   * @private\n   */\n  onMouseDown(options: TPointerEventInfo) {\n    if (!this.canvas) {\n      return;\n    }\n    this.__newClickTime = +new Date();\n    const newPointer = options.pointer;\n    if (this.isTripleClick(newPointer)) {\n      this.fire('tripleclick', options);\n      stopEvent(options.e);\n    }\n    this.__lastLastClickTime = this.__lastClickTime;\n    this.__lastClickTime = this.__newClickTime;\n    this.__lastPointer = newPointer;\n    this.__lastSelected = this.selected && !this.getActiveControl();\n  }\n\n  isTripleClick(newPointer: XY) {\n    return (\n      this.__newClickTime - this.__lastClickTime < 500 &&\n      this.__lastClickTime - this.__lastLastClickTime < 500 &&\n      this.__lastPointer.x === newPointer.x &&\n      this.__lastPointer.y === newPointer.y\n    );\n  }\n\n  /**\n   * Default handler for double click, select a word\n   */\n  doubleClickHandler(options: TPointerEventInfo) {\n    if (!this.isEditing) {\n      return;\n    }\n    this.selectWord(this.getSelectionStartFromPointer(options.e));\n  }\n\n  /**\n   * Default handler for triple click, select a line\n   */\n  tripleClickHandler(options: TPointerEventInfo) {\n    if (!this.isEditing) {\n      return;\n    }\n    this.selectLine(this.getSelectionStartFromPointer(options.e));\n  }\n\n  /**\n   * Default event handler for the basic functionalities needed on _mouseDown\n   * can be overridden to do something different.\n   * Scope of this implementation is: find the click position, set selectionStart\n   * find selectionEnd, initialize the drawing of either cursor or selection area\n   * initializing a mousedDown on a text area will cancel fabricjs knowledge of\n   * current compositionMode. It will be set to false.\n   */\n  _mouseDownHandler({ e }: TPointerEventInfo) {\n    if (\n      !this.canvas ||\n      !this.editable ||\n      notALeftClick(e) ||\n      this.getActiveControl()\n    ) {\n      return;\n    }\n\n    if (this.draggableTextDelegate.start(e)) {\n      return;\n    }\n\n    this.canvas.textEditingManager.register(this);\n\n    if (this.selected) {\n      this.inCompositionMode = false;\n      this.setCursorByClick(e);\n    }\n\n    if (this.isEditing) {\n      this.__selectionStartOnMouseDown = this.selectionStart;\n      if (this.selectionStart === this.selectionEnd) {\n        this.abortCursorAnimation();\n      }\n      this.renderCursorOrSelection();\n    }\n  }\n\n  /**\n   * Default event handler for the basic functionalities needed on mousedown:before\n   * can be overridden to do something different.\n   * Scope of this implementation is: verify the object is already selected when mousing down\n   */\n  _mouseDownHandlerBefore({ e }: TPointerEventInfo) {\n    if (!this.canvas || !this.editable || notALeftClick(e)) {\n      return;\n    }\n    // we want to avoid that an object that was selected and then becomes unselectable,\n    // may trigger editing mode in some way.\n    this.selected = this === this.canvas._activeObject;\n  }\n\n  /**\n   * standard handler for mouse up, overridable\n   * @private\n   */\n  mouseUpHandler({ e, transform }: TPointerEventInfo) {\n    const didDrag = this.draggableTextDelegate.end(e);\n    if (this.canvas) {\n      this.canvas.textEditingManager.unregister(this);\n\n      const activeObject = this.canvas._activeObject;\n      if (activeObject && activeObject !== this) {\n        // avoid running this logic when there is an active object\n        // this because is possible with shift click and fast clicks,\n        // to rapidly deselect and reselect this object and trigger an enterEdit\n        return;\n      }\n    }\n    if (\n      !this.editable ||\n      (this.group && !this.group.interactive) ||\n      (transform && transform.actionPerformed) ||\n      notALeftClick(e) ||\n      didDrag\n    ) {\n      return;\n    }\n\n    if (this.__lastSelected && !this.getActiveControl()) {\n      this.selected = false;\n      this.__lastSelected = false;\n      this.enterEditing(e);\n      if (this.selectionStart === this.selectionEnd) {\n        this.initDelayedCursor(true);\n      } else {\n        this.renderCursorOrSelection();\n      }\n    } else {\n      this.selected = true;\n    }\n  }\n\n  /**\n   * Changes cursor location in a text depending on passed pointer (x/y) object\n   * @param {TPointerEvent} e Event object\n   */\n  setCursorByClick(e: TPointerEvent) {\n    const newSelection = this.getSelectionStartFromPointer(e),\n      start = this.selectionStart,\n      end = this.selectionEnd;\n    if (e.shiftKey) {\n      this.setSelectionStartEndWithShift(start, end, newSelection);\n    } else {\n      this.selectionStart = newSelection;\n      this.selectionEnd = newSelection;\n    }\n    if (this.isEditing) {\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Returns index of a character corresponding to where an object was clicked\n   * @param {TPointerEvent} e Event object\n   * @return {Number} Index of a character\n   */\n  getSelectionStartFromPointer(e: TPointerEvent): number {\n    const mouseOffset = this.canvas!.getScenePoint(e)\n      .transform(invertTransform(this.calcTransformMatrix()))\n      .add(new Point(-this._getLeftOffset(), -this._getTopOffset()));\n    let height = 0,\n      charIndex = 0,\n      lineIndex = 0;\n\n    for (let i = 0; i < this._textLines.length; i++) {\n      if (height <= mouseOffset.y) {\n        height += this.getHeightOfLine(i);\n        lineIndex = i;\n        if (i > 0) {\n          charIndex +=\n            this._textLines[i - 1].length + this.missingNewlineOffset(i - 1);\n        }\n      } else {\n        break;\n      }\n    }\n    const lineLeftOffset = Math.abs(this._getLineLeftOffset(lineIndex));\n    let width = lineLeftOffset;\n    const charLength = this._textLines[lineIndex].length;\n    const chars = this.__charBounds[lineIndex];\n    for (let j = 0; j < charLength; j++) {\n      // i removed something about flipX here, check.\n      const charWidth = chars[j].kernedWidth;\n      const widthAfter = width + charWidth;\n      if (mouseOffset.x <= widthAfter) {\n        // if the pointer is closer to the end of the char we increment charIndex\n        // in order to position the cursor after the char\n        if (\n          Math.abs(mouseOffset.x - widthAfter) <=\n          Math.abs(mouseOffset.x - width)\n        ) {\n          charIndex++;\n        }\n        break;\n      }\n      width = widthAfter;\n      charIndex++;\n    }\n\n    return Math.min(\n      // if object is horizontally flipped, mirror cursor location from the end\n      this.flipX ? charLength - charIndex : charIndex,\n      this._text.length\n    );\n  }\n}\n", "export type TKeyMapIText = Record<\n  KeyboardEvent['keyCode'],\n  CursorHandlingMethods\n>;\n\nexport type CursorHandlingMethods =\n  | 'moveCursorUp'\n  | 'moveCursorDown'\n  | 'moveCursorLeft'\n  | 'moveCursorRight'\n  | 'exitEditing'\n  | 'copy'\n  | 'cut'\n  | 'selectAll';\n\nconst MOVE_CURSOR_UP: CursorHandlingMethods = 'moveCursorUp';\nconst MOVE_CURSOR_DOWN: CursorHandlingMethods = 'moveCursorDown';\nconst MOVE_CURSOR_LEFT: CursorHandlingMethods = 'moveCursorLeft';\nconst MOVE_CURSOR_RIGHT: CursorHandlingMethods = 'moveCursorRight';\nconst EXIT_EDITING: CursorHandlingMethods = 'exitEditing';\n\n// @TODO look into import { Key } from 'ts-key-enum';\n// and transition from keyCode to Key\n// also reduce string duplication\nexport const keysMap: TKeyMapIText = {\n  9: EXIT_EDITING,\n  27: EXIT_EDITING,\n  33: MOVE_CURSOR_UP,\n  34: MOVE_CURSOR_DOWN,\n  35: MOVE_CURSOR_RIGHT,\n  36: MOVE_CURSOR_LEFT,\n  37: MOVE_CURSOR_LEFT,\n  38: MOVE_CURSOR_UP,\n  39: MOVE_CURSOR_RIGHT,\n  40: MOVE_CURSOR_DOWN,\n};\n\nexport const keysMapRtl: TKeyMapIText = {\n  9: EXIT_EDITING,\n  27: EXIT_EDITING,\n  33: MOVE_CURSOR_UP,\n  34: MOVE_CURSOR_DOWN,\n  35: MOVE_CURSOR_LEFT,\n  36: MOVE_CURSOR_RIGHT,\n  37: MOVE_CURSOR_RIGHT,\n  38: MOVE_CURSOR_UP,\n  39: MOVE_CURSOR_LEFT,\n  40: MOVE_CURSOR_DOWN,\n};\n\n/**\n * For functionalities on keyUp + ctrl || cmd\n */\nexport const ctrlKeysMapUp: TKeyMapIText = {\n  67: 'copy',\n  // there was a reason this wasn't deleted. for now leave it here\n  88: 'cut',\n};\n\n/**\n * For functionalities on keyDown + ctrl || cmd\n */\nexport const ctrlKeysMapDown: TKeyMapIText = {\n  65: 'selectAll',\n};\n", "import { Canvas } from '../../canvas/Canvas';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextClickBehavior } from './ITextClickBehavior';\nimport {\n  ctrlKeysMapDown,\n  ctrlKeysMapUp,\n  keysMap,\n  keysMapRtl,\n} from './constants';\nimport type { TClassProperties, TFiller, TOptions } from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport type { SerializedTextProps, TextProps } from '../Text/Text';\nimport {\n  JUSTIFY,\n  JUSTIFY_CENTER,\n  JUSTIFY_LEFT,\n  JUSTIFY_RIGHT,\n} from '../Text/constants';\nimport { CENTER, LEFT, RIGHT } from '../../constants';\nimport type { ObjectToCanvasElementOptions } from '../Object/Object';\n\ntype CursorBoundaries = {\n  left: number;\n  top: number;\n  leftOffset: number;\n  topOffset: number;\n};\n\n// Declare IText protected properties to workaround TS\nconst protectedDefaultValues = {\n  _selectionDirection: null,\n  _reSpace: /\\s|\\r?\\n/,\n  inCompositionMode: false,\n};\n\nexport const iTextDefaultValues: Partial<TClassProperties<IText>> = {\n  selectionStart: 0,\n  selectionEnd: 0,\n  selectionColor: 'rgba(17,119,255,0.3)',\n  isEditing: false,\n  editable: true,\n  editingBorderColor: 'rgba(102,153,255,0.25)',\n  cursorWidth: 2,\n  cursorColor: '',\n  cursorDelay: 1000,\n  cursorDuration: 600,\n  caching: true,\n  hiddenTextareaContainer: null,\n  keysMap,\n  keysMapRtl,\n  ctrlKeysMapDown,\n  ctrlKeysMapUp,\n  ...protectedDefaultValues,\n};\n\n// @TODO this is not complete\ninterface UniqueITextProps {\n  selectionStart: number;\n  selectionEnd: number;\n}\n\nexport interface SerializedITextProps\n  extends SerializedTextProps,\n    UniqueITextProps {}\n\nexport interface ITextProps extends TextProps, UniqueITextProps {}\n\n/**\n * @fires changed\n * @fires selection:changed\n * @fires editing:entered\n * @fires editing:exited\n * @fires dragstart\n * @fires drag drag event firing on the drag source\n * @fires dragend\n * @fires copy\n * @fires cut\n * @fires paste\n *\n * #### Supported key combinations\n * ```\n *   Move cursor:                    left, right, up, down\n *   Select character:               shift + left, shift + right\n *   Select text vertically:         shift + up, shift + down\n *   Move cursor by word:            alt + left, alt + right\n *   Select words:                   shift + alt + left, shift + alt + right\n *   Move cursor to line start/end:  cmd + left, cmd + right or home, end\n *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end\n *   Jump to start/end of text:      cmd + up, cmd + down\n *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown\n *   Delete character:               backspace\n *   Delete word:                    alt + backspace\n *   Delete line:                    cmd + backspace\n *   Forward delete:                 delete\n *   Copy text:                      ctrl/cmd + c\n *   Paste text:                     ctrl/cmd + v\n *   Cut text:                       ctrl/cmd + x\n *   Select entire text:             ctrl/cmd + a\n *   Quit editing                    tab or esc\n * ```\n *\n * #### Supported mouse/touch combination\n * ```\n *   Position cursor:                click/touch\n *   Create selection:               click/touch & drag\n *   Create selection:               click & shift + click\n *   Select word:                    double click\n *   Select line:                    triple click\n * ```\n */\nexport class IText<\n    Props extends TOptions<ITextProps> = Partial<ITextProps>,\n    SProps extends SerializedITextProps = SerializedITextProps,\n    EventSpec extends ITextEvents = ITextEvents\n  >\n  extends ITextClickBehavior<Props, SProps, EventSpec>\n  implements UniqueITextProps\n{\n  /**\n   * Index where text selection starts (or where cursor is when there is no selection)\n   * @type Number\n   * @default\n   */\n  declare selectionStart: number;\n\n  /**\n   * Index where text selection ends\n   * @type Number\n   * @default\n   */\n  declare selectionEnd: number;\n\n  declare compositionStart: number;\n\n  declare compositionEnd: number;\n\n  /**\n   * Color of text selection\n   * @type String\n   * @default\n   */\n  declare selectionColor: string;\n\n  /**\n   * Indicates whether text is in editing mode\n   * @type Boolean\n   * @default\n   */\n  declare isEditing: boolean;\n\n  /**\n   * Indicates whether a text can be edited\n   * @type Boolean\n   * @default\n   */\n  declare editable: boolean;\n\n  /**\n   * Border color of text object while it's in editing mode\n   * @type String\n   * @default\n   */\n  declare editingBorderColor: string;\n\n  /**\n   * Width of cursor (in px)\n   * @type Number\n   * @default\n   */\n  declare cursorWidth: number;\n\n  /**\n   * Color of text cursor color in editing mode.\n   * if not set (default) will take color from the text.\n   * if set to a color value that fabric can understand, it will\n   * be used instead of the color of the text at the current position.\n   * @type String\n   * @default\n   */\n  declare cursorColor: string;\n\n  /**\n   * Delay between cursor blink (in ms)\n   * @type Number\n   * @default\n   */\n  declare cursorDelay: number;\n\n  /**\n   * Duration of cursor fade in (in ms)\n   * @type Number\n   * @default\n   */\n  declare cursorDuration: number;\n\n  declare compositionColor: string;\n\n  /**\n   * Indicates whether internal text char widths can be cached\n   * @type Boolean\n   * @default\n   */\n  declare caching: boolean;\n\n  static ownDefaults = iTextDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...IText.ownDefaults };\n  }\n\n  static type = 'IText';\n\n  get type() {\n    const type = super.type;\n    // backward compatibility\n    return type === 'itext' ? 'i-text' : type;\n  }\n\n  /**\n   * Constructor\n   * @param {String} text Text string\n   * @param {Object} [options] Options object\n   */\n  constructor(text: string, options?: Props) {\n    super(text, { ...IText.ownDefaults, ...options } as Props);\n    this.initBehavior();\n  }\n\n  /**\n   * While editing handle differently\n   * @private\n   * @param {string} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    if (this.isEditing && this._savedProps && key in this._savedProps) {\n      // @ts-expect-error irritating TS\n      this._savedProps[key] = value;\n      return this;\n    }\n    if (key === 'canvas') {\n      this.canvas instanceof Canvas &&\n        this.canvas.textEditingManager.remove(this);\n      value instanceof Canvas && value.textEditingManager.add(this);\n    }\n    return super._set(key, value);\n  }\n\n  /**\n   * Sets selection start (left boundary of a selection)\n   * @param {Number} index Index to set selection start to\n   */\n  setSelectionStart(index: number) {\n    index = Math.max(index, 0);\n    this._updateAndFire('selectionStart', index);\n  }\n\n  /**\n   * Sets selection end (right boundary of a selection)\n   * @param {Number} index Index to set selection end to\n   */\n  setSelectionEnd(index: number) {\n    index = Math.min(index, this.text.length);\n    this._updateAndFire('selectionEnd', index);\n  }\n\n  /**\n   * @private\n   * @param {String} property 'selectionStart' or 'selectionEnd'\n   * @param {Number} index new position of property\n   */\n  protected _updateAndFire(\n    property: 'selectionStart' | 'selectionEnd',\n    index: number\n  ) {\n    if (this[property] !== index) {\n      this._fireSelectionChanged();\n      this[property] = index;\n    }\n    this._updateTextarea();\n  }\n\n  /**\n   * Fires the even of selection changed\n   * @private\n   */\n  _fireSelectionChanged() {\n    this.fire('selection:changed');\n    this.canvas && this.canvas.fire('text:selection:changed', { target: this });\n  }\n\n  /**\n   * Initialize text dimensions. Render all text on given context\n   * or on a offscreen canvas to get the text width with measureText.\n   * Updates this.width and this.height with the proper values.\n   * Does not return dimensions.\n   * @private\n   */\n  initDimensions() {\n    this.isEditing && this.initDelayedCursor();\n    super.initDimensions();\n  }\n\n  /**\n   * Gets style of a current selection/cursor (at the start position)\n   * if startIndex or endIndex are not provided, selectionStart or selectionEnd will be used.\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} endIndex End index to get styles at, if not specified selectionEnd or startIndex + 1\n   * @param {Boolean} [complete] get full style or not\n   * @return {Array} styles an array with one, zero or more Style objects\n   */\n  getSelectionStyles(\n    startIndex: number = this.selectionStart || 0,\n    endIndex: number = this.selectionEnd,\n    complete?: boolean\n  ) {\n    return super.getSelectionStyles(startIndex, endIndex, complete);\n  }\n\n  /**\n   * Sets style of a current selection, if no selection exist, do not set anything.\n   * @param {Object} [styles] Styles object\n   * @param {Number} [startIndex] Start index to get styles at\n   * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\n   */\n  setSelectionStyles(\n    styles: object,\n    startIndex: number = this.selectionStart || 0,\n    endIndex: number = this.selectionEnd\n  ) {\n    return super.setSelectionStyles(styles, startIndex, endIndex);\n  }\n\n  /**\n   * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\n   * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n   * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\n   */\n  get2DCursorLocation(\n    selectionStart = this.selectionStart,\n    skipWrapping?: boolean\n  ) {\n    return super.get2DCursorLocation(selectionStart, skipWrapping);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    super.render(ctx);\n    // clear the cursorOffsetCache, so we ensure to calculate once per renderCursor\n    // the correct position but not at every cursor animation.\n    this.cursorOffsetCache = {};\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * @override block cursor/selection logic while rendering the exported canvas\n   * @todo this workaround should be replaced with a more robust solution\n   */\n  toCanvasElement(options?: ObjectToCanvasElementOptions): HTMLCanvasElement {\n    const isEditing = this.isEditing;\n    this.isEditing = false;\n    const canvas = super.toCanvasElement(options);\n    this.isEditing = isEditing;\n    return canvas;\n  }\n\n  /**\n   * Renders cursor or selection (depending on what exists)\n   * it does on the contextTop. If contextTop is not available, do nothing.\n   */\n  renderCursorOrSelection() {\n    if (!this.isEditing) {\n      return;\n    }\n    const ctx = this.clearContextTop(true);\n    if (!ctx) {\n      return;\n    }\n    const boundaries = this._getCursorBoundaries();\n    if (this.selectionStart === this.selectionEnd) {\n      this.renderCursor(ctx, boundaries);\n    } else {\n      this.renderSelection(ctx, boundaries);\n    }\n    this.canvas!.contextTopDirty = true;\n    ctx.restore();\n  }\n\n  /**\n   * Returns cursor boundaries (left, top, leftOffset, topOffset)\n   * left/top are left/top of entire text box\n   * leftOffset/topOffset are offset from that left/top point of a text box\n   * @private\n   * @param {number} [index] index from start\n   * @param {boolean} [skipCaching]\n   */\n  _getCursorBoundaries(\n    index: number = this.selectionStart,\n    skipCaching?: boolean\n  ): CursorBoundaries {\n    const left = this._getLeftOffset(),\n      top = this._getTopOffset(),\n      offsets = this._getCursorBoundariesOffsets(index, skipCaching);\n    return {\n      left: left,\n      top: top,\n      leftOffset: offsets.left,\n      topOffset: offsets.top,\n    };\n  }\n\n  /**\n   * Caches and returns cursor left/top offset relative to instance's center point\n   * @private\n   * @param {number} index index from start\n   * @param {boolean} [skipCaching]\n   */\n  _getCursorBoundariesOffsets(\n    index: number,\n    skipCaching?: boolean\n  ): { left: number; top: number } {\n    if (skipCaching) {\n      return this.__getCursorBoundariesOffsets(index);\n    }\n    if (this.cursorOffsetCache && 'top' in this.cursorOffsetCache) {\n      return this.cursorOffsetCache as { left: number; top: number };\n    }\n    return (this.cursorOffsetCache = this.__getCursorBoundariesOffsets(index));\n  }\n\n  /**\n   * Calculates cursor left/top offset relative to instance's center point\n   * @private\n   * @param {number} index index from start\n   */\n  __getCursorBoundariesOffsets(index: number) {\n    let topOffset = 0,\n      leftOffset = 0;\n    const { charIndex, lineIndex } = this.get2DCursorLocation(index);\n\n    for (let i = 0; i < lineIndex; i++) {\n      topOffset += this.getHeightOfLine(i);\n    }\n    const lineLeftOffset = this._getLineLeftOffset(lineIndex);\n    const bound = this.__charBounds[lineIndex][charIndex];\n    bound && (leftOffset = bound.left);\n    if (\n      this.charSpacing !== 0 &&\n      charIndex === this._textLines[lineIndex].length\n    ) {\n      leftOffset -= this._getWidthOfCharSpacing();\n    }\n    const boundaries = {\n      top: topOffset,\n      left: lineLeftOffset + (leftOffset > 0 ? leftOffset : 0),\n    };\n    if (this.direction === 'rtl') {\n      if (\n        this.textAlign === RIGHT ||\n        this.textAlign === JUSTIFY ||\n        this.textAlign === JUSTIFY_RIGHT\n      ) {\n        boundaries.left *= -1;\n      } else if (this.textAlign === LEFT || this.textAlign === JUSTIFY_LEFT) {\n        boundaries.left = lineLeftOffset - (leftOffset > 0 ? leftOffset : 0);\n      } else if (\n        this.textAlign === CENTER ||\n        this.textAlign === JUSTIFY_CENTER\n      ) {\n        boundaries.left = lineLeftOffset - (leftOffset > 0 ? leftOffset : 0);\n      }\n    }\n    return boundaries;\n  }\n\n  /**\n   * Renders cursor on context Top, outside the animation cycle, on request\n   * Used for the drag/drop effect.\n   * If contextTop is not available, do nothing.\n   */\n  renderCursorAt(selectionStart: number) {\n    const boundaries = this._getCursorBoundaries(selectionStart, true);\n    this._renderCursor(this.canvas!.contextTop, boundaries, selectionStart);\n  }\n\n  /**\n   * Renders cursor\n   * @param {Object} boundaries\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  renderCursor(ctx: CanvasRenderingContext2D, boundaries: CursorBoundaries) {\n    this._renderCursor(ctx, boundaries, this.selectionStart);\n  }\n\n  _renderCursor(\n    ctx: CanvasRenderingContext2D,\n    boundaries: CursorBoundaries,\n    selectionStart: number\n  ) {\n    const cursorLocation = this.get2DCursorLocation(selectionStart),\n      lineIndex = cursorLocation.lineIndex,\n      charIndex =\n        cursorLocation.charIndex > 0 ? cursorLocation.charIndex - 1 : 0,\n      charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize'),\n      multiplier = this.getObjectScaling().x * this.canvas!.getZoom(),\n      cursorWidth = this.cursorWidth / multiplier,\n      dy = this.getValueOfPropertyAt(lineIndex, charIndex, 'deltaY'),\n      topOffset =\n        boundaries.topOffset +\n        ((1 - this._fontSizeFraction) * this.getHeightOfLine(lineIndex)) /\n          this.lineHeight -\n        charHeight * (1 - this._fontSizeFraction);\n\n    if (this.inCompositionMode) {\n      // TODO: investigate why there isn't a return inside the if,\n      // and why can't happen at the top of the function\n      this.renderSelection(ctx, boundaries);\n    }\n    ctx.fillStyle =\n      this.cursorColor ||\n      (this.getValueOfPropertyAt(lineIndex, charIndex, 'fill') as string);\n    ctx.globalAlpha = this._currentCursorOpacity;\n    ctx.fillRect(\n      boundaries.left + boundaries.leftOffset - cursorWidth / 2,\n      topOffset + boundaries.top + dy,\n      cursorWidth,\n      charHeight\n    );\n  }\n\n  /**\n   * Renders text selection\n   * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  renderSelection(ctx: CanvasRenderingContext2D, boundaries: CursorBoundaries) {\n    const selection = {\n      selectionStart: this.inCompositionMode\n        ? this.hiddenTextarea!.selectionStart\n        : this.selectionStart,\n      selectionEnd: this.inCompositionMode\n        ? this.hiddenTextarea!.selectionEnd\n        : this.selectionEnd,\n    };\n    this._renderSelection(ctx, selection, boundaries);\n  }\n\n  /**\n   * Renders drag start text selection\n   */\n  renderDragSourceEffect() {\n    const dragStartSelection =\n      this.draggableTextDelegate.getDragStartSelection()!;\n    this._renderSelection(\n      this.canvas!.contextTop,\n      dragStartSelection,\n      this._getCursorBoundaries(dragStartSelection.selectionStart, true)\n    );\n  }\n\n  renderDropTargetEffect(e: DragEvent) {\n    const dragSelection = this.getSelectionStartFromPointer(e);\n    this.renderCursorAt(dragSelection);\n  }\n\n  /**\n   * Renders text selection\n   * @private\n   * @param {{ selectionStart: number, selectionEnd: number }} selection\n   * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  _renderSelection(\n    ctx: CanvasRenderingContext2D,\n    selection: { selectionStart: number; selectionEnd: number },\n    boundaries: CursorBoundaries\n  ) {\n    const selectionStart = selection.selectionStart,\n      selectionEnd = selection.selectionEnd,\n      isJustify = this.textAlign.includes(JUSTIFY),\n      start = this.get2DCursorLocation(selectionStart),\n      end = this.get2DCursorLocation(selectionEnd),\n      startLine = start.lineIndex,\n      endLine = end.lineIndex,\n      startChar = start.charIndex < 0 ? 0 : start.charIndex,\n      endChar = end.charIndex < 0 ? 0 : end.charIndex;\n\n    for (let i = startLine; i <= endLine; i++) {\n      const lineOffset = this._getLineLeftOffset(i) || 0;\n      let lineHeight = this.getHeightOfLine(i),\n        realLineHeight = 0,\n        boxStart = 0,\n        boxEnd = 0;\n\n      if (i === startLine) {\n        boxStart = this.__charBounds[startLine][startChar].left;\n      }\n      if (i >= startLine && i < endLine) {\n        boxEnd =\n          isJustify && !this.isEndOfWrapping(i)\n            ? this.width\n            : this.getLineWidth(i) || 5; // WTF is this 5?\n      } else if (i === endLine) {\n        if (endChar === 0) {\n          boxEnd = this.__charBounds[endLine][endChar].left;\n        } else {\n          const charSpacing = this._getWidthOfCharSpacing();\n          boxEnd =\n            this.__charBounds[endLine][endChar - 1].left +\n            this.__charBounds[endLine][endChar - 1].width -\n            charSpacing;\n        }\n      }\n      realLineHeight = lineHeight;\n      if (this.lineHeight < 1 || (i === endLine && this.lineHeight > 1)) {\n        lineHeight /= this.lineHeight;\n      }\n      let drawStart = boundaries.left + lineOffset + boxStart,\n        drawHeight = lineHeight,\n        extraTop = 0;\n      const drawWidth = boxEnd - boxStart;\n      if (this.inCompositionMode) {\n        ctx.fillStyle = this.compositionColor || 'black';\n        drawHeight = 1;\n        extraTop = lineHeight;\n      } else {\n        ctx.fillStyle = this.selectionColor;\n      }\n      if (this.direction === 'rtl') {\n        if (\n          this.textAlign === RIGHT ||\n          this.textAlign === JUSTIFY ||\n          this.textAlign === JUSTIFY_RIGHT\n        ) {\n          drawStart = this.width - drawStart - drawWidth;\n        } else if (this.textAlign === LEFT || this.textAlign === JUSTIFY_LEFT) {\n          drawStart = boundaries.left + lineOffset - boxEnd;\n        } else if (\n          this.textAlign === CENTER ||\n          this.textAlign === JUSTIFY_CENTER\n        ) {\n          drawStart = boundaries.left + lineOffset - boxEnd;\n        }\n      }\n      ctx.fillRect(\n        drawStart,\n        boundaries.top + boundaries.topOffset + extraTop,\n        drawWidth,\n        drawHeight\n      );\n      boundaries.topOffset += realLineHeight;\n    }\n  }\n\n  /**\n   * High level function to know the height of the cursor.\n   * the currentChar is the one that precedes the cursor\n   * Returns fontSize of char at the current cursor\n   * Unused from the library, is for the end user\n   * @return {Number} Character font size\n   */\n  getCurrentCharFontSize(): number {\n    const cp = this._getCurrentCharIndex();\n    return this.getValueOfPropertyAt(cp.l, cp.c, 'fontSize');\n  }\n\n  /**\n   * High level function to know the color of the cursor.\n   * the currentChar is the one that precedes the cursor\n   * Returns color (fill) of char at the current cursor\n   * if the text object has a pattern or gradient for filler, it will return that.\n   * Unused by the library, is for the end user\n   * @return {String | TFiller} Character color (fill)\n   */\n  getCurrentCharColor(): string | TFiller | null {\n    const cp = this._getCurrentCharIndex();\n    return this.getValueOfPropertyAt(cp.l, cp.c, 'fill');\n  }\n\n  /**\n   * Returns the cursor position for the getCurrent.. functions\n   * @private\n   */\n  _getCurrentCharIndex() {\n    const cursorPosition = this.get2DCursorLocation(this.selectionStart, true),\n      charIndex =\n        cursorPosition.charIndex > 0 ? cursorPosition.charIndex - 1 : 0;\n    return { l: cursorPosition.lineIndex, c: charIndex };\n  }\n\n  dispose() {\n    this._exitEditing();\n    this.draggableTextDelegate.dispose();\n    super.dispose();\n  }\n}\n\nclassRegistry.setClass(IText);\n// legacy\nclassRegistry.setClass(IText, 'i-text');\n", "import type { TClassProperties, TOptions } from '../typedefs';\nimport { IText } from './IText/IText';\nimport { classRegistry } from '../ClassRegistry';\nimport { createTextboxDefaultControls } from '../controls/commonControls';\nimport { JUSTIFY } from './Text/constants';\nimport type { TextStyleDeclaration } from './Text/StyledText';\nimport type { SerializedITextProps, ITextProps } from './IText/IText';\nimport type { ITextEvents } from './IText/ITextBehavior';\nimport type { TextLinesInfo } from './Text/Text';\nimport type { Control } from '../controls/Control';\n\n// @TODO: Many things here are configuration related and shouldn't be on the class nor prototype\n// regexes, list of properties that are not suppose to change by instances, magic consts.\n// this will be a separated effort\nexport const textboxDefaultValues: Partial<TClassProperties<Textbox>> = {\n  minWidth: 20,\n  dynamicMinWidth: 2,\n  lockScalingFlip: true,\n  noScaleCache: false,\n  _wordJoiners: /[ \\t\\r]/,\n  splitByGrapheme: false,\n};\n\nexport type GraphemeData = {\n  wordsData: {\n    word: string[];\n    width: number;\n  }[][];\n  largestWordWidth: number;\n};\n\nexport type StyleMap = Record<string, { line: number; offset: number }>;\n\n// @TODO this is not complete\ninterface UniqueTextboxProps {\n  minWidth: number;\n  splitByGrapheme: boolean;\n  dynamicMinWidth: number;\n  _wordJoiners: RegExp;\n}\n\nexport interface SerializedTextboxProps\n  extends SerializedITextProps,\n    Pick<UniqueTextboxProps, 'minWidth' | 'splitByGrapheme'> {}\n\nexport interface TextboxProps extends ITextProps, UniqueTextboxProps {}\n\n/**\n * Textbox class, based on IText, allows the user to resize the text rectangle\n * and wraps lines automatically. Textboxes have their Y scaling locked, the\n * user can only change width. Height is adjusted automatically based on the\n * wrapping of lines.\n */\nexport class Textbox<\n    Props extends TOptions<TextboxProps> = Partial<TextboxProps>,\n    SProps extends SerializedTextboxProps = SerializedTextboxProps,\n    EventSpec extends ITextEvents = ITextEvents\n  >\n  extends IText<Props, SProps, EventSpec>\n  implements UniqueTextboxProps\n{\n  /**\n   * Minimum width of textbox, in pixels.\n   * @type Number\n   * @default\n   */\n  declare minWidth: number;\n\n  /**\n   * Minimum calculated width of a textbox, in pixels.\n   * fixed to 2 so that an empty textbox cannot go to 0\n   * and is still selectable without text.\n   * @type Number\n   * @default\n   */\n  declare dynamicMinWidth: number;\n\n  /**\n   * Use this boolean property in order to split strings that have no white space concept.\n   * this is a cheap way to help with chinese/japanese\n   * @type Boolean\n   * @since 2.6.0\n   */\n  declare splitByGrapheme: boolean;\n\n  declare _wordJoiners: RegExp;\n\n  declare _styleMap: StyleMap;\n\n  declare isWrapping: boolean;\n\n  static type = 'Textbox';\n\n  static textLayoutProperties = [...IText.textLayoutProperties, 'width'];\n\n  static ownDefaults = textboxDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Textbox.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {String} text Text string\n   * @param {Object} [options] Options object\n   */\n  constructor(text: string, options?: Props) {\n    super(text, { ...Textbox.ownDefaults, ...options } as Props);\n  }\n\n  /**\n   * Creates the default control object.\n   * If you prefer to have on instance of controls shared among all objects\n   * make this function return an empty object and add controls to the ownDefaults object\n   */\n  static createControls(): { controls: Record<string, Control> } {\n    return { controls: createTextboxDefaultControls() };\n  }\n\n  /**\n   * Unlike superclass's version of this function, Textbox does not update\n   * its width.\n   * @private\n   * @override\n   */\n  initDimensions() {\n    if (!this.initialized) {\n      return;\n    }\n    this.isEditing && this.initDelayedCursor();\n    this._clearCache();\n    // clear dynamicMinWidth as it will be different after we re-wrap line\n    this.dynamicMinWidth = 0;\n    // wrap lines\n    this._styleMap = this._generateStyleMap(this._splitText());\n    // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap\n    if (this.dynamicMinWidth > this.width) {\n      this._set('width', this.dynamicMinWidth);\n    }\n    if (this.textAlign.includes(JUSTIFY)) {\n      // once text is measured we need to make space fatter to make justified text.\n      this.enlargeSpaces();\n    }\n    // clear cache and re-calculate height\n    this.height = this.calcTextHeight();\n  }\n\n  /**\n   * Generate an object that translates the style object so that it is\n   * broken up by visual lines (new lines and automatic wrapping).\n   * The original text styles object is broken up by actual lines (new lines only),\n   * which is only sufficient for Text / IText\n   * @private\n   */\n  _generateStyleMap(textInfo: TextLinesInfo): StyleMap {\n    let realLineCount = 0,\n      realLineCharCount = 0,\n      charCount = 0;\n    const map: StyleMap = {};\n\n    for (let i = 0; i < textInfo.graphemeLines.length; i++) {\n      if (textInfo.graphemeText[charCount] === '\\n' && i > 0) {\n        realLineCharCount = 0;\n        charCount++;\n        realLineCount++;\n      } else if (\n        !this.splitByGrapheme &&\n        this._reSpaceAndTab.test(textInfo.graphemeText[charCount]) &&\n        i > 0\n      ) {\n        // this case deals with space's that are removed from end of lines when wrapping\n        realLineCharCount++;\n        charCount++;\n      }\n\n      map[i] = { line: realLineCount, offset: realLineCharCount };\n\n      charCount += textInfo.graphemeLines[i].length;\n      realLineCharCount += textInfo.graphemeLines[i].length;\n    }\n\n    return map;\n  }\n\n  /**\n   * Returns true if object has a style property or has it on a specified line\n   * @param {Number} lineIndex\n   * @return {Boolean}\n   */\n  styleHas(property: keyof TextStyleDeclaration, lineIndex: number): boolean {\n    if (this._styleMap && !this.isWrapping) {\n      const map = this._styleMap[lineIndex];\n      if (map) {\n        lineIndex = map.line;\n      }\n    }\n    return super.styleHas(property, lineIndex);\n  }\n\n  /**\n   * Returns true if object has no styling or no styling in a line\n   * @param {Number} lineIndex , lineIndex is on wrapped lines.\n   * @return {Boolean}\n   */\n  isEmptyStyles(lineIndex: number): boolean {\n    if (!this.styles) {\n      return true;\n    }\n    let offset = 0,\n      nextLineIndex = lineIndex + 1,\n      nextOffset: number,\n      shouldLimit = false;\n    const map = this._styleMap[lineIndex],\n      mapNextLine = this._styleMap[lineIndex + 1];\n    if (map) {\n      lineIndex = map.line;\n      offset = map.offset;\n    }\n    if (mapNextLine) {\n      nextLineIndex = mapNextLine.line;\n      shouldLimit = nextLineIndex === lineIndex;\n      nextOffset = mapNextLine.offset;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { line: this.styles[lineIndex] };\n    for (const p1 in obj) {\n      for (const p2 in obj[p1]) {\n        const p2Number = parseInt(p2, 10);\n        if (p2Number >= offset && (!shouldLimit || p2Number < nextOffset!)) {\n          // eslint-disable-next-line no-unused-vars\n          for (const p3 in obj[p1][p2]) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * @protected\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {TextStyleDeclaration} a style object reference to the existing one or a new empty object when undefined\n   */\n  _getStyleDeclaration(\n    lineIndex: number,\n    charIndex: number\n  ): TextStyleDeclaration {\n    if (this._styleMap && !this.isWrapping) {\n      const map = this._styleMap[lineIndex];\n      if (!map) {\n        return {};\n      }\n      lineIndex = map.line;\n      charIndex = map.offset + charIndex;\n    }\n    return super._getStyleDeclaration(lineIndex, charIndex);\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n    style: object\n  ) {\n    const map = this._styleMap[lineIndex];\n    super._setStyleDeclaration(map.line, map.offset + charIndex, style);\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @private\n   */\n  protected _deleteStyleDeclaration(lineIndex: number, charIndex: number) {\n    const map = this._styleMap[lineIndex];\n    super._deleteStyleDeclaration(map.line, map.offset + charIndex);\n  }\n\n  /**\n   * probably broken need a fix\n   * Returns the real style line that correspond to the wrapped lineIndex line\n   * Used just to verify if the line does exist or not.\n   * @param {Number} lineIndex\n   * @returns {Boolean} if the line exists or not\n   * @private\n   */\n  protected _getLineStyle(lineIndex: number): boolean {\n    const map = this._styleMap[lineIndex];\n    return !!this.styles[map.line];\n  }\n\n  /**\n   * Set the line style to an empty object so that is initialized\n   * @param {Number} lineIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setLineStyle(lineIndex: number) {\n    const map = this._styleMap[lineIndex];\n    super._setLineStyle(map.line);\n  }\n\n  /**\n   * Wraps text using the 'width' property of Textbox. First this function\n   * splits text on newlines, so we preserve newlines entered by the user.\n   * Then it wraps each line using the width of the Textbox by calling\n   * _wrapLine().\n   * @param {Array} lines The string array of text that is split into lines\n   * @param {Number} desiredWidth width you want to wrap to\n   * @returns {Array} Array of lines\n   */\n  _wrapText(lines: string[], desiredWidth: number): string[][] {\n    this.isWrapping = true;\n    // extract all thewords and the widths to optimally wrap lines.\n    const data = this.getGraphemeDataForRender(lines);\n    const wrapped: string[][] = [];\n    for (let i = 0; i < data.wordsData.length; i++) {\n      wrapped.push(...this._wrapLine(i, desiredWidth, data));\n    }\n    this.isWrapping = false;\n    return wrapped;\n  }\n\n  /**\n   * For each line of text terminated by an hard line stop,\n   * measure each word width and extract the largest word from all.\n   * The returned words here are the one that at the end will be rendered.\n   * @param {string[]} lines the lines we need to measure\n   *\n   */\n  getGraphemeDataForRender(lines: string[]): GraphemeData {\n    const splitByGrapheme = this.splitByGrapheme,\n      infix = splitByGrapheme ? '' : ' ';\n\n    let largestWordWidth = 0;\n\n    const data = lines.map((line, lineIndex) => {\n      let offset = 0;\n      const wordsOrGraphemes = splitByGrapheme\n        ? this.graphemeSplit(line)\n        : this.wordSplit(line);\n\n      if (wordsOrGraphemes.length === 0) {\n        return [{ word: [], width: 0 }];\n      }\n\n      return wordsOrGraphemes.map((word: string) => {\n        // if using splitByGrapheme words are already in graphemes.\n        const graphemeArray = splitByGrapheme\n          ? [word]\n          : this.graphemeSplit(word);\n        const width = this._measureWord(graphemeArray, lineIndex, offset);\n        largestWordWidth = Math.max(width, largestWordWidth);\n        offset += graphemeArray.length + infix.length;\n        return { word: graphemeArray, width };\n      });\n    });\n\n    return {\n      wordsData: data,\n      largestWordWidth,\n    };\n  }\n\n  /**\n   * Helper function to measure a string of text, given its lineIndex and charIndex offset\n   * It gets called when charBounds are not available yet.\n   * Override if necessary\n   * Use with {@link Textbox#wordSplit}\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {String} text\n   * @param {number} lineIndex\n   * @param {number} charOffset\n   * @returns {number}\n   */\n  _measureWord(word: string[], lineIndex: number, charOffset = 0): number {\n    let width = 0,\n      prevGrapheme;\n    const skipLeft = true;\n    for (let i = 0, len = word.length; i < len; i++) {\n      const box = this._getGraphemeBox(\n        word[i],\n        lineIndex,\n        i + charOffset,\n        prevGrapheme,\n        skipLeft\n      );\n      width += box.kernedWidth;\n      prevGrapheme = word[i];\n    }\n    return width;\n  }\n\n  /**\n   * Override this method to customize word splitting\n   * Use with {@link Textbox#_measureWord}\n   * @param {string} value\n   * @returns {string[]} array of words\n   */\n  wordSplit(value: string): string[] {\n    return value.split(this._wordJoiners);\n  }\n\n  /**\n   * Wraps a line of text using the width of the Textbox as desiredWidth\n   * and leveraging the known width o words from GraphemeData\n   * @private\n   * @param {Number} lineIndex\n   * @param {Number} desiredWidth width you want to wrap the line to\n   * @param {GraphemeData} graphemeData an object containing all the lines' words width.\n   * @param {Number} reservedSpace space to remove from wrapping for custom functionalities\n   * @returns {Array} Array of line(s) into which the given text is wrapped\n   * to.\n   */\n  _wrapLine(\n    lineIndex: number,\n    desiredWidth: number,\n    { largestWordWidth, wordsData }: GraphemeData,\n    reservedSpace = 0\n  ): string[][] {\n    const additionalSpace = this._getWidthOfCharSpacing(),\n      splitByGrapheme = this.splitByGrapheme,\n      graphemeLines = [],\n      infix = splitByGrapheme ? '' : ' ';\n\n    let lineWidth = 0,\n      line: string[] = [],\n      // spaces in different languages?\n      offset = 0,\n      infixWidth = 0,\n      lineJustStarted = true;\n\n    desiredWidth -= reservedSpace;\n\n    const maxWidth = Math.max(\n      desiredWidth,\n      largestWordWidth,\n      this.dynamicMinWidth\n    );\n    // layout words\n    const data = wordsData[lineIndex];\n    offset = 0;\n    let i;\n    for (i = 0; i < data.length; i++) {\n      const { word, width: wordWidth } = data[i];\n      offset += word.length;\n\n      lineWidth += infixWidth + wordWidth - additionalSpace;\n      if (lineWidth > maxWidth && !lineJustStarted) {\n        graphemeLines.push(line);\n        line = [];\n        lineWidth = wordWidth;\n        lineJustStarted = true;\n      } else {\n        lineWidth += additionalSpace;\n      }\n\n      if (!lineJustStarted && !splitByGrapheme) {\n        line.push(infix);\n      }\n      line = line.concat(word);\n\n      infixWidth = splitByGrapheme\n        ? 0\n        : this._measureWord([infix], lineIndex, offset);\n      offset++;\n      lineJustStarted = false;\n    }\n\n    i && graphemeLines.push(line);\n\n    // TODO: this code is probably not necessary anymore.\n    // it can be moved out of this function since largestWordWidth is now\n    // known in advance\n    if (largestWordWidth + reservedSpace > this.dynamicMinWidth) {\n      this.dynamicMinWidth = largestWordWidth - additionalSpace + reservedSpace;\n    }\n    return graphemeLines;\n  }\n\n  /**\n   * Detect if the text line is ended with an hard break\n   * text and itext do not have wrapping, return false\n   * @param {Number} lineIndex text to split\n   * @return {Boolean}\n   */\n  isEndOfWrapping(lineIndex: number): boolean {\n    if (!this._styleMap[lineIndex + 1]) {\n      // is last line, return true;\n      return true;\n    }\n    if (this._styleMap[lineIndex + 1].line !== this._styleMap[lineIndex].line) {\n      // this is last line before a line break, return true;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Detect if a line has a linebreak and so we need to account for it when moving\n   * and counting style.\n   * This is important only for splitByGrapheme at the end of wrapping.\n   * If we are not wrapping the offset is always 1\n   * @return Number\n   */\n  missingNewlineOffset(lineIndex: number, skipWrapping?: boolean): 0 | 1 {\n    if (this.splitByGrapheme && !skipWrapping) {\n      return this.isEndOfWrapping(lineIndex) ? 1 : 0;\n    }\n    return 1;\n  }\n\n  /**\n   * Gets lines of text to render in the Textbox. This function calculates\n   * text wrapping on the fly every time it is called.\n   * @param {String} text text to split\n   * @returns {Array} Array of lines in the Textbox.\n   * @override\n   */\n  _splitTextIntoLines(text: string) {\n    const newText = super._splitTextIntoLines(text),\n      graphemeLines = this._wrapText(newText.lines, this.width),\n      lines = new Array(graphemeLines.length);\n    for (let i = 0; i < graphemeLines.length; i++) {\n      lines[i] = graphemeLines[i].join('');\n    }\n    newText.lines = lines;\n    newText.graphemeLines = graphemeLines;\n    return newText;\n  }\n\n  getMinWidth() {\n    return Math.max(this.minWidth, this.dynamicMinWidth);\n  }\n\n  _removeExtraneousStyles() {\n    const linesToKeep = new Map();\n    for (const prop in this._styleMap) {\n      const propNumber = parseInt(prop, 10);\n      if (this._textLines[propNumber]) {\n        const lineIndex = this._styleMap[prop].line;\n        linesToKeep.set(`${lineIndex}`, true);\n      }\n    }\n    for (const prop in this.styles) {\n      if (!linesToKeep.has(prop)) {\n        delete this.styles[prop];\n      }\n    }\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @method toObject\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  // cant use ts-expect-error because of ts 5.3 cross check\n  // @ts-ignore TS this typing limitations\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject<T, K>([\n      'minWidth',\n      'splitByGrapheme',\n      ...propertiesToInclude,\n    ] as K[]) as Pick<T, K> & SProps;\n  }\n}\n\nclassRegistry.setClass(Textbox);\n", "import { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport { sendPointToPlane } from '../../util/misc/planeChange';\nimport type { LayoutStrategyResult, StrictLayoutContext } from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { getObjectBounds } from './utils';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will adjust the bounding box to match the clip path bounding box.\n */\nexport class ClipPathLayout extends LayoutStrategy {\n  static readonly type = 'clip-path';\n\n  shouldPerformLayout(context: StrictLayoutContext): boolean {\n    return !!context.target.clipPath && super.shouldPerformLayout(context);\n  }\n\n  shouldLayoutClipPath() {\n    return false;\n  }\n\n  calcLayoutResult(\n    context: StrictLayoutContext,\n    objects: FabricObject[]\n  ): LayoutStrategyResult | undefined {\n    const { target } = context;\n    const { clipPath } = target;\n    if (!clipPath || !this.shouldPerformLayout(context)) {\n      return;\n    }\n    // TODO: remove stroke calculation from this case\n    const { width, height } = makeBoundingBoxFromPoints(\n      getObjectBounds(target, clipPath as FabricObject)\n    );\n    const size = new Point(width, height);\n    if (clipPath.absolutePositioned) {\n      //  we want the center point to exist in group's containing plane\n      const clipPathCenter = sendPointToPlane(\n        clipPath.getRelativeCenterPoint(),\n        undefined,\n        target.group?.calcTransformMatrix()\n      );\n      return {\n        center: clipPathCenter,\n        size,\n      };\n    } else {\n      //  we want the center point to exist in group's containing plane, so we send it upwards\n      const clipPathCenter = clipPath\n        .getRelativeCenterPoint()\n        .transform(target.calcOwnMatrix(), true);\n      if (this.shouldPerformLayout(context)) {\n        // the clip path is positioned relative to the group's center which is affected by the bbox\n        // so we first calculate the bbox\n        const { center = new Point(), correction = new Point() } =\n          this.calcBoundingBox(objects, context) || {};\n        return {\n          center: center.add(clipPathCenter),\n          correction: correction.subtract(clipPathCenter),\n          size,\n        };\n      } else {\n        return {\n          center: target.getRelativeCenterPoint().add(clipPathCenter),\n          size,\n        };\n      }\n    }\n  }\n}\n\nclassRegistry.setClass(ClipPathLayout);\n", "import { Point } from '../../Point';\nimport type {\n  InitializationLayoutContext,\n  LayoutStrategyResult,\n  StrictLayoutContext,\n} from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will keep target's initial size.\n */\nexport class FixedLayout extends LayoutStrategy {\n  static readonly type = 'fixed';\n\n  /**\n   * @override respect target's initial size\n   */\n  getInitialSize(\n    { target }: StrictLayoutContext & InitializationLayoutContext,\n    { size }: Pick<LayoutStrategyResult, 'center' | 'size'>\n  ): Point {\n    return new Point(target.width || size.x, target.height || size.y);\n  }\n}\n\nclassRegistry.setClass(FixedLayout);\n", "import { LayoutManager } from './LayoutManager';\nimport type { RegistrationContext, StrictLayoutContext } from './types';\nimport type { Group } from '../shapes/Group';\n\n/**\n * Today the LayoutManager class also takes care of subscribing event handlers\n * to update the group layout when the group is interactive and a transform is applied\n * to a child object.\n * The ActiveSelection is never interactive, but it could contain objects from\n * groups that are.\n * The standard LayoutManager would subscribe the children of the activeSelection to\n * perform layout changes to the active selection itself, what we need instead is that\n * the transformation applied to the active selection will trigger changes to the\n * original group of the children ( the one referenced under the parent property )\n * This subclass of the LayoutManager has a single duty to fill the gap of this difference.`\n */\nexport class ActiveSelectionLayoutManager extends LayoutManager {\n  subscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>\n  ): void {\n    const activeSelection = context.target;\n    const parents = context.targets.reduce((parents, target) => {\n      target.parent && parents.add(target.parent);\n      return parents;\n    }, new Set<Group>());\n    parents.forEach((parent) => {\n      parent.layoutManager.subscribeTargets({\n        target: parent,\n        targets: [activeSelection],\n      });\n    });\n  }\n\n  /**\n   * unsubscribe from parent only if all its children were deselected\n   */\n  unsubscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>\n  ): void {\n    const activeSelection = context.target;\n    const selectedObjects = activeSelection.getObjects();\n    const parents = context.targets.reduce((parents, target) => {\n      target.parent && parents.add(target.parent);\n      return parents;\n    }, new Set<Group>());\n    parents.forEach((parent) => {\n      !selectedObjects.some((object) => object.parent === parent) &&\n        parent.layoutManager.unsubscribeTargets({\n          target: parent,\n          targets: [activeSelection],\n        });\n    });\n  }\n}\n", "import type { ControlRenderingStyleOverride } from '../controls/controlRendering';\nimport { classRegistry } from '../ClassRegistry';\nimport type { GroupProps } from './Group';\nimport { Group } from './Group';\nimport type { FabricObject } from './Object/FabricObject';\nimport {\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_REMOVED,\n} from '../LayoutManager/constants';\nimport type { TClassProperties } from '../typedefs';\nimport { log } from '../util/internals/console';\nimport { ActiveSelectionLayoutManager } from '../LayoutManager/ActiveSelectionLayoutManager';\n\nexport type MultiSelectionStacking = 'canvas-stacking' | 'selection-order';\n\nexport interface ActiveSelectionOptions extends GroupProps {\n  multiSelectionStacking: MultiSelectionStacking;\n}\n\nconst activeSelectionDefaultValues: Partial<TClassProperties<ActiveSelection>> =\n  {\n    multiSelectionStacking: 'canvas-stacking',\n  };\n\n/**\n * Used by Canvas to manage selection.\n *\n * @example\n * class MyActiveSelection extends ActiveSelection {\n *   ...\n * }\n *\n * // override the default `ActiveSelection` class\n * classRegistry.setClass(MyActiveSelection)\n */\nexport class ActiveSelection extends Group {\n  static type = 'ActiveSelection';\n\n  static ownDefaults: Record<string, any> = activeSelectionDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...ActiveSelection.ownDefaults };\n  }\n\n  /**\n   * The ActiveSelection needs to use the ActiveSelectionLayoutManager\n   * or selections on interactive groups may be broken\n   */\n  declare layoutManager: ActiveSelectionLayoutManager;\n\n  /**\n   * controls how selected objects are added during a multiselection event\n   * - `canvas-stacking` adds the selected object to the active selection while respecting canvas object stacking order\n   * - `selection-order` adds the selected object to the top of the stack,\n   * meaning that the stack is ordered by the order in which objects were selected\n   * @default `canvas-stacking`\n   */\n  declare multiSelectionStacking: MultiSelectionStacking;\n\n  constructor(\n    objects: FabricObject[] = [],\n    { layoutManager, ...options }: Partial<ActiveSelectionOptions> = {}\n  ) {\n    super(objects, {\n      layoutManager: layoutManager ?? new ActiveSelectionLayoutManager(),\n    });\n    Object.assign(this, ActiveSelection.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   */\n  _shouldSetNestedCoords() {\n    return true;\n  }\n\n  /**\n   * @private\n   * @override we don't want the selection monitor to be active\n   */\n  __objectSelectionMonitor() {\n    //  noop\n  }\n\n  /**\n   * Adds objects with respect to {@link multiSelectionStacking}\n   * @param targets object to add to selection\n   */\n  multiSelectAdd(...targets: FabricObject[]) {\n    if (this.multiSelectionStacking === 'selection-order') {\n      this.add(...targets);\n    } else {\n      //  respect object stacking as it is on canvas\n      //  perf enhancement for large ActiveSelection: consider a binary search of `isInFrontOf`\n      targets.forEach((target) => {\n        const index = this._objects.findIndex((obj) => obj.isInFrontOf(target));\n        const insertAt =\n          index === -1\n            ? //  `target` is in front of all other objects\n              this.size()\n            : index;\n        this.insertAt(insertAt, target);\n      });\n    }\n  }\n\n  /**\n   * @override block ancestors/descendants of selected objects from being selected to prevent a circular object tree\n   */\n  canEnterGroup(object: FabricObject) {\n    if (\n      this.getObjects().some(\n        (o) => o.isDescendantOf(object) || object.isDescendantOf(o)\n      )\n    ) {\n      //  prevent circular object tree\n      log(\n        'error',\n        'ActiveSelection: circular object trees are not supported, this call has no effect'\n      );\n      return false;\n    }\n\n    return super.canEnterGroup(object);\n  }\n\n  /**\n   * Change an object so that it can be part of an active selection.\n   * this method is called by multiselectAdd from canvas code.\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    // This condition check that the object has currently a group, and the group\n    // is also its parent, meaning that is not in an active selection, but is\n    // in a normal group.\n    if (object.parent && object.parent === object.group) {\n      // Disconnect the object from the group functionalities, but keep the ref parent intact\n      // for later re-enter\n      object.parent._exitGroup(object);\n      // in this case the object is probably inside an active selection.\n    } else if (object.group && object.parent !== object.group) {\n      // in this case group.remove will also clear the old parent reference.\n      object.group.remove(object);\n    }\n    // enter the active selection from a render perspective\n    // the object will be in the objects array of both the ActiveSelection and the Group\n    // but referenced in the group's _activeObjects so that it won't be rendered twice.\n    this._enterGroup(object, removeParentTransform);\n  }\n\n  /**\n   * we want objects to retain their canvas ref when exiting instance\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    this._exitGroup(object, removeParentTransform);\n    // return to parent\n    object.parent && object.parent._enterGroup(object, true);\n  }\n\n  /**\n   * @private\n   * @param {'added'|'removed'} type\n   * @param {FabricObject[]} targets\n   */\n  _onAfterObjectsChange(type: 'added' | 'removed', targets: FabricObject[]) {\n    super._onAfterObjectsChange(type, targets);\n    const groups = new Set<Group>();\n    targets.forEach((object) => {\n      const { parent } = object;\n      parent && groups.add(parent);\n    });\n    if (type === LAYOUT_TYPE_REMOVED) {\n      //  invalidate groups' layout and mark as dirty\n      groups.forEach((group) => {\n        group._onAfterObjectsChange(LAYOUT_TYPE_ADDED, targets);\n      });\n    } else {\n      //  mark groups as dirty\n      groups.forEach((group) => {\n        group._set('dirty', true);\n      });\n    }\n  }\n\n  /**\n   * @override remove all objects\n   */\n  onDeselect() {\n    this.removeAll();\n    return false;\n  }\n\n  /**\n   * Returns string representation of a group\n   * @return {String}\n   */\n  toString() {\n    return `#<ActiveSelection: (${this.complexity()})>`;\n  }\n\n  /**\n   * Decide if the object should cache or not. Create its own cache level\n   * objectCaching is a global flag, wins over everything\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step. None of the fabric classes requires it.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    return false;\n  }\n\n  /**\n   * Check if this group or its parent group are caching, recursively up\n   * @return {Boolean}\n   */\n  isOnACache() {\n    return false;\n  }\n\n  /**\n   * Renders controls and borders for the object\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Object} [styleOverride] properties to override the object style\n   * @param {Object} [childrenOverride] properties to override the children overrides\n   */\n  _renderControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride?: ControlRenderingStyleOverride,\n    childrenOverride?: ControlRenderingStyleOverride\n  ) {\n    ctx.save();\n    ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n    super._renderControls(ctx, styleOverride);\n    const options = {\n      hasControls: false,\n      ...childrenOverride,\n      forActiveSelection: true,\n    };\n    for (let i = 0; i < this._objects.length; i++) {\n      this._objects[i]._renderControls(ctx, options);\n    }\n    ctx.restore();\n  }\n}\n\nclassRegistry.setClass(ActiveSelection);\nclassRegistry.setClass(ActiveSelection, 'activeSelection');\n", "/**\n * Canvas 2D filter backend.\n */\nimport type { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TPipelineResources } from './typedefs';\n\nexport class Canvas2dFilterBackend {\n  /**\n   * Experimental. This object is a sort of repository of help layers used to avoid\n   * of recreating them during frequent filtering. If you are previewing a filter with\n   * a slider you probably do not want to create help layers every filter step.\n   * in this object there will be appended some canvases, created once, resized sometimes\n   * cleared never. Clearing is left to the developer.\n   **/\n  resources: TPipelineResources = {};\n\n  /**\n   * Apply a set of filters against a source image and draw the filtered output\n   * to the provided destination canvas.\n   *\n   * @param {EnhancedFilter} filters The filter to apply.\n   * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.\n   * @param {Number} sourceWidth The width of the source input.\n   * @param {Number} sourceHeight The height of the source input.\n   * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n   */\n  applyFilters(\n    filters: BaseFilter[],\n    sourceElement: CanvasImageSource,\n    sourceWidth: number,\n    sourceHeight: number,\n    targetCanvas: HTMLCanvasElement\n  ): T2DPipelineState | void {\n    const ctx = targetCanvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);\n    const imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n    const originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n    const pipelineState: T2DPipelineState = {\n      sourceWidth,\n      sourceHeight,\n      imageData,\n      originalEl: sourceElement,\n      originalImageData,\n      canvasEl: targetCanvas,\n      ctx,\n      filterBackend: this,\n    };\n    filters.forEach((filter) => {\n      filter.applyTo(pipelineState);\n    });\n    const { imageData: imageDataPostFilter } = pipelineState;\n    if (\n      imageDataPostFilter.width !== sourceWidth ||\n      imageDataPostFilter.height !== sourceHeight\n    ) {\n      targetCanvas.width = imageDataPostFilter.width;\n      targetCanvas.height = imageDataPostFilter.height;\n    }\n    ctx.putImageData(imageDataPostFilter, 0, 0);\n    return pipelineState;\n  }\n}\n", "import { config } from '../config';\nimport { createCanvasElement } from '../util/misc/dom';\nimport type {\n  TWebGLPipelineState,\n  TProgramCache,\n  TTextureCache,\n  TPipelineResources,\n} from './typedefs';\nimport type { BaseFilter } from './BaseFilter';\n\nexport class WebGLFilterBackend {\n  declare tileSize: number;\n\n  /**\n   * Define ...\n   **/\n  aPosition: Float32Array = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);\n\n  /**\n   * If GLPut data is the fastest operation, or if forced, this buffer will be used\n   * to transfer the data back in the 2d logic\n   **/\n  declare imageBuffer?: ArrayBuffer;\n\n  declare canvas: HTMLCanvasElement;\n\n  /**\n   * The Webgl context that will execute the operations for filtering\n   **/\n  declare gl: WebGLRenderingContext;\n\n  /**\n   * Keyed map for shader cache\n   **/\n  declare programCache: TProgramCache;\n\n  /**\n   * Keyed map for texture cache\n   **/\n  declare textureCache: TTextureCache;\n\n  /**\n   * Contains GPU info for debug\n   **/\n  declare gpuInfo: any;\n\n  /**\n   * Experimental. This object is a sort of repository of help layers used to avoid\n   * of recreating them during frequent filtering. If you are previewing a filter with\n   * a slider you probably do not want to create help layers every filter step.\n   * in this object there will be appended some canvases, created once, resized sometimes\n   * cleared never. Clearing is left to the developer.\n   **/\n  resources: TPipelineResources = {};\n\n  constructor({ tileSize = config.textureSize } = {}) {\n    this.tileSize = tileSize;\n    this.setupGLContext(tileSize, tileSize);\n    this.captureGPUInfo();\n  }\n\n  /**\n   * Setup a WebGL context suitable for filtering, and bind any needed event handlers.\n   */\n  setupGLContext(width: number, height: number): void {\n    this.dispose();\n    this.createWebGLCanvas(width, height);\n  }\n\n  /**\n   * Create a canvas element and associated WebGL context and attaches them as\n   * class properties to the GLFilterBackend class.\n   */\n  createWebGLCanvas(width: number, height: number): void {\n    const canvas = createCanvasElement();\n    canvas.width = width;\n    canvas.height = height;\n    const glOptions = {\n        alpha: true,\n        premultipliedAlpha: false,\n        depth: false,\n        stencil: false,\n        antialias: false,\n      },\n      gl = canvas.getContext('webgl', glOptions) as WebGLRenderingContext;\n\n    if (!gl) {\n      return;\n    }\n    gl.clearColor(0, 0, 0, 0);\n    // this canvas can fire webglcontextlost and webglcontextrestored\n    this.canvas = canvas;\n    this.gl = gl;\n  }\n\n  /**\n   * Attempts to apply the requested filters to the source provided, drawing the filtered output\n   * to the provided target canvas.\n   *\n   * @param {Array} filters The filters to apply.\n   * @param {TexImageSource} source The source to be filtered.\n   * @param {Number} width The width of the source input.\n   * @param {Number} height The height of the source input.\n   * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n   * @param {String|undefined} cacheKey A key used to cache resources related to the source. If\n   * omitted, caching will be skipped.\n   */\n  applyFilters(\n    filters: BaseFilter[],\n    source: TexImageSource,\n    width: number,\n    height: number,\n    targetCanvas: HTMLCanvasElement,\n    cacheKey?: string\n  ): TWebGLPipelineState | undefined {\n    const gl = this.gl;\n    const ctx = targetCanvas.getContext('2d');\n    if (!gl || !ctx) {\n      return;\n    }\n    let cachedTexture;\n    if (cacheKey) {\n      cachedTexture = this.getCachedTexture(cacheKey, source);\n    }\n    const pipelineState: TWebGLPipelineState = {\n      originalWidth:\n        (source as HTMLImageElement).width ||\n        // @ts-expect-error is this a bug? should this be naturalWidth? or is this the pipeline state?\n        (source as HTMLImageElement).originalWidth ||\n        0,\n      originalHeight:\n        (source as HTMLImageElement).height ||\n        // @ts-expect-error is this a bug? should this be naturalHeight? or is this the pipeline state?\n        (source as HTMLImageElement).originalHeight ||\n        0,\n      sourceWidth: width,\n      sourceHeight: height,\n      destinationWidth: width,\n      destinationHeight: height,\n      context: gl,\n      sourceTexture: this.createTexture(\n        gl,\n        width,\n        height,\n        !cachedTexture ? source : undefined\n      ),\n      targetTexture: this.createTexture(gl, width, height),\n      originalTexture:\n        cachedTexture ||\n        this.createTexture(\n          gl,\n          width,\n          height,\n          !cachedTexture ? source : undefined\n        )!,\n      passes: filters.length,\n      webgl: true,\n      aPosition: this.aPosition,\n      programCache: this.programCache,\n      pass: 0,\n      filterBackend: this,\n      targetCanvas: targetCanvas,\n    };\n    const tempFbo = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);\n    filters.forEach((filter: any) => {\n      filter && filter.applyTo(pipelineState);\n    });\n    resizeCanvasIfNeeded(pipelineState);\n    this.copyGLTo2D(gl, pipelineState);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.deleteTexture(pipelineState.sourceTexture);\n    gl.deleteTexture(pipelineState.targetTexture);\n    gl.deleteFramebuffer(tempFbo);\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    return pipelineState;\n  }\n\n  /**\n   * Detach event listeners, remove references, and clean up caches.\n   */\n  dispose() {\n    if (this.canvas) {\n      // we are disposing, we don't care about the fact\n      // that the canvas shouldn't be null.\n      // @ts-expect-error disposing\n      this.canvas = null;\n      // @ts-expect-error disposing\n      this.gl = null;\n    }\n    this.clearWebGLCaches();\n  }\n\n  /**\n   * Wipe out WebGL-related caches.\n   */\n  clearWebGLCaches() {\n    this.programCache = {};\n    this.textureCache = {};\n  }\n\n  /**\n   * Create a WebGL texture object.\n   *\n   * Accepts specific dimensions to initialize the texture to or a source image.\n   *\n   * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.\n   * @param {number} width The width to initialize the texture at.\n   * @param {number} height The height to initialize the texture.\n   * @param {TexImageSource} textureImageSource A source for the texture data.\n   * @param {number} filter gl.NEAREST default or gl.LINEAR filters for the texture.\n   * This filter is very useful for LUTs filters. If you need interpolation use gl.LINEAR\n   * @returns {WebGLTexture}\n   */\n  createTexture(\n    gl: WebGLRenderingContext,\n    width: number,\n    height: number,\n    textureImageSource?: TexImageSource,\n    filter?:\n      | WebGLRenderingContextBase['NEAREST']\n      | WebGLRenderingContextBase['LINEAR']\n  ) {\n    const {\n      NEAREST,\n      TEXTURE_2D,\n      RGBA,\n      UNSIGNED_BYTE,\n      CLAMP_TO_EDGE,\n      TEXTURE_MAG_FILTER,\n      TEXTURE_MIN_FILTER,\n      TEXTURE_WRAP_S,\n      TEXTURE_WRAP_T,\n    } = gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(TEXTURE_2D, texture);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_MAG_FILTER, filter || NEAREST);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, filter || NEAREST);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n    if (textureImageSource) {\n      gl.texImage2D(\n        TEXTURE_2D,\n        0,\n        RGBA,\n        RGBA,\n        UNSIGNED_BYTE,\n        textureImageSource\n      );\n    } else {\n      gl.texImage2D(\n        TEXTURE_2D,\n        0,\n        RGBA,\n        width,\n        height,\n        0,\n        RGBA,\n        UNSIGNED_BYTE,\n        null\n      );\n    }\n    return texture;\n  }\n\n  /**\n   * Can be optionally used to get a texture from the cache array\n   *\n   * If an existing texture is not found, a new texture is created and cached.\n   *\n   * @param {String} uniqueId A cache key to use to find an existing texture.\n   * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the\n   * texture cache entry if one does not already exist.\n   */\n  getCachedTexture(\n    uniqueId: string,\n    textureImageSource: TexImageSource,\n    filter?:\n      | WebGLRenderingContextBase['NEAREST']\n      | WebGLRenderingContextBase['LINEAR']\n  ): WebGLTexture | null {\n    const { textureCache } = this;\n    if (textureCache[uniqueId]) {\n      return textureCache[uniqueId];\n    } else {\n      const texture = this.createTexture(\n        this.gl,\n        (textureImageSource as HTMLImageElement).width,\n        (textureImageSource as HTMLImageElement).height,\n        textureImageSource,\n        filter\n      );\n      if (texture) {\n        textureCache[uniqueId] = texture;\n      }\n      return texture;\n    }\n  }\n\n  /**\n   * Clear out cached resources related to a source image that has been\n   * filtered previously.\n   *\n   * @param {String} cacheKey The cache key provided when the source image was filtered.\n   */\n  evictCachesForKey(cacheKey: string) {\n    if (this.textureCache[cacheKey]) {\n      this.gl.deleteTexture(this.textureCache[cacheKey]);\n      delete this.textureCache[cacheKey];\n    }\n  }\n\n  /**\n   * Copy an input WebGL canvas on to an output 2D canvas.\n   *\n   * The WebGL canvas is assumed to be upside down, with the top-left pixel of the\n   * desired output image appearing in the bottom-left corner of the WebGL canvas.\n   *\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\n   */\n  copyGLTo2D(gl: WebGLRenderingContext, pipelineState: TWebGLPipelineState) {\n    const glCanvas = gl.canvas,\n      targetCanvas = pipelineState.targetCanvas,\n      ctx = targetCanvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    ctx.translate(0, targetCanvas.height); // move it down again\n    ctx.scale(1, -1); // vertical flip\n    // where is my image on the big glcanvas?\n    const sourceY = glCanvas.height - targetCanvas.height;\n    ctx.drawImage(\n      glCanvas,\n      0,\n      sourceY,\n      targetCanvas.width,\n      targetCanvas.height,\n      0,\n      0,\n      targetCanvas.width,\n      targetCanvas.height\n    );\n  }\n\n  /**\n   * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData\n   * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).\n   *\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n   * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\n   */\n  copyGLTo2DPutImageData(\n    this: Required<WebGLFilterBackend>,\n    gl: WebGLRenderingContext,\n    pipelineState: TWebGLPipelineState\n  ) {\n    const targetCanvas = pipelineState.targetCanvas,\n      ctx = targetCanvas.getContext('2d'),\n      dWidth = pipelineState.destinationWidth,\n      dHeight = pipelineState.destinationHeight,\n      numBytes = dWidth * dHeight * 4;\n    if (!ctx) {\n      return;\n    }\n    const u8 = new Uint8Array(this.imageBuffer, 0, numBytes);\n    const u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);\n\n    gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);\n    const imgData = new ImageData(u8Clamped, dWidth, dHeight);\n    ctx.putImageData(imgData, 0, 0);\n  }\n\n  /**\n   * Attempt to extract GPU information strings from a WebGL context.\n   *\n   * Useful information when debugging or blacklisting specific GPUs.\n   *\n   * @returns {Object} A GPU info object with renderer and vendor strings.\n   */\n  captureGPUInfo() {\n    if (this.gpuInfo) {\n      return this.gpuInfo;\n    }\n    const gl = this.gl,\n      gpuInfo = { renderer: '', vendor: '' };\n    if (!gl) {\n      return gpuInfo;\n    }\n    const ext = gl.getExtension('WEBGL_debug_renderer_info');\n    if (ext) {\n      const renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);\n      const vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);\n      if (renderer) {\n        gpuInfo.renderer = renderer.toLowerCase();\n      }\n      if (vendor) {\n        gpuInfo.vendor = vendor.toLowerCase();\n      }\n    }\n    this.gpuInfo = gpuInfo;\n    return gpuInfo;\n  }\n}\n\nfunction resizeCanvasIfNeeded(pipelineState: TWebGLPipelineState): void {\n  const targetCanvas = pipelineState.targetCanvas,\n    width = targetCanvas.width,\n    height = targetCanvas.height,\n    dWidth = pipelineState.destinationWidth,\n    dHeight = pipelineState.destinationHeight;\n\n  if (width !== dWidth || height !== dHeight) {\n    targetCanvas.width = dWidth;\n    targetCanvas.height = dHeight;\n  }\n}\n", "import { config } from '../config';\nimport { getEnv } from '../env';\nimport { createCanvasElement } from '../util/misc/dom';\nimport { Canvas2dFilterBackend } from './Canvas2dFilterBackend';\nimport { WebGLFilterBackend } from './WebGLFilterBackend';\n\nexport type FilterBackend = WebGLFilterBackend | Canvas2dFilterBackend;\n\nlet filterBackend: FilterBackend;\n\n/**\n * Verifies if it is possible to initialize webgl or fallback on a canvas2d filtering backend\n */\nexport function initFilterBackend(): FilterBackend {\n  const { WebGLProbe } = getEnv();\n  WebGLProbe.queryWebGL(createCanvasElement());\n  if (config.enableGLFiltering && WebGLProbe.isSupported(config.textureSize)) {\n    return new WebGLFilterBackend({ tileSize: config.textureSize });\n  } else {\n    return new Canvas2dFilterBackend();\n  }\n}\n\n/**\n * Get the current fabricJS filter backend  or initialize one if not available yet\n * @param [strict] pass `true` to create the backend if it wasn't created yet (default behavior),\n * pass `false` to get the backend ref without mutating it\n */\nexport function getFilterBackend(strict = true): FilterBackend {\n  if (!filterBackend && strict) {\n    filterBackend = initFilterBackend();\n  }\n  return filterBackend;\n}\n\nexport function setFilterBackend(backend: FilterBackend) {\n  filterBackend = backend;\n}\n", "import { getFabricDocument, getEnv } from '../env';\nimport type { BaseFilter } from '../filters/BaseFilter';\nimport { getFilterBackend } from '../filters/FilterBackend';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type {\n  TClassProperties,\n  TCrossOrigin,\n  TSize,\n  Abortable,\n  TOptions,\n} from '../typedefs';\nimport { uid } from '../util/internals/uid';\nimport { createCanvasElement } from '../util/misc/dom';\nimport { findScaleToCover, findScaleToFit } from '../util/misc/findScaleTo';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n  loadImage,\n} from '../util/misc/objectEnlive';\nimport { parsePreserveAspectRatioAttribute } from '../util/misc/svgParsing';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport { WebGLFilterBackend } from '../filters/WebGLFilterBackend';\nimport { NONE } from '../constants';\nimport { getDocumentFromElement } from '../util/dom_misc';\nimport type { CSSRules } from '../parser/typedefs';\nimport type { Resize } from '../filters/Resize';\nimport type { TCachedFabricObject } from './Object/Object';\nimport { log } from '../util/internals/console';\n\n// @todo Would be nice to have filtering code not imported directly.\n\nexport type ImageSource =\n  | HTMLImageElement\n  | HTMLVideoElement\n  | HTMLCanvasElement;\n\ninterface UniqueImageProps {\n  srcFromAttribute: boolean;\n  minimumScaleTrigger: number;\n  cropX: number;\n  cropY: number;\n  imageSmoothing: boolean;\n  filters: BaseFilter[];\n  resizeFilter?: Resize;\n}\n\nexport const imageDefaultValues: Partial<TClassProperties<FabricImage>> = {\n  strokeWidth: 0,\n  srcFromAttribute: false,\n  minimumScaleTrigger: 0.5,\n  cropX: 0,\n  cropY: 0,\n  imageSmoothing: true,\n};\n\nexport interface SerializedImageProps extends SerializedObjectProps {\n  src: string;\n  crossOrigin: TCrossOrigin;\n  filters: any[];\n  resizeFilter?: any;\n  cropX: number;\n  cropY: number;\n}\n\nexport interface ImageProps extends FabricObjectProps, UniqueImageProps {}\n\nconst IMAGE_PROPS = ['cropX', 'cropY'] as const;\n\n/**\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}\n */\nexport class FabricImage<\n    Props extends TOptions<ImageProps> = Partial<ImageProps>,\n    SProps extends SerializedImageProps = SerializedImageProps,\n    EventSpec extends ObjectEvents = ObjectEvents\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements ImageProps\n{\n  /**\n   * When calling {@link FabricImage.getSrc}, return value from element src with `element.getAttribute('src')`.\n   * This allows for relative urls as image src.\n   * @since 2.7.0\n   * @type Boolean\n   * @default false\n   */\n  declare srcFromAttribute: boolean;\n\n  /**\n   * private\n   * contains last value of scaleX to detect\n   * if the Image got resized after the last Render\n   * @type Number\n   */\n  protected _lastScaleX = 1;\n\n  /**\n   * private\n   * contains last value of scaleY to detect\n   * if the Image got resized after the last Render\n   * @type Number\n   */\n  protected _lastScaleY = 1;\n\n  /**\n   * private\n   * contains last value of scaling applied by the apply filter chain\n   * @type Number\n   */\n  protected _filterScalingX = 1;\n\n  /**\n   * private\n   * contains last value of scaling applied by the apply filter chain\n   * @type Number\n   */\n  protected _filterScalingY = 1;\n\n  /**\n   * minimum scale factor under which any resizeFilter is triggered to resize the image\n   * 0 will disable the automatic resize. 1 will trigger automatically always.\n   * number bigger than 1 are not implemented yet.\n   * @type Number\n   */\n  declare minimumScaleTrigger: number;\n\n  /**\n   * key used to retrieve the texture representing this image\n   * @since 2.0.0\n   * @type String\n   * @default\n   */\n  declare cacheKey: string;\n\n  /**\n   * Image crop in pixels from original image size.\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  declare cropX: number;\n\n  /**\n   * Image crop in pixels from original image size.\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  declare cropY: number;\n\n  /**\n   * Indicates whether this canvas will use image smoothing when painting this image.\n   * Also influence if the cacheCanvas for this image uses imageSmoothing\n   * @since 4.0.0-beta.11\n   * @type Boolean\n   * @default\n   */\n  declare imageSmoothing: boolean;\n\n  declare preserveAspectRatio: string;\n\n  protected declare src: string;\n\n  declare filters: BaseFilter[];\n  declare resizeFilter: Resize;\n\n  declare _element: ImageSource;\n  declare _filteredEl?: HTMLCanvasElement;\n  declare _originalElement: ImageSource;\n\n  static type = 'Image';\n\n  static cacheProperties = [...cacheProperties, ...IMAGE_PROPS];\n\n  static ownDefaults = imageDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...FabricImage.ownDefaults,\n    };\n  }\n  /**\n   * Constructor\n   * Image can be initialized with any canvas drawable or a string.\n   * The string should be a url and will be loaded as an image.\n   * Canvas and Image element work out of the box, while videos require extra code to work.\n   * Please check video element events for seeking.\n   * @param {ImageSource | string} element Image element\n   * @param {Object} [options] Options object\n   */\n  constructor(elementId: string, options?: Props);\n  constructor(element: ImageSource, options?: Props);\n  constructor(arg0: ImageSource | string, options?: Props) {\n    super();\n    this.filters = [];\n    Object.assign(this, FabricImage.ownDefaults);\n    this.setOptions(options);\n    this.cacheKey = `texture${uid()}`;\n    this.setElement(\n      typeof arg0 === 'string'\n        ? ((\n            (this.canvas && getDocumentFromElement(this.canvas.getElement())) ||\n            getFabricDocument()\n          ).getElementById(arg0) as ImageSource)\n        : arg0,\n      options\n    );\n  }\n\n  /**\n   * Returns image element which this instance if based on\n   */\n  getElement() {\n    return this._element;\n  }\n\n  /**\n   * Sets image element for this instance to a specified one.\n   * If filters defined they are applied to new image.\n   * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\n   * @param {HTMLImageElement} element\n   * @param {Partial<TSize>} [size] Options object\n   */\n  setElement(element: ImageSource, size: Partial<TSize> = {}) {\n    this.removeTexture(this.cacheKey);\n    this.removeTexture(`${this.cacheKey}_filtered`);\n    this._element = element;\n    this._originalElement = element;\n    this._setWidthHeight(size);\n    element.classList.add(FabricImage.CSS_CANVAS);\n    if (this.filters.length !== 0) {\n      this.applyFilters();\n    }\n    // resizeFilters work on the already filtered copy.\n    // we need to apply resizeFilters AFTER normal filters.\n    // applyResizeFilters is run more often than normal filters\n    // and is triggered by user interactions rather than dev code\n    if (this.resizeFilter) {\n      this.applyResizeFilters();\n    }\n  }\n\n  /**\n   * Delete a single texture if in webgl mode\n   */\n  removeTexture(key: string) {\n    const backend = getFilterBackend(false);\n    if (backend instanceof WebGLFilterBackend) {\n      backend.evictCachesForKey(key);\n    }\n  }\n\n  /**\n   * Delete textures, reference to elements and eventually JSDOM cleanup\n   */\n  dispose() {\n    super.dispose();\n    this.removeTexture(this.cacheKey);\n    this.removeTexture(`${this.cacheKey}_filtered`);\n    this._cacheContext = null;\n    (\n      ['_originalElement', '_element', '_filteredEl', '_cacheCanvas'] as const\n    ).forEach((elementKey) => {\n      const el = this[elementKey];\n      el && getEnv().dispose(el);\n      // @ts-expect-error disposing\n      this[elementKey] = undefined;\n    });\n  }\n\n  /**\n   * Get the crossOrigin value (of the corresponding image element)\n   */\n  getCrossOrigin(): string | null {\n    return (\n      this._originalElement &&\n      ((this._originalElement as any).crossOrigin || null)\n    );\n  }\n\n  /**\n   * Returns original size of an image\n   */\n  getOriginalSize() {\n    const element = this.getElement() as any;\n    if (!element) {\n      return {\n        width: 0,\n        height: 0,\n      };\n    }\n    return {\n      width: element.naturalWidth || element.width,\n      height: element.naturalHeight || element.height,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _stroke(ctx: CanvasRenderingContext2D) {\n    if (!this.stroke || this.strokeWidth === 0) {\n      return;\n    }\n    const w = this.width / 2,\n      h = this.height / 2;\n    ctx.beginPath();\n    ctx.moveTo(-w, -h);\n    ctx.lineTo(w, -h);\n    ctx.lineTo(w, h);\n    ctx.lineTo(-w, h);\n    ctx.lineTo(-w, -h);\n    ctx.closePath();\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    const filters: Record<string, any>[] = [];\n    this.filters.forEach((filterObj) => {\n      filterObj && filters.push(filterObj.toObject());\n    });\n    return {\n      ...super.toObject([...IMAGE_PROPS, ...propertiesToInclude]),\n      src: this.getSrc(),\n      crossOrigin: this.getCrossOrigin(),\n      filters,\n      ...(this.resizeFilter\n        ? { resizeFilter: this.resizeFilter.toObject() }\n        : {}),\n    };\n  }\n\n  /**\n   * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,height.\n   * @return {Boolean}\n   */\n  hasCrop() {\n    return (\n      !!this.cropX ||\n      !!this.cropY ||\n      this.width < this._element.width ||\n      this.height < this._element.height\n    );\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {string[]} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const imageMarkup: string[] = [],\n      element = this._element,\n      x = -this.width / 2,\n      y = -this.height / 2;\n    let svgString: string[] = [],\n      strokeSvg: string[] = [],\n      clipPath = '',\n      imageRendering = '';\n    if (!element) {\n      return [];\n    }\n    if (this.hasCrop()) {\n      const clipPathId = uid();\n      svgString.push(\n        '<clipPath id=\"imageCrop_' + clipPathId + '\">\\n',\n        '\\t<rect x=\"' +\n          x +\n          '\" y=\"' +\n          y +\n          '\" width=\"' +\n          this.width +\n          '\" height=\"' +\n          this.height +\n          '\" />\\n',\n        '</clipPath>\\n'\n      );\n      clipPath = ' clip-path=\"url(#imageCrop_' + clipPathId + ')\" ';\n    }\n    if (!this.imageSmoothing) {\n      imageRendering = ' image-rendering=\"optimizeSpeed\"';\n    }\n    imageMarkup.push(\n      '\\t<image ',\n      'COMMON_PARTS',\n      `xlink:href=\"${this.getSvgSrc(true)}\" x=\"${x - this.cropX}\" y=\"${\n        y - this.cropY\n        // we're essentially moving origin of transformation from top/left corner to the center of the shape\n        // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left\n        // so that object's center aligns with container's left/top\n      }\" width=\"${\n        element.width || (element as HTMLImageElement).naturalWidth\n      }\" height=\"${\n        element.height || (element as HTMLImageElement).naturalHeight\n      }\"${imageRendering}${clipPath}></image>\\n`\n    );\n\n    if (this.stroke || this.strokeDashArray) {\n      const origFill = this.fill;\n      this.fill = null;\n      strokeSvg = [\n        `\\t<rect x=\"${x}\" y=\"${y}\" width=\"${this.width}\" height=\"${\n          this.height\n        }\" style=\"${this.getSvgStyles()}\" />\\n`,\n      ];\n      this.fill = origFill;\n    }\n    if (this.paintFirst !== 'fill') {\n      svgString = svgString.concat(strokeSvg, imageMarkup);\n    } else {\n      svgString = svgString.concat(imageMarkup, strokeSvg);\n    }\n    return svgString;\n  }\n\n  /**\n   * Returns source of an image\n   * @param {Boolean} filtered indicates if the src is needed for svg\n   * @return {String} Source of an image\n   */\n  getSrc(filtered?: boolean): string {\n    const element = filtered ? this._element : this._originalElement;\n    if (element) {\n      if ((element as HTMLCanvasElement).toDataURL) {\n        return (element as HTMLCanvasElement).toDataURL();\n      }\n\n      if (this.srcFromAttribute) {\n        return element.getAttribute('src') || '';\n      } else {\n        return (element as HTMLImageElement).src;\n      }\n    } else {\n      return this.src || '';\n    }\n  }\n\n  /**\n   * Alias for getSrc\n   * @param filtered\n   * @deprecated\n   */\n  getSvgSrc(filtered?: boolean) {\n    return this.getSrc(filtered);\n  }\n\n  /**\n   * Loads and sets source of an image\\\n   * **IMPORTANT**: It is recommended to abort loading tasks before calling this method to prevent race conditions and unnecessary networking\n   * @param {String} src Source string (URL)\n   * @param {LoadImageOptions} [options] Options object\n   */\n  setSrc(src: string, { crossOrigin, signal }: LoadImageOptions = {}) {\n    return loadImage(src, { crossOrigin, signal }).then((img) => {\n      typeof crossOrigin !== 'undefined' && this.set({ crossOrigin });\n      this.setElement(img);\n    });\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {String} String representation of an instance\n   */\n  toString() {\n    return `#<Image: { src: \"${this.getSrc()}\" }>`;\n  }\n\n  applyResizeFilters() {\n    const filter = this.resizeFilter,\n      minimumScale = this.minimumScaleTrigger,\n      objectScale = this.getTotalObjectScaling(),\n      scaleX = objectScale.x,\n      scaleY = objectScale.y,\n      elementToFilter = this._filteredEl || this._originalElement;\n    if (this.group) {\n      this.set('dirty', true);\n    }\n    if (!filter || (scaleX > minimumScale && scaleY > minimumScale)) {\n      this._element = elementToFilter;\n      this._filterScalingX = 1;\n      this._filterScalingY = 1;\n      this._lastScaleX = scaleX;\n      this._lastScaleY = scaleY;\n      return;\n    }\n    const canvasEl = createCanvasElement(),\n      sourceWidth = elementToFilter.width,\n      sourceHeight = elementToFilter.height;\n    canvasEl.width = sourceWidth;\n    canvasEl.height = sourceHeight;\n    this._element = canvasEl;\n    this._lastScaleX = filter.scaleX = scaleX;\n    this._lastScaleY = filter.scaleY = scaleY;\n    getFilterBackend().applyFilters(\n      [filter as BaseFilter],\n      elementToFilter,\n      sourceWidth,\n      sourceHeight,\n      this._element\n    );\n    this._filterScalingX = canvasEl.width / this._originalElement.width;\n    this._filterScalingY = canvasEl.height / this._originalElement.height;\n  }\n\n  /**\n   * Applies filters assigned to this image (from \"filters\" array) or from filter param\n   * @method applyFilters\n   * @param {Array} filters to be applied\n   * @param {Boolean} forResizing specify if the filter operation is a resize operation\n   */\n  applyFilters(filters: BaseFilter[] = this.filters || []) {\n    filters = filters.filter((filter) => filter && !filter.isNeutralState());\n    this.set('dirty', true);\n\n    // needs to clear out or WEBGL will not resize correctly\n    this.removeTexture(`${this.cacheKey}_filtered`);\n\n    if (filters.length === 0) {\n      this._element = this._originalElement;\n      // this is unsafe and needs to be rethinkend\n      this._filteredEl = undefined;\n      this._filterScalingX = 1;\n      this._filterScalingY = 1;\n      return;\n    }\n\n    const imgElement = this._originalElement,\n      sourceWidth =\n        (imgElement as HTMLImageElement).naturalWidth || imgElement.width,\n      sourceHeight =\n        (imgElement as HTMLImageElement).naturalHeight || imgElement.height;\n\n    if (this._element === this._originalElement) {\n      // if the _element a reference to _originalElement\n      // we need to create a new element to host the filtered pixels\n      const canvasEl = createCanvasElement();\n      canvasEl.width = sourceWidth;\n      canvasEl.height = sourceHeight;\n      this._element = canvasEl;\n      this._filteredEl = canvasEl;\n    } else if (this._filteredEl) {\n      // if the _element is it own element,\n      // and we also have a _filteredEl, then we clean up _filteredEl\n      // and we assign it to _element.\n      // in this way we invalidate the eventual old resize filtered element\n      this._element = this._filteredEl;\n      this._filteredEl\n        .getContext('2d')!\n        .clearRect(0, 0, sourceWidth, sourceHeight);\n      // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y\n      this._lastScaleX = 1;\n      this._lastScaleY = 1;\n    }\n    getFilterBackend().applyFilters(\n      filters,\n      this._originalElement,\n      sourceWidth,\n      sourceHeight,\n      this._element as HTMLCanvasElement\n    );\n    if (\n      this._originalElement.width !== this._element.width ||\n      this._originalElement.height !== this._element.height\n    ) {\n      this._filterScalingX = this._element.width / this._originalElement.width;\n      this._filterScalingY =\n        this._element.height / this._originalElement.height;\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.imageSmoothingEnabled = this.imageSmoothing;\n    if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {\n      this.applyResizeFilters();\n    }\n    this._stroke(ctx);\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Paint the cached copy of the object on the target context.\n   * it will set the imageSmoothing for the draw operation\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawCacheOnCanvas(\n    this: TCachedFabricObject<FabricImage>,\n    ctx: CanvasRenderingContext2D\n  ) {\n    ctx.imageSmoothingEnabled = this.imageSmoothing;\n    // cant use ts-expect-error because of ts 5.3 cross check\n    // @ts-ignore TS doesn't respect this type casting\n    super.drawCacheOnCanvas(ctx);\n  }\n\n  /**\n   * Decide if the object should cache or not. Create its own cache level\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step. None of the fabric classes requires it.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * This is the special image version where we would like to avoid caching where possible.\n   * Essentially images do not benefit from caching. They may require caching, and in that\n   * case we do it. Also caching an image usually ends in a loss of details.\n   * A full performance audit should be done.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    return this.needsItsOwnCache();\n  }\n\n  _renderFill(ctx: CanvasRenderingContext2D) {\n    const elementToDraw = this._element;\n    if (!elementToDraw) {\n      return;\n    }\n    const scaleX = this._filterScalingX,\n      scaleY = this._filterScalingY,\n      w = this.width,\n      h = this.height,\n      // crop values cannot be lesser than 0.\n      cropX = Math.max(this.cropX, 0),\n      cropY = Math.max(this.cropY, 0),\n      elWidth =\n        (elementToDraw as HTMLImageElement).naturalWidth || elementToDraw.width,\n      elHeight =\n        (elementToDraw as HTMLImageElement).naturalHeight ||\n        elementToDraw.height,\n      sX = cropX * scaleX,\n      sY = cropY * scaleY,\n      // the width height cannot exceed element width/height, starting from the crop offset.\n      sW = Math.min(w * scaleX, elWidth - sX),\n      sH = Math.min(h * scaleY, elHeight - sY),\n      x = -w / 2,\n      y = -h / 2,\n      maxDestW = Math.min(w, elWidth / scaleX - cropX),\n      maxDestH = Math.min(h, elHeight / scaleY - cropY);\n\n    elementToDraw &&\n      ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, maxDestW, maxDestH);\n  }\n\n  /**\n   * needed to check if image needs resize\n   * @private\n   */\n  _needsResize() {\n    const scale = this.getTotalObjectScaling();\n    return scale.x !== this._lastScaleX || scale.y !== this._lastScaleY;\n  }\n\n  /**\n   * @private\n   * @deprecated unused\n   */\n  _resetWidthHeight() {\n    this.set(this.getOriginalSize());\n  }\n\n  /**\n   * @private\n   * Set the width and the height of the image object, using the element or the\n   * options.\n   */\n  _setWidthHeight({ width, height }: Partial<TSize> = {}) {\n    const size = this.getOriginalSize();\n    this.width = width || size.width;\n    this.height = height || size.height;\n  }\n\n  /**\n   * Calculate offset for center and scale factor for the image in order to respect\n   * the preserveAspectRatio attribute\n   * @private\n   */\n  parsePreserveAspectRatioAttribute() {\n    const pAR = parsePreserveAspectRatioAttribute(\n        this.preserveAspectRatio || ''\n      ),\n      pWidth = this.width,\n      pHeight = this.height,\n      parsedAttributes = { width: pWidth, height: pHeight };\n    let rWidth = this._element.width,\n      rHeight = this._element.height,\n      scaleX = 1,\n      scaleY = 1,\n      offsetLeft = 0,\n      offsetTop = 0,\n      cropX = 0,\n      cropY = 0,\n      offset;\n\n    if (pAR && (pAR.alignX !== NONE || pAR.alignY !== NONE)) {\n      if (pAR.meetOrSlice === 'meet') {\n        scaleX = scaleY = findScaleToFit(this._element, parsedAttributes);\n        offset = (pWidth - rWidth * scaleX) / 2;\n        if (pAR.alignX === 'Min') {\n          offsetLeft = -offset;\n        }\n        if (pAR.alignX === 'Max') {\n          offsetLeft = offset;\n        }\n        offset = (pHeight - rHeight * scaleY) / 2;\n        if (pAR.alignY === 'Min') {\n          offsetTop = -offset;\n        }\n        if (pAR.alignY === 'Max') {\n          offsetTop = offset;\n        }\n      }\n      if (pAR.meetOrSlice === 'slice') {\n        scaleX = scaleY = findScaleToCover(this._element, parsedAttributes);\n        offset = rWidth - pWidth / scaleX;\n        if (pAR.alignX === 'Mid') {\n          cropX = offset / 2;\n        }\n        if (pAR.alignX === 'Max') {\n          cropX = offset;\n        }\n        offset = rHeight - pHeight / scaleY;\n        if (pAR.alignY === 'Mid') {\n          cropY = offset / 2;\n        }\n        if (pAR.alignY === 'Max') {\n          cropY = offset;\n        }\n        rWidth = pWidth / scaleX;\n        rHeight = pHeight / scaleY;\n      }\n    } else {\n      scaleX = pWidth / rWidth;\n      scaleY = pHeight / rHeight;\n    }\n    return {\n      width: rWidth,\n      height: rHeight,\n      scaleX,\n      scaleY,\n      offsetLeft,\n      offsetTop,\n      cropX,\n      cropY,\n    };\n  }\n\n  /**\n   * Default CSS class name for canvas\n   * @static\n   * @type String\n   * @default\n   */\n  static CSS_CANVAS = 'canvas-img';\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link FabricImage.fromElement})\n   * @static\n   * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}\n   */\n  static ATTRIBUTE_NAMES = [\n    ...SHARED_ATTRIBUTES,\n    'x',\n    'y',\n    'width',\n    'height',\n    'preserveAspectRatio',\n    'xlink:href',\n    'crossOrigin',\n    'image-rendering',\n  ];\n\n  /**\n   * Creates an instance of FabricImage from its object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {object} [options] Options object\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricImage>}\n   */\n  static fromObject<T extends TOptions<SerializedImageProps>>(\n    { filters: f, resizeFilter: rf, src, crossOrigin, type, ...object }: T,\n    options?: Abortable\n  ) {\n    return Promise.all([\n      loadImage(src!, { ...options, crossOrigin }),\n      f && enlivenObjects<BaseFilter>(f, options),\n      // TODO: redundant - handled by enlivenObjectEnlivables\n      rf && enlivenObjects<BaseFilter>([rf], options),\n      enlivenObjectEnlivables(object, options),\n    ]).then(([el, filters = [], [resizeFilter] = [], hydratedProps = {}]) => {\n      return new this(el, {\n        ...object,\n        // TODO: this creates a difference between image creation and restoring from JSON\n        src,\n        filters,\n        resizeFilter,\n        ...hydratedProps,\n      });\n    });\n  }\n\n  /**\n   * Creates an instance of Image from an URL string\n   * @static\n   * @param {String} url URL to create an image from\n   * @param {LoadImageOptions} [options] Options object\n   * @returns {Promise<FabricImage>}\n   */\n  static fromURL<T extends TOptions<ImageProps>>(\n    url: string,\n    { crossOrigin = null, signal }: LoadImageOptions = {},\n    imageOptions?: T\n  ): Promise<FabricImage> {\n    return loadImage(url, { crossOrigin, signal }).then(\n      (img) => new this(img, imageOptions)\n    );\n  }\n\n  /**\n   * Returns {@link FabricImage} instance from an SVG element\n   * @static\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @param {Function} callback Callback to execute when Image object is created\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable = {},\n    cssRules?: CSSRules\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules\n    );\n    return this.fromURL(\n      parsedAttributes['xlink:href'],\n      options,\n      parsedAttributes\n    ).catch((err) => {\n      log('log', 'Unable to parse Image', err);\n      return null;\n    });\n  }\n}\n\nclassRegistry.setClass(FabricImage);\nclassRegistry.setSVGClass(FabricImage);\n", "import { svgNS } from './constants';\nimport {\n  parsePreserveAspectRatioAttribute,\n  parseUnit,\n} from '../util/misc/svgParsing';\nimport { svgViewBoxElementsRegEx, reViewBoxAttrValue } from './constants';\nimport { NONE } from '../constants';\n\nexport type ParsedViewboxTransform = Partial<{\n  width: number;\n  height: number;\n  minX: number;\n  minY: number;\n  viewBoxWidth: number;\n  viewBoxHeight: number;\n}>;\n\n/**\n * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements\n */\nexport function applyViewboxTransform(\n  element: Element\n): ParsedViewboxTransform {\n  if (!svgViewBoxElementsRegEx.test(element.nodeName)) {\n    return {};\n  }\n  const viewBoxAttr: string | null = element.getAttribute('viewBox');\n  let scaleX = 1;\n  let scaleY = 1;\n  let minX = 0;\n  let minY = 0;\n  let matrix;\n  let el;\n  const widthAttr = element.getAttribute('width');\n  const heightAttr = element.getAttribute('height');\n  const x = element.getAttribute('x') || 0;\n  const y = element.getAttribute('y') || 0;\n  const goodViewbox = viewBoxAttr && reViewBoxAttrValue.test(viewBoxAttr);\n  const missingViewBox = !goodViewbox;\n  const missingDimAttr =\n    !widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%';\n\n  let translateMatrix = '';\n  let widthDiff = 0;\n  let heightDiff = 0;\n\n  if (missingViewBox) {\n    if (\n      (x || y) &&\n      element.parentNode &&\n      element.parentNode.nodeName !== '#document'\n    ) {\n      translateMatrix =\n        ' translate(' + parseUnit(x || '0') + ' ' + parseUnit(y || '0') + ') ';\n      matrix = (element.getAttribute('transform') || '') + translateMatrix;\n      element.setAttribute('transform', matrix);\n      element.removeAttribute('x');\n      element.removeAttribute('y');\n    }\n  }\n\n  if (missingViewBox && missingDimAttr) {\n    return {\n      width: 0,\n      height: 0,\n    };\n  }\n\n  const parsedDim: ParsedViewboxTransform = {\n    width: 0,\n    height: 0,\n  };\n\n  if (missingViewBox) {\n    parsedDim.width = parseUnit(widthAttr!);\n    parsedDim.height = parseUnit(heightAttr!);\n    // set a transform for elements that have x y and are inner(only) SVGs\n    return parsedDim;\n  }\n\n  const pasedViewBox = viewBoxAttr.match(reViewBoxAttrValue)!;\n  minX = -parseFloat(pasedViewBox[1]);\n  minY = -parseFloat(pasedViewBox[2]);\n  const viewBoxWidth = parseFloat(pasedViewBox[3]);\n  const viewBoxHeight = parseFloat(pasedViewBox[4]);\n  parsedDim.minX = minX;\n  parsedDim.minY = minY;\n  parsedDim.viewBoxWidth = viewBoxWidth;\n  parsedDim.viewBoxHeight = viewBoxHeight;\n  if (!missingDimAttr) {\n    parsedDim.width = parseUnit(widthAttr);\n    parsedDim.height = parseUnit(heightAttr);\n    scaleX = parsedDim.width / viewBoxWidth;\n    scaleY = parsedDim.height / viewBoxHeight;\n  } else {\n    parsedDim.width = viewBoxWidth;\n    parsedDim.height = viewBoxHeight;\n  }\n\n  // default is to preserve aspect ratio\n  const preserveAspectRatio = parsePreserveAspectRatioAttribute(\n    element.getAttribute('preserveAspectRatio') || ''\n  );\n  if (preserveAspectRatio.alignX !== NONE) {\n    //translate all container for the effect of Mid, Min, Max\n    if (preserveAspectRatio.meetOrSlice === 'meet') {\n      scaleY = scaleX = scaleX > scaleY ? scaleY : scaleX;\n      // calculate additional translation to move the viewbox\n    }\n    if (preserveAspectRatio.meetOrSlice === 'slice') {\n      scaleY = scaleX = scaleX > scaleY ? scaleX : scaleY;\n      // calculate additional translation to move the viewbox\n    }\n    widthDiff = parsedDim.width - viewBoxWidth * scaleX;\n    heightDiff = parsedDim.height - viewBoxHeight * scaleX;\n    if (preserveAspectRatio.alignX === 'Mid') {\n      widthDiff /= 2;\n    }\n    if (preserveAspectRatio.alignY === 'Mid') {\n      heightDiff /= 2;\n    }\n    if (preserveAspectRatio.alignX === 'Min') {\n      widthDiff = 0;\n    }\n    if (preserveAspectRatio.alignY === 'Min') {\n      heightDiff = 0;\n    }\n  }\n\n  if (\n    scaleX === 1 &&\n    scaleY === 1 &&\n    minX === 0 &&\n    minY === 0 &&\n    x === 0 &&\n    y === 0\n  ) {\n    return parsedDim;\n  }\n  if ((x || y) && element.parentNode!.nodeName !== '#document') {\n    translateMatrix =\n      ' translate(' + parseUnit(x || '0') + ' ' + parseUnit(y || '0') + ') ';\n  }\n\n  matrix =\n    translateMatrix +\n    ' matrix(' +\n    scaleX +\n    ' 0' +\n    ' 0 ' +\n    scaleY +\n    ' ' +\n    (minX * scaleX + widthDiff) +\n    ' ' +\n    (minY * scaleY + heightDiff) +\n    ') ';\n  // seems unused.\n  // parsedDim.viewboxTransform = parseTransformAttribute(matrix);\n  if (element.nodeName === 'svg') {\n    el = element.ownerDocument.createElementNS(svgNS, 'g');\n    // element.firstChild != null\n    while (element.firstChild) {\n      el.appendChild(element.firstChild);\n    }\n    element.appendChild(el);\n  } else {\n    el = element;\n    el.removeAttribute('x');\n    el.removeAttribute('y');\n    matrix = el.getAttribute('transform') + matrix;\n  }\n  el.setAttribute('transform', matrix);\n  return parsedDim;\n}\n", "export const getTagName = (node: Element) => node.tagName.replace('svg:', '');\n", "import { svgInvalidAncestors } from './constants';\nimport { getSvgRegex } from './getSvgRegex';\nimport { getTagName } from './getTagName';\n\nconst svgInvalidAncestorsRegEx = getSvgRegex(svgInvalidAncestors);\n\nexport function hasInvalidAncestor(element: Element) {\n  let _element: Element | null = element;\n  while (_element && (_element = _element.parentElement)) {\n    if (\n      _element &&\n      _element.nodeName &&\n      svgInvalidAncestorsRegEx.test(getTagName(_element)) &&\n      !_element.getAttribute('instantiated_by_use')\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n", "export function getMultipleNodes(\n  doc: Document,\n  nodeNames: string[]\n): Element[] {\n  let nodeName,\n    nodeArray: Element[] = [],\n    nodeList,\n    i,\n    len;\n  for (i = 0, len = nodeNames.length; i < len; i++) {\n    nodeName = nodeNames[i];\n    nodeList = doc.getElementsByTagNameNS(\n      'http://www.w3.org/2000/svg',\n      nodeName\n    );\n    nodeArray = nodeArray.concat(Array.from(nodeList));\n  }\n  return nodeArray;\n}\n", "const gradientsAttrs = [\n  'gradientTransform',\n  'x1',\n  'x2',\n  'y1',\n  'y2',\n  'gradientUnits',\n  'cx',\n  'cy',\n  'r',\n  'fx',\n  'fy',\n];\nconst xlinkAttr = 'xlink:href';\n\nexport function recursivelyParseGradientsXlink(\n  doc: Document,\n  gradient: Element\n) {\n  const xLink = gradient.getAttribute(xlinkAttr)?.slice(1) || '',\n    referencedGradient = doc.getElementById(xLink);\n  if (referencedGradient && referencedGradient.getAttribute(xlinkAttr)) {\n    recursivelyParseGradientsXlink(doc, referencedGradient as Element);\n  }\n  if (referencedGradient) {\n    gradientsAttrs.forEach((attr) => {\n      const value = referencedGradient.getAttribute(attr);\n      if (!gradient.hasAttribute(attr) && value) {\n        gradient.setAttribute(attr, value);\n      }\n    });\n    if (!gradient.children.length) {\n      const referenceClone = referencedGradient.cloneNode(true);\n      while (referenceClone.firstChild) {\n        gradient.appendChild(referenceClone.firstChild);\n      }\n    }\n  }\n  gradient.removeAttribute(xlinkAttr);\n}\n", "import { getMultipleNodes } from './getMultipleNodes';\nimport { recursivelyParseGradientsXlink } from './recursivelyParseGradientsXlink';\n\nconst tagArray = [\n  'linearGradient',\n  'radialGradient',\n  'svg:linearGradient',\n  'svg:radialGradient',\n];\n\n/**\n * Parses an SVG document, returning all of the gradient declarations found in it\n * @param {SVGDocument} doc SVG document to parse\n * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element\n */\nexport function getGradientDefs(\n  doc: Document\n): Record<string, SVGGradientElement> {\n  const elList = getMultipleNodes(doc, tagArray);\n  const gradientDefs: Record<string, SVGGradientElement> = {};\n  let j = elList.length;\n  while (j--) {\n    const el = elList[j];\n    if (el.getAttribute('xlink:href')) {\n      recursivelyParseGradientsXlink(doc, el);\n    }\n    const id = el.getAttribute('id');\n    if (id) {\n      gradientDefs[id] = el as SVGGradientElement;\n    }\n  }\n  return gradientDefs;\n}\n", "import type { CSSRules } from './typedefs';\n\n/**\n * Returns CSS rules for a given SVG document\n * @param {HTMLElement} doc SVG document to parse\n * @return {Object} CSS rules of this document\n */\nexport function getCSSRules(doc: Document) {\n  const styles = doc.getElementsByTagName('style');\n  let i;\n  let len;\n  const allRules: CSSRules = {};\n\n  // very crude parsing of style contents\n  for (i = 0, len = styles.length; i < len; i++) {\n    const styleContents = (styles[i].textContent || '').replace(\n      // remove comments\n      /\\/\\*[\\s\\S]*?\\*\\//g,\n      ''\n    );\n\n    if (styleContents.trim() === '') {\n      continue;\n    }\n    // recovers all the rule in this form `body { style code... }`\n    // rules = styleContents.match(/[^{]*\\{[\\s\\S]*?\\}/g);\n    styleContents\n      .split('}')\n      // remove empty rules and remove everything if we didn't split in at least 2 pieces\n      .filter((rule, index, array) => array.length > 1 && rule.trim())\n      // at this point we have hopefully an array of rules `body { style code... `\n      .forEach((rule) => {\n        // if there is more than one opening bracket and the rule starts with '@', it is likely\n        // a nested at-rule like @media, @supports, @scope, etc. Ignore these as the code below\n        // can not handle it.\n        if (\n          (rule.match(/{/g) || []).length > 1 &&\n          rule.trim().startsWith('@')\n        ) {\n          return;\n        }\n\n        const match = rule.split('{'),\n          ruleObj: Record<string, string> = {},\n          declaration = match[1].trim(),\n          propertyValuePairs = declaration.split(';').filter(function (pair) {\n            return pair.trim();\n          });\n\n        for (i = 0, len = propertyValuePairs.length; i < len; i++) {\n          const pair = propertyValuePairs[i].split(':'),\n            property = pair[0].trim(),\n            value = pair[1].trim();\n          ruleObj[property] = value;\n        }\n        rule = match[0].trim();\n        rule.split(',').forEach((_rule) => {\n          _rule = _rule.replace(/^svg/i, '').trim();\n          if (_rule === '') {\n            return;\n          }\n          allRules[_rule] = {\n            ...(allRules[_rule] || {}),\n            ...ruleObj,\n          };\n        });\n      });\n  }\n  return allRules;\n}\n", "import { Gradient } from '../gradient/Gradient';\nimport { Group } from '../shapes/Group';\nimport { FabricImage } from '../shapes/Image';\nimport { classRegistry } from '../ClassRegistry';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from '../util/misc/matrix';\nimport { removeTransformMatrixForSvgParsing } from '../util/transform_matrix_removal';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { Point } from '../Point';\nimport { CENTER } from '../constants';\nimport { getGradientDefs } from './getGradientDefs';\nimport { getCSSRules } from './getCSSRules';\nimport type { LoadImageOptions } from '../util';\nimport type { CSSRules, TSvgReviverCallback } from './typedefs';\nimport type { ParsedViewboxTransform } from './applyViewboxTransform';\nimport type { SVGOptions } from '../gradient';\nimport { getTagName } from './getTagName';\nimport { parseTransformAttribute } from './parseTransformAttribute';\n\nconst findTag = (el: Element) =>\n  classRegistry.getSVGClass(getTagName(el).toLowerCase());\n\ntype StorageType = {\n  fill: SVGGradientElement;\n  stroke: SVGGradientElement;\n  clipPath: Element[];\n};\n\ntype NotParsedFabricObject = FabricObject & {\n  fill: string;\n  stroke: string;\n  clipPath?: string;\n  clipRule?: CanvasFillRule;\n};\n\nexport class ElementsParser {\n  declare elements: Element[];\n  declare options: LoadImageOptions & ParsedViewboxTransform;\n  declare reviver: TSvgReviverCallback | undefined;\n  declare regexUrl: RegExp;\n  declare doc: Document;\n  declare clipPaths: Record<string, Element[]>;\n  declare gradientDefs: Record<string, SVGGradientElement>;\n  declare cssRules: CSSRules;\n\n  constructor(\n    elements: Element[],\n    options: LoadImageOptions & ParsedViewboxTransform,\n    reviver: TSvgReviverCallback | undefined,\n    doc: Document,\n    clipPaths: Record<string, Element[]>\n  ) {\n    this.elements = elements;\n    this.options = options;\n    this.reviver = reviver;\n    this.regexUrl = /^url\\(['\"]?#([^'\"]+)['\"]?\\)/g;\n    this.doc = doc;\n    this.clipPaths = clipPaths;\n    this.gradientDefs = getGradientDefs(doc);\n    this.cssRules = getCSSRules(doc);\n  }\n\n  parse(): Promise<Array<FabricObject | null>> {\n    return Promise.all(\n      this.elements.map((element) => this.createObject(element))\n    );\n  }\n\n  async createObject(el: Element): Promise<FabricObject | null> {\n    const klass = findTag(el);\n    if (klass) {\n      const obj: NotParsedFabricObject = await klass.fromElement(\n        el,\n        this.options,\n        this.cssRules\n      );\n      this.resolveGradient(obj, el, 'fill');\n      this.resolveGradient(obj, el, 'stroke');\n      if (obj instanceof FabricImage && obj._originalElement) {\n        removeTransformMatrixForSvgParsing(\n          obj,\n          obj.parsePreserveAspectRatioAttribute()\n        );\n      } else {\n        removeTransformMatrixForSvgParsing(obj);\n      }\n      await this.resolveClipPath(obj, el);\n      this.reviver && this.reviver(el, obj);\n      return obj;\n    }\n    return null;\n  }\n\n  extractPropertyDefinition(\n    obj: NotParsedFabricObject,\n    property: 'fill' | 'stroke' | 'clipPath',\n    storage: Record<string, StorageType[typeof property]>\n  ): StorageType[typeof property] | undefined {\n    const value = obj[property]!,\n      regex = this.regexUrl;\n    if (!regex.test(value)) {\n      return undefined;\n    }\n    // verify: can we remove the 'g' flag? and remove lastIndex changes?\n    regex.lastIndex = 0;\n    // we passed the regex test, so we know is not null;\n    const id = regex.exec(value)![1];\n    regex.lastIndex = 0;\n    // @todo fix this\n    return storage[id];\n  }\n\n  resolveGradient(\n    obj: NotParsedFabricObject,\n    el: Element,\n    property: 'fill' | 'stroke'\n  ) {\n    const gradientDef = this.extractPropertyDefinition(\n      obj,\n      property,\n      this.gradientDefs\n    ) as SVGGradientElement;\n    if (gradientDef) {\n      const opacityAttr = el.getAttribute(property + '-opacity');\n      const gradient = Gradient.fromElement(gradientDef, obj, {\n        ...this.options,\n        opacity: opacityAttr,\n      } as SVGOptions);\n      obj.set(property, gradient);\n    }\n  }\n\n  // TODO: resolveClipPath could be run once per clippath with minor work per object.\n  // is a refactor that i m not sure is worth on this code\n  async resolveClipPath(obj: NotParsedFabricObject, usingElement: Element) {\n    const clipPathElements = this.extractPropertyDefinition(\n      obj,\n      'clipPath',\n      this.clipPaths\n    ) as Element[];\n    if (clipPathElements) {\n      const objTransformInv = invertTransform(obj.calcTransformMatrix());\n      const clipPathTag = clipPathElements[0].parentElement!;\n      let clipPathOwner = usingElement;\n      while (\n        clipPathOwner.parentElement &&\n        clipPathOwner.getAttribute('clip-path') !== obj.clipPath\n      ) {\n        clipPathOwner = clipPathOwner.parentElement;\n      }\n      // move the clipPath tag as sibling to the real element that is using it\n      clipPathOwner.parentElement!.appendChild(clipPathTag!);\n\n      // this multiplication order could be opposite.\n      // but i don't have an svg to test it\n      // at the first SVG that has a transform on both places and is misplaced\n      // try to invert this multiplication order\n      const finalTransform = parseTransformAttribute(\n        `${clipPathOwner.getAttribute('transform') || ''} ${\n          clipPathTag.getAttribute('originalTransform') || ''\n        }`\n      );\n\n      clipPathTag.setAttribute(\n        'transform',\n        `matrix(${finalTransform.join(',')})`\n      );\n\n      const container = await Promise.all(\n        clipPathElements.map((clipPathElement) => {\n          return findTag(clipPathElement)\n            .fromElement(clipPathElement, this.options, this.cssRules)\n            .then((enlivedClippath: NotParsedFabricObject) => {\n              removeTransformMatrixForSvgParsing(enlivedClippath);\n              enlivedClippath.fillRule = enlivedClippath.clipRule!;\n              delete enlivedClippath.clipRule;\n              return enlivedClippath;\n            });\n        })\n      );\n      const clipPath =\n        container.length === 1 ? container[0] : new Group(container);\n      const gTransform = multiplyTransformMatrices(\n        objTransformInv,\n        clipPath.calcTransformMatrix()\n      );\n      if (clipPath.clipPath) {\n        await this.resolveClipPath(clipPath, clipPathOwner);\n      }\n      const { scaleX, scaleY, angle, skewX, translateX, translateY } =\n        qrDecompose(gTransform);\n      clipPath.set({\n        flipX: false,\n        flipY: false,\n      });\n      clipPath.set({\n        scaleX,\n        scaleY,\n        angle,\n        skewX,\n        skewY: 0,\n      });\n      clipPath.setPositionByOrigin(\n        new Point(translateX, translateY),\n        CENTER,\n        CENTER\n      );\n      obj.clipPath = clipPath;\n    } else {\n      // if clip-path does not resolve to any element, delete the property.\n      delete obj.clipPath;\n      return;\n    }\n  }\n}\n", "import { applyViewboxTransform } from './applyViewboxTransform';\nimport { svgValidTagNamesRegEx } from './constants';\nimport { hasInvalidAncestor } from './hasInvalidAncestor';\nimport { parseUseDirectives } from './parseUseDirectives';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport { ElementsParser } from './elements_parser';\nimport { log, SignalAbortedError } from '../util/internals/console';\nimport { getTagName } from './getTagName';\n\nconst isValidSvgTag = (el: Element) =>\n  svgValidTagNamesRegEx.test(getTagName(el));\n\nexport const createEmptyResponse = (): SVGParsingOutput => ({\n  objects: [],\n  elements: [],\n  options: {},\n  allElements: [],\n});\n\n/**\n * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback\n * @static\n * @function\n * @memberOf fabric\n * @param {HTMLElement} doc SVG document to parse\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @return {SVGParsingOutput}\n * {@link SVGParsingOutput} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n */\nexport async function parseSVGDocument(\n  doc: Document,\n  reviver?: TSvgReviverCallback,\n  { crossOrigin, signal }: LoadImageOptions = {}\n): Promise<SVGParsingOutput> {\n  if (signal && signal.aborted) {\n    log('log', new SignalAbortedError('parseSVGDocument'));\n    // this is an unhappy path, we dont care about speed\n    return createEmptyResponse();\n  }\n  const documentElement = doc.documentElement;\n  parseUseDirectives(doc);\n\n  const descendants = Array.from(documentElement.getElementsByTagName('*')),\n    options = {\n      ...applyViewboxTransform(documentElement),\n      crossOrigin,\n      signal,\n    };\n\n  const elements = descendants.filter((el) => {\n    applyViewboxTransform(el);\n    return isValidSvgTag(el) && !hasInvalidAncestor(el); // http://www.w3.org/TR/SVG/struct.html#DefsElement\n  });\n  if (!elements || (elements && !elements.length)) {\n    return {\n      ...createEmptyResponse(),\n      options,\n      allElements: descendants,\n    };\n  }\n  const localClipPaths: Record<string, Element[]> = {};\n  descendants\n    .filter((el) => getTagName(el) === 'clipPath')\n    .forEach((el) => {\n      el.setAttribute('originalTransform', el.getAttribute('transform') || '');\n      const id = el.getAttribute('id')!;\n      localClipPaths[id] = Array.from(el.getElementsByTagName('*')).filter(\n        (el) => isValidSvgTag(el)\n      );\n    });\n\n  // Precedence of rules:   style > class > attribute\n  const elementParser = new ElementsParser(\n    elements,\n    options,\n    reviver,\n    doc,\n    localClipPaths\n  );\n\n  const instances = await elementParser.parse();\n\n  return {\n    objects: instances,\n    elements,\n    options,\n    allElements: descendants,\n  };\n}\n", "import { svgNS } from './constants';\nimport { getMultipleNodes } from './getMultipleNodes';\nimport { applyViewboxTransform } from './applyViewboxTransform';\n\nexport function parseUseDirectives(doc: Document) {\n  const nodelist = getMultipleNodes(doc, ['use', 'svg:use']);\n  let i = 0;\n  while (nodelist.length && i < nodelist.length) {\n    const el = nodelist[i],\n      xlinkAttribute = el.getAttribute('xlink:href') || el.getAttribute('href');\n\n    if (xlinkAttribute === null) {\n      return;\n    }\n\n    const xlink = xlinkAttribute.slice(1);\n    const x = el.getAttribute('x') || 0;\n    const y = el.getAttribute('y') || 0;\n    const el2Orig = doc.getElementById(xlink);\n    if (el2Orig === null) {\n      // if we can't find the target of the xlink, consider this use tag bad, similar to no xlink\n      return;\n    }\n    let el2 = el2Orig.cloneNode(true) as Element;\n    let currentTrans =\n      (el2.getAttribute('transform') || '') +\n      ' translate(' +\n      x +\n      ', ' +\n      y +\n      ')';\n    const oldLength = nodelist.length;\n    const namespace = svgNS;\n\n    applyViewboxTransform(el2);\n    if (/^svg$/i.test(el2.nodeName)) {\n      const el3 = el2.ownerDocument.createElementNS(namespace, 'g');\n      for (\n        let j = 0, attrs = el2.attributes, len = attrs.length;\n        j < len;\n        j++\n      ) {\n        const attr: Attr | null = attrs.item(j);\n        attr && el3.setAttributeNS(namespace, attr.nodeName, attr.nodeValue!);\n      }\n      // el2.firstChild != null\n      while (el2.firstChild) {\n        el3.appendChild(el2.firstChild);\n      }\n      el2 = el3;\n    }\n\n    for (let j = 0, attrs = el.attributes, len = attrs.length; j < len; j++) {\n      const attr = attrs.item(j);\n      if (!attr) {\n        continue;\n      }\n      const { nodeName, nodeValue } = attr;\n      if (\n        nodeName === 'x' ||\n        nodeName === 'y' ||\n        nodeName === 'xlink:href' ||\n        nodeName === 'href'\n      ) {\n        continue;\n      }\n\n      if (nodeName === 'transform') {\n        currentTrans = nodeValue + ' ' + currentTrans;\n      } else {\n        el2.setAttribute(nodeName, nodeValue!);\n      }\n    }\n\n    el2.setAttribute('transform', currentTrans);\n    el2.setAttribute('instantiated_by_use', '1');\n    el2.removeAttribute('id');\n    const parentNode = el.parentNode;\n    parentNode!.replaceChild(el2, el);\n    // some browsers do not shorten nodelist after replaceChild (IE8)\n    if (nodelist.length === oldLength) {\n      i++;\n    }\n  }\n}\n", "import { getFabricWindow } from '../env';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport { parseSVGDocument } from './parseSVGDocument';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\n\n/**\n * Takes string corresponding to an SVG document, and parses it into a set of fabric objects\n * @memberOf fabric\n * @param {String} string representing the svg\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * {@link TSvgParsedCallback} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n */\nexport function loadSVGFromString(\n  string: string,\n  reviver?: TSvgReviverCallback,\n  options?: LoadImageOptions\n): Promise<SVGParsingOutput> {\n  const parser = new (getFabricWindow().DOMParser)(),\n    // should we use `image/svg+xml` here?\n    doc = parser.parseFromString(string.trim(), 'text/xml');\n  return parseSVGDocument(doc, reviver, options);\n}\n", "import { request } from '../util/internals/dom_request';\nimport { parseSVGDocument, createEmptyResponse } from './parseSVGDocument';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\n\n/**\n * Takes url corresponding to an SVG document, and parses it into a set of fabric objects.\n * Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)\n * @memberOf fabric\n * @param {string} url where the SVG is\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * {@link TSvgParsedCallback} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n */\nexport function loadSVGFromURL(\n  url: string,\n  reviver?: TSvgReviverCallback,\n  options: LoadImageOptions = {}\n): Promise<SVGParsingOutput> {\n  // need to handle error properly\n  return new Promise<Document>((resolve, reject) => {\n    const onComplete = (r: XMLHttpRequest) => {\n      const xml = r.responseXML;\n      if (xml) {\n        resolve(xml);\n      }\n      reject();\n    };\n\n    request(url.replace(/^\\n\\s*/, '').trim(), {\n      onComplete,\n      signal: options.signal,\n    });\n  })\n    .then((parsedDoc) => parseSVGDocument(parsedDoc, reviver, options))\n    .catch(() => {\n      // this is an unhappy path, we dont care about speed\n      return createEmptyResponse();\n    });\n}\n", "import { Point } from '../Point';\nimport { Control } from './Control';\nimport type { TMat2D } from '../typedefs';\nimport type { Polyline } from '../shapes/Polyline';\nimport { multiplyTransformMatrices } from '../util/misc/matrix';\nimport type {\n  TModificationEvents,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { sendPointToPlane } from '../util';\n\nconst ACTION_NAME: TModificationEvents = 'modifyPoly';\n\ntype TTransformAnchor = Transform & { pointIndex: number };\n\n/**\n * This function locates the controls.\n * It'll be used both for drawing and for interaction.\n */\nexport const createPolyPositionHandler = (pointIndex: number) => {\n  return function (dim: Point, finalMatrix: TMat2D, polyObject: Polyline) {\n    const { points, pathOffset } = polyObject;\n    return new Point(points[pointIndex])\n      .subtract(pathOffset)\n      .transform(\n        multiplyTransformMatrices(\n          polyObject.getViewportTransform(),\n          polyObject.calcTransformMatrix()\n        )\n      );\n  };\n};\n\n/**\n * This function defines what the control does.\n * It'll be called on every mouse move after a control has been clicked and is being dragged.\n * The function receives as argument the mouse event, the current transform object\n * and the current position in canvas coordinate `transform.target` is a reference to the\n * current object being transformed.\n */\nexport const polyActionHandler = (\n  eventData: TPointerEvent,\n  transform: TTransformAnchor,\n  x: number,\n  y: number\n) => {\n  const { target, pointIndex } = transform;\n  const poly = target as Polyline;\n  const mouseLocalPosition = sendPointToPlane(\n    new Point(x, y),\n    undefined,\n    poly.calcOwnMatrix()\n  );\n\n  poly.points[pointIndex] = mouseLocalPosition.add(poly.pathOffset);\n  poly.setDimensions();\n\n  return true;\n};\n\n/**\n * Keep the polygon in the same position when we change its `width`/`height`/`top`/`left`.\n */\nexport const factoryPolyActionHandler = (\n  pointIndex: number,\n  fn: TransformActionHandler<TTransformAnchor>\n) => {\n  return function (\n    eventData: TPointerEvent,\n    transform: Transform,\n    x: number,\n    y: number\n  ) {\n    const poly = transform.target as Polyline,\n      anchorPoint = new Point(\n        poly.points[(pointIndex > 0 ? pointIndex : poly.points.length) - 1]\n      ),\n      anchorPointInParentPlane = anchorPoint\n        .subtract(poly.pathOffset)\n        .transform(poly.calcOwnMatrix()),\n      actionPerformed = fn(eventData, { ...transform, pointIndex }, x, y);\n\n    const newAnchorPointInParentPlane = anchorPoint\n      .subtract(poly.pathOffset)\n      .transform(poly.calcOwnMatrix());\n\n    const diff = newAnchorPointInParentPlane.subtract(anchorPointInParentPlane);\n    poly.left -= diff.x;\n    poly.top -= diff.y;\n\n    return actionPerformed;\n  };\n};\n\nexport const createPolyActionHandler = (pointIndex: number) =>\n  wrapWithFireEvent(\n    ACTION_NAME,\n    factoryPolyActionHandler(pointIndex, polyActionHandler)\n  );\n\nexport function createPolyControls(\n  poly: Polyline,\n  options?: Partial<Control>\n): Record<string, Control>;\nexport function createPolyControls(\n  numOfControls: number,\n  options?: Partial<Control>\n): Record<string, Control>;\nexport function createPolyControls(\n  arg0: number | Polyline,\n  options: Partial<Control> = {}\n) {\n  const controls = {} as Record<string, Control>;\n  for (\n    let idx = 0;\n    idx < (typeof arg0 === 'number' ? arg0 : arg0.points.length);\n    idx++\n  ) {\n    controls[`p${idx}`] = new Control({\n      actionName: ACTION_NAME,\n      positionHandler: createPolyPositionHandler(idx),\n      actionHandler: createPolyActionHandler(idx),\n      ...options,\n    });\n  }\n  return controls;\n}\n", "import { getFabricWindow } from '../env';\nimport { createCanvasElement } from '../util/misc/dom';\nimport { WebGLFilterBackend } from './WebGLFilterBackend';\nimport type { TWebGLPipelineState, T2DPipelineState } from './typedefs';\n\nexport const isWebGLPipelineState = (\n  options: TWebGLPipelineState | T2DPipelineState\n): options is TWebGLPipelineState => {\n  return (options as TWebGLPipelineState).webgl !== undefined;\n};\n\n/**\n * Pick a method to copy data from GL context to 2d canvas.  In some browsers using\n * drawImage should be faster, but is also bugged for a small combination of old hardware\n * and drivers.\n * putImageData is faster than drawImage for that specific operation.\n */\nexport const isPutImageFaster = (width: number, height: number): boolean => {\n  const targetCanvas = createCanvasElement();\n  const sourceCanvas = createCanvasElement();\n  const gl = sourceCanvas.getContext('webgl')!;\n  // eslint-disable-next-line no-undef\n  const imageBuffer = new ArrayBuffer(width * height * 4);\n\n  const testContext = {\n    imageBuffer: imageBuffer,\n  } as unknown as Required<WebGLFilterBackend>;\n  const testPipelineState = {\n    destinationWidth: width,\n    destinationHeight: height,\n    targetCanvas: targetCanvas,\n  } as unknown as TWebGLPipelineState;\n  let startTime;\n  targetCanvas.width = width;\n  targetCanvas.height = height;\n\n  startTime = getFabricWindow().performance.now();\n  WebGLFilterBackend.prototype.copyGLTo2D.call(\n    testContext,\n    gl,\n    testPipelineState\n  );\n  const drawImageTime = getFabricWindow().performance.now() - startTime;\n\n  startTime = getFabricWindow().performance.now();\n  WebGLFilterBackend.prototype.copyGLTo2DPutImageData.call(\n    testContext,\n    gl,\n    testPipelineState\n  );\n  const putImageDataTime = getFabricWindow().performance.now() - startTime;\n\n  return drawImageTime > putImageDataTime;\n};\n", "export const highPsourceCode = `precision highp float`;\n\nexport const identityFragmentShader = `\n    ${highPsourceCode};\n    varying vec2 vTexCoord;\n    uniform sampler2D uTexture;\n    void main() {\n      gl_FragColor = texture2D(uTexture, vTexCoord);\n    }`;\n\nexport const vertexSource = `\n    attribute vec2 aPosition;\n    varying vec2 vTexCoord;\n    void main() {\n      vTexCoord = aPosition;\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n    }`;\n", "import { getEnv } from '../env';\nimport { createCanvasElement } from '../util/misc/dom';\nimport type {\n  T2DPipelineState,\n  TWebGLAttributeLocationMap,\n  TWebGLPipelineState,\n  TWebGLProgramCacheItem,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport {\n  highPsourceCode,\n  identityFragmentShader,\n  vertexSource,\n} from './shaders/baseFilter';\nimport type { Abortable } from '../typedefs';\nimport { FabricError } from '../util/internals/console';\n\nconst regex = new RegExp(highPsourceCode, 'g');\n\nexport class BaseFilter {\n  /**\n   * Filter type\n   * @param {String} type\n   * @default\n   */\n  get type(): string {\n    return (this.constructor as typeof BaseFilter).type;\n  }\n\n  /**\n   * The class type. Used to identify which class this is.\n   * This is used for serialization purposes and internally it can be used\n   * to identify classes. As a developer you could use `instance of Class`\n   * but to avoid importing all the code and blocking tree shaking we try\n   * to avoid doing that.\n   */\n  static type = 'BaseFilter';\n\n  declare static defaults: Record<string, any>;\n\n  /**\n   * Array of attributes to send with buffers. do not modify\n   * @private\n   */\n  vertexSource = vertexSource;\n\n  /**\n   * Name of the parameter that can be changed in the filter.\n   * Some filters have more than one parameter and there is no\n   * mainParameter\n   * @private\n   */\n  declare mainParameter?: keyof this | undefined;\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor({ type, ...options }: Record<string, any> = {}) {\n    Object.assign(\n      this,\n      (this.constructor as typeof BaseFilter).defaults,\n      options\n    );\n  }\n\n  protected getFragmentSource(): string {\n    return identityFragmentShader;\n  }\n\n  /**\n   * Compile this filter's shader program.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.\n   * @param {String} fragmentSource fragmentShader source for compilation\n   * @param {String} vertexSource vertexShader source for compilation\n   */\n  createProgram(\n    gl: WebGLRenderingContext,\n    fragmentSource: string = this.getFragmentSource(),\n    vertexSource: string = this.vertexSource\n  ) {\n    const {\n      WebGLProbe: { GLPrecision = 'highp' },\n    } = getEnv();\n    if (GLPrecision !== 'highp') {\n      fragmentSource = fragmentSource.replace(\n        regex,\n        highPsourceCode.replace('highp', GLPrecision)\n      );\n    }\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    const program = gl.createProgram();\n\n    if (!vertexShader || !fragmentShader || !program) {\n      throw new FabricError(\n        'Vertex, fragment shader or program creation error'\n      );\n    }\n    gl.shaderSource(vertexShader, vertexSource);\n    gl.compileShader(vertexShader);\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      throw new FabricError(\n        `Vertex shader compile error for ${this.type}: ${gl.getShaderInfoLog(\n          vertexShader\n        )}`\n      );\n    }\n\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      throw new FabricError(\n        `Fragment shader compile error for ${this.type}: ${gl.getShaderInfoLog(\n          fragmentShader\n        )}`\n      );\n    }\n\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      throw new FabricError(\n        `Shader link error for \"${this.type}\" ${gl.getProgramInfoLog(program)}`\n      );\n    }\n\n    const uniformLocations = this.getUniformLocations(gl, program) || {};\n    uniformLocations.uStepW = gl.getUniformLocation(program, 'uStepW');\n    uniformLocations.uStepH = gl.getUniformLocation(program, 'uStepH');\n    return {\n      program,\n      attributeLocations: this.getAttributeLocations(gl, program),\n      uniformLocations,\n    };\n  }\n\n  /**\n   * Return a map of attribute names to WebGLAttributeLocation objects.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.\n   * @returns {Object} A map of attribute names to attribute locations.\n   */\n  getAttributeLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLAttributeLocationMap {\n    return {\n      aPosition: gl.getAttribLocation(program, 'aPosition'),\n    };\n  }\n\n  /**\n   * Return a map of uniform names to WebGLUniformLocation objects.\n   *\n   * Intended to be overridden by subclasses.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.\n   * @returns {Object} A map of uniform names to uniform locations.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLUniformLocationMap {\n    return {};\n  }\n\n  /**\n   * Send attribute data from this filter to its shader program on the GPU.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {Object} attributeLocations A map of shader attribute names to their locations.\n   */\n  sendAttributeData(\n    gl: WebGLRenderingContext,\n    attributeLocations: Record<string, number>,\n    aPositionData: Float32Array\n  ) {\n    const attributeLocation = attributeLocations.aPosition;\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.enableVertexAttribArray(attributeLocation);\n    gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);\n    gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);\n  }\n\n  _setupFrameBuffer(options: TWebGLPipelineState) {\n    const gl = options.context;\n    if (options.passes > 1) {\n      const width = options.destinationWidth;\n      const height = options.destinationHeight;\n      if (options.sourceWidth !== width || options.sourceHeight !== height) {\n        gl.deleteTexture(options.targetTexture);\n        options.targetTexture = options.filterBackend.createTexture(\n          gl,\n          width,\n          height\n        );\n      }\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        options.targetTexture,\n        0\n      );\n    } else {\n      // draw last filter on canvas and not to framebuffer.\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      gl.finish();\n    }\n  }\n\n  _swapTextures(options: TWebGLPipelineState) {\n    options.passes--;\n    options.pass++;\n    const temp = options.targetTexture;\n    options.targetTexture = options.sourceTexture;\n    options.sourceTexture = temp;\n  }\n\n  /**\n   * Generic isNeutral implementation for one parameter based filters.\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * Other filters may need their own version ( ColorMatrix, HueRotation, gamma, ComposedFilter )\n   * @param {Object} options\n   **/\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isNeutralState(options?: any): boolean {\n    const main = this.mainParameter,\n      defaultValue = (this.constructor as typeof BaseFilter).defaults[\n        main as string\n      ];\n    if (main) {\n      const thisValue = this[main];\n      if (Array.isArray(defaultValue) && Array.isArray(thisValue)) {\n        return defaultValue.every(\n          (value: any, i: number) => value === thisValue[i]\n        );\n      } else {\n        return defaultValue === thisValue;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Apply this filter to the input image data provided.\n   *\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      this._setupFrameBuffer(options);\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n    } else {\n      this.applyTo2d(options);\n    }\n  }\n\n  applyTo2d(options: T2DPipelineState): void {\n    // override by subclass\n  }\n\n  /**\n   * Returns a string that represent the current selected shader code for the filter.\n   * Used to force recompilation when parameters change or to retrieve the shader from cache\n   * @type string\n   **/\n  getCacheKey() {\n    return this.type;\n  }\n\n  /**\n   * Retrieves the cached shader.\n   * @param {Object} options\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   * @return {WebGLProgram} the compiled program shader\n   */\n  retrieveShader(options: TWebGLPipelineState): TWebGLProgramCacheItem {\n    const key = this.getCacheKey();\n    if (!options.programCache[key]) {\n      options.programCache[key] = this.createProgram(options.context);\n    }\n    return options.programCache[key];\n  }\n\n  /**\n   * Apply this filter using webgl.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.originalTexture The texture of the original input image.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyToWebGL(options: TWebGLPipelineState) {\n    const gl = options.context;\n    const shader = this.retrieveShader(options);\n    if (options.pass === 0 && options.originalTexture) {\n      gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);\n    } else {\n      gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);\n    }\n    gl.useProgram(shader.program);\n    this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);\n\n    gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);\n    gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);\n\n    this.sendUniformData(gl, shader.uniformLocations);\n    gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  }\n\n  bindAdditionalTexture(\n    gl: WebGLRenderingContext,\n    texture: WebGLTexture,\n    textureUnit: number\n  ) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // reset active texture to 0 as usual\n    gl.activeTexture(gl.TEXTURE0);\n  }\n\n  unbindAdditionalTexture(gl: WebGLRenderingContext, textureUnit: number) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.activeTexture(gl.TEXTURE0);\n  }\n\n  getMainParameter() {\n    return this.mainParameter ? this[this.mainParameter] : undefined;\n  }\n\n  setMainParameter(value: any) {\n    if (this.mainParameter) {\n      this[this.mainParameter] = value;\n    }\n  }\n\n  /**\n   * Send uniform data from this filter to its shader program on the GPU.\n   *\n   * Intended to be overridden by subclasses.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {Object} uniformLocations A map of shader uniform names to their locations.\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ): void {\n    // override by subclass\n  }\n\n  /**\n   * If needed by a 2d filter, this functions can create an helper canvas to be used\n   * remember that options.targetCanvas is available for use till end of chain.\n   */\n  createHelpLayer(options: T2DPipelineState) {\n    if (!options.helpLayer) {\n      const helpLayer = createCanvasElement();\n      helpLayer.width = options.sourceWidth;\n      helpLayer.height = options.sourceHeight;\n      options.helpLayer = helpLayer;\n    }\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @return {Object} Object representation of an instance\n   */\n  toObject() {\n    const mainP = this.mainParameter;\n    return {\n      type: this.type,\n      ...(mainP ? { [mainP]: this[mainP] } : {}),\n    };\n  }\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON() {\n    // delegate, not alias\n    return this.toObject();\n  }\n\n  static async fromObject(\n    { type, ...filterOptions }: Record<string, any>,\n    options: Abortable\n  ) {\n    return new this(filterOptions);\n  }\n}\n", "export const blendColorFragmentSource = {\n  multiply: 'gl_FragColor.rgb *= uColor.rgb;\\n',\n  screen:\n    'gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n',\n  add: 'gl_FragColor.rgb += uColor.rgb;\\n',\n  difference: 'gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n',\n  subtract: 'gl_FragColor.rgb -= uColor.rgb;\\n',\n  lighten: 'gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n',\n  darken: 'gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n',\n  exclusion:\n    'gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n',\n  overlay: `\n    if (uColor.r < 0.5) {\n      gl_FragColor.r *= 2.0 * uColor.r;\n    } else {\n      gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\n    }\n    if (uColor.g < 0.5) {\n      gl_FragColor.g *= 2.0 * uColor.g;\n    } else {\n      gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\n    }\n    if (uColor.b < 0.5) {\n      gl_FragColor.b *= 2.0 * uColor.b;\n    } else {\n      gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\n    }\n    `,\n  tint: `\n    gl_FragColor.rgb *= (1.0 - uColor.a);\n    gl_FragColor.rgb += uColor.rgb;\n    `,\n} as const;\n", "import { Color } from '../color/Color';\nimport type { TClassProperties } from '../typedefs';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { blendColorFragmentSource } from './shaders/blendColor';\n\nexport type TBlendMode =\n  | 'multiply'\n  | 'add'\n  | 'difference'\n  | 'screen'\n  | 'subtract'\n  | 'darken'\n  | 'lighten'\n  | 'overlay'\n  | 'exclusion'\n  | 'tint';\n\nexport const blendColorDefaultValues: Partial<TClassProperties<BlendColor>> = {\n  color: '#F95C63',\n  mode: 'multiply',\n  alpha: 1,\n};\n\n/**\n * Color Blend filter class\n * @example\n * const filter = new BlendColor({\n *  color: '#000',\n *  mode: 'multiply'\n * });\n *\n * const filter = new BlendImage({\n *  image: fabricImageObject,\n *  mode: 'multiply'\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class BlendColor extends BaseFilter {\n  /**\n   * Color to make the blend operation with. default to a reddish color since black or white\n   * gives always strong result.\n   * @type String\n   * @default\n   **/\n  declare color: string;\n\n  /**\n   * Blend mode for the filter: one of multiply, add, difference, screen, subtract,\n   * darken, lighten, overlay, exclusion, tint.\n   * @type String\n   * @default\n   **/\n  declare mode: TBlendMode;\n\n  /**\n   * alpha value. represent the strength of the blend color operation.\n   * @type Number\n   * @default\n   **/\n  declare alpha: number;\n\n  static defaults = blendColorDefaultValues;\n\n  static type = 'BlendColor';\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  protected getFragmentSource(): string {\n    return `\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec4 uColor;\n      varying vec2 vTexCoord;\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        gl_FragColor = color;\n        if (color.a > 0.0) {\n          ${blendColorFragmentSource[this.mode]}\n        }\n      }\n      `;\n  }\n\n  /**\n   * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const source = new Color(this.color).getSource();\n    const tr = source[0] * this.alpha;\n    const tg = source[1] * this.alpha;\n    const tb = source[2] * this.alpha;\n    const alpha1 = 1 - this.alpha;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n\n      switch (this.mode) {\n        case 'multiply':\n          data[i] = (r * tr) / 255;\n          data[i + 1] = (g * tg) / 255;\n          data[i + 2] = (b * tb) / 255;\n          break;\n        case 'screen':\n          data[i] = 255 - ((255 - r) * (255 - tr)) / 255;\n          data[i + 1] = 255 - ((255 - g) * (255 - tg)) / 255;\n          data[i + 2] = 255 - ((255 - b) * (255 - tb)) / 255;\n          break;\n        case 'add':\n          data[i] = r + tr;\n          data[i + 1] = g + tg;\n          data[i + 2] = b + tb;\n          break;\n        case 'difference':\n          data[i] = Math.abs(r - tr);\n          data[i + 1] = Math.abs(g - tg);\n          data[i + 2] = Math.abs(b - tb);\n          break;\n        case 'subtract':\n          data[i] = r - tr;\n          data[i + 1] = g - tg;\n          data[i + 2] = b - tb;\n          break;\n        case 'darken':\n          data[i] = Math.min(r, tr);\n          data[i + 1] = Math.min(g, tg);\n          data[i + 2] = Math.min(b, tb);\n          break;\n        case 'lighten':\n          data[i] = Math.max(r, tr);\n          data[i + 1] = Math.max(g, tg);\n          data[i + 2] = Math.max(b, tb);\n          break;\n        case 'overlay':\n          data[i] =\n            tr < 128\n              ? (2 * r * tr) / 255\n              : 255 - (2 * (255 - r) * (255 - tr)) / 255;\n          data[i + 1] =\n            tg < 128\n              ? (2 * g * tg) / 255\n              : 255 - (2 * (255 - g) * (255 - tg)) / 255;\n          data[i + 2] =\n            tb < 128\n              ? (2 * b * tb) / 255\n              : 255 - (2 * (255 - b) * (255 - tb)) / 255;\n          break;\n        case 'exclusion':\n          data[i] = tr + r - (2 * tr * r) / 255;\n          data[i + 1] = tg + g - (2 * tg * g) / 255;\n          data[i + 2] = tb + b - (2 * tb * b) / 255;\n          break;\n        case 'tint':\n          data[i] = tr + r * alpha1;\n          data[i + 1] = tg + g * alpha1;\n          data[i + 2] = tb + b * alpha1;\n      }\n    }\n  }\n\n  /**\n   * Return WebGL uniform locations for this filter's shader.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {WebGLShaderProgram} program This filter's compiled shader program.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLUniformLocationMap {\n    return {\n      uColor: gl.getUniformLocation(program, 'uColor'),\n    };\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ) {\n    const source = new Color(this.color).getSource();\n    source[0] = (this.alpha * source[0]) / 255;\n    source[1] = (this.alpha * source[1]) / 255;\n    source[2] = (this.alpha * source[2]) / 255;\n    source[3] = this.alpha;\n    gl.uniform4fv(uniformLocations.uColor, source);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @return {Object} Object representation of an instance\n   */\n  toObject() {\n    return {\n      type: this.type,\n      color: this.color,\n      mode: this.mode,\n      alpha: this.alpha,\n    };\n  }\n}\n\nclassRegistry.setClass(BlendColor);\n", "import type { TBlendImageMode } from '../BlendImage';\n\nexport const fragmentSource: Record<TBlendImageMode, string> = {\n  multiply: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform sampler2D uImage;\n    uniform vec4 uColor;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      vec4 color2 = texture2D(uImage, vTexCoord2);\n      color.rgba *= color2.rgba;\n      gl_FragColor = color;\n    }\n    `,\n  mask: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform sampler2D uImage;\n    uniform vec4 uColor;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      vec4 color2 = texture2D(uImage, vTexCoord2);\n      color.a = color2.a;\n      gl_FragColor = color;\n    }\n    `,\n} as const;\n", "import { FabricImage } from '../shapes/Image';\nimport type { TClassProperties } from '../typedefs';\nimport { createCanvasElement } from '../util/misc/dom';\nimport { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TWebGLPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport type { WebGLFilterBackend } from './WebGLFilterBackend';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/blendImage';\n\nexport type TBlendImageMode = 'multiply' | 'mask';\n\nexport const blendImageDefaultValues: Partial<TClassProperties<BlendImage>> = {\n  mode: 'multiply',\n  alpha: 1,\n  vertexSource: `\n    attribute vec2 aPosition;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    uniform mat3 uTransformMatrix;\n    void main() {\n      vTexCoord = aPosition;\n      vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n    }\n    `,\n};\n\n/**\n * Image Blend filter class\n * @example\n * const filter = new filters.BlendColor({\n *  color: '#000',\n *  mode: 'multiply'\n * });\n *\n * const filter = new BlendImage({\n *  image: fabricImageObject,\n *  mode: 'multiply'\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class BlendImage extends BaseFilter {\n  /**\n   * Image to make the blend operation with.\n   **/\n  declare image: FabricImage;\n\n  /**\n   * Blend mode for the filter: either 'multiply' or 'mask'. 'multiply' will\n   * multiply the values of each channel (R, G, B, and A) of the filter image by\n   * their corresponding values in the base image. 'mask' will only look at the\n   * alpha channel of the filter image, and apply those values to the base\n   * image's alpha channel.\n   * @type String\n   * @default\n   **/\n  declare mode: TBlendImageMode;\n\n  /**\n   * alpha value. represent the strength of the blend image operation.\n   * not implemented.\n   **/\n  declare alpha: number;\n\n  static type = 'BlendImage';\n\n  static defaults = blendImageDefaultValues;\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  getFragmentSource(): string {\n    return fragmentSource[this.mode];\n  }\n\n  applyToWebGL(options: TWebGLPipelineState) {\n    const gl = options.context,\n      texture = this.createTexture(options.filterBackend, this.image);\n    this.bindAdditionalTexture(gl, texture!, gl.TEXTURE1);\n    super.applyToWebGL(options);\n    this.unbindAdditionalTexture(gl, gl.TEXTURE1);\n  }\n\n  createTexture(backend: WebGLFilterBackend, image: FabricImage) {\n    return backend.getCachedTexture(image.cacheKey, image.getElement());\n  }\n\n  /**\n   * Calculate a transformMatrix to adapt the image to blend over\n   * @param {Object} options\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  calculateMatrix() {\n    const image = this.image,\n      { width, height } = image.getElement();\n    return [\n      1 / image.scaleX,\n      0,\n      0,\n      0,\n      1 / image.scaleY,\n      0,\n      -image.left / width,\n      -image.top / height,\n      1,\n    ];\n  }\n\n  /**\n   * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({\n    imageData: { data, width, height },\n    filterBackend: { resources },\n  }: T2DPipelineState) {\n    const image = this.image;\n    if (!resources.blendImage) {\n      resources.blendImage = createCanvasElement();\n    }\n    const canvas1 = resources.blendImage;\n    const context = canvas1.getContext('2d')!;\n    if (canvas1.width !== width || canvas1.height !== height) {\n      canvas1.width = width;\n      canvas1.height = height;\n    } else {\n      context.clearRect(0, 0, width, height);\n    }\n    context.setTransform(\n      image.scaleX,\n      0,\n      0,\n      image.scaleY,\n      image.left,\n      image.top\n    );\n    context.drawImage(image.getElement(), 0, 0, width, height);\n    const blendData = context.getImageData(0, 0, width, height).data;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const a = data[i + 3];\n\n      const tr = blendData[i];\n      const tg = blendData[i + 1];\n      const tb = blendData[i + 2];\n      const ta = blendData[i + 3];\n\n      switch (this.mode) {\n        case 'multiply':\n          data[i] = (r * tr) / 255;\n          data[i + 1] = (g * tg) / 255;\n          data[i + 2] = (b * tb) / 255;\n          data[i + 3] = (a * ta) / 255;\n          break;\n        case 'mask':\n          data[i + 3] = ta;\n          break;\n      }\n    }\n  }\n\n  /**\n   * Return WebGL uniform locations for this filter's shader.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {WebGLShaderProgram} program This filter's compiled shader program.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLUniformLocationMap {\n    return {\n      uTransformMatrix: gl.getUniformLocation(program, 'uTransformMatrix'),\n      uImage: gl.getUniformLocation(program, 'uImage'),\n    };\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ) {\n    const matrix = this.calculateMatrix();\n    gl.uniform1i(uniformLocations.uImage, 1); // texture unit 1.\n    gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @return {Object} Object representation of an instance\n   */\n  toObject() {\n    return {\n      type: this.type,\n      image: this.image && this.image.toObject(),\n      mode: this.mode,\n      alpha: this.alpha,\n    };\n  }\n\n  /**\n   * Create filter instance from an object representation\n   * @static\n   * @param {object} object Object to create an instance from\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting image loading, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<BlendImage>}\n   */\n  static fromObject(\n    { type, image, ...filterOptions }: Record<string, any>,\n    options: { signal: AbortSignal }\n  ) {\n    return FabricImage.fromObject(image, options).then(\n      (enlivedImage) =>\n        new this({ ...filterOptions, image: enlivedImage }) as BaseFilter\n    );\n  }\n}\n\nclassRegistry.setClass(BlendImage);\n", "import type { TClassProperties } from '../typedefs';\nimport { createCanvasElement } from '../util/misc/dom';\nimport { BaseFilter } from './BaseFilter';\nimport type {\n  TWebGLPipelineState,\n  T2DPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/blur';\n\nexport const blurDefaultValues: Partial<TClassProperties<Blur>> = {\n  blur: 0,\n  mainParameter: 'blur',\n};\n\n/**\n * Blur filter class\n * @example\n * const filter = new Blur({\n *   blur: 0.5\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Blur extends BaseFilter {\n  /**\n   * blur value, in percentage of image dimensions.\n   * specific to keep the image blur constant at different resolutions\n   * range between 0 and 1.\n   * @type Number\n   * @default\n   */\n  declare blur: number;\n\n  declare horizontal: boolean;\n  declare aspectRatio: number;\n\n  static type = 'Blur';\n\n  static defaults = blurDefaultValues;\n\n  getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      // this aspectRatio is used to give the same blur to vertical and horizontal\n      this.aspectRatio = options.sourceWidth / options.sourceHeight;\n      options.passes++;\n      this._setupFrameBuffer(options);\n      this.horizontal = true;\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n      this._setupFrameBuffer(options);\n      this.horizontal = false;\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n    } else {\n      this.applyTo2d(options);\n    }\n  }\n\n  applyTo2d(options: T2DPipelineState) {\n    options.imageData = this.simpleBlur(options);\n  }\n\n  simpleBlur({\n    ctx,\n    imageData,\n    filterBackend: { resources },\n  }: T2DPipelineState) {\n    const { width, height } = imageData;\n    if (!resources.blurLayer1) {\n      resources.blurLayer1 = createCanvasElement();\n      resources.blurLayer2 = createCanvasElement();\n    }\n    const canvas1 = resources.blurLayer1!;\n    const canvas2 = resources.blurLayer2!;\n    if (canvas1.width !== width || canvas1.height !== height) {\n      canvas2.width = canvas1.width = width;\n      canvas2.height = canvas1.height = height;\n    }\n    const ctx1 = canvas1.getContext('2d')!,\n      ctx2 = canvas2.getContext('2d')!,\n      nSamples = 15,\n      blur = this.blur * 0.06 * 0.5;\n    let random, percent, j, i;\n\n    // load first canvas\n    ctx1.putImageData(imageData, 0, 0);\n    ctx2.clearRect(0, 0, width, height);\n\n    for (i = -nSamples; i <= nSamples; i++) {\n      random = (Math.random() - 0.5) / 4;\n      percent = i / nSamples;\n      j = blur * percent * width + random;\n      ctx2.globalAlpha = 1 - Math.abs(percent);\n      ctx2.drawImage(canvas1, j, random);\n      ctx1.drawImage(canvas2, 0, 0);\n      ctx2.globalAlpha = 1;\n      ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n    }\n    for (i = -nSamples; i <= nSamples; i++) {\n      random = (Math.random() - 0.5) / 4;\n      percent = i / nSamples;\n      j = blur * percent * height + random;\n      ctx2.globalAlpha = 1 - Math.abs(percent);\n      ctx2.drawImage(canvas1, random, j);\n      ctx1.drawImage(canvas2, 0, 0);\n      ctx2.globalAlpha = 1;\n      ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n    }\n    ctx.drawImage(canvas1, 0, 0);\n    const newImageData = ctx.getImageData(0, 0, canvas1.width, canvas1.height);\n    ctx1.globalAlpha = 1;\n    ctx1.clearRect(0, 0, canvas1.width, canvas1.height);\n    return newImageData;\n  }\n\n  /**\n   * Return WebGL uniform locations for this filter's shader.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {WebGLShaderProgram} program This filter's compiled shader program.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLUniformLocationMap {\n    return {\n      delta: gl.getUniformLocation(program, 'uDelta'),\n    };\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ) {\n    const delta = this.chooseRightDelta();\n    gl.uniform2fv(uniformLocations.delta, delta);\n  }\n\n  /**\n   * choose right value of image percentage to blur with\n   * @returns {Array} a numeric array with delta values\n   */\n  chooseRightDelta() {\n    let blurScale = 1;\n    const delta = [0, 0];\n    if (this.horizontal) {\n      if (this.aspectRatio > 1) {\n        // image is wide, i want to shrink radius horizontal\n        blurScale = 1 / this.aspectRatio;\n      }\n    } else {\n      if (this.aspectRatio < 1) {\n        // image is tall, i want to shrink radius vertical\n        blurScale = this.aspectRatio;\n      }\n    }\n    const blur = blurScale * this.blur * 0.12;\n    if (this.horizontal) {\n      delta[0] = blur;\n    } else {\n      delta[1] = blur;\n    }\n    return delta;\n  }\n}\n\nclassRegistry.setClass(Blur);\n", "export const fragmentSource = `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform vec2 uDelta;\n    varying vec2 vTexCoord;\n    const float nSamples = 15.0;\n    vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\n    float random(vec3 scale) {\n      /* use the fragment position for a different seed per-pixel */\n      return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\n    }\n    void main() {\n      vec4 color = vec4(0.0);\n      float total = 0.0;\n      float offset = random(v3offset);\n      for (float t = -nSamples; t <= nSamples; t++) {\n        float percent = (t + offset - 0.5) / nSamples;\n        float weight = 1.0 - abs(percent);\n        color += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\n        total += weight;\n      }\n      gl_FragColor = color / total;\n    }\n  ` as const;\n", "import type { TClassProperties } from '../typedefs';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/brightness';\nexport const brightnessDefaultValues: Partial<TClassProperties<Brightness>> = {\n  brightness: 0,\n  mainParameter: 'brightness',\n};\n\n/**\n * Brightness filter class\n * @example\n * const filter = new Brightness({\n *   brightness: 0.05\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Brightness extends BaseFilter {\n  /**\n   * Brightness value, from -1 to 1.\n   * translated to -255 to 255 for 2d\n   * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n   * @param {Number} brightness\n   * @default\n   */\n  declare brightness: number;\n\n  static type = 'Brightness';\n\n  static defaults = brightnessDefaultValues;\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    if (this.brightness === 0) {\n      return;\n    }\n    const brightness = Math.round(this.brightness * 255);\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = data[i] + brightness;\n      data[i + 1] = data[i + 1] + brightness;\n      data[i + 2] = data[i + 2] + brightness;\n    }\n  }\n\n  /**\n   * Return WebGL uniform locations for this filter's shader.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {WebGLShaderProgram} program This filter's compiled shader program.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLUniformLocationMap {\n    return {\n      uBrightness: gl.getUniformLocation(program, 'uBrightness'),\n    };\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ) {\n    gl.uniform1f(uniformLocations.uBrightness, this.brightness);\n  }\n}\n\nclassRegistry.setClass(Brightness);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uBrightness;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color.rgb += uBrightness;\n    gl_FragColor = color;\n  }\n`;\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  varying vec2 vTexCoord;\n  uniform mat4 uColorMatrix;\n  uniform vec4 uConstants;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color *= uColorMatrix;\n    color += uConstants;\n    gl_FragColor = color;\n  }`;\n", "import type { TClassProperties } from '../typedefs';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/colorMatrix';\nexport const colorMatrixDefaultValues: Partial<TClassProperties<ColorMatrix>> =\n  {\n    matrix: [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],\n    mainParameter: 'matrix',\n    colorsOnly: true,\n  };\n\n/**\n   * Color Matrix filter class\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl demo}\n   * @example <caption>Kodachrome filter</caption>\n   * const filter = new ColorMatrix({\n   *  matrix: [\n       1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\n       -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\n       -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\n       0, 0, 0, 1, 0\n      ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\nexport class ColorMatrix extends BaseFilter {\n  /**\n   * Colormatrix for pixels.\n   * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\n   * outside the -1, 1 range.\n   * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n   * @param {Array} matrix array of 20 numbers.\n   * @default\n   */\n  declare matrix: number[];\n\n  /**\n   * Lock the colormatrix on the color part, skipping alpha, mainly for non webgl scenario\n   * to save some calculation\n   * @type Boolean\n   * @default true\n   */\n  declare colorsOnly: boolean;\n\n  static type = 'ColorMatrix';\n\n  static defaults = colorMatrixDefaultValues;\n\n  setOptions({ matrix, ...options }: Record<string, any>) {\n    if (matrix) {\n      // safeguard against mutation\n      this.matrix = [...matrix];\n    }\n    Object.assign(this, options);\n  }\n\n  getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d(options: T2DPipelineState) {\n    const imageData = options.imageData,\n      data = imageData.data,\n      m = this.matrix,\n      colorsOnly = this.colorsOnly;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      if (colorsOnly) {\n        data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;\n        data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;\n        data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;\n      } else {\n        const a = data[i + 3];\n        data[i] = r * m[0] + g * m[1] + b * m[2] + a * m[3] + m[4] * 255;\n        data[i + 1] = r * m[5] + g * m[6] + b * m[7] + a * m[8] + m[9] * 255;\n        data[i + 2] =\n          r * m[10] + g * m[11] + b * m[12] + a * m[13] + m[14] * 255;\n        data[i + 3] =\n          r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;\n      }\n    }\n  }\n\n  /**\n   * Return WebGL uniform locations for this filter's shader.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {WebGLShaderProgram} program This filter's compiled shader program.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLUniformLocationMap {\n    return {\n      uColorMatrix: gl.getUniformLocation(program, 'uColorMatrix'),\n      uConstants: gl.getUniformLocation(program, 'uConstants'),\n    };\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ) {\n    const m = this.matrix,\n      matrix = [\n        m[0],\n        m[1],\n        m[2],\n        m[3],\n        m[5],\n        m[6],\n        m[7],\n        m[8],\n        m[10],\n        m[11],\n        m[12],\n        m[13],\n        m[15],\n        m[16],\n        m[17],\n        m[18],\n      ],\n      constants = [m[4], m[9], m[14], m[19]];\n    gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);\n    gl.uniform4fv(uniformLocations.uConstants, constants);\n  }\n}\n\nclassRegistry.setClass(ColorMatrix);\n", "import { ColorMatrix, colorMatrixDefaultValues } from './ColorMatrix';\nimport { classRegistry } from '../ClassRegistry';\n\nexport function createColorMatrixFilter(key: string, matrix: number[]) {\n  const newClass = class extends ColorMatrix {\n    static type = key;\n\n    static defaults = {\n      ...colorMatrixDefaultValues,\n      /**\n       * Lock the matrix export for this kind of static, parameter less filters.\n       */\n      mainParameter: undefined,\n      matrix,\n    };\n  };\n  classRegistry.setClass(newClass, key);\n  return newClass;\n}\n\nexport const Brownie = createColorMatrixFilter(\n  'Brownie',\n  [\n    0.5997, 0.34553, -0.27082, 0, 0.186, -0.0377, 0.86095, 0.15059, 0, -0.1449,\n    0.24113, -0.07441, 0.44972, 0, -0.02965, 0, 0, 0, 1, 0,\n  ]\n);\n\nexport const Vintage = createColorMatrixFilter(\n  'Vintage',\n  [\n    0.62793, 0.32021, -0.03965, 0, 0.03784, 0.02578, 0.64411, 0.03259, 0,\n    0.02926, 0.0466, -0.08512, 0.52416, 0, 0.02023, 0, 0, 0, 1, 0,\n  ]\n);\n\nexport const Kodachrome = createColorMatrixFilter(\n  'Kodachrome',\n  [\n    1.12855, -0.39673, -0.03992, 0, 0.24991, -0.16404, 1.08352, -0.05498, 0,\n    0.09698, -0.16786, -0.56034, 1.60148, 0, 0.13972, 0, 0, 0, 1, 0,\n  ]\n);\n\nexport const Technicolor = createColorMatrixFilter(\n  'Technicolor',\n  [\n    1.91252, -0.85453, -0.09155, 0, 0.04624, -0.30878, 1.76589, -0.10601, 0,\n    -0.27589, -0.2311, -0.75018, 1.84759, 0, 0.12137, 0, 0, 0, 1, 0,\n  ]\n);\n\nexport const Polaroid = createColorMatrixFilter(\n  'Polaroid',\n  [\n    1.438, -0.062, -0.062, 0, 0, -0.122, 1.378, -0.122, 0, 0, -0.016, -0.016,\n    1.483, 0, 0, 0, 0, 0, 1, 0,\n  ]\n);\n\nexport const Sepia = createColorMatrixFilter(\n  'Sepia',\n  [\n    0.393, 0.769, 0.189, 0, 0, 0.349, 0.686, 0.168, 0, 0, 0.272, 0.534, 0.131,\n    0, 0, 0, 0, 0, 1, 0,\n  ]\n);\n\nexport const BlackWhite = createColorMatrixFilter(\n  'BlackWhite',\n  [\n    1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 0, 0, 0,\n    1, 0,\n  ]\n);\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLPipelineState } from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\n\n/**\n * A container class that knows how to apply a sequence of filters to an input image.\n */\nexport class Composed extends BaseFilter {\n  /**\n   * A non sparse array of filters to apply\n   */\n  declare subFilters: BaseFilter[];\n\n  static type = 'Composed';\n\n  constructor({\n    subFilters = [],\n    ...options\n  }: { subFilters?: BaseFilter[] } & Record<string, any> = {}) {\n    super(options);\n    this.subFilters = subFilters;\n  }\n\n  /**\n   * Apply this container's filters to the input image provided.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be applied.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      options.passes += this.subFilters.length - 1;\n    }\n    this.subFilters.forEach((filter) => {\n      filter.applyTo(options);\n    });\n  }\n\n  /**\n   * Serialize this filter into JSON.\n   *\n   * @returns {Object} A JSON representation of this filter.\n   */\n  toObject() {\n    return {\n      ...super.toObject(),\n      subFilters: this.subFilters.map((filter) => filter.toObject()),\n    };\n  }\n\n  isNeutralState() {\n    return !this.subFilters.some((filter) => !filter.isNeutralState());\n  }\n\n  /**\n   * Deserialize a JSON definition of a ComposedFilter into a concrete instance.\n   * @static\n   * @param {oject} object Object to create an instance from\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting `BlendImage` filter loading, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<Composed>}\n   */\n  static fromObject(\n    object: Record<string, any>,\n    options: { signal: AbortSignal }\n  ) {\n    return Promise.all(\n      ((object.subFilters || []) as BaseFilter[]).map((filter) =>\n        classRegistry\n          .getClass<typeof BaseFilter>(filter.type)\n          .fromObject(filter, options)\n      )\n    ).then(\n      (enlivedFilters) => new this({ subFilters: enlivedFilters }) as BaseFilter\n    );\n  }\n}\n\nclassRegistry.setClass(Composed);\n", "import type { TClassProperties } from '../typedefs';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/constrast';\nexport const contrastDefaultValues: Partial<TClassProperties<Contrast>> = {\n  contrast: 0,\n  mainParameter: 'contrast',\n};\n\n/**\n * Contrast filter class\n * @example\n * const filter = new Contrast({\n *   contrast: 0.25\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Contrast extends BaseFilter {\n  /**\n   * contrast value, range from -1 to 1.\n   * @param {Number} contrast\n   * @default 0\n   */\n  declare contrast: number;\n\n  static type = 'Contrast';\n\n  static defaults = contrastDefaultValues;\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n  /**\n   * Apply the Contrast operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    if (this.contrast === 0) {\n      return;\n    }\n    const contrast = Math.floor(this.contrast * 255),\n      contrastF = (259 * (contrast + 255)) / (255 * (259 - contrast));\n\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = contrastF * (data[i] - 128) + 128;\n      data[i + 1] = contrastF * (data[i + 1] - 128) + 128;\n      data[i + 2] = contrastF * (data[i + 2] - 128) + 128;\n    }\n  }\n\n  /**\n   * Return WebGL uniform locations for this filter's shader.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {WebGLShaderProgram} program This filter's compiled shader program.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLUniformLocationMap {\n    return {\n      uContrast: gl.getUniformLocation(program, 'uContrast'),\n    };\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ) {\n    gl.uniform1f(uniformLocations.uContrast, this.contrast);\n  }\n}\n\nclassRegistry.setClass(Contrast);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uContrast;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\n    color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\n    gl_FragColor = color;\n  }`;\n", "export const fragmentSource = {\n  Convolute_3_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[9];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 3.0; h+=1.0) {\n        for (float w = 0.0; w < 3.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_3_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[9];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 3.0; h+=1.0) {\n        for (float w = 0.0; w < 3.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_5_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[25];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 5.0; h+=1.0) {\n        for (float w = 0.0; w < 5.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_5_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[25];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 5.0; h+=1.0) {\n        for (float w = 0.0; w < 5.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_7_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[49];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 7.0; h+=1.0) {\n        for (float w = 0.0; w < 7.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_7_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[49];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 7.0; h+=1.0) {\n        for (float w = 0.0; w < 7.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_9_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[81];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 9.0; h+=1.0) {\n        for (float w = 0.0; w < 9.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_9_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[81];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 9.0; h+=1.0) {\n        for (float w = 0.0; w < 9.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n};\n", "import type { TClassProperties } from '../typedefs';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/convolute';\n\nexport const convoluteDefaultValues: Partial<TClassProperties<Convolute>> = {\n  opaque: false,\n  matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],\n};\n\n/**\n * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\n * @example <caption>Sharpen filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 0, -1,  0,\n *            -1,  5, -1,\n *             0, -1,  0 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Blur filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 1/9, 1/9, 1/9,\n *             1/9, 1/9, 1/9,\n *             1/9, 1/9, 1/9 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Emboss filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 1,   1,  1,\n *             1, 0.7, -1,\n *            -1,  -1, -1 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Emboss filter with opaqueness</caption>\n * const filter = new Convolute({\n *   opaque: true,\n *   matrix: [ 1,   1,  1,\n *             1, 0.7, -1,\n *            -1,  -1, -1 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Convolute extends BaseFilter {\n  /*\n   * Opaque value (true/false)\n   */\n  declare opaque: boolean;\n\n  /*\n   * matrix for the filter, max 9x9\n   */\n  declare matrix: number[];\n\n  static type = 'Convolute';\n\n  static defaults = convoluteDefaultValues;\n\n  getCacheKey() {\n    return `${this.type}_${Math.sqrt(this.matrix.length)}_${\n      this.opaque ? 1 : 0\n    }` as keyof typeof fragmentSource;\n  }\n\n  getFragmentSource() {\n    return fragmentSource[this.getCacheKey()];\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d(options: T2DPipelineState) {\n    const imageData = options.imageData,\n      data = imageData.data,\n      weights = this.matrix,\n      side = Math.round(Math.sqrt(weights.length)),\n      halfSide = Math.floor(side / 2),\n      sw = imageData.width,\n      sh = imageData.height,\n      output = options.ctx.createImageData(sw, sh),\n      dst = output.data,\n      // go through the destination image pixels\n      alphaFac = this.opaque ? 1 : 0;\n    let r, g, b, a, dstOff, scx, scy, srcOff, wt, x, y, cx, cy;\n\n    for (y = 0; y < sh; y++) {\n      for (x = 0; x < sw; x++) {\n        dstOff = (y * sw + x) * 4;\n        // calculate the weighed sum of the source image pixels that\n        // fall under the convolution matrix\n        r = 0;\n        g = 0;\n        b = 0;\n        a = 0;\n\n        for (cy = 0; cy < side; cy++) {\n          for (cx = 0; cx < side; cx++) {\n            scy = y + cy - halfSide;\n            scx = x + cx - halfSide;\n\n            // eslint-disable-next-line max-depth\n            if (scy < 0 || scy >= sh || scx < 0 || scx >= sw) {\n              continue;\n            }\n\n            srcOff = (scy * sw + scx) * 4;\n            wt = weights[cy * side + cx];\n\n            r += data[srcOff] * wt;\n            g += data[srcOff + 1] * wt;\n            b += data[srcOff + 2] * wt;\n            // eslint-disable-next-line max-depth\n            if (!alphaFac) {\n              a += data[srcOff + 3] * wt;\n            }\n          }\n        }\n        dst[dstOff] = r;\n        dst[dstOff + 1] = g;\n        dst[dstOff + 2] = b;\n        if (!alphaFac) {\n          dst[dstOff + 3] = a;\n        } else {\n          dst[dstOff + 3] = data[dstOff + 3];\n        }\n      }\n    }\n    options.imageData = output;\n  }\n\n  /**\n   * Return WebGL uniform locations for this filter's shader.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {WebGLShaderProgram} program This filter's compiled shader program.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLUniformLocationMap {\n    return {\n      uMatrix: gl.getUniformLocation(program, 'uMatrix'),\n      uOpaque: gl.getUniformLocation(program, 'uOpaque'),\n      uHalfSize: gl.getUniformLocation(program, 'uHalfSize'),\n      uSize: gl.getUniformLocation(program, 'uSize'),\n    };\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ) {\n    gl.uniform1fv(uniformLocations.uMatrix, this.matrix);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @return {Object} Object representation of an instance\n   */\n  toObject() {\n    return {\n      ...super.toObject(),\n      opaque: this.opaque,\n      matrix: [...this.matrix],\n    };\n  }\n}\n\nclassRegistry.setClass(Convolute);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform vec3 uGamma;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    vec3 correction = (1.0 / uGamma);\n    color.r = pow(color.r, correction.r);\n    color.g = pow(color.g, correction.g);\n    color.b = pow(color.b, correction.b);\n    gl_FragColor = color;\n    gl_FragColor.rgb *= color.a;\n  }\n`;\n", "import type { TClassProperties } from '../typedefs';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/gamma';\nexport type GammaInput = [number, number, number];\n\nexport const gammaDefaultValues: Partial<TClassProperties<Gamma>> = {\n  mainParameter: 'gamma',\n  gamma: [1, 1, 1],\n};\n\n/**\n * Gamma filter class\n * @example\n * const filter = new Gamma({\n *   gamma: [1, 0.5, 2.1]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Gamma extends BaseFilter {\n  /**\n   * Gamma array value, from 0.01 to 2.2.\n   * @param {Array} gamma\n   * @default\n   */\n  declare gamma: GammaInput;\n  declare rgbValues?: {\n    r: Uint8Array;\n    g: Uint8Array;\n    b: Uint8Array;\n  };\n\n  static type = 'Gamma';\n\n  static defaults = gammaDefaultValues;\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  constructor({ gamma = [1, 1, 1], ...options }: { gamma?: GammaInput } = {}) {\n    super(options);\n    this.gamma = gamma;\n  }\n\n  /**\n   * Apply the Gamma operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const gamma = this.gamma,\n      rInv = 1 / gamma[0],\n      gInv = 1 / gamma[1],\n      bInv = 1 / gamma[2];\n\n    if (!this.rgbValues) {\n      this.rgbValues = {\n        r: new Uint8Array(256),\n        g: new Uint8Array(256),\n        b: new Uint8Array(256),\n      };\n    }\n\n    // This is an optimization - pre-compute a look-up table for each color channel\n    // instead of performing these pow calls for each pixel in the image.\n    const rgb = this.rgbValues;\n    for (let i = 0; i < 256; i++) {\n      rgb.r[i] = Math.pow(i / 255, rInv) * 255;\n      rgb.g[i] = Math.pow(i / 255, gInv) * 255;\n      rgb.b[i] = Math.pow(i / 255, bInv) * 255;\n    }\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = rgb.r[data[i]];\n      data[i + 1] = rgb.g[data[i + 1]];\n      data[i + 2] = rgb.b[data[i + 2]];\n    }\n  }\n\n  /**\n   * Return WebGL uniform locations for this filter's shader.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {WebGLShaderProgram} program This filter's compiled shader program.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLUniformLocationMap {\n    return {\n      uGamma: gl.getUniformLocation(program, 'uGamma'),\n    };\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ) {\n    gl.uniform3fv(uniformLocations.uGamma, this.gamma);\n  }\n}\n\nclassRegistry.setClass(Gamma);\n", "import type { TGrayscaleMode } from '../Grayscale';\n\nexport const fragmentSource: Record<TGrayscaleMode, string> = {\n  average: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      float average = (color.r + color.b + color.g) / 3.0;\n      gl_FragColor = vec4(average, average, average, color.a);\n    }\n    `,\n  lightness: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform int uMode;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 col = texture2D(uTexture, vTexCoord);\n      float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\n      gl_FragColor = vec4(average, average, average, col.a);\n    }\n    `,\n  luminosity: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform int uMode;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 col = texture2D(uTexture, vTexCoord);\n      float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\n      gl_FragColor = vec4(average, average, average, col.a);\n    }\n    `,\n};\n", "import type { TClassProperties } from '../typedefs';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/grayscale';\n\nexport type TGrayscaleMode = 'average' | 'lightness' | 'luminosity';\n\nexport const grayscaleDefaultValues: Partial<TClassProperties<Grayscale>> = {\n  mode: 'average',\n  mainParameter: 'mode',\n};\n\n/**\n * Grayscale image filter class\n * @example\n * const filter = new Grayscale();\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Grayscale extends BaseFilter {\n  declare mode: TGrayscaleMode;\n\n  static type = 'Grayscale';\n\n  static defaults = grayscaleDefaultValues;\n\n  /**\n   * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    for (let i = 0, value: number; i < data.length; i += 4) {\n      switch (this.mode) {\n        case 'average':\n          value = (data[i] + data[i + 1] + data[i + 2]) / 3;\n          break;\n        case 'lightness':\n          value =\n            (Math.min(data[i], data[i + 1], data[i + 2]) +\n              Math.max(data[i], data[i + 1], data[i + 2])) /\n            2;\n          break;\n        case 'luminosity':\n          value = 0.21 * data[i] + 0.72 * data[i + 1] + 0.07 * data[i + 2];\n          break;\n      }\n\n      data[i] = value;\n      data[i + 1] = value;\n      data[i + 2] = value;\n    }\n  }\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  getFragmentSource() {\n    return fragmentSource[this.mode];\n  }\n\n  /**\n   * Return WebGL uniform locations for this filter's shader.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {WebGLShaderProgram} program This filter's compiled shader program.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLUniformLocationMap {\n    return {\n      uMode: gl.getUniformLocation(program, 'uMode'),\n    };\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ) {\n    const mode = 1;\n    gl.uniform1i(uniformLocations.uMode, mode);\n  }\n\n  /**\n   * Grayscale filter isNeutralState implementation\n   * The filter is never neutral\n   * on the image\n   **/\n  isNeutralState() {\n    return false;\n  }\n}\n\nclassRegistry.setClass(Grayscale);\n", "import type { TClassProperties } from '../typedefs';\nimport { cos } from '../util/misc/cos';\nimport { sin } from '../util/misc/sin';\nimport { ColorMatrix } from './ColorMatrix';\nimport type { TWebGLPipelineState, T2DPipelineState } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\n\nexport const hueRotationDefaultValues: Partial<TClassProperties<HueRotation>> =\n  {\n    rotation: 0,\n    mainParameter: 'rotation',\n  };\n\n/**\n * HueRotation filter class\n * @example\n * const filter = new HueRotation({\n *   rotation: -0.5\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\n// @ts-expect-error some babbling about mainParameter\nexport class HueRotation extends ColorMatrix {\n  /**\n   * HueRotation value, from -1 to 1.\n   */\n  declare rotation: number;\n\n  static type = 'HueRotation';\n\n  static defaults = hueRotationDefaultValues;\n\n  calculateMatrix() {\n    const rad = this.rotation * Math.PI,\n      cosine = cos(rad),\n      sine = sin(rad),\n      aThird = 1 / 3,\n      aThirdSqtSin = Math.sqrt(aThird) * sine,\n      OneMinusCos = 1 - cosine;\n    this.matrix = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];\n    this.matrix[0] = cosine + OneMinusCos / 3;\n    this.matrix[1] = aThird * OneMinusCos - aThirdSqtSin;\n    this.matrix[2] = aThird * OneMinusCos + aThirdSqtSin;\n    this.matrix[5] = aThird * OneMinusCos + aThirdSqtSin;\n    this.matrix[6] = cosine + aThird * OneMinusCos;\n    this.matrix[7] = aThird * OneMinusCos - aThirdSqtSin;\n    this.matrix[10] = aThird * OneMinusCos - aThirdSqtSin;\n    this.matrix[11] = aThird * OneMinusCos + aThirdSqtSin;\n    this.matrix[12] = cosine + aThird * OneMinusCos;\n  }\n\n  isNeutralState() {\n    this.calculateMatrix();\n    return super.isNeutralState();\n  }\n\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    this.calculateMatrix();\n    super.applyTo(options);\n  }\n}\n\nclassRegistry.setClass(HueRotation);\n", "import type { TClassProperties } from '../typedefs';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/invert';\n\nexport const invertDefaultValues: Partial<TClassProperties<Invert>> = {\n  alpha: false,\n  invert: true,\n  mainParameter: 'invert',\n};\n\n/**\n * @example\n * const filter = new Invert();\n * object.filters.push(filter);\n * object.applyFilters(canvas.renderAll.bind(canvas));\n */\nexport class Invert extends BaseFilter {\n  /**\n   * Invert also alpha.\n   * @param {Boolean} alpha\n   * @default\n   **/\n  declare alpha: boolean;\n\n  /**\n   * Filter invert. if false, does nothing\n   * @param {Boolean} invert\n   * @default\n   */\n  declare invert: boolean;\n\n  static type = 'Invert';\n\n  static defaults = invertDefaultValues;\n\n  /**\n   * Apply the Invert operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = 255 - data[i];\n      data[i + 1] = 255 - data[i + 1];\n      data[i + 2] = 255 - data[i + 2];\n\n      if (this.alpha) {\n        data[i + 3] = 255 - data[i + 3];\n      }\n    }\n  }\n\n  protected getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Invert filter isNeutralState implementation\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * @param {Object} options\n   **/\n  isNeutralState() {\n    return !this.invert;\n  }\n\n  /**\n   * Return WebGL uniform locations for this filter's shader.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {WebGLShaderProgram} program This filter's compiled shader program.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLUniformLocationMap {\n    return {\n      uInvert: gl.getUniformLocation(program, 'uInvert'),\n      uAlpha: gl.getUniformLocation(program, 'uAlpha'),\n    };\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ) {\n    gl.uniform1i(uniformLocations.uInvert, Number(this.invert));\n    gl.uniform1i(uniformLocations.uAlpha, Number(this.alpha));\n  }\n}\n\nclassRegistry.setClass(Invert);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform int uInvert;\n  uniform int uAlpha;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    if (uInvert == 1) {\n      if (uAlpha == 1) {\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,1.0 -color.a);\n      } else {\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\n      }\n    } else {\n      gl_FragColor = color;\n    }\n  }\n`;\n", "import type { TClassProperties } from '../typedefs';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/noise';\n\nexport const noiseDefaultValues: Partial<TClassProperties<Noise>> = {\n  mainParameter: 'noise',\n  noise: 0,\n};\n\n/**\n * Noise filter class\n * @example\n * const filter = new Noise({\n *   noise: 700\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Noise extends BaseFilter {\n  /**\n   * Noise value, from\n   * @param {Number} noise\n   * @default\n   */\n  declare noise: number;\n\n  static type = 'Noise';\n\n  static defaults = noiseDefaultValues;\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    if (this.noise === 0) {\n      return;\n    }\n    const noise = this.noise;\n    for (let i = 0; i < data.length; i += 4) {\n      const rand = (0.5 - Math.random()) * noise;\n      data[i] += rand;\n      data[i + 1] += rand;\n      data[i + 2] += rand;\n    }\n  }\n\n  /**\n   * Return WebGL uniform locations for this filter's shader.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {WebGLShaderProgram} program This filter's compiled shader program.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLUniformLocationMap {\n    return {\n      uNoise: gl.getUniformLocation(program, 'uNoise'),\n      uSeed: gl.getUniformLocation(program, 'uSeed'),\n    };\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ) {\n    gl.uniform1f(uniformLocations.uNoise, this.noise / 255);\n    gl.uniform1f(uniformLocations.uSeed, Math.random());\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @return {Object} Object representation of an instance\n   */\n  toObject() {\n    return { ...super.toObject(), noise: this.noise };\n  }\n}\n\nclassRegistry.setClass(Noise);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uStepH;\n  uniform float uNoise;\n  uniform float uSeed;\n  varying vec2 vTexCoord;\n  float rand(vec2 co, float seed, float vScale) {\n    return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\n  }\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\n    gl_FragColor = color;\n  }\n`;\n", "import type { TClassProperties } from '../typedefs';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/pixelate';\n\nexport const pixelateDefaultValues: Partial<TClassProperties<Pixelate>> = {\n  blocksize: 4,\n  mainParameter: 'blocksize',\n};\n\n/**\n * Pixelate filter class\n * @example\n * const filter = new Pixelate({\n *   blocksize: 8\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Pixelate extends BaseFilter {\n  declare blocksize: number;\n\n  static type = 'Pixelate';\n\n  static defaults = pixelateDefaultValues;\n\n  /**\n   * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data, width, height } }: T2DPipelineState) {\n    for (let i = 0; i < height; i += this.blocksize) {\n      for (let j = 0; j < width; j += this.blocksize) {\n        const index = i * 4 * width + j * 4;\n        const r = data[index];\n        const g = data[index + 1];\n        const b = data[index + 2];\n        const a = data[index + 3];\n\n        for (let _i = i; _i < Math.min(i + this.blocksize, height); _i++) {\n          for (let _j = j; _j < Math.min(j + this.blocksize, width); _j++) {\n            const index = _i * 4 * width + _j * 4;\n            data[index] = r;\n            data[index + 1] = g;\n            data[index + 2] = b;\n            data[index + 3] = a;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Indicate when the filter is not gonna apply changes to the image\n   **/\n  isNeutralState() {\n    return this.blocksize === 1;\n  }\n\n  protected getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Return WebGL uniform locations for this filter's shader.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {WebGLShaderProgram} program This filter's compiled shader program.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLUniformLocationMap {\n    return {\n      uBlocksize: gl.getUniformLocation(program, 'uBlocksize'),\n      uStepW: gl.getUniformLocation(program, 'uStepW'),\n      uStepH: gl.getUniformLocation(program, 'uStepH'),\n    };\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ) {\n    gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);\n  }\n}\n\nclassRegistry.setClass(Pixelate);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uBlocksize;\n  uniform float uStepW;\n  uniform float uStepH;\n  varying vec2 vTexCoord;\n  void main() {\n    float blockW = uBlocksize * uStepW;\n    float blockH = uBlocksize * uStepW;\n    int posX = int(vTexCoord.x / blockW);\n    int posY = int(vTexCoord.y / blockH);\n    float fposX = float(posX);\n    float fposY = float(posY);\n    vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\n    vec4 color = texture2D(uTexture, squareCoords);\n    gl_FragColor = color;\n  }\n`;\n", "import { Color } from '../color/Color';\nimport type { TClassProperties } from '../typedefs';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentShader } from './shaders/removeColor';\nexport const removeColorDefaultValues: Partial<TClassProperties<RemoveColor>> =\n  {\n    color: '#FFFFFF',\n    distance: 0.02,\n    useAlpha: false,\n  };\n\n/**\n * Remove white filter class\n * @example\n * const filter = new RemoveColor({\n *   threshold: 0.2,\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class RemoveColor extends BaseFilter {\n  /**\n   * Color to remove, in any format understood by {@link Color}.\n   * @param {String} type\n   * @default\n   */\n  declare color: string;\n\n  /**\n   * distance to actual color, as value up or down from each r,g,b\n   * between 0 and 1\n   **/\n  declare distance: number;\n\n  /**\n   * For color to remove inside distance, use alpha channel for a smoother deletion\n   * NOT IMPLEMENTED YET\n   **/\n  declare useAlpha: boolean;\n\n  static type = 'RemoveColor';\n\n  static defaults = removeColorDefaultValues;\n\n  getFragmentShader() {\n    return fragmentShader;\n  }\n\n  /**\n   * Applies filter to canvas element\n   * @param {Object} canvasEl Canvas element to apply filter to\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const distance = this.distance * 255,\n      source = new Color(this.color).getSource(),\n      lowC = [source[0] - distance, source[1] - distance, source[2] - distance],\n      highC = [\n        source[0] + distance,\n        source[1] + distance,\n        source[2] + distance,\n      ];\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n\n      if (\n        r > lowC[0] &&\n        g > lowC[1] &&\n        b > lowC[2] &&\n        r < highC[0] &&\n        g < highC[1] &&\n        b < highC[2]\n      ) {\n        data[i + 3] = 0;\n      }\n    }\n  }\n\n  /**\n   * Return WebGL uniform locations for this filter's shader.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {WebGLShaderProgram} program This filter's compiled shader program.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLUniformLocationMap {\n    return {\n      uLow: gl.getUniformLocation(program, 'uLow'),\n      uHigh: gl.getUniformLocation(program, 'uHigh'),\n    };\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ) {\n    const source = new Color(this.color).getSource(),\n      distance = this.distance,\n      lowC = [\n        0 + source[0] / 255 - distance,\n        0 + source[1] / 255 - distance,\n        0 + source[2] / 255 - distance,\n        1,\n      ],\n      highC = [\n        source[0] / 255 + distance,\n        source[1] / 255 + distance,\n        source[2] / 255 + distance,\n        1,\n      ];\n    gl.uniform4fv(uniformLocations.uLow, lowC);\n    gl.uniform4fv(uniformLocations.uHigh, highC);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @return {Object} Object representation of an instance\n   */\n  toObject() {\n    return { ...super.toObject(), color: this.color, distance: this.distance };\n  }\n}\n\nclassRegistry.setClass(RemoveColor);\n", "export const fragmentShader = `\nprecision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uLow;\nuniform vec4 uHigh;\nvarying vec2 vTexCoord;\nvoid main() {\n  gl_FragColor = texture2D(uTexture, vTexCoord);\n  if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\n    gl_FragColor.a = 0.0;\n  }\n}\n`;\n", "import type { TClassProperties } from '../typedefs';\nimport { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TWebGLPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\nimport { createCanvasElement } from '../util/misc/dom';\nimport type { XY } from '../Point';\n\nexport const resizeDefaultValues: Partial<TClassProperties<Resize>> = {\n  resizeType: 'hermite',\n  scaleX: 1,\n  scaleY: 1,\n  lanczosLobes: 3,\n  fragmentSourceTOP: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform vec2 uDelta;\n    varying vec2 vTexCoord;\n  `,\n};\n\nexport type TResizeType = 'bilinear' | 'hermite' | 'sliceHack' | 'lanczos';\n\ntype ResizeDuring2DResize = Resize & {\n  rcpScaleX: number;\n  rcpScaleY: number;\n};\n\ntype ResizeDuringWEBGLResize = Resize & {\n  rcpScaleX: number;\n  rcpScaleY: number;\n  horizontal: boolean;\n  width: number;\n  height: number;\n  taps: number[];\n  tempScale: number;\n  dH: number;\n  dW: number;\n};\n\n/**\n * Resize image filter class\n * @example\n * const filter = new Resize();\n * object.filters.push(filter);\n * object.applyFilters(canvas.renderAll.bind(canvas));\n */\nexport class Resize extends BaseFilter {\n  /**\n   * Resize type\n   * for webgl resizeType is just lanczos, for canvas2d can be:\n   * bilinear, hermite, sliceHack, lanczos.\n   * @default\n   */\n  declare resizeType: TResizeType;\n\n  /**\n   * Scale factor for resizing, x axis\n   * @param {Number} scaleX\n   * @default\n   */\n  declare scaleX: number;\n\n  /**\n   * Scale factor for resizing, y axis\n   * @param {Number} scaleY\n   * @default\n   */\n  declare scaleY: number;\n\n  /**\n   * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos\n   * @param {Number} lanczosLobes\n   * @default\n   */\n  declare lanczosLobes: number;\n\n  declare fragmentSourceTOP: string;\n\n  static type = 'Resize';\n\n  static defaults = resizeDefaultValues;\n\n  /**\n   * Return WebGL uniform locations for this filter's shader.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {WebGLShaderProgram} program This filter's compiled shader program.\n   */\n  getUniformLocations(gl: WebGLRenderingContext, program: WebGLProgram) {\n    return {\n      uDelta: gl.getUniformLocation(program, 'uDelta'),\n      uTaps: gl.getUniformLocation(program, 'uTaps'),\n    };\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    this: ResizeDuringWEBGLResize,\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ) {\n    gl.uniform2fv(\n      uniformLocations.uDelta,\n      this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height]\n    );\n    gl.uniform1fv(uniformLocations.uTaps, this.taps);\n  }\n\n  getFilterWindow(this: ResizeDuringWEBGLResize) {\n    const scale = this.tempScale;\n    return Math.ceil(this.lanczosLobes / scale);\n  }\n\n  getCacheKey(this: ResizeDuringWEBGLResize): string {\n    const filterWindow = this.getFilterWindow();\n    return `${this.type}_${filterWindow}`;\n  }\n\n  getFragmentSource(this: ResizeDuringWEBGLResize): string {\n    const filterWindow = this.getFilterWindow();\n    return this.generateShader(filterWindow);\n  }\n\n  getTaps(this: ResizeDuringWEBGLResize) {\n    const lobeFunction = this.lanczosCreate(this.lanczosLobes),\n      scale = this.tempScale,\n      filterWindow = this.getFilterWindow(),\n      taps = new Array(filterWindow);\n    for (let i = 1; i <= filterWindow; i++) {\n      taps[i - 1] = lobeFunction(i * scale);\n    }\n    return taps;\n  }\n\n  /**\n   * Generate vertex and shader sources from the necessary steps numbers\n   * @param {Number} filterWindow\n   */\n  generateShader(filterWindow: number) {\n    const offsets = new Array(filterWindow);\n    for (let i = 1; i <= filterWindow; i++) {\n      offsets[i - 1] = `${i}.0 * uDelta`;\n    }\n    return `\n      ${this.fragmentSourceTOP}\n      uniform float uTaps[${filterWindow}];\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        float sum = 1.0;\n        ${offsets\n          .map(\n            (offset, i) => `\n              color += texture2D(uTexture, vTexCoord + ${offset}) * uTaps[${i}] + texture2D(uTexture, vTexCoord - ${offset}) * uTaps[${i}];\n              sum += 2.0 * uTaps[${i}];\n            `\n          )\n          .join('\\n')}\n        gl_FragColor = color / sum;\n      }\n    `;\n  }\n\n  applyToForWebgl(this: ResizeDuringWEBGLResize, options: TWebGLPipelineState) {\n    options.passes++;\n    this.width = options.sourceWidth;\n    this.horizontal = true;\n    this.dW = Math.round(this.width * this.scaleX);\n    this.dH = options.sourceHeight;\n    this.tempScale = this.dW / this.width;\n    this.taps = this.getTaps();\n    options.destinationWidth = this.dW;\n    super.applyTo(options);\n    options.sourceWidth = options.destinationWidth;\n\n    this.height = options.sourceHeight;\n    this.horizontal = false;\n    this.dH = Math.round(this.height * this.scaleY);\n    this.tempScale = this.dH / this.height;\n    this.taps = this.getTaps();\n    options.destinationHeight = this.dH;\n    super.applyTo(options);\n    options.sourceHeight = options.destinationHeight;\n  }\n\n  /**\n   * Apply the resize filter to the image\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      (this as unknown as ResizeDuringWEBGLResize).applyToForWebgl(options);\n    } else {\n      (this as unknown as ResizeDuring2DResize).applyTo2d(options);\n    }\n  }\n\n  isNeutralState() {\n    return this.scaleX === 1 && this.scaleY === 1;\n  }\n\n  lanczosCreate(lobes: number) {\n    return (x: number) => {\n      if (x >= lobes || x <= -lobes) {\n        return 0.0;\n      }\n      if (x < 1.1920929e-7 && x > -1.1920929e-7) {\n        return 1.0;\n      }\n      x *= Math.PI;\n      const xx = x / lobes;\n      return ((Math.sin(x) / x) * Math.sin(xx)) / xx;\n    };\n  }\n\n  applyTo2d(this: ResizeDuring2DResize, options: T2DPipelineState) {\n    const imageData = options.imageData,\n      scaleX = this.scaleX,\n      scaleY = this.scaleY;\n\n    this.rcpScaleX = 1 / scaleX;\n    this.rcpScaleY = 1 / scaleY;\n\n    const oW = imageData.width;\n    const oH = imageData.height;\n    const dW = Math.round(oW * scaleX);\n    const dH = Math.round(oH * scaleY);\n    let newData: ImageData;\n\n    if (this.resizeType === 'sliceHack') {\n      newData = this.sliceByTwo(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'hermite') {\n      newData = this.hermiteFastResize(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'bilinear') {\n      newData = this.bilinearFiltering(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'lanczos') {\n      newData = this.lanczosResize(options, oW, oH, dW, dH);\n    } else {\n      // this should never trigger, is here just for safety net.\n      newData = new ImageData(dW, dH);\n    }\n    options.imageData = newData;\n  }\n\n  /**\n   * Filter sliceByTwo\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  sliceByTwo(\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number\n  ) {\n    const imageData = options.imageData;\n    const mult = 0.5;\n    let doneW = false;\n    let doneH = false;\n    let stepW = oW * mult;\n    let stepH = oH * mult;\n    const resources = options.filterBackend.resources;\n    let sX = 0;\n    let sY = 0;\n    const dX = oW;\n    let dY = 0;\n    if (!resources.sliceByTwo) {\n      resources.sliceByTwo = createCanvasElement();\n    }\n    const tmpCanvas = resources.sliceByTwo;\n    if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {\n      tmpCanvas.width = oW * 1.5;\n      tmpCanvas.height = oH;\n    }\n    const ctx = tmpCanvas.getContext('2d')!;\n    ctx.clearRect(0, 0, oW * 1.5, oH);\n    ctx.putImageData(imageData, 0, 0);\n\n    dW = Math.floor(dW);\n    dH = Math.floor(dH);\n\n    while (!doneW || !doneH) {\n      oW = stepW;\n      oH = stepH;\n      if (dW < Math.floor(stepW * mult)) {\n        stepW = Math.floor(stepW * mult);\n      } else {\n        stepW = dW;\n        doneW = true;\n      }\n      if (dH < Math.floor(stepH * mult)) {\n        stepH = Math.floor(stepH * mult);\n      } else {\n        stepH = dH;\n        doneH = true;\n      }\n      ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);\n      sX = dX;\n      sY = dY;\n      dY += stepH;\n    }\n    return ctx.getImageData(sX, sY, dW, dH);\n  }\n\n  /**\n   * Filter lanczosResize\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  lanczosResize(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number\n  ): ImageData {\n    function process(u: number): ImageData {\n      let v, i, weight, idx, a, red, green, blue, alpha, fX, fY;\n      center.x = (u + 0.5) * ratioX;\n      icenter.x = Math.floor(center.x);\n      for (v = 0; v < dH; v++) {\n        center.y = (v + 0.5) * ratioY;\n        icenter.y = Math.floor(center.y);\n        a = 0;\n        red = 0;\n        green = 0;\n        blue = 0;\n        alpha = 0;\n        for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {\n          if (i < 0 || i >= oW) {\n            continue;\n          }\n          fX = Math.floor(1000 * Math.abs(i - center.x));\n          if (!cacheLanc[fX]) {\n            cacheLanc[fX] = {};\n          }\n          for (let j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {\n            if (j < 0 || j >= oH) {\n              continue;\n            }\n            fY = Math.floor(1000 * Math.abs(j - center.y));\n            if (!cacheLanc[fX][fY]) {\n              cacheLanc[fX][fY] = lanczos(\n                Math.sqrt(\n                  Math.pow(fX * rcpRatioX, 2) + Math.pow(fY * rcpRatioY, 2)\n                ) / 1000\n              );\n            }\n            weight = cacheLanc[fX][fY];\n            if (weight > 0) {\n              idx = (j * oW + i) * 4;\n              a += weight;\n              red += weight * srcData[idx];\n              green += weight * srcData[idx + 1];\n              blue += weight * srcData[idx + 2];\n              alpha += weight * srcData[idx + 3];\n            }\n          }\n        }\n        idx = (v * dW + u) * 4;\n        destData[idx] = red / a;\n        destData[idx + 1] = green / a;\n        destData[idx + 2] = blue / a;\n        destData[idx + 3] = alpha / a;\n      }\n\n      if (++u < dW) {\n        return process(u);\n      } else {\n        return destImg;\n      }\n    }\n\n    const srcData = options.imageData.data,\n      destImg = options.ctx.createImageData(dW, dH),\n      destData = destImg.data,\n      lanczos = this.lanczosCreate(this.lanczosLobes),\n      ratioX = this.rcpScaleX,\n      ratioY = this.rcpScaleY,\n      rcpRatioX = 2 / this.rcpScaleX,\n      rcpRatioY = 2 / this.rcpScaleY,\n      range2X = Math.ceil((ratioX * this.lanczosLobes) / 2),\n      range2Y = Math.ceil((ratioY * this.lanczosLobes) / 2),\n      cacheLanc: Record<number, Record<number, number>> = {},\n      center: XY = { x: 0, y: 0 },\n      icenter: XY = { x: 0, y: 0 };\n\n    return process(0);\n  }\n\n  /**\n   * bilinearFiltering\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  bilinearFiltering(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number\n  ) {\n    let a;\n    let b;\n    let c;\n    let d;\n    let x;\n    let y;\n    let i;\n    let j;\n    let xDiff;\n    let yDiff;\n    let chnl;\n    let color;\n    let offset = 0;\n    let origPix;\n    const ratioX = this.rcpScaleX;\n    const ratioY = this.rcpScaleY;\n    const w4 = 4 * (oW - 1);\n    const img = options.imageData;\n    const pixels = img.data;\n    const destImage = options.ctx.createImageData(dW, dH);\n    const destPixels = destImage.data;\n    for (i = 0; i < dH; i++) {\n      for (j = 0; j < dW; j++) {\n        x = Math.floor(ratioX * j);\n        y = Math.floor(ratioY * i);\n        xDiff = ratioX * j - x;\n        yDiff = ratioY * i - y;\n        origPix = 4 * (y * oW + x);\n\n        for (chnl = 0; chnl < 4; chnl++) {\n          a = pixels[origPix + chnl];\n          b = pixels[origPix + 4 + chnl];\n          c = pixels[origPix + w4 + chnl];\n          d = pixels[origPix + w4 + 4 + chnl];\n          color =\n            a * (1 - xDiff) * (1 - yDiff) +\n            b * xDiff * (1 - yDiff) +\n            c * yDiff * (1 - xDiff) +\n            d * xDiff * yDiff;\n          destPixels[offset++] = color;\n        }\n      }\n    }\n    return destImage;\n  }\n\n  /**\n   * hermiteFastResize\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  hermiteFastResize(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number\n  ) {\n    const ratioW = this.rcpScaleX,\n      ratioH = this.rcpScaleY,\n      ratioWHalf = Math.ceil(ratioW / 2),\n      ratioHHalf = Math.ceil(ratioH / 2),\n      img = options.imageData,\n      data = img.data,\n      img2 = options.ctx.createImageData(dW, dH),\n      data2 = img2.data;\n    for (let j = 0; j < dH; j++) {\n      for (let i = 0; i < dW; i++) {\n        const x2 = (i + j * dW) * 4;\n        let weight = 0;\n        let weights = 0;\n        let weightsAlpha = 0;\n        let gxR = 0;\n        let gxG = 0;\n        let gxB = 0;\n        let gxA = 0;\n        const centerY = (j + 0.5) * ratioH;\n        for (let yy = Math.floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {\n          const dy = Math.abs(centerY - (yy + 0.5)) / ratioHHalf,\n            centerX = (i + 0.5) * ratioW,\n            w0 = dy * dy;\n          for (let xx = Math.floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {\n            let dx = Math.abs(centerX - (xx + 0.5)) / ratioWHalf;\n            const w = Math.sqrt(w0 + dx * dx);\n            /* eslint-disable max-depth */\n            if (w > 1 && w < -1) {\n              continue;\n            }\n            //hermite filter\n            weight = 2 * w * w * w - 3 * w * w + 1;\n            if (weight > 0) {\n              dx = 4 * (xx + yy * oW);\n              //alpha\n              gxA += weight * data[dx + 3];\n              weightsAlpha += weight;\n              //colors\n              if (data[dx + 3] < 255) {\n                weight = (weight * data[dx + 3]) / 250;\n              }\n              gxR += weight * data[dx];\n              gxG += weight * data[dx + 1];\n              gxB += weight * data[dx + 2];\n              weights += weight;\n            }\n            /* eslint-enable max-depth */\n          }\n        }\n        data2[x2] = gxR / weights;\n        data2[x2 + 1] = gxG / weights;\n        data2[x2 + 2] = gxB / weights;\n        data2[x2 + 3] = gxA / weightsAlpha;\n      }\n    }\n    return img2;\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @return {Object} Object representation of an instance\n   */\n  toObject() {\n    return {\n      type: this.type,\n      scaleX: this.scaleX,\n      scaleY: this.scaleY,\n      resizeType: this.resizeType,\n      lanczosLobes: this.lanczosLobes,\n    };\n  }\n}\n\nclassRegistry.setClass(Resize);\n", "import type { TClassProperties } from '../typedefs';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/saturation';\n\n/**\n * Saturate filter class\n * @example\n * const filter = new Saturation({\n *   saturation: 1\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\n\nexport const saturationDefaultValues: Partial<TClassProperties<Saturation>> = {\n  saturation: 0,\n  mainParameter: 'saturation',\n};\n\nexport class Saturation extends BaseFilter {\n  /**\n   * Saturation value, from -1 to 1.\n   * Increases/decreases the color saturation.\n   * A value of 0 has no effect.\n   *\n   * @param {Number} saturation\n   * @default\n   */\n  declare saturation: number;\n\n  static type = 'Saturation';\n\n  static defaults = saturationDefaultValues;\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    if (this.saturation === 0) {\n      return;\n    }\n    const adjust = -this.saturation;\n    for (let i = 0; i < data.length; i += 4) {\n      const max = Math.max(data[i], data[i + 1], data[i + 2]);\n      data[i] += max !== data[i] ? (max - data[i]) * adjust : 0;\n      data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * adjust : 0;\n      data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * adjust : 0;\n    }\n  }\n\n  /**\n   * Return WebGL uniform locations for this filter's shader.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {WebGLShaderProgram} program This filter's compiled shader program.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLUniformLocationMap {\n    return {\n      uSaturation: gl.getUniformLocation(program, 'uSaturation'),\n    };\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ) {\n    gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\n  }\n}\n\nclassRegistry.setClass(Saturation);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uSaturation;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float rgMax = max(color.r, color.g);\n    float rgbMax = max(rgMax, color.b);\n    color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\n    color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\n    color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\n    gl_FragColor = color;\n  }\n`;\n", "import type { TClassProperties } from '../typedefs';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/vibrance';\n\nexport const vibranceDefaultValues: Partial<TClassProperties<Vibrance>> = {\n  vibrance: 0,\n  mainParameter: 'vibrance',\n};\n\n/**\n * Vibrance filter class\n * @example\n * const filter = new Vibrance({\n *   vibrance: 1\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Vibrance extends BaseFilter {\n  /**\n   * Vibrance value, from -1 to 1.\n   * Increases/decreases the saturation of more muted colors with less effect on saturated colors.\n   * A value of 0 has no effect.\n   *\n   * @param {Number} vibrance\n   * @default\n   */\n  declare vibrance: number;\n\n  static type = 'Vibrance';\n\n  static defaults = vibranceDefaultValues;\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Vibrance operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    if (this.vibrance === 0) {\n      return;\n    }\n    const adjust = -this.vibrance;\n    for (let i = 0; i < data.length; i += 4) {\n      const max = Math.max(data[i], data[i + 1], data[i + 2]);\n      const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n      const amt = ((Math.abs(max - avg) * 2) / 255) * adjust;\n      data[i] += max !== data[i] ? (max - data[i]) * amt : 0;\n      data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * amt : 0;\n      data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * amt : 0;\n    }\n  }\n\n  /**\n   * Return WebGL uniform locations for this filter's shader.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {WebGLShaderProgram} program This filter's compiled shader program.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLUniformLocationMap {\n    return {\n      uVibrance: gl.getUniformLocation(program, 'uVibrance'),\n    };\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ) {\n    gl.uniform1f(uniformLocations.uVibrance, -this.vibrance);\n  }\n}\n\nclassRegistry.setClass(Vibrance);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uVibrance;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float max = max(color.r, max(color.g, color.b));\n    float avg = (color.r + color.g + color.b) / 3.0;\n    float amt = (abs(max - avg) * 2.0) * uVibrance;\n    color.r += max != color.r ? (max - color.r) * amt : 0.00;\n    color.g += max != color.g ? (max - color.g) * amt : 0.00;\n    color.b += max != color.b ? (max - color.b) * amt : 0.00;\n    gl_FragColor = color;\n  }\n`;\n"],
  "mappings": "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",
  "names": ["BaseConfiguration", "constructor", "_defineProperty", "this", "window", "devicePixelRatio", "config", "super", "configure", "arguments", "length", "Object", "assign", "addFonts", "paths", "fontPaths", "_objectSpread", "removeFonts", "forEach", "fontFamily", "clearFonts", "restoreDefaults", "keys", "defaults", "reduce", "acc", "key", "log", "severity", "_len", "optionalParams", "Array", "_key", "console", "FabricError", "Error", "message", "options", "concat", "SignalAbortedError", "context", "GLProbe", "WebGLProbe", "testPrecision", "gl", "precision", "fragmentSource", "fragmentShader", "createShader", "FRAGMENT_SHADER", "shaderSource", "compileShader", "getShaderParameter", "COMPILE_STATUS", "queryWebGL", "canvas", "getContext", "maxTextureSize", "getParameter", "MAX_TEXTURE_SIZE", "GLPrecision", "find", "getExtension", "loseContext", "isSupported", "textureSize", "copyPasteData", "env", "setEnv", "value", "getEnv", "document", "isTouchSupported", "navigator", "maxTouchPoints", "dispose", "getFabricDocument", "getFabricWindow", "getDevicePixelRatio", "_config$devicePixelRa", "Math", "max", "cache", "getFontCache", "_ref", "fontStyle", "fontWeight", "toLowerCase", "charWidthsCache", "fontCache", "cacheKey", "clearFontCache", "limitDimsByArea", "ar", "perfLimitSizeTotal", "roughWidth", "sqrt", "floor", "VERSION", "noop", "halfPI", "PI", "twoMathPi", "PiBy180", "iMatrix", "freeze", "DEFAULT_SVG_FONT_SIZE", "kRect", "CENTER", "LEFT", "TOP", "BOTTOM", "RIGHT", "NONE", "reNewline", "JSON", "SVG", "classRegistry", "Map", "getClass", "classType", "get", "setClass", "classConstructor", "set", "type", "getSVGClass", "SVGTagName", "setSVGClass", "runningAnimations", "remove", "index", "indexOf", "splice", "cancelAll", "animations", "animation", "abort", "cancelByCanvas", "filter", "_animation$target", "target", "cancelByTarget", "Observable", "on", "arg0", "handler", "__eventListeners", "entries", "eventName", "off", "push", "once", "disposers", "_ref2", "d", "disposer", "args", "call", "_removeEventListener", "eventListener", "_ref3", "fire", "_this$__eventListener", "listenersForEvent", "i", "getRandomInt", "min", "random", "ifNaN", "valueIfNaN", "isNaN", "removeFromArray", "array", "idx", "cos", "angle", "abs", "sin", "angleSlice", "sign", "Point", "y", "x", "add", "that", "addEquals", "scalarAdd", "scalar", "scalarAddEquals", "subtract", "subtractEquals", "scalarSubtract", "scalarSubtractEquals", "multiply", "scalarMultiply", "scalarMultiplyEquals", "divide", "scalarDivide", "scalarDivideEquals", "eq", "lt", "lte", "gt", "gte", "lerp", "t", "distanceFrom", "dx", "dy", "midPointFrom", "toString", "setXY", "setX", "setY", "setFromPoint", "swap", "clone", "rotate", "radians", "origin", "ZERO", "sinus", "cosinus", "p", "transform", "ignoreOffset", "isCollection", "fabricObject", "isArray", "_objects", "createCollectionMixin", "Base", "Collection", "_onObjectAdded", "object", "_onObjectRemoved", "_onStackOrderChanged", "objects", "size", "insertAt", "_len2", "_key2", "removed", "_len3", "_key3", "forEachObject", "callback", "getObjects", "_len4", "types", "_key4", "o", "isType", "item", "isEmpty", "contains", "deep", "includes", "some", "obj", "complexity", "memo", "current", "sendObjectToBack", "unshift", "bringObjectToFront", "sendObjectBackwards", "intersecting", "newIdx", "findNewLowerIndex", "bringObjectForward", "findNewUpperIndex", "moveObjectTo", "isOverlapping", "collectObjects", "left", "top", "width", "height", "includeIntersecting", "undefined", "tl", "br", "selectable", "visible", "intersectsWithRect", "isContainedWithinRect", "containsPoint", "CommonMethods", "_setOptions", "prop", "_setObject", "_set", "toggle", "property", "requestAnimFrame", "requestAnimationFrame", "cancelAnimFrame", "handle", "cancelAnimationFrame", "id", "uid", "createCanvasElement", "element", "createElement", "createImage", "toDataURL", "canvasEl", "format", "quality", "degreesToRadians", "degrees", "radiansToDegrees", "isIdentityMatrix", "mat", "every", "transformPoint", "invertTransform", "a", "r", "multiplyTransformMatrices", "b", "is2x2", "multiplyTransformMatrixArray", "matrices", "reduceRight", "product", "curr", "calcPlaneRotation", "atan2", "qrDecompose", "denom", "pow", "scaleX", "scaleY", "skewX", "skewY", "translateX", "translateY", "createTranslateMatrix", "createRotateMatrix", "angleRadiant", "cosValue", "sinValue", "createScaleMatrix", "angleToSkew", "tan", "createSkewXMatrix", "skewValue", "createSkewYMatrix", "calcDimensionsMatrix", "flipX", "flipY", "matrix", "composeMatrix", "scaleMatrix", "loadImage", "url", "signal", "crossOrigin", "Promise", "resolve", "reject", "aborted", "img", "err", "src", "addEventListener", "done", "onload", "onerror", "removeEventListener", "enlivenObjects", "reviver", "instances", "all", "map", "fromObject", "then", "fabricInstance", "catch", "error", "instance", "finally", "enlivenObjectEnlivables", "serializedObject", "promises", "values", "enlived", "source", "pattern", "pick", "pickBy", "predicate", "ColorNameMap", "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgrey", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkslategrey", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dimgrey", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgrey", "lightgreen", "lightpink", "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray", "lightslategrey", "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta", "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple", "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise", "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin", "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered", "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred", "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue", "purple", "rebeccapurple", "red", "rosybrown", "royalblue", "saddlebrown", "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue", "slateblue", "slategray", "slategrey", "snow", "springgreen", "steelblue", "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white", "whitesmoke", "yellow", "yellowgreen", "hue2rgb", "q", "rgb2Hsl", "g", "maxValue", "minValue", "h", "s", "l", "round", "fromAlphaToFloat", "parseFloat", "endsWith", "hexify", "toUpperCase", "padStart", "greyAverage", "avg", "Color", "color", "setSource", "_source", "_tryParsingColor", "sourceFromHex", "sourceFromRgb", "sourceFromHsl", "getSource", "toRgb", "toRgba", "join", "toHsl", "toHsla", "toHex", "toHexa", "slice", "getAlpha", "setAlpha", "alpha", "toGrayscale", "toBlackWhite", "threshold", "average", "bOrW", "overlayWith", "otherColor", "otherSource", "R", "G", "B", "fromRgba", "match", "parsedValue", "fromHsla", "expandedValue", "split", "hex", "hexCouple", "parseInt", "toFixed", "number", "fractionDigits", "Number", "parseUnit", "fontSize", "unit", "exec", "dpi", "DPI", "parsePreserveAspectRatioAttribute", "attribute", "firstPart", "secondPart", "trim", "alignX", "alignY", "align", "meetOrSlice", "matrixToSVG", "NUM_FRACTION_DIGITS", "colorPropToSVG", "colorValue", "opacityValue", "inlineStyle", "toLive", "opacity", "isFiller", "filler", "isSerializableFiller", "toObject", "isPattern", "offsetX", "isTextObject", "_renderText", "isActiveSelection", "getScrollLeftTop", "doc", "getDocumentFromElement", "docElement", "documentElement", "body", "scrollLeft", "scrollTop", "parentNode", "host", "nodeType", "style", "position", "el", "ownerDocument", "getWindowFromElement", "_el$ownerDocument", "defaultView", "setStyle", "styles", "elementStyle", "cssText", "setProperty", "setCanvasDimensions", "ctx", "retinaScaling", "setAttribute", "scale", "setCSSDimensions", "makeElementUnselectable", "onselectstart", "userSelect", "StaticCanvasDOMManager", "createLowerCanvas", "lower", "getElementById", "hasAttribute", "_originalCanvasStyle", "classList", "cleanupDOM", "removeAttribute", "setDimensions", "calcOffset", "_getWindowFromElement", "box", "offset", "offsetAttributes", "borderLeftWidth", "borderTopWidth", "paddingLeft", "paddingTop", "elemStyle", "getComputedStyle", "attr", "docElem", "getBoundingClientRect", "scrollLeftTop", "clientLeft", "clientTop", "staticCanvasDefaults", "backgroundVpt", "backgroundColor", "overlayVpt", "overlayColor", "includeDefaultValues", "svgViewportTransformation", "renderOnAddRemove", "skipOffscreen", "enableRetinaScaling", "imageSmoothingEnabled", "controlsAboveOverlay", "allowTouchScrolling", "viewportTransform", "StaticCanvas", "lowerCanvasEl", "_this$elements$lower", "elements", "contextContainer", "_this$elements$lower2", "getDefaults", "ownDefaults", "initElements", "_setDimensionsImpl", "skipControlsDrawing", "calcViewportBoundaries", "requestRenderAll", "setCoords", "getRetinaScaling", "_offset", "getWidth", "getHeight", "setWidth", "setHeight", "dimensions", "cssOnly", "backstoreOnly", "hasLostContext", "getZoom", "setViewportTransform", "vpt", "backgroundObject", "backgroundImage", "overlayObject", "overlayImage", "len", "group", "zoomToPoint", "point", "before", "newPoint", "after", "setZoom", "absolutePan", "relativePan", "getElement", "clearContext", "clearRect", "clear", "renderAll", "cancelRequestedRender", "destroyed", "renderCanvas", "renderAndReset", "nextRenderHandle", "disposed", "iVpt", "vptCoords", "tr", "bl", "drawControls", "v", "path", "clipPath", "patternQuality", "_renderBackground", "save", "_renderObjects", "restore", "shouldCache", "_transformDone", "renderCache", "forClipping", "drawClipPathOnCanvas", "_renderOverlay", "__cleanupTask", "globalCompositeOperation", "zoomX", "zoomY", "drawImage", "_cacheCanvas", "cacheTranslationX", "cacheTranslationY", "render", "_renderBackgroundOrOverlay", "fill", "needsVpt", "isAFiller", "beginPath", "moveTo", "lineTo", "closePath", "fillStyle", "offsetY", "m", "gradientTransform", "patternTransform", "getCenter", "getCenterPoint", "centerObjectH", "_centerObject", "centerObjectV", "centerObject", "viewportCenterObject", "getVpCenter", "viewportCenterObjectH", "viewportCenterObjectV", "center", "toDatalessJSON", "propertiesToInclude", "toDatalessObject", "_toObjectMethod", "toJSON", "methodName", "clipPathData", "excludeFromExport", "_toObject", "version", "__serializeBgOverlay", "originalValue", "data", "bgImage", "bgColor", "background", "overlay", "toSVG", "markup", "_setSVGPreamble", "_setSVGHeader", "clipPathId", "_setSVGBgOverlayColor", "_setSVGBgOverlayImage", "_setSVGObjects", "suppressPreamble", "encoding", "optViewBox", "viewBox", "createSVGFontFacesMarkup", "createSVGRefElementsMarkup", "createSVGClipPathMarkup", "toClipPathSVG", "shouldTransform", "additionalTransform", "fontList", "styleRow", "fontListMarkup", "_setSVGObject", "bgOrOverlay", "repeat", "finalWidth", "finalHeight", "loadFromJSON", "json", "serialized", "parse", "enlivedMap", "properties", "cloneWithoutData", "multiplier", "finalMultiplier", "toCanvasElement", "scaledWidth", "scaledHeight", "zoom", "originalWidth", "originalHeight", "originalSkipControlsDrawing", "newZoom", "vp", "newVp", "originalRetina", "objectsToRender", "task", "destroy", "kill", "touchEvents", "getPointer", "event", "scroll", "_evt", "touchProp", "changedTouches", "clientX", "clientY", "isTouchEvent", "pointerType", "stopEvent", "e", "preventDefault", "stopPropagation", "makeBoundingBoxFromPoints", "points", "addTransformToObject", "applyTransformToObject", "calcOwnMatrix", "_qrDecompose", "otherOptions", "_objectWithoutProperties", "_excluded", "setPositionByOrigin", "resetObjectTransform", "saveObjectTransform", "sizeAfterTransform", "dimX", "dimY", "bbox", "calcPlaneChangeMatrix", "from", "sendPointToPlane", "to", "sendVectorToPlane", "sendObjectToPlane", "fireEvent", "_target$canvas", "originOffset", "bottom", "right", "resolveOrigin", "originValue", "NOT_ALLOWED_CURSOR", "isTransformCentered", "originX", "originY", "invertOrigin", "isLocked", "lockingKey", "commonEventInfo", "eventData", "pointer", "findCornerQuadrant", "control", "cornerAngle", "getTotalAngle", "getLocalPoint", "corner", "controls", "padding", "localPoint", "getRelativeCenterPoint", "translateToGivenOrigin", "dragHandler", "newLeft", "newTop", "moveX", "moveY", "FabricObjectSVGExportMixin", "getSvgStyles", "skipShadow", "fillRule", "strokeWidth", "strokeDashArray", "strokeDashOffset", "strokeLineCap", "strokeLineJoin", "strokeMiterLimit", "visibility", "getSvgFilter", "stroke", "shadow", "getSvgCommons", "getSvgTransform", "full", "calcTransformMatrix", "svgTransform", "_toSVG", "_createBaseSVGMarkup", "_createBaseClipPathSVGMarkup", "objectMarkup", "commonPieces", "noStyle", "withShadow", "styleInfo", "shadowInfo", "vectorEffect", "strokeUniform", "absoluteClipPath", "absolutePositioned", "clipPathMarkup", "addPaintOrder", "paintFirst", "normalize", "c", "asin", "elastic", "defaultEasing", "easeOutBounce", "easeInBounce", "easeInCirc", "easeInCubic", "easeInElastic", "normA", "normS", "normP", "easeInExpo", "easeInOutBounce", "easeInOutCirc", "easeInOutCubic", "easeInOutElastic", "normC", "easeInOutExpo", "easeInOutQuad", "easeInOutQuart", "easeInOutQuint", "easeInOutSine", "easeInQuad", "easeInQuart", "easeInQuint", "easeInSine", "easeOutCirc", "easeOutCubic", "easeOutElastic", "easeOutExpo", "easeOutQuad", "easeOutQuart", "easeOutQuint", "easeOutSine", "defaultAbort", "AnimationBase", "startValue", "byValue", "duration", "delay", "easing", "onStart", "onChange", "onComplete", "tick", "bind", "_onStart", "_onChange", "_onComplete", "_abort", "endValue", "calculate", "state", "_state", "isDone", "start", "firstTick", "timestamp", "startTime", "Date", "register", "setTimeout", "durationMs", "boundDurationMs", "durationProgress", "valueProgress", "unregister", "ValueAnimation", "timeElapsed", "ArrayAnimation", "capValue", "defaultColorEasing", "wrapColorCallback", "rgba", "ColorAnimation", "startColor", "endColor", "animate", "animateColor", "unitVectorX", "zero", "rotateVector", "vector", "createVector", "magnitude", "calcAngleBetweenVectors", "crossProduct", "dotProduct", "calcVectorRotation", "getUnitVector", "getOrthonormalVector", "counterClockwise", "isBetweenVectors", "AxB", "AxT", "BxT", "Intersection", "status", "append", "T", "A", "infinite", "AB", "other", "hits", "inter", "intersectSegmentSegment", "a1", "a2", "b1", "b2", "aInfinite", "bInfinite", "a2xa1x", "a2ya1y", "b2xb1x", "b2yb1y", "a1xb1x", "a1yb1y", "uaT", "ubT", "uB", "ua", "ub", "segmentsCoincide", "isPointContained", "s1", "s2", "l1", "l2", "intersectLineLine", "result", "intersectLinePolygon", "points1", "points2", "coincidences", "intersectSegmentPolygon", "r1", "r2", "topRight", "bottomLeft", "intersectPolygonPolygon", "ObjectOrigin", "_getTransformedDimensions", "dimOptions", "preScalingStrokeValue", "postScalingStrokeValue", "finalDimensions", "fromOriginX", "fromOriginY", "toOriginX", "toOriginY", "dim", "translateToCenterPoint", "translateToOriginPoint", "relCenter", "getPointByOrigin", "pos", "_getLeftTopCoords", "ObjectGeometry", "getX", "getXY", "getY", "getRelativeX", "setRelativeX", "getRelativeY", "setRelativeY", "relativePosition", "getRelativeXY", "setRelativeXY", "isStrokeAccountedForInDimensions", "getCoords", "aCoords", "calcACoords", "coords", "intersectPolygonRectangle", "intersectsWithObject", "intersection", "isContainedWithinObject", "getBoundingRect", "isPointInPolygon", "isOnScreen", "isPartiallyOnScreen", "getScaledWidth", "getScaledHeight", "scaleToWidth", "boundingRectFactor", "scaleToHeight", "getCanvasRetinaScaling", "_this$canvas", "getViewportTransform", "_this$canvas2", "rotateMatrix", "tMatrix", "finalMatrix", "w", "transformMatrixKey", "skipGroup", "prefix", "matrixCache", "ownMatrixCache", "_getNonTransformedDimensions", "_calculateCurrentDimensions", "StackedObject", "isDescendantOf", "parent", "getAncestors", "strict", "ancestors", "_parent$parent", "findCommonAncestors", "fork", "otherFork", "common", "otherAncestors", "ancestor", "j", "hasCommonAncestors", "commonAncestors", "isInFrontOf", "ancestorData", "firstCommonAncestor", "headOfFork", "pop", "headOfOtherFork", "thisIndex", "otherIndex", "AnimatableObject", "animatable", "_animate", "propIsColor", "colorProperties", "animationOptions", "getSvgRegex", "arr", "RegExp", "reNum", "String", "raw", "_templateObject", "_taggedTemplateLiteral", "svgNS", "_templateObject2", "reFontDeclaration", "attributesMap", "cx", "cy", "display", "fSize", "cPath", "svgValidTagNamesRegEx", "svgViewBoxElementsRegEx", "svgValidParentsRegEx", "reViewBoxAttrValue", "shadowOffsetRegex", "reOffsetsAndBlur", "Shadow", "parseShadow", "shadowStr", "blur", "replace", "fBoxX", "fBoxY", "affectStroke", "nonScaling", "cloneDeep", "stringify", "stateProperties", "cacheProperties", "fabricObjectDefaultValues", "minScaleLimit", "objectCaching", "inverted", "centeredRotation", "centeredScaling", "dirty", "FabricObject", "name", "setOptions", "_createCacheCanvas", "_cacheContext", "_updateCacheCanvas", "_limitCacheSize", "dims", "maxCacheSideLimit", "minCacheSideLimit", "limX", "limY", "capped", "_getCacheCanvasDimensions", "objectScale", "getTotalObjectScaling", "neededX", "neededY", "minCacheSize", "dimensionsChanged", "cacheWidth", "cacheHeight", "zoomChanged", "drawingWidth", "drawingHeight", "shouldRedraw", "additionalWidth", "additionalHeight", "shouldResizeCanvas", "canvasWidth", "canvasHeight", "sizeGrowing", "getHeightOfLine", "ceil", "setTransform", "translate", "needFullTransform", "contextTop", "_removeDefaultValues", "baseValues", "getPrototypeOf", "baseValue", "getObjectScaling", "retina", "getObjectOpacity", "_constrainScale", "isChanged", "isNotVisible", "_setupCompositeOperation", "drawSelectionBackground", "_setOpacity", "_setShadow", "drawCacheOnCanvas", "_removeCacheCanvas", "drawObject", "isCacheDirty", "hasStroke", "hasFill", "needsItsOwnCache", "ownCaching", "isOnACache", "willDrawShadow", "drawClipPathOnCache", "originalFill", "originalStroke", "_setClippingProperties", "_render", "_drawClipPath", "skipCanvas", "fillRect", "_removeShadow", "globalAlpha", "_setStrokeStyles", "decl", "lineWidth", "lineCap", "lineDashOffset", "lineJoin", "miterLimit", "gradientUnits", "_applyPatternForTransformedGradient", "strokeStyle", "_applyPatternGradientTransform", "_setFillStyles", "_setLineDash", "dashArray", "setLineDash", "sx", "sy", "multX", "multY", "scaling", "shadowColor", "shadowBlur", "browserShadowBlurConstant", "shadowOffsetX", "shadowOffsetY", "_renderPaintInOrder", "_renderStroke", "_renderFill", "_pCtx$createPattern", "pCanvas", "pCtx", "createPattern", "_findCenterFromElement", "objectForm", "cloneAsImage", "origParams", "originalGroup", "originalShadow", "canvasProvider", "withoutTransform", "withoutShadow", "boundingRect", "shadowOffset", "originalCanvas", "setOnGroup", "extraParam", "_excluded2", "allOptions", "_toPropertyKey", "_fromObject", "wrapWithFireEvent", "actionHandler", "actionPerformed", "wrapWithFixedAnchor", "centerPoint", "constraint", "changeWidth", "changeObjectWidth", "strokePadding", "oldWidth", "newWidth", "renderCircleControl", "styleOverride", "xSize", "sizeX", "cornerSize", "ySize", "sizeY", "transparentCorners", "cornerStrokeColor", "myLeft", "myTop", "cornerColor", "arc", "renderSquareControl", "xSizeBy2", "ySizeBy2", "strokeRect", "Control", "shouldActivate", "controlKey", "_fabricObject$canvas", "getActiveObject", "isControlVisible", "getActionHandler", "getMouseDownHandler", "mouseDownHandler", "getMouseUpHandler", "mouseUpHandler", "cursorStyleHandler", "cursorStyle", "getActionName", "actionName", "getVisibility", "_fabricObject$_contro", "_fabricObject$_contro2", "_controlsVisibility", "setVisibility", "positionHandler", "currentControl", "calcCornerCoords", "objectCornerSize", "centerX", "centerY", "isTouch", "touchSizeX", "touchSizeY", "cornerStyle", "rotationStyleHandler", "lockRotation", "rotationWithSnapping", "rotateObjectWithSnapping", "ex", "ey", "theta", "pivotPoint", "lastAngle", "curAngle", "snapAngle", "snapThreshold", "rightAngleLocked", "leftAngleLocked", "hasRotated", "scaleIsProportional", "uniformIsToggled", "uniScaleKey", "uniformScaling", "scalingIsForbidden", "by", "scaleProportionally", "lockX", "lockY", "scaleMap", "scaleCursorStyleHandler", "n", "scaleObject", "signX", "signY", "gestureScale", "distance", "original", "oldScaleX", "oldScaleY", "scalingEqually", "scaleObjectFromCorner", "scalingX", "scaleObjectX", "scalingY", "scaleObjectY", "AXIS_KEYS", "counterAxis", "skew", "lockSkewing", "flip", "skewMap", "skewCursorStyleHandler", "skewHandler", "axis", "originKey", "lockSkewingKey", "skewKey", "flipKey", "counterOriginKey", "counterFlipKey", "counterOriginFactor", "skewingSide", "finalHandler", "skewingBefore", "skewingStart", "shearingStart", "shearing", "skewing", "atan", "changed", "dimBefore", "dimAfter", "compensationFactor", "skewHandlerX", "skewHandlerY", "isAltAction", "altActionKey", "scaleOrSkewActionName", "isAlternative", "scaleSkewCursorStyleHandler", "scalingXOrSkewingY", "scalingYOrSkewingX", "createObjectDefaultControls", "ml", "mr", "mb", "mt", "mtr", "withConnection", "createResizeControls", "createTextboxDefaultControls", "InteractiveFabricObject", "createControls", "targetCanvas", "noScaleCache", "_currentTransform", "action", "startsWith", "getActiveControl", "__corner", "coord", "oCoords", "findControl", "forTouch", "hasControls", "cornerEntries", "touchCorner", "calcOCoords", "rMatrix", "positionMatrix", "startMatrix", "transformOptions", "forEachControl", "_calcCornerCoords", "touchCornerSize", "fn", "selectionBackgroundColor", "_activeObject", "wh", "strokeBorders", "_drawBorders", "borderColor", "borderDashArray", "drawControlsConnectingLines", "_renderControls", "hasBorders", "styleOptions", "shouldDrawBorders", "shouldDrawControls", "borderScaleFactor", "isMoving", "borderOpacityWhenMoving", "drawBorders", "forActiveSelection", "shouldStroke", "cornerDashArray", "setControlVisible", "setControlsVisibility", "clearContextTop", "restoreManually", "onDeselect", "onSelect", "shouldStartDragging", "onDragStart", "canDrop", "renderDragSourceEffect", "renderDropTargetEffect", "applyMixins", "derivedCtor", "constructors", "baseCtor", "getOwnPropertyNames", "prototype", "defineProperty", "getOwnPropertyDescriptor", "create", "lockMovementX", "lockMovementY", "lockScalingX", "lockScalingY", "lockSkewingX", "lockSkewingY", "lockScalingFlip", "evented", "perPixelTargetFind", "activeOn", "hoverCursor", "moveCursor", "isTransparent", "tolerance", "getImageData", "StrokeProjectionsBase", "strokeProjectionMagnitude", "strokeUniformScalar", "createSideVector", "projectOrthogonally", "applySkew", "calcOrthogonalProjection", "isSkewed", "scaleUnitVector", "unitVector", "zeroVector", "StrokeLineJoinProjections", "vector1", "vector2", "C", "AC", "bisector", "orthogonalProjection", "correctSide", "getOrthogonalRotationFactor", "projectBevel", "projections", "projectMiter", "hypotUnitScalar", "miterVector", "projectRoundNoSkew", "startCircle", "endCircle", "projectRoundWithSkew", "circleRadius", "newY", "furthestY", "newX", "furthestX", "projectRound", "isStraightLine", "newOrigin", "proj0", "proj1", "comparisonVector", "isProj0Start", "projectPoints", "project", "originPoint", "projectedPoint", "StrokeLineCapProjections", "projectButt", "projection", "projectSquare", "strokePointingOut", "projectedA", "projectStrokeOnPoints", "openPath", "reduced", "findIndexRight", "escapeXml", "string", "graphemeSplit", "textstring", "graphemes", "chr", "getWholeChar", "str", "code", "charCodeAt", "charAt", "next", "prev", "firstLetterOnly", "hasStyleChanged", "prevStyle", "thisStyle", "forTextSpans", "textBackgroundColor", "deltaY", "overline", "underline", "linethrough", "stylesToArray", "text", "textLines", "stylesArray", "charIndex", "chars", "end", "stylesFromArray", "stylesObject", "styleIndex", "SHARED_ATTRIBUTES", "selectorMatches", "selector", "nodeName", "classNames", "getAttribute", "azAz", "matcher", "splitClassNames", "elementMatchesRule", "selectors", "parentMatching", "firstMatching", "parentElement", "normalizeAttr", "_attributesMap", "regex", "cleanupSvgAttribute", "attributeValue", "_templateObject3", "_templateObject4", "_templateObject5", "_templateObject6", "transforms", "transformList", "_templateObject7", "reTransformList", "reTransform", "reTransformAll", "parseTransformAttribute", "test", "matchAll", "transformMatch", "matchedParams", "operation", "rawArgs", "arg1", "arg2", "arg3", "arg4", "arg5", "arg", "normalizeValue", "parentAttributes", "parsed", "ouputValue", "transformMatrix", "fillIndex", "strokeIndex", "parseFontDeclaration", "oStyle", "lineHeight", "parseStyleAttribute", "chunk", "colorAttributesMap", "parseAttributes", "attributes", "cssRules", "parentFontSize", "ownAttributes", "rule", "normalizedStyle", "normalizedAttr", "normalizedValue", "font", "mergedAttrs", "colorAttr", "RECT_PROPS", "Rect", "_initRxRy", "rx", "ry", "isRounded", "bezierCurveTo", "_parseAttributes", "ATTRIBUTE_NAMES", "restOfparsedAttributes", "Boolean", "LAYOUT_TYPE_INITIALIZATION", "LAYOUT_TYPE_ADDED", "LAYOUT_TYPE_REMOVED", "LAYOUT_TYPE_IMPERATIVE", "getObjectBounds", "destinationGroup", "currentGroup", "objectCenter", "accountForStroke", "strokeUniformVector", "scalingStrokeWidth", "sizeVector", "LayoutStrategy", "calcLayoutResult", "shouldPerformLayout", "calcBoundingBox", "prevStrategy", "strategy", "shouldLayoutClipPath", "getInitialSize", "overrides", "bboxSize", "bboxCenter", "actualSize", "relativeCorrection", "FitContentLayout", "LAYOUT_MANAGER", "LayoutManager", "_subscriptions", "performLayout", "strictContext", "bubbles", "_prevLayoutStrategy", "onBeforeLayout", "layoutResult", "getLayoutResult", "commitLayout", "onAfterLayout", "attachHandlers", "trigger", "subscribe", "unsubscribe", "delete", "unsubscribeTargets", "targets", "subscribeTargets", "tricklingContext", "layoutManager", "prevCenter", "nextCenter", "correction", "_context$x", "_context$y", "layoutObjects", "layoutObject", "_", "bubblingContext", "NoopLayoutManager", "Group", "__objectSelectionTracker", "__objectSelectionMonitor", "__objectSelectionDisposer", "enterGroup", "canEnterGroup", "_filterObjectsBeforeEnteringGroup", "allowedObjects", "_onAfterObjectsChange", "removeParentTransform", "exitGroup", "_shouldSetNestedCoords", "subTargetCheck", "removeAll", "_activeObjects", "selected", "activeObjects", "_watchObject", "watch", "_enterGroup", "activeObject", "_exitGroup", "ownCache", "preserveObjectStacking", "triggerLayout", "__serializeObjects", "method", "_includeDefaultValues", "originalDefaults", "_createSVGBgRect", "fillStroke", "commons", "svgString", "bg", "abortable", "hydratedOptions", "layoutClass", "strategyClass", "interactive", "findScaleToFit", "destination", "findScaleToCover", "reMoveToCommand", "reLineCommand", "reHorizontalLineCommand", "reVerticalLineCommand", "reClosePathCommand", "reCubicCurveCommand", "reCubicCurveShortcutCommand", "reQuadraticCurveCommand", "reQuadraticCurveShortcutCommand", "reArcCommand", "rePathCommand", "repeatedCommands", "M", "segmentToBezier", "theta1", "theta2", "cosTh", "sinTh", "cx1", "cy1", "mT", "fromX", "fromY", "costh1", "sinth1", "costh2", "sinth2", "toX", "toY", "calcVectorAngle", "ux", "uy", "vx", "vy", "ta", "tb", "getBoundsOfCurve", "begx", "begy", "cp1x", "cp1y", "cp2x", "cp2y", "endx", "endy", "argsString", "cachesBoundsOfCurve", "boundsOfCurveCache", "tvalues", "bounds", "b2ac", "sqrtb2ac", "t1", "t2", "jlen", "iterator", "getPointOnCubicBezierIterator", "fromArcToBeziers", "fx", "fy", "rot", "large", "sweep", "tx", "ty", "segsNorm", "arcToSegments", "rotateX", "root", "sinTheta", "px", "py", "rx2", "ry2", "py2", "px2", "pl", "_rx", "_ry", "mTheta", "dtheta", "segments", "mDelta", "th3", "makePathSimpler", "x1", "y1", "destinationPath", "previous", "controlX", "controlY", "parsedCommand", "converted", "calcLineLength", "x2", "y2", "pct", "c1", "c2", "c3", "c4", "QB1", "QB2", "QB3", "getTangentCubicIterator", "p1x", "p1y", "p2x", "p2y", "p3x", "p3y", "p4x", "p4y", "qb1", "qb2", "qb3", "tangentX", "tangentY", "getPointOnQuadraticBezierIterator", "getTangentQuadraticIterator", "invT", "pathIterator", "tempP", "tmpLen", "perc", "findPercentageForDistance", "segInfo", "nextLen", "nextStep", "lastPerc", "angleFinder", "getPathSegmentsInfo", "tempInfo", "totalLength", "info", "basicInfo", "command", "destX", "destY", "getPointOnPath", "infos", "segPercent", "segment", "rePathCmdAll", "rePathCmd", "parsePath", "pathString", "res", "matchStr", "chain", "paramArr", "filteredGroups", "shift", "numParse", "reverse", "transformed", "getSmoothPathFromPoints", "p1", "p2", "multSignX", "multSignY", "manyPoints", "midPoint", "joinPath", "pathData", "request", "xhr", "removeListener", "ontimeout", "onreadystatechange", "readyState", "open", "send", "removeTransformMatrixForSvgParsing", "preserveAspectRatioOptions", "cropX", "cropY", "offsetLeft", "offsetTop", "_newCanvas$getContext", "newCanvas", "getRegularPolygonPath", "numVertexes", "radius", "interiorAngle", "rotationAdjustment", "rad", "commonAttributes", "groupSVGElements", "mergeClipPaths", "_b$group", "removeTransformFromObject", "finalTransform", "rotatePoint", "transformPath", "pathOffset", "pathSegment", "newSegment", "CanvasDOMManager", "containerClass", "upperCanvasEl", "createUpperCanvas", "upper", "applyCanvasStyle", "container", "createContainerElement", "replaceChild", "className", "allow", "touchAction", "removeChild", "SelectableCanvas", "_this$elements$upper", "_this$elements$upper2", "wrapperEl", "_objectsToRender", "deselected", "_discardActiveObject", "_hoveredTarget", "_hoveredTargets", "_chooseObjectsToRender", "contextTopDirty", "_groupSelector", "isDrawingMode", "renderTopLayer", "_isCurrentlyDrawing", "freeDrawingBrush", "selection", "_drawSelection", "renderTop", "setTargetFindTolerance", "targetFindTolerance", "pixelFindCanvasEl", "pixelFindContext", "isTargetTransparent", "selectionBgc", "enhancedTolerance", "_isSelectionKeyPressed", "sKey", "selectionKey", "_shouldClearSelection", "getActiveObjects", "_shouldCenterTransform", "modifierKeyPressed", "centerTransform", "_getOriginFromCorner", "controlName", "_setupCurrentTransform", "alreadySelected", "_control$getActionHan", "getScenePoint", "getActionFromCorner", "altKey", "centeredKey", "lastX", "lastY", "shiftKey", "setCursor", "cursor", "deltaX", "extent", "strokeOffset", "selectionLineWidth", "minX", "minY", "maxX", "maxY", "selectionColor", "selectionBorderColor", "selectionDashArray", "findTarget", "skipTargetFind", "getViewportPoint", "aObjects", "searchPossibleTargets", "subTargets", "altSelectionKey", "_pointIsInObjectSelectionArea", "viewportZoom", "angleRadians", "cosP", "sinP", "cosPSinP", "cosPMinusSinP", "_checkTarget", "isEditing", "_searchPossibleTargets", "subTarget", "_pointer", "_absolutePointer", "fromViewport", "boundsWidth", "boundsHeight", "cssScale", "_resetTransformEventData", "_setBrushStyles", "willReadFrequently", "getTopContext", "getSelectionContext", "getSelectionElement", "active", "_fireSelectionEvents", "oldObjects", "somethingChanged", "invalidate", "added", "setActiveObject", "currentActives", "_setActiveObject", "prevActiveObject", "endCurrentTransform", "discardActiveObject", "discarded", "_finalizeCurrentTransform", "_scaling", "originalProperties", "_realizeGroupTransformOnObject", "originalValues", "selectionFullyContained", "defaultCursor", "freeDrawingCursor", "notAllowedCursor", "stopContextMenu", "fireRightClick", "fireMiddleClick", "enablePointerEvents", "TextEditingManager", "cb", "hiddenTextarea", "focus", "__disposer", "exitTextEditing", "exitEditing", "onMouseMove", "_this$target", "updateSelectionOnMouseMove", "addEventOptions", "passive", "getEventPoints", "viewportPoint", "scenePoint", "absolutePointer", "addListener", "syntheticEventConfig", "mouse", "in", "out", "targetIn", "targetOut", "canvasIn", "canvasOut", "drag", "Canvas", "eventHandler", "addOrRemove", "_getEventPrefix", "functor", "eventjsFunctor", "canvasElement", "eventTypePrefix", "_onResize", "_onMouseDown", "_onMouseMove", "_onMouseOut", "_onMouseEnter", "_onMouseWheel", "_onContextMenu", "_onDoubleClick", "_onDragStart", "_onDragEnd", "_onDragOver", "_onDragEnter", "_onDragLeave", "_onDrop", "_onTouchStart", "removeListeners", "_onMouseUp", "_onTouchEnd", "__onMouseWheel", "shared", "nestedTarget", "_isClick", "_dragSource", "_onDragProgress", "_renderDragEffects", "dropTarget", "_dropTarget", "didDrop", "dataTransfer", "dropEffect", "dragSource", "_draggedoverTarget", "findDragTargets", "eventType", "_fireEnterLeaveEvents", "_basicEventHandler", "_cacheTransformEventData", "_handleEvent", "getPointerId", "evt", "identifier", "pointerId", "_isMainEvent", "isPrimary", "touches", "mainTouchId", "__onMouseDown", "__onMouseUp", "_willAddMouseDown", "clearTimeout", "__onMouseMove", "_shouldRender", "_this$_activeObject", "isClick", "_target", "button", "_onMouseUpInDrawingMode", "shouldRender", "targetWasActive", "handleSelection", "found", "originalControl", "originalMouseUpHandler", "_setCursorFromEvent", "currentTarget", "currentSubTargets", "_onMouseDownInDrawingMode", "onMouseDown", "_onMouseMoveInDrawingMode", "onMouseUp", "grouped", "handleMultiSelection", "groupSelector", "_transformObject", "_fireOverOutEvents", "textEditingManager", "fireSyntheticInOutEvents", "oldTarget", "fireCanvas", "draggedoverTarget", "targetChanged", "outOpt", "nextTarget", "inOpt", "previousTarget", "localPointer", "_performTransformAction", "activeSelection", "isAS", "prevActiveObjects", "multiSelectAdd", "newActiveSelection", "point1", "point2", "collectedObjects", "klass", "linearDefaultCoords", "radialDefaultCoords", "RE_PERCENT", "isPercent", "parsePercent", "NaN", "RE_KEY_VALUE_PAIRS", "RE_KEY_VALUE", "parseColorStop", "keyValuePairs", "parseColorStops", "opacityAttr", "colorStops", "colorStopEls", "getElementsByTagName", "parseType", "parseGradientUnits", "getValue", "parseCoords", "valuesToConvert", "finalValue", "propValue", "Gradient", "addColorStop", "preTransform", "colorStop", "sort", "_renderPathCommands", "needsSwap", "minRadius", "percentageShift", "gradient", "createLinearGradient", "createRadialGradient", "svgOptions", "viewBoxWidth", "viewBoxHeight", "Pattern", "isImageSource", "isCanvasSource", "sourceToString", "complete", "naturalWidth", "naturalHeight", "patternSource", "patternOffsetX", "patternOffsetY", "patternWidth", "patternHeight", "BaseBrush", "_saveAndTransform", "needsFullRender", "_resetShadow", "_isOutSideCanvas", "Path", "_setPath", "adjustPosition", "setBoundingBox", "_calcBoundsFromPath", "quadraticCurveTo", "pathCmd", "sourcePath", "_getOffsetTransform", "digits", "_calcDimensions", "subpathStartX", "subpathStartY", "parsedAttributes", "PencilBrush", "_points", "_hasStraightLine", "drawStraightLine", "straightLineKey", "_prepareForDrawing", "_addPoint", "limitedToCanvasSize", "oldEnd", "drawSegment", "_finalizeAndAddPath", "_reset", "convertPointsToSVGPath", "createPath", "decimatePoints", "cDistance", "lastPoint", "adjustedDistance", "newPoints", "decimate", "CIRCLE_PROPS", "Circle", "setRadius", "startAngle", "endAngle", "getRadiusX", "getRadiusY", "startX", "startY", "endX", "endY", "largeFlag", "sweepFlag", "CircleBrush", "drawDot", "addPoint", "dot", "originalRenderOnAddRemove", "circles", "circle", "pointerPoint", "SprayBrush", "sprayChunks", "sprayChunk", "addSprayChunk", "renderChunck", "rects", "chunck", "rect", "optimizeOverlapping", "uniqueRects", "uniqueRectsArray", "sprayChunck", "density", "dotWidthVariance", "dotWidth", "randomOpacity", "PatternBrush", "getPatternSrc", "patternCanvas", "patternCtx", "getPattern", "topLeft", "coordProps", "Line", "_setWidthHeight", "calcLinePoints", "origStrokeStyle", "_this$stroke", "_x1", "_x2", "_y1", "_y2", "xMult", "yMult", "Triangle", "widthBy2", "heightBy2", "ELLIPSE_PROPS", "Ellipse", "getRx", "getRy", "parsePointsAttribute", "pointsSplit", "parsedPoints", "polylineDefaultValues", "exactBoundingBox", "Polyline", "initialized", "isOpen", "_projectStrokeOnPoints", "strokeDiff", "bboxNoStroke", "layoutProperties", "_options$width", "_options$height", "_options$width2", "_options$height2", "output", "diffX", "diffY", "Polygon", "fontProperties", "textDecorationProperties", "textLayoutProperties", "additionalProps", "styleProperties", "textDefaultValues", "_reNewline", "_reSpacesAndTabs", "_reSpaceAndTab", "_reWords", "textAlign", "superscript", "baseline", "subscript", "pathStartOffset", "pathSide", "pathAlign", "_fontSizeFraction", "offsets", "_fontSizeMult", "charSpacing", "direction", "CACHE_FONT_SIZE", "MIN_TEXT_WIDTH", "JUSTIFY", "JUSTIFY_LEFT", "JUSTIFY_RIGHT", "JUSTIFY_CENTER", "StyledText", "isEmptyStyles", "lineIndex", "line", "p3", "styleHas", "cleanStyle", "letterCount", "stylePropertyValue", "stylesCount", "allStyleObjectPropertiesMatch", "graphemeCount", "styleObject", "_textLines", "removeStyle", "lineNum", "charNum", "_extendStyles", "get2DCursorLocation", "_getLineStyle", "_setLineStyle", "newStyle", "_getStyleDeclaration", "_setStyleDeclaration", "getSelectionStyles", "startIndex", "endIndex", "getStyleAtPosition", "getCompleteStyleDeclaration", "setSelectionStyles", "_forceClearCache", "_lineStyle$charIndex", "lineStyle", "_styleProperties", "_deleteStyleDeclaration", "_deleteLineStyle", "multipleSpacesRegex", "dblQuoteRegex", "createSVGInlineRect", "svgColor", "measuringContext", "FabricText", "setPathInfo", "initDimensions", "segmentsInfo", "_splitText", "newLines", "_splitTextIntoLines", "lines", "graphemeLines", "_unwrappedTextLines", "_unwrappedLines", "_text", "graphemeText", "_clearCache", "calcTextWidth", "cursorWidth", "calcTextHeight", "enlargeSpaces", "diffSpace", "currentLineWidth", "numberOfSpaces", "accumulatedSpace", "charBound", "spaces", "isEndOfWrapping", "getLineWidth", "__charBounds", "kernedWidth", "missingNewlineOffset", "selectionStart", "skipWrapping", "_setTextStyles", "_renderTextLinesBackground", "_renderTextDecoration", "_renderTextStroke", "_renderTextFill", "charStyle", "forMeasuring", "textBaseline", "_getFontDeclaration", "maxWidth", "_renderTextLine", "_renderChars", "leftOffset", "_getLeftOffset", "lineTopOffset", "_getTopOffset", "heightOfLine", "lineLeftOffset", "_getLineLeftOffset", "drawStart", "currentColor", "boxWidth", "boxStart", "lastColor", "getValueOfPropertyAt", "charBox", "renderLeft", "_measureChar", "_char", "previousChar", "prevCharStyle", "fontDeclaration", "couple", "stylesAreEqual", "fontMultiplier", "coupleWidth", "previousWidth", "getMeasuringContext", "measureText", "getHeightOfChar", "measureLine", "lineInfo", "_measureLine", "_getWidthOfCharSpacing", "prevGrapheme", "graphemeInfo", "llength", "lineBounds", "grapheme", "_getGraphemeBox", "positionInPath", "totalPathLength", "_setGraphemeOnPath", "numOfSpaces", "centerPosition", "skipLeft", "previousBox", "__lineHeights", "maxHeight", "_renderTextCommon", "lineHeights", "isJustify", "shortCut", "isLtr", "currentDirection", "actualStyle", "nextStyle", "timeToRender", "drawingLeft", "charsToRender", "_renderChar", "_applyPatternGradientTransformText", "handleFiller", "fullDecl", "shouldFill", "fillOffsets", "fillText", "strokeOffsets", "strokeText", "setSuperscript", "_setScript", "setSubscript", "schema", "loc", "lineDiff", "__lineWidths", "_charStyle$property", "topOffset", "currentDecoration", "currentFill", "lastDecoration", "lastFill", "currentSize", "currentDy", "parsedFontFamily", "genericFonts", "newLine", "newText", "needsDims", "isAddingPath", "_options$parsedAttrib", "textAnchor", "textDecoration", "restOfOptions", "textContent", "textHeightScaleFactor", "scaledDiff", "textHeight", "offX", "_getSVGLeftTopOffsets", "textAndBg", "_getSVGTextAndBg", "textTop", "textLeft", "_wrapSVGTextAndBg", "lineTop", "textBgRects", "textSpans", "getSvgTextDecoration", "textTopOffset", "textLeftOffset", "lineOffset", "_setSVGTextLineBg", "_setSVGTextLineText", "_createTextCharSpan", "char", "styleDecl", "styleProps", "getSvgSpanStyles", "fillStyles", "dySpan", "_getSVGLineTopOffset", "lastHeight", "useWhiteSpace", "decoration", "DraggableTextDelegate", "dragEnterHandler", "dragOverHandler", "dragLeaveHandler", "dragEndHandler", "dropHandler", "_dispose", "isPointerOverSelection", "newSelection", "getSelectionStartFromPointer", "selectionEnd", "__mouseDownInPlace", "isActive", "__dragStartFired", "setCursorByClick", "initDelayedCursor", "__isDraggingOver", "getDragStartSelection", "__dragStartSelection", "setDragImage", "_e$dataTransfer", "flipFactor", "boundaries", "_getCursorBoundaries", "diff", "bgc", "dragImage", "border", "__dragImageDisposer", "appendChild", "setData", "effectAllowed", "abortCursorAnimation", "editable", "defaultPrevented", "dragStartSelection", "targetCanDrop", "ev", "_e$dataTransfer2", "insert", "getData", "trailing", "selectionStartOffset", "removeChars", "trimEnd", "insertChars", "enterEditing", "_updateTextarea", "_e$dataTransfer3", "reNonWord", "ITextBehavior", "initBehavior", "_tick", "_onTickComplete", "_animateCursor", "toValue", "_currentCursorOpacity", "renderCursorOrSelection", "_currentTickState", "cursorDuration", "_this$_currentTickCom", "_currentTickCompleteState", "restart", "cursorDelay", "shouldClear", "cursorAnimation", "restartCursorIfNeeded", "selectAll", "_fireSelectionChanged", "getSelectedText", "findWordBoundaryLeft", "startFrom", "_reSpace", "findWordBoundaryRight", "findLineBoundaryLeft", "findLineBoundaryRight", "searchWordBoundary", "selectWord", "newSelectionStart", "newSelectionEnd", "selectLine", "initHiddenTextarea", "_saveEditingProps", "_setEditingProps", "_textBeforeEdit", "activeElement", "currentStart", "currentEnd", "__selectionStartOnMouseDown", "editingBorderColor", "fromStringToGraphemeSelection", "smallerTextStart", "graphemeStart", "smallerTextEnd", "fromGraphemeToStringSelection", "cursorOffsetCache", "inCompositionMode", "updateTextareaPosition", "updateFromTextArea", "textarea", "_calcTextareaPosition", "desiredPosition", "compositionStart", "cursorLocation", "charHeight", "upperCanvas", "upperCanvasWidth", "upperCanvasHeight", "clientWidth", "clientHeight", "_savedProps", "_restoreEditingProps", "_exitEditing", "isTextChanged", "_removeExtraneousStyles", "removeStyleFromTo", "lineStart", "charStart", "lineEnd", "charEnd", "styleObj", "shiftLineStyles", "numericChar", "clonedStyles", "numericLine", "insertNewlineStyleObject", "qty", "copiedStyle", "newLineStyles", "originalLineLength", "isEndOfLine", "someStyleIsCarryingOver", "currentCharStyle", "numIndex", "styleCarriedOver", "insertCharStyleObject", "quantity", "currentLineStyles", "currentLineStylesCloned", "numericIndex", "insertNewStyleBlock", "insertedText", "cursorLoc", "addedLines", "linesLength", "setSelectionStartEndWithShift", "_selectionDirection", "ITextKeyBehavior", "autocapitalize", "autocorrect", "autocomplete", "spellcheck", "wrap", "hiddenTextareaContainer", "keydown", "keyup", "input", "copy", "cut", "paste", "compositionstart", "compositionupdate", "compositionend", "onKeyDown", "keyMap", "keysMapRtl", "keysMap", "keyCode", "ctrlKeysMapDown", "ctrlKey", "metaKey", "stopImmediatePropagation", "onKeyUp", "_copyDone", "ctrlKeysMapUp", "onInput", "fromPaste", "updateAndFire", "nextText", "charCount", "nextCharCount", "removedText", "removeFrom", "removeTo", "charDiff", "textareaSelection", "backDelete", "copiedText", "disableStyleCopyPaste", "copiedTextStyle", "onCompositionStart", "onCompositionEnd", "onCompositionUpdate", "compositionEnd", "_getWidthBeforeCursor", "bound", "widthBeforeCursor", "getDownCursorOffset", "isRight", "selectionProp", "_getSelectionForOffset", "indexOnOtherLine", "_getIndexOnLine", "getUpCursorOffset", "textBeforeCursor", "charWidth", "foundMatch", "widthOfCharsOnLine", "indexOnLine", "leftEdge", "rightEdge", "offsetFromLeftEdge", "moveCursorDown", "_moveCursorUpOrDown", "moveCursorUp", "moveCursorWithShift", "moveCursorWithoutShift", "moveCursorLeft", "_moveCursorLeftOrRight", "_move", "newValue", "_moveLeft", "_moveRight", "moveCursorLeftWithoutShift", "change", "moveCursorLeftWithShift", "moveCursorRight", "moveCursorRightWithShift", "moveCursorRightWithoutShift", "notALeftClick", "ITextClickBehavior", "_mouseDownHandler", "_mouseDownHandlerBefore", "doubleClickHandler", "tripleClickHandler", "__lastClickTime", "__lastLastClickTime", "__lastPointer", "draggableTextDelegate", "__newClickTime", "newPointer", "isTripleClick", "__lastSelected", "didDrag", "mouseOffset", "charLength", "widthAfter", "MOVE_CURSOR_UP", "MOVE_CURSOR_DOWN", "MOVE_CURSOR_LEFT", "MOVE_CURSOR_RIGHT", "EXIT_EDITING", "iTextDefaultValues", "cursorColor", "caching", "IText", "setSelectionStart", "_updateAndFire", "setSelectionEnd", "renderCursor", "renderSelection", "skipCaching", "_getCursorBoundariesOffsets", "__getCursorBoundariesOffsets", "renderCursorAt", "_renderCursor", "_renderSelection", "dragSelection", "startLine", "endLine", "startChar", "endChar", "realLineHeight", "boxEnd", "drawHeight", "extraTop", "drawWidth", "compositionColor", "getCurrentCharFontSize", "cp", "_getCurrentCharIndex", "getCurrentCharColor", "cursorPosition", "Textbox", "dynamicMinWidth", "_styleMap", "_generateStyleMap", "textInfo", "realLineCount", "realLineCharCount", "splitByGrapheme", "isWrapping", "nextOffset", "nextLineIndex", "shouldLimit", "mapNextLine", "p2Number", "_wrapText", "desiredWidth", "getGraphemeDataForRender", "wrapped", "wordsData", "_wrapLine", "infix", "largestWordWidth", "wordsOrGraphemes", "wordSplit", "word", "graphemeArray", "_measureWord", "charOffset", "_wordJoiners", "reservedSpace", "additionalSpace", "infixWidth", "lineJustStarted", "wordWidth", "getMinWidth", "minWidth", "linesToKeep", "propNumber", "has", "ClipPathLayout", "_target$group", "clipPathCenter", "FixedLayout", "ActiveSelectionLayoutManager", "parents", "Set", "selectedObjects", "ActiveSelection", "multiSelectionStacking", "findIndex", "groups", "childrenOverride", "Canvas2dFilterBackend", "applyFilters", "filters", "sourceElement", "sourceWidth", "sourceHeight", "pipelineState", "imageData", "originalEl", "originalImageData", "filterBackend", "applyTo", "imageDataPostFilter", "putImageData", "WebGLFilterBackend", "tileSize", "Float32Array", "setupGLContext", "captureGPUInfo", "createWebGLCanvas", "premultipliedAlpha", "depth", "stencil", "antialias", "clearColor", "cachedTexture", "getCachedTexture", "destinationWidth", "destinationHeight", "sourceTexture", "createTexture", "targetTexture", "originalTexture", "passes", "webgl", "aPosition", "programCache", "pass", "tempFbo", "createFramebuffer", "bindFramebuffer", "FRAMEBUFFER", "dWidth", "dHeight", "copyGLTo2D", "bindTexture", "TEXTURE_2D", "deleteTexture", "deleteFramebuffer", "clearWebGLCaches", "textureCache", "textureImageSource", "NEAREST", "RGBA", "UNSIGNED_BYTE", "CLAMP_TO_EDGE", "TEXTURE_MAG_FILTER", "TEXTURE_MIN_FILTER", "TEXTURE_WRAP_S", "TEXTURE_WRAP_T", "texture", "texParameteri", "texImage2D", "uniqueId", "evictCachesForKey", "glCanvas", "sourceY", "copyGLTo2DPutImageData", "numBytes", "u8", "Uint8Array", "imageBuffer", "u8Clamped", "Uint8ClampedArray", "readPixels", "imgData", "ImageData", "gpuInfo", "renderer", "vendor", "ext", "UNMASKED_RENDERER_WEBGL", "UNMASKED_VENDOR_WEBGL", "initFilterBackend", "enableGLFiltering", "getFilterBackend", "setFilterBackend", "backend", "IMAGE_PROPS", "FabricImage", "setElement", "_element", "removeTexture", "_originalElement", "CSS_CANVAS", "resizeFilter", "applyResizeFilters", "elementKey", "getCrossOrigin", "getOriginalSize", "_stroke", "filterObj", "getSrc", "hasCrop", "imageMarkup", "strokeSvg", "imageRendering", "imageSmoothing", "getSvgSrc", "origFill", "filtered", "srcFromAttribute", "setSrc", "minimumScale", "minimumScaleTrigger", "elementToFilter", "_filteredEl", "_filterScalingX", "_filterScalingY", "_lastScaleX", "_lastScaleY", "isNeutralState", "imgElement", "_needsResize", "elementToDraw", "elWidth", "elHeight", "sX", "sY", "sW", "sH", "maxDestW", "maxDestH", "_resetWidthHeight", "pAR", "preserveAspectRatio", "pWidth", "pHeight", "rWidth", "rHeight", "f", "rf", "hydratedProps", "imageOptions", "fromURL", "applyViewboxTransform", "viewBoxAttr", "widthAttr", "heightAttr", "missingViewBox", "missingDimAttr", "translateMatrix", "widthDiff", "heightDiff", "parsedDim", "pasedViewBox", "createElementNS", "firstChild", "getTagName", "node", "tagName", "svgInvalidAncestorsRegEx", "getMultipleNodes", "nodeNames", "nodeList", "nodeArray", "getElementsByTagNameNS", "gradientsAttrs", "xlinkAttr", "recursivelyParseGradientsXlink", "_gradient$getAttribut", "xLink", "referencedGradient", "children", "referenceClone", "cloneNode", "tagArray", "getCSSRules", "allRules", "styleContents", "ruleObj", "propertyValuePairs", "pair", "_rule", "findTag", "ElementsParser", "clipPaths", "regexUrl", "gradientDefs", "elList", "createObject", "fromElement", "resolveGradient", "resolveClipPath", "extractPropertyDefinition", "storage", "lastIndex", "gradientDef", "usingElement", "clipPathElements", "objTransformInv", "clipPathTag", "clipPathOwner", "clipPathElement", "enlivedClippath", "clipRule", "gTransform", "isValidSvgTag", "createEmptyResponse", "allElements", "async", "parseSVGDocument", "nodelist", "xlinkAttribute", "xlink", "el2Orig", "el2", "currentTrans", "oldLength", "namespace", "el3", "attrs", "setAttributeNS", "nodeValue", "descendants", "localClipPaths", "elementParser", "loadSVGFromString", "parseFromString", "loadSVGFromURL", "xml", "responseXML", "parsedDoc", "ACTION_NAME", "createPolyPositionHandler", "pointIndex", "polyObject", "polyActionHandler", "poly", "mouseLocalPosition", "factoryPolyActionHandler", "anchorPoint", "anchorPointInParentPlane", "createPolyActionHandler", "isWebGLPipelineState", "isPutImageFaster", "testContext", "ArrayBuffer", "testPipelineState", "performance", "now", "drawImageTime", "highPsourceCode", "identityFragmentShader", "BaseFilter", "getFragmentSource", "createProgram", "vertexSource", "vertexShader", "VERTEX_SHADER", "program", "getShaderInfoLog", "attachShader", "linkProgram", "getProgramParameter", "LINK_STATUS", "getProgramInfoLog", "uniformLocations", "getUniformLocations", "uStepW", "getUniformLocation", "uStepH", "attributeLocations", "getAttributeLocations", "getAttribLocation", "sendAttributeData", "aPositionData", "attributeLocation", "buffer", "createBuffer", "bindBuffer", "ARRAY_BUFFER", "enableVertexAttribArray", "vertexAttribPointer", "FLOAT", "bufferData", "STATIC_DRAW", "_setupFrameBuffer", "framebufferTexture2D", "COLOR_ATTACHMENT0", "finish", "_swapTextures", "temp", "main", "mainParameter", "defaultValue", "thisValue", "applyToWebGL", "applyTo2d", "getCacheKey", "retrieveShader", "shader", "useProgram", "uniform1f", "sendUniformData", "viewport", "drawArrays", "TRIANGLE_STRIP", "bindAdditionalTexture", "textureUnit", "activeTexture", "TEXTURE0", "unbindAdditionalTexture", "getMainParameter", "setMainParameter", "createHelpLayer", "helpLayer", "mainP", "blendColorFragmentSource", "screen", "difference", "lighten", "darken", "exclusion", "tint", "BlendColor", "mode", "tg", "alpha1", "uColor", "uniform4fv", "mask", "BlendImage", "image", "TEXTURE1", "calculateMatrix", "resources", "blendImage", "canvas1", "blendData", "uTransformMatrix", "uImage", "uniform1i", "uniformMatrix3fv", "filterOptions", "enlivedImage", "Blur", "aspectRatio", "horizontal", "simpleBlur", "blurLayer1", "blurLayer2", "canvas2", "ctx1", "ctx2", "nSamples", "percent", "newImageData", "delta", "chooseRightDelta", "uniform2fv", "blurScale", "Brightness", "brightness", "uBrightness", "colorMatrixDefaultValues", "colorsOnly", "ColorMatrix", "uColorMatrix", "uConstants", "constants", "uniformMatrix4fv", "createColorMatrixFilter", "_class", "newClass", "Brownie", "Vintage", "Kodachrome", "Technicolor", "Polaroid", "Sepia", "BlackWhite", "Composed", "subFilters", "enlivedFilters", "Contrast", "contrast", "contrastF", "uContrast", "Convolute_3_1", "Convolute_3_0", "Convolute_5_1", "Convolute_5_0", "Convolute_7_1", "Convolute_7_0", "Convolute_9_1", "Convolute_9_0", "Convolute", "opaque", "weights", "side", "halfSide", "sw", "sh", "createImageData", "dst", "alphaFac", "dstOff", "scx", "scy", "srcOff", "wt", "uMatrix", "uOpaque", "uHalfSize", "uSize", "uniform1fv", "Gamma", "gamma", "rInv", "gInv", "bInv", "rgbValues", "rgb", "uGamma", "uniform3fv", "lightness", "luminosity", "Grayscale", "uMode", "HueRotation", "rotation", "cosine", "sine", "aThird", "aThirdSqtSin", "OneMinusCos", "Invert", "invert", "uInvert", "uAlpha", "Noise", "noise", "rand", "uNoise", "uSeed", "Pixelate", "blocksize", "_i", "_j", "uBlocksize", "RemoveColor", "getFragmentShader", "lowC", "highC", "uLow", "uHigh", "useAlpha", "Resize", "uDelta", "uTaps", "taps", "getFilterWindow", "tempScale", "lanczosLobes", "filterWindow", "generateShader", "getTaps", "lobeFunction", "lanczosCreate", "fragmentSourceTOP", "applyToForWebgl", "dW", "dH", "lobes", "xx", "rcpScaleX", "rcpScaleY", "oW", "oH", "newData", "resizeType", "sliceByTwo", "hermiteFastResize", "bilinearFiltering", "lanczosResize", "mult", "doneW", "doneH", "stepW", "stepH", "dX", "dY", "tmpCanvas", "srcData", "destImg", "destData", "lanczos", "ratioX", "ratioY", "rcpRatioX", "rcpRatioY", "range2X", "range2Y", "cacheLanc", "icenter", "process", "u", "weight", "fX", "fY", "xDiff", "yDiff", "chnl", "origPix", "w4", "pixels", "destImage", "destPixels", "ratioW", "ratioH", "ratioWHalf", "ratioHHalf", "img2", "data2", "weightsAlpha", "gxR", "gxG", "gxB", "gxA", "yy", "w0", "Saturation", "saturation", "adjust", "uSaturation", "Vibrance", "vibrance", "amt", "uVibrance"]
}
