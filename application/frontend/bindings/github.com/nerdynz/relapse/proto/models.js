// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

export class ApplicationInfo {
    /**
     * Creates a new ApplicationInfo instance.
     * @param {Partial<ApplicationInfo>} [$$source = {}] - The source object to create the ApplicationInfo.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["AppName"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["AppPath"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ApplicationInfo instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {ApplicationInfo}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ApplicationInfo(/** @type {Partial<ApplicationInfo>} */($$parsedSource));
    }
}

export class Capture {
    /**
     * Creates a new Capture instance.
     * @param {Partial<Capture>} [$$source = {}] - The source object to create the Capture.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["RowNum"] = 0;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["AppName"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["Filepath"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["Fullpath"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["CaptureSizeBytes"] = 0;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["Dt"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["Bod"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {boolean | undefined}
             */
            this["IsReal"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Capture instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Capture}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Capture(/** @type {Partial<Capture>} */($$parsedSource));
    }
}

export class CaptureDaySummary {
    /**
     * Creates a new CaptureDaySummary instance.
     * @param {Partial<CaptureDaySummary>} [$$source = {}] - The source object to create the CaptureDaySummary.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["Bod"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["TotalCapturedMinutes"] = 0;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["TotalCapturesCount"] = 0;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["TotalCaptureSizeBytes"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new CaptureDaySummary instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {CaptureDaySummary}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new CaptureDaySummary(/** @type {Partial<CaptureDaySummary>} */($$parsedSource));
    }
}

export class CapturedDay {
    /**
     * Creates a new CapturedDay instance.
     * @param {Partial<CapturedDay>} [$$source = {}] - The source object to create the CapturedDay.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["Bod"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {(Capture | null)[] | undefined}
             */
            this["Captures"] = [];
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {CaptureDaySummary | null | undefined}
             */
            this["Summary"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new CapturedDay instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {CapturedDay}
     */
    static createFrom($$source = {}) {
        const $$createField1_0 = $$createType2;
        const $$createField2_0 = $$createType4;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Captures" in $$parsedSource) {
            $$parsedSource["Captures"] = $$createField1_0($$parsedSource["Captures"]);
        }
        if ("Summary" in $$parsedSource) {
            $$parsedSource["Summary"] = $$createField2_0($$parsedSource["Summary"]);
        }
        return new CapturedDay(/** @type {Partial<CapturedDay>} */($$parsedSource));
    }
}

export class DateRequest {
    /**
     * Creates a new DateRequest instance.
     * @param {Partial<DateRequest>} [$$source = {}] - The source object to create the DateRequest.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["Dt"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new DateRequest instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {DateRequest}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new DateRequest(/** @type {Partial<DateRequest>} */($$parsedSource));
    }
}

export class DaySummaries {
    /**
     * Creates a new DaySummaries instance.
     * @param {Partial<DaySummaries>} [$$source = {}] - The source object to create the DaySummaries.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {(CaptureDaySummary | null)[] | undefined}
             */
            this["DaySummaries"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new DaySummaries instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {DaySummaries}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType5;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("DaySummaries" in $$parsedSource) {
            $$parsedSource["DaySummaries"] = $$createField0_0($$parsedSource["DaySummaries"]);
        }
        return new DaySummaries(/** @type {Partial<DaySummaries>} */($$parsedSource));
    }
}

export class DaySummariesRequest {
    /**
     * Creates a new DaySummariesRequest instance.
     * @param {Partial<DaySummariesRequest>} [$$source = {}] - The source object to create the DaySummariesRequest.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["BodFrom"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["BodTo"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new DaySummariesRequest instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {DaySummariesRequest}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new DaySummariesRequest(/** @type {Partial<DaySummariesRequest>} */($$parsedSource));
    }
}

export class DeleteCapturesForDayRequest {
    /**
     * Creates a new DeleteCapturesForDayRequest instance.
     * @param {Partial<DeleteCapturesForDayRequest>} [$$source = {}] - The source object to create the DeleteCapturesForDayRequest.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["CaptureDayTimeSeconds"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new DeleteCapturesForDayRequest instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {DeleteCapturesForDayRequest}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new DeleteCapturesForDayRequest(/** @type {Partial<DeleteCapturesForDayRequest>} */($$parsedSource));
    }
}

export class DeleteCapturesForDayResponse {
    /**
     * Creates a new DeleteCapturesForDayResponse instance.
     * @param {Partial<DeleteCapturesForDayResponse>} [$$source = {}] - The source object to create the DeleteCapturesForDayResponse.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["CaptureDayTimeSeconds"] = 0;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string[] | undefined}
             */
            this["Deletions"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new DeleteCapturesForDayResponse instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {DeleteCapturesForDayResponse}
     */
    static createFrom($$source = {}) {
        const $$createField1_0 = $$createType6;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Deletions" in $$parsedSource) {
            $$parsedSource["Deletions"] = $$createField1_0($$parsedSource["Deletions"]);
        }
        return new DeleteCapturesForDayResponse(/** @type {Partial<DeleteCapturesForDayResponse>} */($$parsedSource));
    }
}

export class OcrFull {
    /**
     * Creates a new OcrFull instance.
     * @param {Partial<OcrFull>} [$$source = {}] - The source object to create the OcrFull.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {(OcrMeta | null)[] | undefined}
             */
            this["Meta"] = [];
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["FullText"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new OcrFull instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {OcrFull}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType9;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Meta" in $$parsedSource) {
            $$parsedSource["Meta"] = $$createField0_0($$parsedSource["Meta"]);
        }
        return new OcrFull(/** @type {Partial<OcrFull>} */($$parsedSource));
    }
}

export class OcrMeta {
    /**
     * Creates a new OcrMeta instance.
     * @param {Partial<OcrMeta>} [$$source = {}] - The source object to create the OcrMeta.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["Text"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["Confidence"] = 0;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["Height"] = 0;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["Width"] = 0;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["X"] = 0;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["Y"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new OcrMeta instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {OcrMeta}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new OcrMeta(/** @type {Partial<OcrMeta>} */($$parsedSource));
    }
}

export class Settings {
    /**
     * Creates a new Settings instance.
     * @param {Partial<Settings>} [$$source = {}] - The source object to create the Settings.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {boolean | undefined}
             */
            this["IsEnabled"] = false;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["RetainForXDays"] = 0;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string[] | undefined}
             */
            this["Rejections"] = [];
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {boolean | undefined}
             */
            this["OpenAutomaticallyAtLogin"] = false;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {boolean | undefined}
             */
            this["IsDumping"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Settings instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Settings}
     */
    static createFrom($$source = {}) {
        const $$createField2_0 = $$createType6;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Rejections" in $$parsedSource) {
            $$parsedSource["Rejections"] = $$createField2_0($$parsedSource["Rejections"]);
        }
        return new Settings(/** @type {Partial<Settings>} */($$parsedSource));
    }
}

export class SettingsOptions {
    /**
     * Creates a new SettingsOptions instance.
     * @param {Partial<SettingsOptions>} [$$source = {}] - The source object to create the SettingsOptions.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {(ApplicationInfo | null)[] | undefined}
             */
            this["CapturedApplications"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SettingsOptions instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {SettingsOptions}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType12;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("CapturedApplications" in $$parsedSource) {
            $$parsedSource["CapturedApplications"] = $$createField0_0($$parsedSource["CapturedApplications"]);
        }
        return new SettingsOptions(/** @type {Partial<SettingsOptions>} */($$parsedSource));
    }
}

export class SettingsPlusOptions {
    /**
     * Creates a new SettingsPlusOptions instance.
     * @param {Partial<SettingsPlusOptions>} [$$source = {}] - The source object to create the SettingsPlusOptions.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {Settings | null | undefined}
             */
            this["Settings"] = null;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {SettingsOptions | null | undefined}
             */
            this["SettingsOptions"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SettingsPlusOptions instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {SettingsPlusOptions}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType14;
        const $$createField1_0 = $$createType16;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Settings" in $$parsedSource) {
            $$parsedSource["Settings"] = $$createField0_0($$parsedSource["Settings"]);
        }
        if ("SettingsOptions" in $$parsedSource) {
            $$parsedSource["SettingsOptions"] = $$createField1_0($$parsedSource["SettingsOptions"]);
        }
        return new SettingsPlusOptions(/** @type {Partial<SettingsPlusOptions>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = Capture.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = $Create.Array($$createType1);
const $$createType3 = CaptureDaySummary.createFrom;
const $$createType4 = $Create.Nullable($$createType3);
const $$createType5 = $Create.Array($$createType4);
const $$createType6 = $Create.Array($Create.Any);
const $$createType7 = OcrMeta.createFrom;
const $$createType8 = $Create.Nullable($$createType7);
const $$createType9 = $Create.Array($$createType8);
const $$createType10 = ApplicationInfo.createFrom;
const $$createType11 = $Create.Nullable($$createType10);
const $$createType12 = $Create.Array($$createType11);
const $$createType13 = Settings.createFrom;
const $$createType14 = $Create.Nullable($$createType13);
const $$createType15 = SettingsOptions.createFrom;
const $$createType16 = $Create.Nullable($$createType15);
