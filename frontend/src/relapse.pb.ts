// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: relapse.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import { BinaryReader, BinaryWriter } from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface Capture {
  RowNum: bigint;
  AppName: string;
  AppPath: string;
  Filepath: string;
  Fullpath: string;
  CaptureSizeBytes: bigint;
  IsPurged: boolean;
  Dt: string;
  Bod: string;
  IsReal: boolean;
}

export interface CaptureDaySummary {
  Bod: string;
  TotalCapturedTimeSeconds: bigint;
  TotalCapturesForDay: bigint;
  TotalCaptureSizeBytes: bigint;
  IsPurged: boolean;
}

export interface DayRequest {
  Dt: string;
}

export interface CapturedDay {
  Bod: string;
  Captures: Capture[];
  Summary: CaptureDaySummary;
}

export interface Settings {
  IsEnabled: boolean;
  RetainForXDays: number;
  Rejections: string[];
  OpenAutomaticallyAtLogin: boolean;
  IsDumping: boolean;
}

export interface SettingsOptions {
  CapturedApplications: ApplicationInfo[];
}

export interface ApplicationInfo {
  AppName: string;
  AppPath: string;
}

export interface DaySummariesRequest {
  IncludeIsPurged: boolean;
  CaptureDayTimeSecondsBefore: bigint;
  CaptureDayTimeSecondsAfter: bigint;
}

export interface DaySummaries {
  DaySummaries: CaptureDaySummary[];
}

export interface SettingsPlusOptionsRequest {}

export interface SettingsPlusOptions {
  Settings: Settings;
  SettingsOptions: SettingsOptions;
}

export interface ListenRequest {
  IsPerformingInitialCapture: boolean;
}

export interface DeleteCapturesForDayRequest {
  CaptureDayTimeSeconds: bigint;
}

export interface DeleteCapturesForDayResponse {
  CaptureDayTimeSeconds: bigint;
  Deletions: string[];
}

//========================================//
//        Relapse Protobuf Client         //
//========================================//

export async function GetSettings(
  settingsPlusOptionsRequest: SettingsPlusOptionsRequest,
  config?: ClientConfiguration,
): Promise<SettingsPlusOptions> {
  const response = await PBrequest(
    "/proto.Relapse/GetSettings",
    SettingsPlusOptionsRequest.encode(settingsPlusOptionsRequest),
    config,
  );
  return SettingsPlusOptions.decode(response);
}

export async function SetSettings(
  settings: Settings,
  config?: ClientConfiguration,
): Promise<Settings> {
  const response = await PBrequest(
    "/proto.Relapse/SetSettings",
    Settings.encode(settings),
    config,
  );
  return Settings.decode(response);
}

export async function LoadCapturedDay(
  dayRequest: DayRequest,
  config?: ClientConfiguration,
): Promise<CapturedDay> {
  const response = await PBrequest(
    "/proto.Relapse/LoadCapturedDay",
    DayRequest.encode(dayRequest),
    config,
  );
  return CapturedDay.decode(response);
}

export async function GetDaySummaries(
  daySummariesRequest: DaySummariesRequest,
  config?: ClientConfiguration,
): Promise<DaySummaries> {
  const response = await PBrequest(
    "/proto.Relapse/GetDaySummaries",
    DaySummariesRequest.encode(daySummariesRequest),
    config,
  );
  return DaySummaries.decode(response);
}

export async function DeleteCapturesForDay(
  deleteCapturesForDayRequest: DeleteCapturesForDayRequest,
  config?: ClientConfiguration,
): Promise<DeleteCapturesForDayResponse> {
  const response = await PBrequest(
    "/proto.Relapse/DeleteCapturesForDay",
    DeleteCapturesForDayRequest.encode(deleteCapturesForDayRequest),
    config,
  );
  return DeleteCapturesForDayResponse.decode(response);
}

//========================================//
//          Relapse JSON Client           //
//========================================//

export async function GetSettingsJSON(
  settingsPlusOptionsRequest: SettingsPlusOptionsRequest,
  config?: ClientConfiguration,
): Promise<SettingsPlusOptions> {
  const response = await JSONrequest(
    "/proto.Relapse/GetSettings",
    SettingsPlusOptionsRequestJSON.encode(settingsPlusOptionsRequest),
    config,
  );
  return SettingsPlusOptionsJSON.decode(response);
}

export async function SetSettingsJSON(
  settings: Settings,
  config?: ClientConfiguration,
): Promise<Settings> {
  const response = await JSONrequest(
    "/proto.Relapse/SetSettings",
    SettingsJSON.encode(settings),
    config,
  );
  return SettingsJSON.decode(response);
}

export async function LoadCapturedDayJSON(
  dayRequest: DayRequest,
  config?: ClientConfiguration,
): Promise<CapturedDay> {
  const response = await JSONrequest(
    "/proto.Relapse/LoadCapturedDay",
    DayRequestJSON.encode(dayRequest),
    config,
  );
  return CapturedDayJSON.decode(response);
}

export async function GetDaySummariesJSON(
  daySummariesRequest: DaySummariesRequest,
  config?: ClientConfiguration,
): Promise<DaySummaries> {
  const response = await JSONrequest(
    "/proto.Relapse/GetDaySummaries",
    DaySummariesRequestJSON.encode(daySummariesRequest),
    config,
  );
  return DaySummariesJSON.decode(response);
}

export async function DeleteCapturesForDayJSON(
  deleteCapturesForDayRequest: DeleteCapturesForDayRequest,
  config?: ClientConfiguration,
): Promise<DeleteCapturesForDayResponse> {
  const response = await JSONrequest(
    "/proto.Relapse/DeleteCapturesForDay",
    DeleteCapturesForDayRequestJSON.encode(deleteCapturesForDayRequest),
    config,
  );
  return DeleteCapturesForDayResponseJSON.decode(response);
}

//========================================//
//                Relapse                 //
//========================================//

export interface Relapse<Context = unknown> {
  GetSettings: (
    settingsPlusOptionsRequest: SettingsPlusOptionsRequest,
    context: Context,
  ) => Promise<SettingsPlusOptions> | SettingsPlusOptions;
  SetSettings: (
    settings: Settings,
    context: Context,
  ) => Promise<Settings> | Settings;
  LoadCapturedDay: (
    dayRequest: DayRequest,
    context: Context,
  ) => Promise<CapturedDay> | CapturedDay;
  GetDaySummaries: (
    daySummariesRequest: DaySummariesRequest,
    context: Context,
  ) => Promise<DaySummaries> | DaySummaries;
  DeleteCapturesForDay: (
    deleteCapturesForDayRequest: DeleteCapturesForDayRequest,
    context: Context,
  ) => Promise<DeleteCapturesForDayResponse> | DeleteCapturesForDayResponse;
}

export function createRelapse<Context>(service: Relapse<Context>) {
  return {
    name: "proto.Relapse",
    methods: {
      GetSettings: {
        name: "GetSettings",
        handler: service.GetSettings,
        input: {
          protobuf: SettingsPlusOptionsRequest,
          json: SettingsPlusOptionsRequestJSON,
        },
        output: {
          protobuf: SettingsPlusOptions,
          json: SettingsPlusOptionsJSON,
        },
      },
      SetSettings: {
        name: "SetSettings",
        handler: service.SetSettings,
        input: { protobuf: Settings, json: SettingsJSON },
        output: { protobuf: Settings, json: SettingsJSON },
      },
      LoadCapturedDay: {
        name: "LoadCapturedDay",
        handler: service.LoadCapturedDay,
        input: { protobuf: DayRequest, json: DayRequestJSON },
        output: { protobuf: CapturedDay, json: CapturedDayJSON },
      },
      GetDaySummaries: {
        name: "GetDaySummaries",
        handler: service.GetDaySummaries,
        input: { protobuf: DaySummariesRequest, json: DaySummariesRequestJSON },
        output: { protobuf: DaySummaries, json: DaySummariesJSON },
      },
      DeleteCapturesForDay: {
        name: "DeleteCapturesForDay",
        handler: service.DeleteCapturesForDay,
        input: {
          protobuf: DeleteCapturesForDayRequest,
          json: DeleteCapturesForDayRequestJSON,
        },
        output: {
          protobuf: DeleteCapturesForDayResponse,
          json: DeleteCapturesForDayResponseJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Capture = {
  /**
   * Serializes Capture to protobuf.
   */
  encode: function (msg: PartialDeep<Capture>): Uint8Array {
    return Capture._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Capture from protobuf.
   */
  decode: function (bytes: ByteSource): Capture {
    return Capture._readMessage(Capture.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Capture with all fields set to their default value.
   */
  initialize: function (): Capture {
    return {
      RowNum: 0n,
      AppName: "",
      AppPath: "",
      Filepath: "",
      Fullpath: "",
      CaptureSizeBytes: 0n,
      IsPurged: false,
      Dt: "",
      Bod: "",
      IsReal: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Capture>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.RowNum) {
      writer.writeInt64String(1, msg.RowNum.toString() as any);
    }
    if (msg.AppName) {
      writer.writeString(2, msg.AppName);
    }
    if (msg.AppPath) {
      writer.writeString(3, msg.AppPath);
    }
    if (msg.Filepath) {
      writer.writeString(4, msg.Filepath);
    }
    if (msg.Fullpath) {
      writer.writeString(5, msg.Fullpath);
    }
    if (msg.CaptureSizeBytes) {
      writer.writeInt64String(6, msg.CaptureSizeBytes.toString() as any);
    }
    if (msg.IsPurged) {
      writer.writeBool(7, msg.IsPurged);
    }
    if (msg.Dt) {
      writer.writeString(8, msg.Dt);
    }
    if (msg.Bod) {
      writer.writeString(9, msg.Bod);
    }
    if (msg.IsReal) {
      writer.writeBool(10, msg.IsReal);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Capture, reader: BinaryReader): Capture {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.RowNum = BigInt(reader.readInt64String());
          break;
        }
        case 2: {
          msg.AppName = reader.readString();
          break;
        }
        case 3: {
          msg.AppPath = reader.readString();
          break;
        }
        case 4: {
          msg.Filepath = reader.readString();
          break;
        }
        case 5: {
          msg.Fullpath = reader.readString();
          break;
        }
        case 6: {
          msg.CaptureSizeBytes = BigInt(reader.readInt64String());
          break;
        }
        case 7: {
          msg.IsPurged = reader.readBool();
          break;
        }
        case 8: {
          msg.Dt = reader.readString();
          break;
        }
        case 9: {
          msg.Bod = reader.readString();
          break;
        }
        case 10: {
          msg.IsReal = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CaptureDaySummary = {
  /**
   * Serializes CaptureDaySummary to protobuf.
   */
  encode: function (msg: PartialDeep<CaptureDaySummary>): Uint8Array {
    return CaptureDaySummary._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CaptureDaySummary from protobuf.
   */
  decode: function (bytes: ByteSource): CaptureDaySummary {
    return CaptureDaySummary._readMessage(
      CaptureDaySummary.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes CaptureDaySummary with all fields set to their default value.
   */
  initialize: function (): CaptureDaySummary {
    return {
      Bod: "",
      TotalCapturedTimeSeconds: 0n,
      TotalCapturesForDay: 0n,
      TotalCaptureSizeBytes: 0n,
      IsPurged: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CaptureDaySummary>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.Bod) {
      writer.writeString(1, msg.Bod);
    }
    if (msg.TotalCapturedTimeSeconds) {
      writer.writeInt64String(
        2,
        msg.TotalCapturedTimeSeconds.toString() as any,
      );
    }
    if (msg.TotalCapturesForDay) {
      writer.writeInt64String(3, msg.TotalCapturesForDay.toString() as any);
    }
    if (msg.TotalCaptureSizeBytes) {
      writer.writeInt64String(4, msg.TotalCaptureSizeBytes.toString() as any);
    }
    if (msg.IsPurged) {
      writer.writeBool(5, msg.IsPurged);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CaptureDaySummary,
    reader: BinaryReader,
  ): CaptureDaySummary {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.Bod = reader.readString();
          break;
        }
        case 2: {
          msg.TotalCapturedTimeSeconds = BigInt(reader.readInt64String());
          break;
        }
        case 3: {
          msg.TotalCapturesForDay = BigInt(reader.readInt64String());
          break;
        }
        case 4: {
          msg.TotalCaptureSizeBytes = BigInt(reader.readInt64String());
          break;
        }
        case 5: {
          msg.IsPurged = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DayRequest = {
  /**
   * Serializes DayRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DayRequest>): Uint8Array {
    return DayRequest._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes DayRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DayRequest {
    return DayRequest._readMessage(
      DayRequest.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes DayRequest with all fields set to their default value.
   */
  initialize: function (): DayRequest {
    return {
      Dt: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DayRequest>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.Dt) {
      writer.writeString(1, msg.Dt);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: DayRequest, reader: BinaryReader): DayRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.Dt = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CapturedDay = {
  /**
   * Serializes CapturedDay to protobuf.
   */
  encode: function (msg: PartialDeep<CapturedDay>): Uint8Array {
    return CapturedDay._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes CapturedDay from protobuf.
   */
  decode: function (bytes: ByteSource): CapturedDay {
    return CapturedDay._readMessage(
      CapturedDay.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes CapturedDay with all fields set to their default value.
   */
  initialize: function (): CapturedDay {
    return {
      Bod: "",
      Captures: [],
      Summary: CaptureDaySummary.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CapturedDay>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.Bod) {
      writer.writeString(1, msg.Bod);
    }
    if (msg.Captures?.length) {
      writer.writeRepeatedMessage(
        2,
        msg.Captures as any,
        Capture._writeMessage,
      );
    }
    if (msg.Summary) {
      writer.writeMessage(3, msg.Summary, CaptureDaySummary._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: CapturedDay, reader: BinaryReader): CapturedDay {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.Bod = reader.readString();
          break;
        }
        case 2: {
          const m = Capture.initialize();
          reader.readMessage(m, Capture._readMessage);
          msg.Captures.push(m);
          break;
        }
        case 3: {
          reader.readMessage(msg.Summary, CaptureDaySummary._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Settings = {
  /**
   * Serializes Settings to protobuf.
   */
  encode: function (msg: PartialDeep<Settings>): Uint8Array {
    return Settings._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Settings from protobuf.
   */
  decode: function (bytes: ByteSource): Settings {
    return Settings._readMessage(
      Settings.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes Settings with all fields set to their default value.
   */
  initialize: function (): Settings {
    return {
      IsEnabled: false,
      RetainForXDays: 0,
      Rejections: [],
      OpenAutomaticallyAtLogin: false,
      IsDumping: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Settings>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.IsEnabled) {
      writer.writeBool(1, msg.IsEnabled);
    }
    if (msg.RetainForXDays) {
      writer.writeInt32(2, msg.RetainForXDays);
    }
    if (msg.Rejections?.length) {
      writer.writeRepeatedString(3, msg.Rejections);
    }
    if (msg.OpenAutomaticallyAtLogin) {
      writer.writeBool(4, msg.OpenAutomaticallyAtLogin);
    }
    if (msg.IsDumping) {
      writer.writeBool(5, msg.IsDumping);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Settings, reader: BinaryReader): Settings {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.IsEnabled = reader.readBool();
          break;
        }
        case 2: {
          msg.RetainForXDays = reader.readInt32();
          break;
        }
        case 3: {
          msg.Rejections.push(reader.readString());
          break;
        }
        case 4: {
          msg.OpenAutomaticallyAtLogin = reader.readBool();
          break;
        }
        case 5: {
          msg.IsDumping = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SettingsOptions = {
  /**
   * Serializes SettingsOptions to protobuf.
   */
  encode: function (msg: PartialDeep<SettingsOptions>): Uint8Array {
    return SettingsOptions._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SettingsOptions from protobuf.
   */
  decode: function (bytes: ByteSource): SettingsOptions {
    return SettingsOptions._readMessage(
      SettingsOptions.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes SettingsOptions with all fields set to their default value.
   */
  initialize: function (): SettingsOptions {
    return {
      CapturedApplications: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SettingsOptions>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.CapturedApplications?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.CapturedApplications as any,
        ApplicationInfo._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SettingsOptions,
    reader: BinaryReader,
  ): SettingsOptions {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = ApplicationInfo.initialize();
          reader.readMessage(m, ApplicationInfo._readMessage);
          msg.CapturedApplications.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ApplicationInfo = {
  /**
   * Serializes ApplicationInfo to protobuf.
   */
  encode: function (msg: PartialDeep<ApplicationInfo>): Uint8Array {
    return ApplicationInfo._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ApplicationInfo from protobuf.
   */
  decode: function (bytes: ByteSource): ApplicationInfo {
    return ApplicationInfo._readMessage(
      ApplicationInfo.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes ApplicationInfo with all fields set to their default value.
   */
  initialize: function (): ApplicationInfo {
    return {
      AppName: "",
      AppPath: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ApplicationInfo>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.AppName) {
      writer.writeString(1, msg.AppName);
    }
    if (msg.AppPath) {
      writer.writeString(2, msg.AppPath);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ApplicationInfo,
    reader: BinaryReader,
  ): ApplicationInfo {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.AppName = reader.readString();
          break;
        }
        case 2: {
          msg.AppPath = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DaySummariesRequest = {
  /**
   * Serializes DaySummariesRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DaySummariesRequest>): Uint8Array {
    return DaySummariesRequest._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DaySummariesRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DaySummariesRequest {
    return DaySummariesRequest._readMessage(
      DaySummariesRequest.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes DaySummariesRequest with all fields set to their default value.
   */
  initialize: function (): DaySummariesRequest {
    return {
      IncludeIsPurged: false,
      CaptureDayTimeSecondsBefore: 0n,
      CaptureDayTimeSecondsAfter: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DaySummariesRequest>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.IncludeIsPurged) {
      writer.writeBool(1, msg.IncludeIsPurged);
    }
    if (msg.CaptureDayTimeSecondsBefore) {
      writer.writeInt64String(
        2,
        msg.CaptureDayTimeSecondsBefore.toString() as any,
      );
    }
    if (msg.CaptureDayTimeSecondsAfter) {
      writer.writeInt64String(
        3,
        msg.CaptureDayTimeSecondsAfter.toString() as any,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DaySummariesRequest,
    reader: BinaryReader,
  ): DaySummariesRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.IncludeIsPurged = reader.readBool();
          break;
        }
        case 2: {
          msg.CaptureDayTimeSecondsBefore = BigInt(reader.readInt64String());
          break;
        }
        case 3: {
          msg.CaptureDayTimeSecondsAfter = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DaySummaries = {
  /**
   * Serializes DaySummaries to protobuf.
   */
  encode: function (msg: PartialDeep<DaySummaries>): Uint8Array {
    return DaySummaries._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DaySummaries from protobuf.
   */
  decode: function (bytes: ByteSource): DaySummaries {
    return DaySummaries._readMessage(
      DaySummaries.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes DaySummaries with all fields set to their default value.
   */
  initialize: function (): DaySummaries {
    return {
      DaySummaries: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DaySummaries>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.DaySummaries?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.DaySummaries as any,
        CaptureDaySummary._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DaySummaries,
    reader: BinaryReader,
  ): DaySummaries {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = CaptureDaySummary.initialize();
          reader.readMessage(m, CaptureDaySummary._readMessage);
          msg.DaySummaries.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SettingsPlusOptionsRequest = {
  /**
   * Serializes SettingsPlusOptionsRequest to protobuf.
   */
  encode: function (
    _msg?: PartialDeep<SettingsPlusOptionsRequest>,
  ): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes SettingsPlusOptionsRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): SettingsPlusOptionsRequest {
    return {};
  },

  /**
   * Initializes SettingsPlusOptionsRequest with all fields set to their default value.
   */
  initialize: function (): SettingsPlusOptionsRequest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<SettingsPlusOptionsRequest>,
    writer: BinaryWriter,
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: SettingsPlusOptionsRequest,
    _reader: BinaryReader,
  ): SettingsPlusOptionsRequest {
    return _msg;
  },
};

export const SettingsPlusOptions = {
  /**
   * Serializes SettingsPlusOptions to protobuf.
   */
  encode: function (msg: PartialDeep<SettingsPlusOptions>): Uint8Array {
    return SettingsPlusOptions._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SettingsPlusOptions from protobuf.
   */
  decode: function (bytes: ByteSource): SettingsPlusOptions {
    return SettingsPlusOptions._readMessage(
      SettingsPlusOptions.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes SettingsPlusOptions with all fields set to their default value.
   */
  initialize: function (): SettingsPlusOptions {
    return {
      Settings: Settings.initialize(),
      SettingsOptions: SettingsOptions.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SettingsPlusOptions>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.Settings) {
      writer.writeMessage(1, msg.Settings, Settings._writeMessage);
    }
    if (msg.SettingsOptions) {
      writer.writeMessage(
        2,
        msg.SettingsOptions,
        SettingsOptions._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SettingsPlusOptions,
    reader: BinaryReader,
  ): SettingsPlusOptions {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.Settings, Settings._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(msg.SettingsOptions, SettingsOptions._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListenRequest = {
  /**
   * Serializes ListenRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListenRequest>): Uint8Array {
    return ListenRequest._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListenRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListenRequest {
    return ListenRequest._readMessage(
      ListenRequest.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListenRequest with all fields set to their default value.
   */
  initialize: function (): ListenRequest {
    return {
      IsPerformingInitialCapture: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListenRequest>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.IsPerformingInitialCapture) {
      writer.writeBool(1, msg.IsPerformingInitialCapture);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListenRequest,
    reader: BinaryReader,
  ): ListenRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.IsPerformingInitialCapture = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteCapturesForDayRequest = {
  /**
   * Serializes DeleteCapturesForDayRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteCapturesForDayRequest>): Uint8Array {
    return DeleteCapturesForDayRequest._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteCapturesForDayRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteCapturesForDayRequest {
    return DeleteCapturesForDayRequest._readMessage(
      DeleteCapturesForDayRequest.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteCapturesForDayRequest with all fields set to their default value.
   */
  initialize: function (): DeleteCapturesForDayRequest {
    return {
      CaptureDayTimeSeconds: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteCapturesForDayRequest>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.CaptureDayTimeSeconds) {
      writer.writeInt64String(1, msg.CaptureDayTimeSeconds.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteCapturesForDayRequest,
    reader: BinaryReader,
  ): DeleteCapturesForDayRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.CaptureDayTimeSeconds = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteCapturesForDayResponse = {
  /**
   * Serializes DeleteCapturesForDayResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<DeleteCapturesForDayResponse>,
  ): Uint8Array {
    return DeleteCapturesForDayResponse._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteCapturesForDayResponse from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteCapturesForDayResponse {
    return DeleteCapturesForDayResponse._readMessage(
      DeleteCapturesForDayResponse.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteCapturesForDayResponse with all fields set to their default value.
   */
  initialize: function (): DeleteCapturesForDayResponse {
    return {
      CaptureDayTimeSeconds: 0n,
      Deletions: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteCapturesForDayResponse>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.CaptureDayTimeSeconds) {
      writer.writeInt64String(1, msg.CaptureDayTimeSeconds.toString() as any);
    }
    if (msg.Deletions?.length) {
      writer.writeRepeatedString(2, msg.Deletions);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteCapturesForDayResponse,
    reader: BinaryReader,
  ): DeleteCapturesForDayResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.CaptureDayTimeSeconds = BigInt(reader.readInt64String());
          break;
        }
        case 2: {
          msg.Deletions.push(reader.readString());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const CaptureJSON = {
  /**
   * Serializes Capture to JSON.
   */
  encode: function (msg: PartialDeep<Capture>): string {
    return JSON.stringify(CaptureJSON._writeMessage(msg));
  },

  /**
   * Deserializes Capture from JSON.
   */
  decode: function (json: string): Capture {
    return CaptureJSON._readMessage(CaptureJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Capture with all fields set to their default value.
   */
  initialize: function (): Capture {
    return {
      RowNum: 0n,
      AppName: "",
      AppPath: "",
      Filepath: "",
      Fullpath: "",
      CaptureSizeBytes: 0n,
      IsPurged: false,
      Dt: "",
      Bod: "",
      IsReal: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Capture>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.RowNum) {
      json["RowNum"] = msg.RowNum.toString();
    }
    if (msg.AppName) {
      json["AppName"] = msg.AppName;
    }
    if (msg.AppPath) {
      json["AppPath"] = msg.AppPath;
    }
    if (msg.Filepath) {
      json["Filepath"] = msg.Filepath;
    }
    if (msg.Fullpath) {
      json["Fullpath"] = msg.Fullpath;
    }
    if (msg.CaptureSizeBytes) {
      json["CaptureSizeBytes"] = msg.CaptureSizeBytes.toString();
    }
    if (msg.IsPurged) {
      json["IsPurged"] = msg.IsPurged;
    }
    if (msg.Dt) {
      json["Dt"] = msg.Dt;
    }
    if (msg.Bod) {
      json["Bod"] = msg.Bod;
    }
    if (msg.IsReal) {
      json["IsReal"] = msg.IsReal;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Capture, json: any): Capture {
    const _RowNum_ = json["RowNum"];
    if (_RowNum_) {
      msg.RowNum = BigInt(_RowNum_);
    }
    const _AppName_ = json["AppName"];
    if (_AppName_) {
      msg.AppName = _AppName_;
    }
    const _AppPath_ = json["AppPath"];
    if (_AppPath_) {
      msg.AppPath = _AppPath_;
    }
    const _Filepath_ = json["Filepath"];
    if (_Filepath_) {
      msg.Filepath = _Filepath_;
    }
    const _Fullpath_ = json["Fullpath"];
    if (_Fullpath_) {
      msg.Fullpath = _Fullpath_;
    }
    const _CaptureSizeBytes_ = json["CaptureSizeBytes"];
    if (_CaptureSizeBytes_) {
      msg.CaptureSizeBytes = BigInt(_CaptureSizeBytes_);
    }
    const _IsPurged_ = json["IsPurged"];
    if (_IsPurged_) {
      msg.IsPurged = _IsPurged_;
    }
    const _Dt_ = json["Dt"];
    if (_Dt_) {
      msg.Dt = _Dt_;
    }
    const _Bod_ = json["Bod"];
    if (_Bod_) {
      msg.Bod = _Bod_;
    }
    const _IsReal_ = json["IsReal"];
    if (_IsReal_) {
      msg.IsReal = _IsReal_;
    }
    return msg;
  },
};

export const CaptureDaySummaryJSON = {
  /**
   * Serializes CaptureDaySummary to JSON.
   */
  encode: function (msg: PartialDeep<CaptureDaySummary>): string {
    return JSON.stringify(CaptureDaySummaryJSON._writeMessage(msg));
  },

  /**
   * Deserializes CaptureDaySummary from JSON.
   */
  decode: function (json: string): CaptureDaySummary {
    return CaptureDaySummaryJSON._readMessage(
      CaptureDaySummaryJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CaptureDaySummary with all fields set to their default value.
   */
  initialize: function (): CaptureDaySummary {
    return {
      Bod: "",
      TotalCapturedTimeSeconds: 0n,
      TotalCapturesForDay: 0n,
      TotalCaptureSizeBytes: 0n,
      IsPurged: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CaptureDaySummary>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.Bod) {
      json["Bod"] = msg.Bod;
    }
    if (msg.TotalCapturedTimeSeconds) {
      json["TotalCapturedTimeSeconds"] =
        msg.TotalCapturedTimeSeconds.toString();
    }
    if (msg.TotalCapturesForDay) {
      json["TotalCapturesForDay"] = msg.TotalCapturesForDay.toString();
    }
    if (msg.TotalCaptureSizeBytes) {
      json["TotalCaptureSizeBytes"] = msg.TotalCaptureSizeBytes.toString();
    }
    if (msg.IsPurged) {
      json["IsPurged"] = msg.IsPurged;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CaptureDaySummary,
    json: any,
  ): CaptureDaySummary {
    const _Bod_ = json["Bod"];
    if (_Bod_) {
      msg.Bod = _Bod_;
    }
    const _TotalCapturedTimeSeconds_ = json["TotalCapturedTimeSeconds"];
    if (_TotalCapturedTimeSeconds_) {
      msg.TotalCapturedTimeSeconds = BigInt(_TotalCapturedTimeSeconds_);
    }
    const _TotalCapturesForDay_ = json["TotalCapturesForDay"];
    if (_TotalCapturesForDay_) {
      msg.TotalCapturesForDay = BigInt(_TotalCapturesForDay_);
    }
    const _TotalCaptureSizeBytes_ = json["TotalCaptureSizeBytes"];
    if (_TotalCaptureSizeBytes_) {
      msg.TotalCaptureSizeBytes = BigInt(_TotalCaptureSizeBytes_);
    }
    const _IsPurged_ = json["IsPurged"];
    if (_IsPurged_) {
      msg.IsPurged = _IsPurged_;
    }
    return msg;
  },
};

export const DayRequestJSON = {
  /**
   * Serializes DayRequest to JSON.
   */
  encode: function (msg: PartialDeep<DayRequest>): string {
    return JSON.stringify(DayRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DayRequest from JSON.
   */
  decode: function (json: string): DayRequest {
    return DayRequestJSON._readMessage(
      DayRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DayRequest with all fields set to their default value.
   */
  initialize: function (): DayRequest {
    return {
      Dt: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DayRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.Dt) {
      json["Dt"] = msg.Dt;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: DayRequest, json: any): DayRequest {
    const _Dt_ = json["Dt"];
    if (_Dt_) {
      msg.Dt = _Dt_;
    }
    return msg;
  },
};

export const CapturedDayJSON = {
  /**
   * Serializes CapturedDay to JSON.
   */
  encode: function (msg: PartialDeep<CapturedDay>): string {
    return JSON.stringify(CapturedDayJSON._writeMessage(msg));
  },

  /**
   * Deserializes CapturedDay from JSON.
   */
  decode: function (json: string): CapturedDay {
    return CapturedDayJSON._readMessage(
      CapturedDayJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CapturedDay with all fields set to their default value.
   */
  initialize: function (): CapturedDay {
    return {
      Bod: "",
      Captures: [],
      Summary: CaptureDaySummaryJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CapturedDay>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.Bod) {
      json["Bod"] = msg.Bod;
    }
    if (msg.Captures?.length) {
      json["Captures"] = msg.Captures.map(CaptureJSON._writeMessage);
    }
    if (msg.Summary) {
      const _Summary_ = CaptureDaySummaryJSON._writeMessage(msg.Summary);
      if (Object.keys(_Summary_).length > 0) {
        json["Summary"] = _Summary_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: CapturedDay, json: any): CapturedDay {
    const _Bod_ = json["Bod"];
    if (_Bod_) {
      msg.Bod = _Bod_;
    }
    const _Captures_ = json["Captures"];
    if (_Captures_) {
      for (const item of _Captures_) {
        const m = CaptureJSON.initialize();
        CaptureJSON._readMessage(m, item);
        msg.Captures.push(m);
      }
    }
    const _Summary_ = json["Summary"];
    if (_Summary_) {
      CaptureDaySummaryJSON._readMessage(msg.Summary, _Summary_);
    }
    return msg;
  },
};

export const SettingsJSON = {
  /**
   * Serializes Settings to JSON.
   */
  encode: function (msg: PartialDeep<Settings>): string {
    return JSON.stringify(SettingsJSON._writeMessage(msg));
  },

  /**
   * Deserializes Settings from JSON.
   */
  decode: function (json: string): Settings {
    return SettingsJSON._readMessage(
      SettingsJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes Settings with all fields set to their default value.
   */
  initialize: function (): Settings {
    return {
      IsEnabled: false,
      RetainForXDays: 0,
      Rejections: [],
      OpenAutomaticallyAtLogin: false,
      IsDumping: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Settings>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.IsEnabled) {
      json["IsEnabled"] = msg.IsEnabled;
    }
    if (msg.RetainForXDays) {
      json["RetainForXDays"] = msg.RetainForXDays;
    }
    if (msg.Rejections?.length) {
      json["Rejections"] = msg.Rejections;
    }
    if (msg.OpenAutomaticallyAtLogin) {
      json["OpenAutomaticallyAtLogin"] = msg.OpenAutomaticallyAtLogin;
    }
    if (msg.IsDumping) {
      json["IsDumping"] = msg.IsDumping;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Settings, json: any): Settings {
    const _IsEnabled_ = json["IsEnabled"];
    if (_IsEnabled_) {
      msg.IsEnabled = _IsEnabled_;
    }
    const _RetainForXDays_ = json["RetainForXDays"];
    if (_RetainForXDays_) {
      msg.RetainForXDays = _RetainForXDays_;
    }
    const _Rejections_ = json["Rejections"];
    if (_Rejections_) {
      msg.Rejections = _Rejections_;
    }
    const _OpenAutomaticallyAtLogin_ = json["OpenAutomaticallyAtLogin"];
    if (_OpenAutomaticallyAtLogin_) {
      msg.OpenAutomaticallyAtLogin = _OpenAutomaticallyAtLogin_;
    }
    const _IsDumping_ = json["IsDumping"];
    if (_IsDumping_) {
      msg.IsDumping = _IsDumping_;
    }
    return msg;
  },
};

export const SettingsOptionsJSON = {
  /**
   * Serializes SettingsOptions to JSON.
   */
  encode: function (msg: PartialDeep<SettingsOptions>): string {
    return JSON.stringify(SettingsOptionsJSON._writeMessage(msg));
  },

  /**
   * Deserializes SettingsOptions from JSON.
   */
  decode: function (json: string): SettingsOptions {
    return SettingsOptionsJSON._readMessage(
      SettingsOptionsJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SettingsOptions with all fields set to their default value.
   */
  initialize: function (): SettingsOptions {
    return {
      CapturedApplications: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SettingsOptions>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.CapturedApplications?.length) {
      json["CapturedApplications"] = msg.CapturedApplications.map(
        ApplicationInfoJSON._writeMessage,
      );
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: SettingsOptions, json: any): SettingsOptions {
    const _CapturedApplications_ = json["CapturedApplications"];
    if (_CapturedApplications_) {
      for (const item of _CapturedApplications_) {
        const m = ApplicationInfoJSON.initialize();
        ApplicationInfoJSON._readMessage(m, item);
        msg.CapturedApplications.push(m);
      }
    }
    return msg;
  },
};

export const ApplicationInfoJSON = {
  /**
   * Serializes ApplicationInfo to JSON.
   */
  encode: function (msg: PartialDeep<ApplicationInfo>): string {
    return JSON.stringify(ApplicationInfoJSON._writeMessage(msg));
  },

  /**
   * Deserializes ApplicationInfo from JSON.
   */
  decode: function (json: string): ApplicationInfo {
    return ApplicationInfoJSON._readMessage(
      ApplicationInfoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ApplicationInfo with all fields set to their default value.
   */
  initialize: function (): ApplicationInfo {
    return {
      AppName: "",
      AppPath: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ApplicationInfo>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.AppName) {
      json["AppName"] = msg.AppName;
    }
    if (msg.AppPath) {
      json["AppPath"] = msg.AppPath;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ApplicationInfo, json: any): ApplicationInfo {
    const _AppName_ = json["AppName"];
    if (_AppName_) {
      msg.AppName = _AppName_;
    }
    const _AppPath_ = json["AppPath"];
    if (_AppPath_) {
      msg.AppPath = _AppPath_;
    }
    return msg;
  },
};

export const DaySummariesRequestJSON = {
  /**
   * Serializes DaySummariesRequest to JSON.
   */
  encode: function (msg: PartialDeep<DaySummariesRequest>): string {
    return JSON.stringify(DaySummariesRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DaySummariesRequest from JSON.
   */
  decode: function (json: string): DaySummariesRequest {
    return DaySummariesRequestJSON._readMessage(
      DaySummariesRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DaySummariesRequest with all fields set to their default value.
   */
  initialize: function (): DaySummariesRequest {
    return {
      IncludeIsPurged: false,
      CaptureDayTimeSecondsBefore: 0n,
      CaptureDayTimeSecondsAfter: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DaySummariesRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.IncludeIsPurged) {
      json["IncludeIsPurged"] = msg.IncludeIsPurged;
    }
    if (msg.CaptureDayTimeSecondsBefore) {
      json["CaptureDayTimeSecondsBefore"] =
        msg.CaptureDayTimeSecondsBefore.toString();
    }
    if (msg.CaptureDayTimeSecondsAfter) {
      json["CaptureDayTimeSecondsAfter"] =
        msg.CaptureDayTimeSecondsAfter.toString();
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DaySummariesRequest,
    json: any,
  ): DaySummariesRequest {
    const _IncludeIsPurged_ = json["IncludeIsPurged"];
    if (_IncludeIsPurged_) {
      msg.IncludeIsPurged = _IncludeIsPurged_;
    }
    const _CaptureDayTimeSecondsBefore_ = json["CaptureDayTimeSecondsBefore"];
    if (_CaptureDayTimeSecondsBefore_) {
      msg.CaptureDayTimeSecondsBefore = BigInt(_CaptureDayTimeSecondsBefore_);
    }
    const _CaptureDayTimeSecondsAfter_ = json["CaptureDayTimeSecondsAfter"];
    if (_CaptureDayTimeSecondsAfter_) {
      msg.CaptureDayTimeSecondsAfter = BigInt(_CaptureDayTimeSecondsAfter_);
    }
    return msg;
  },
};

export const DaySummariesJSON = {
  /**
   * Serializes DaySummaries to JSON.
   */
  encode: function (msg: PartialDeep<DaySummaries>): string {
    return JSON.stringify(DaySummariesJSON._writeMessage(msg));
  },

  /**
   * Deserializes DaySummaries from JSON.
   */
  decode: function (json: string): DaySummaries {
    return DaySummariesJSON._readMessage(
      DaySummariesJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DaySummaries with all fields set to their default value.
   */
  initialize: function (): DaySummaries {
    return {
      DaySummaries: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DaySummaries>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.DaySummaries?.length) {
      json["DaySummaries"] = msg.DaySummaries.map(
        CaptureDaySummaryJSON._writeMessage,
      );
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: DaySummaries, json: any): DaySummaries {
    const _DaySummaries_ = json["DaySummaries"];
    if (_DaySummaries_) {
      for (const item of _DaySummaries_) {
        const m = CaptureDaySummaryJSON.initialize();
        CaptureDaySummaryJSON._readMessage(m, item);
        msg.DaySummaries.push(m);
      }
    }
    return msg;
  },
};

export const SettingsPlusOptionsRequestJSON = {
  /**
   * Serializes SettingsPlusOptionsRequest to JSON.
   */
  encode: function (_msg?: PartialDeep<SettingsPlusOptionsRequest>): string {
    return "{}";
  },

  /**
   * Deserializes SettingsPlusOptionsRequest from JSON.
   */
  decode: function (_json?: string): SettingsPlusOptionsRequest {
    return {};
  },

  /**
   * Initializes SettingsPlusOptionsRequest with all fields set to their default value.
   */
  initialize: function (): SettingsPlusOptionsRequest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<SettingsPlusOptionsRequest>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SettingsPlusOptionsRequest,
    _json: any,
  ): SettingsPlusOptionsRequest {
    return msg;
  },
};

export const SettingsPlusOptionsJSON = {
  /**
   * Serializes SettingsPlusOptions to JSON.
   */
  encode: function (msg: PartialDeep<SettingsPlusOptions>): string {
    return JSON.stringify(SettingsPlusOptionsJSON._writeMessage(msg));
  },

  /**
   * Deserializes SettingsPlusOptions from JSON.
   */
  decode: function (json: string): SettingsPlusOptions {
    return SettingsPlusOptionsJSON._readMessage(
      SettingsPlusOptionsJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SettingsPlusOptions with all fields set to their default value.
   */
  initialize: function (): SettingsPlusOptions {
    return {
      Settings: SettingsJSON.initialize(),
      SettingsOptions: SettingsOptionsJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SettingsPlusOptions>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.Settings) {
      const _Settings_ = SettingsJSON._writeMessage(msg.Settings);
      if (Object.keys(_Settings_).length > 0) {
        json["Settings"] = _Settings_;
      }
    }
    if (msg.SettingsOptions) {
      const _SettingsOptions_ = SettingsOptionsJSON._writeMessage(
        msg.SettingsOptions,
      );
      if (Object.keys(_SettingsOptions_).length > 0) {
        json["SettingsOptions"] = _SettingsOptions_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SettingsPlusOptions,
    json: any,
  ): SettingsPlusOptions {
    const _Settings_ = json["Settings"];
    if (_Settings_) {
      SettingsJSON._readMessage(msg.Settings, _Settings_);
    }
    const _SettingsOptions_ = json["SettingsOptions"];
    if (_SettingsOptions_) {
      SettingsOptionsJSON._readMessage(msg.SettingsOptions, _SettingsOptions_);
    }
    return msg;
  },
};

export const ListenRequestJSON = {
  /**
   * Serializes ListenRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListenRequest>): string {
    return JSON.stringify(ListenRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListenRequest from JSON.
   */
  decode: function (json: string): ListenRequest {
    return ListenRequestJSON._readMessage(
      ListenRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListenRequest with all fields set to their default value.
   */
  initialize: function (): ListenRequest {
    return {
      IsPerformingInitialCapture: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListenRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.IsPerformingInitialCapture) {
      json["IsPerformingInitialCapture"] = msg.IsPerformingInitialCapture;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ListenRequest, json: any): ListenRequest {
    const _IsPerformingInitialCapture_ = json["IsPerformingInitialCapture"];
    if (_IsPerformingInitialCapture_) {
      msg.IsPerformingInitialCapture = _IsPerformingInitialCapture_;
    }
    return msg;
  },
};

export const DeleteCapturesForDayRequestJSON = {
  /**
   * Serializes DeleteCapturesForDayRequest to JSON.
   */
  encode: function (msg: PartialDeep<DeleteCapturesForDayRequest>): string {
    return JSON.stringify(DeleteCapturesForDayRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteCapturesForDayRequest from JSON.
   */
  decode: function (json: string): DeleteCapturesForDayRequest {
    return DeleteCapturesForDayRequestJSON._readMessage(
      DeleteCapturesForDayRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteCapturesForDayRequest with all fields set to their default value.
   */
  initialize: function (): DeleteCapturesForDayRequest {
    return {
      CaptureDayTimeSeconds: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteCapturesForDayRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.CaptureDayTimeSeconds) {
      json["CaptureDayTimeSeconds"] = msg.CaptureDayTimeSeconds.toString();
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteCapturesForDayRequest,
    json: any,
  ): DeleteCapturesForDayRequest {
    const _CaptureDayTimeSeconds_ = json["CaptureDayTimeSeconds"];
    if (_CaptureDayTimeSeconds_) {
      msg.CaptureDayTimeSeconds = BigInt(_CaptureDayTimeSeconds_);
    }
    return msg;
  },
};

export const DeleteCapturesForDayResponseJSON = {
  /**
   * Serializes DeleteCapturesForDayResponse to JSON.
   */
  encode: function (msg: PartialDeep<DeleteCapturesForDayResponse>): string {
    return JSON.stringify(DeleteCapturesForDayResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteCapturesForDayResponse from JSON.
   */
  decode: function (json: string): DeleteCapturesForDayResponse {
    return DeleteCapturesForDayResponseJSON._readMessage(
      DeleteCapturesForDayResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteCapturesForDayResponse with all fields set to their default value.
   */
  initialize: function (): DeleteCapturesForDayResponse {
    return {
      CaptureDayTimeSeconds: 0n,
      Deletions: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteCapturesForDayResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.CaptureDayTimeSeconds) {
      json["CaptureDayTimeSeconds"] = msg.CaptureDayTimeSeconds.toString();
    }
    if (msg.Deletions?.length) {
      json["Deletions"] = msg.Deletions;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteCapturesForDayResponse,
    json: any,
  ): DeleteCapturesForDayResponse {
    const _CaptureDayTimeSeconds_ = json["CaptureDayTimeSeconds"];
    if (_CaptureDayTimeSeconds_) {
      msg.CaptureDayTimeSeconds = BigInt(_CaptureDayTimeSeconds_);
    }
    const _Deletions_ = json["Deletions"];
    if (_Deletions_) {
      msg.Deletions = _Deletions_;
    }
    return msg;
  },
};
